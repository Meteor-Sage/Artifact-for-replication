[
    {
        "Function": "sub_403552",
        "Total XOR and shift operations": 6,
        "XOR operations": 4,
        "Shift operations": 2,
        "Operation percentage": "14.29%",
        "Function Body": "\nunsigned int __stdcall sub_403552(unsigned int *a1, int *a2)\n{\n  unsigned int v2; // edi\n  unsigned int result; // eax\n  int v4; // [esp+Ch] [ebp-34h]\n  int v5; // [esp+10h] [ebp-30h]\n  int v6; // [esp+14h] [ebp-2Ch]\n  int v7; // [esp+18h] [ebp-28h]\n  unsigned int v8; // [esp+1Ch] [ebp-24h]\n  int v9; // [esp+20h] [ebp-20h]\n  unsigned int v10; // [esp+28h] [ebp-18h]\n\n  v10 = *a1;\n  v8 = a1[1];\n  v9 = -957401312;\n  v5 = *a2;\n  v4 = a2[1];\n  v7 = a2[2];\n  v6 = a2[3];\n  v2 = 0;\n  result = *a1;\n  do\n  {\n    v8 -= (v7 + 16 * result) ^ (v9 + result) ^ (v6 + (result >> 5));\n    result = v10 - ((v5 + 16 * v8) ^ (v9 + v8) ^ (v4 + (v8 >> 5)));\n    v10 = result;\n    if ( dwSize == 5117 )\n    {\n      MoveFileA(\"Cep\", \"jilidimizicanorukepu nabufoxipaxo\");\n      result = v10;\n    }\n    ++v2;\n    v9 += 1640531527;\n  }\n  while ( v2 < 0x20 );\n  *a1 = v10;\n  a1[1] = v8;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_41CA96",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.27%",
        "Function Body": "\nint __cdecl sub_41CA96(unsigned __int16 *a1, _DWORD *a2)\n{\n  int v2; // ebx\n  _DWORD *v3; // edi\n  int v4; // edx\n  int v5; // esi\n  int v6; // eax\n  int v7; // edx\n  char v8; // cl\n  bool i; // zf\n  int v10; // edx\n  unsigned int v11; // eax\n  bool v12; // cf\n  unsigned int v13; // eax\n  int v14; // ecx\n  int j; // edx\n  unsigned int v16; // eax\n  int v17; // eax\n  int v18; // ecx\n  int v19; // eax\n  char v20; // di\n  unsigned int v21; // eax\n  int *v22; // edx\n  int v23; // eax\n  int ii; // ecx\n  int v25; // edx\n  char v26; // cl\n  bool jj; // zf\n  int v28; // edx\n  unsigned int v29; // eax\n  int v30; // ecx\n  unsigned int v31; // eax\n  int kk; // edx\n  unsigned int v33; // eax\n  int v34; // eax\n  int v35; // edx\n  int v36; // ecx\n  int v37; // eax\n  unsigned int v38; // eax\n  int *v39; // edx\n  int mm; // ecx\n  int v41; // ecx\n  int v42; // edi\n  unsigned int v43; // eax\n  int v44; // edx\n  int *v45; // edx\n  int n; // ecx\n  int v47; // ecx\n  int k; // esi\n  unsigned int v49; // eax\n  int *v50; // edx\n  int m; // ecx\n  unsigned int v52; // esi\n  int v53; // eax\n  int v55; // [esp+Ch] [ebp-44h]\n  int v56; // [esp+14h] [ebp-3Ch]\n  int v57; // [esp+14h] [ebp-3Ch]\n  unsigned int v58; // [esp+18h] [ebp-38h]\n  char v59; // [esp+18h] [ebp-38h]\n  int v60; // [esp+18h] [ebp-38h]\n  int v61; // [esp+18h] [ebp-38h]\n  int v62; // [esp+1Ch] [ebp-34h]\n  int v63; // [esp+1Ch] [ebp-34h]\n  int v64; // [esp+1Ch] [ebp-34h]\n  char v65; // [esp+20h] [ebp-30h]\n  int v66; // [esp+24h] [ebp-2Ch]\n  int v67; // [esp+28h] [ebp-28h]\n  int v68; // [esp+28h] [ebp-28h]\n  char v69; // [esp+28h] [ebp-28h]\n  int v70; // [esp+28h] [ebp-28h]\n  int v71; // [esp+2Ch] [ebp-24h]\n  unsigned int v72; // [esp+2Ch] [ebp-24h]\n  int v73; // [esp+30h] [ebp-20h]\n  int v74; // [esp+30h] [ebp-20h]\n  int v75; // [esp+30h] [ebp-20h]\n  int v76; // [esp+30h] [ebp-20h]\n  int v77; // [esp+30h] [ebp-20h]\n  int v78; // [esp+34h] [ebp-1Ch]\n  int v79; // [esp+38h] [ebp-18h]\n  int v80; // [esp+3Ch] [ebp-14h]\n  int v81; // [esp+40h] [ebp-10h] BYREF\n  int v82; // [esp+44h] [ebp-Ch]\n  int v83; // [esp+48h] [ebp-8h] BYREF\n\n  v2 = 0;\n  v3 = a2;\n  v55 = a1[5] & 0x8000;\n  v4 = (a1[5] & 0x7FFF) - 0x3FFF;\n  v81 = *(_DWORD *)(a1 + 3);\n  v82 = *(_DWORD *)(a1 + 1);\n  v73 = v4;\n  v83 = *a1 << 16;\n  if ( v4 == -16383 )\n  {\n    v5 = 0;\n    v6 = 0;\n    while ( !*(&v81 + v6) )\n    {\n      if ( ++v6 >= 3 )\n        goto LABEL_84;\n    }\n    v81 = 0;\n    v82 = 0;\n    v83 = 0;\n  }\n  else\n  {\n    v71 = v4;\n    v78 = v81;\n    v62 = dword_455AA8 - 1;\n    v66 = 0;\n    v79 = v82;\n    v80 = v83;\n    v7 = dword_455AA8 / 32;\n    v56 = dword_455AA8 / 32;\n    v65 = 31 - dword_455AA8 % 32;\n    v8 = v65;\n    if ( ((1 << v65) & *(&v81 + dword_455AA8 / 32)) != 0 )\n    {\n      for ( i = (~(-1 << v65) & *(&v81 + v7)) == 0; i; i = *(&v81 + v7) == 0 )\n      {\n        if ( ++v7 >= 3 )\n          goto LABEL_24;\n      }\n      v10 = v62 / 32;\n      v66 = 0;\n      v58 = 1 << (31 - v62 % 32);\n      v11 = *(&v81 + v62 / 32);\n      v12 = v11 + v58 < v11;\n      v13 = v11 + v58;\n      v14 = 0;\n      if ( v12 || v13 < v58 )\n      {\n        v14 = 1;\n        v66 = 1;\n      }\n      *(&v81 + v10) = v13;\n      for ( j = v10 - 1; j >= 0; *(&v81 + j--) = v17 )\n      {\n        if ( !v14 )\n          break;\n        v16 = *(&v81 + j);\n        v14 = 0;\n        v66 = 0;\n        v12 = v16 + 1 < v16;\n        v17 = v16 + 1;\n        if ( v12 || !v17 )\n        {\n          v14 = 1;\n          v66 = 1;\n        }\n      }\n      v8 = v65;\nLABEL_24:\n      v7 = v56;\n    }\n    *(&v81 + v7) &= -1 << v8;\n    if ( v7 + 1 < 3 )\n      memset(&v81 + v7 + 1, 0, 4 * (3 - (v7 + 1)));\n    v18 = v73;\n    if ( v66 )\n      v18 = v73 + 1;\n    if ( v18 >= dword_455AA4 - dword_455AA8 )\n    {\n      if ( v18 > dword_455AA4 )\n      {\n        if ( v18 < dword_455AA0 )\n        {\n          v81 &= ~0x80000000;\n          v61 = v18 + dword_455AB4;\n          v70 = dword_455AAC / 32;\n          v47 = dword_455AAC % 32;\n          v77 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v49 = *(&v81 + k);\n            *(&v81 + k) = v77 | (v49 >> v47);\n            v77 = (~(-1 << v47) & v49) << (32 - v47);\n          }\n          v5 = v61;\n          v50 = &v83 - v70;\n          v2 = 0;\n          for ( m = 2; m >= 0; --m )\n          {\n            if ( m < v70 )\n              *(&v81 + m) = 0;\n            else\n              *(&v81 + m) = *v50;\n            --v50;\n          }\n        }\n        else\n        {\n          v82 = 0;\n          v83 = 0;\n          v81 = 0x80000000;\n          v64 = dword_455AAC / 32;\n          v41 = dword_455AAC % 32;\n          v60 = dword_455AAC % 32;\n          v76 = 0;\n          v42 = ~(-1 << (dword_455AAC % 32));\n          v69 = 32 - dword_455AAC % 32;\n          do\n          {\n            v43 = *(&v81 + v2);\n            v44 = v76 | (v43 >> v41);\n            LOBYTE(v41) = v60;\n            *(&v81 + v2++) = v44;\n            v76 = (v42 & v43) << v69;\n          }\n          while ( v2 < 3 );\n          v45 = &v83 - v64;\n          for ( n = 2; n >= 0; --n )\n          {\n            if ( n < v64 )\n              *(&v81 + n) = 0;\n            else\n              *(&v81 + n) = *v45;\n            --v45;\n          }\n          v5 = dword_455AA0 + dword_455AB4;\n          v2 = 1;\n        }\n        goto LABEL_83;\n      }\n      v81 = v78;\n      v82 = v79;\n      v57 = (dword_455AA4 - v71) / 32;\n      v83 = v80;\n      v19 = (dword_455AA4 - v71) % 32;\n      v74 = 0;\n      v20 = v19;\n      v67 = ~(-1 << v19);\n      v59 = 32 - v19;\n      do\n      {\n        v21 = *(&v81 + v2);\n        *(&v81 + v2++) = v74 | (v21 >> v20);\n        v74 = (v67 & v21) << v59;\n      }\n      while ( v2 < 3 );\n      v22 = &v83 - v57;\n      v23 = v57;\n      for ( ii = 2; ii >= 0; --ii )\n      {\n        if ( ii < v23 )\n        {\n          *(&v81 + ii) = 0;\n        }\n        else\n        {\n          *(&v81 + ii) = *v22;\n          v23 = v57;\n        }\n        --v22;\n      }\n      v25 = (v62 + 1) / 32;\n      v26 = 31 - (v62 + 1) % 32;\n      if ( ((1 << v26) & *(&v81 + v25)) != 0 )\n      {\n        for ( jj = (~(-1 << v26) & *(&v81 + v25)) == 0; jj; jj = *(&v81 + v25) == 0 )\n        {\n          if ( ++v25 >= 3 )\n            goto LABEL_56;\n        }\n        v28 = v62 / 32;\n        v29 = *(&v81 + v62 / 32);\n        v30 = 0;\n        v72 = 1 << (31 - v62 % 32);\n        v12 = v29 + v72 < v29;\n        v31 = v29 + v72;\n        if ( v12 || v31 < v72 )\n          v30 = 1;\n        *(&v81 + v28) = v31;\n        for ( kk = v28 - 1; kk >= 0; *(&v81 + kk--) = v34 )\n        {\n          if ( !v30 )\n            break;\n          v33 = *(&v81 + kk);\n          v30 = 0;\n          v12 = v33 + 1 < v33;\n          v34 = v33 + 1;\n          if ( v12 || !v34 )\n            v30 = 1;\n        }\n        v26 = 31 - (v62 + 1) % 32;\nLABEL_56:\n        v25 = (v62 + 1) / 32;\n      }\n      *(&v81 + v25) &= -1 << v26;\n      v35 = v25 + 1;\n      if ( v35 < 3 )\n        memset(&v81 + v35, 0, 4 * (3 - v35));\n      v68 = (dword_455AAC + 1) / 32;\n      v36 = (dword_455AAC + 1) % 32;\n      v37 = 0;\n      v75 = 0;\n      v63 = 0;\n      do\n      {\n        v38 = *(&v81 + v37);\n        *(&v81 + v63) = v75 | (v38 >> v36);\n        v75 = (~(-1 << v36) & v38) << (32 - v36);\n        v37 = v63 + 1;\n        v63 = v37;\n      }\n      while ( v37 < 3 );\n      v39 = &v83 - v68;\n      for ( mm = 2; mm >= 0; --mm )\n      {\n        if ( mm < v68 )\n          *(&v81 + mm) = 0;\n        else\n          *(&v81 + mm) = *v39;\n        --v39;\n      }\n    }\n    else\n    {\n      v81 = 0;\n      v82 = 0;\n      v83 = 0;\n    }\n    v5 = 0;\n  }\n  v2 = 2;\nLABEL_83:\n  v3 = a2;\nLABEL_84:\n  v52 = v81 | (v55 != 0 ? 0x80000000 : 0) | (v5 << (31 - dword_455AAC));\n  if ( dword_455AB0 == 64 )\n  {\n    v53 = v82;\n    v3[1] = v52;\n    *v3 = v53;\n  }\n  else if ( dword_455AB0 == 32 )\n  {\n    *v3 = v52;\n  }\n  return v2;\n}\n// 455AA0: using guessed type int dword_455AA0;\n// 455AA4: using guessed type int dword_455AA4;\n// 455AA8: using guessed type int dword_455AA8;\n// 455AAC: using guessed type int dword_455AAC;\n// 455AB0: using guessed type int dword_455AB0;\n// 455AB4: using guessed type int dword_455AB4;\n\n"
    },
    {
        "Function": "sub_41D008",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.27%",
        "Function Body": "\nint __cdecl sub_41D008(unsigned __int16 *a1, _DWORD *a2)\n{\n  int v2; // ebx\n  _DWORD *v3; // edi\n  int v4; // edx\n  int v5; // esi\n  int v6; // eax\n  int v7; // edx\n  char v8; // cl\n  bool i; // zf\n  int v10; // edx\n  unsigned int v11; // eax\n  bool v12; // cf\n  unsigned int v13; // eax\n  int v14; // ecx\n  int j; // edx\n  unsigned int v16; // eax\n  int v17; // eax\n  int v18; // ecx\n  int v19; // eax\n  char v20; // di\n  unsigned int v21; // eax\n  int *v22; // edx\n  int v23; // eax\n  int ii; // ecx\n  int v25; // edx\n  char v26; // cl\n  bool jj; // zf\n  int v28; // edx\n  unsigned int v29; // eax\n  int v30; // ecx\n  unsigned int v31; // eax\n  int kk; // edx\n  unsigned int v33; // eax\n  int v34; // eax\n  int v35; // edx\n  int v36; // ecx\n  int v37; // eax\n  unsigned int v38; // eax\n  int *v39; // edx\n  int mm; // ecx\n  int v41; // ecx\n  int v42; // edi\n  unsigned int v43; // eax\n  int v44; // edx\n  int *v45; // edx\n  int n; // ecx\n  int v47; // ecx\n  int k; // esi\n  unsigned int v49; // eax\n  int *v50; // edx\n  int m; // ecx\n  unsigned int v52; // esi\n  int v53; // eax\n  int v55; // [esp+Ch] [ebp-44h]\n  int v56; // [esp+14h] [ebp-3Ch]\n  int v57; // [esp+14h] [ebp-3Ch]\n  unsigned int v58; // [esp+18h] [ebp-38h]\n  char v59; // [esp+18h] [ebp-38h]\n  int v60; // [esp+18h] [ebp-38h]\n  int v61; // [esp+18h] [ebp-38h]\n  int v62; // [esp+1Ch] [ebp-34h]\n  int v63; // [esp+1Ch] [ebp-34h]\n  int v64; // [esp+1Ch] [ebp-34h]\n  char v65; // [esp+20h] [ebp-30h]\n  int v66; // [esp+24h] [ebp-2Ch]\n  int v67; // [esp+28h] [ebp-28h]\n  int v68; // [esp+28h] [ebp-28h]\n  char v69; // [esp+28h] [ebp-28h]\n  int v70; // [esp+28h] [ebp-28h]\n  int v71; // [esp+2Ch] [ebp-24h]\n  unsigned int v72; // [esp+2Ch] [ebp-24h]\n  int v73; // [esp+30h] [ebp-20h]\n  int v74; // [esp+30h] [ebp-20h]\n  int v75; // [esp+30h] [ebp-20h]\n  int v76; // [esp+30h] [ebp-20h]\n  int v77; // [esp+30h] [ebp-20h]\n  int v78; // [esp+34h] [ebp-1Ch]\n  int v79; // [esp+38h] [ebp-18h]\n  int v80; // [esp+3Ch] [ebp-14h]\n  int v81; // [esp+40h] [ebp-10h] BYREF\n  int v82; // [esp+44h] [ebp-Ch]\n  int v83; // [esp+48h] [ebp-8h] BYREF\n\n  v2 = 0;\n  v3 = a2;\n  v55 = a1[5] & 0x8000;\n  v4 = (a1[5] & 0x7FFF) - 0x3FFF;\n  v81 = *(_DWORD *)(a1 + 3);\n  v82 = *(_DWORD *)(a1 + 1);\n  v73 = v4;\n  v83 = *a1 << 16;\n  if ( v4 == -16383 )\n  {\n    v5 = 0;\n    v6 = 0;\n    while ( !*(&v81 + v6) )\n    {\n      if ( ++v6 >= 3 )\n        goto LABEL_84;\n    }\n    v81 = 0;\n    v82 = 0;\n    v83 = 0;\n  }\n  else\n  {\n    v71 = v4;\n    v78 = v81;\n    v62 = dword_455AC0 - 1;\n    v66 = 0;\n    v79 = v82;\n    v80 = v83;\n    v7 = dword_455AC0 / 32;\n    v56 = dword_455AC0 / 32;\n    v65 = 31 - dword_455AC0 % 32;\n    v8 = v65;\n    if ( ((1 << v65) & *(&v81 + dword_455AC0 / 32)) != 0 )\n    {\n      for ( i = (~(-1 << v65) & *(&v81 + v7)) == 0; i; i = *(&v81 + v7) == 0 )\n      {\n        if ( ++v7 >= 3 )\n          goto LABEL_24;\n      }\n      v10 = v62 / 32;\n      v66 = 0;\n      v58 = 1 << (31 - v62 % 32);\n      v11 = *(&v81 + v62 / 32);\n      v12 = v11 + v58 < v11;\n      v13 = v11 + v58;\n      v14 = 0;\n      if ( v12 || v13 < v58 )\n      {\n        v14 = 1;\n        v66 = 1;\n      }\n      *(&v81 + v10) = v13;\n      for ( j = v10 - 1; j >= 0; *(&v81 + j--) = v17 )\n      {\n        if ( !v14 )\n          break;\n        v16 = *(&v81 + j);\n        v14 = 0;\n        v66 = 0;\n        v12 = v16 + 1 < v16;\n        v17 = v16 + 1;\n        if ( v12 || !v17 )\n        {\n          v14 = 1;\n          v66 = 1;\n        }\n      }\n      v8 = v65;\nLABEL_24:\n      v7 = v56;\n    }\n    *(&v81 + v7) &= -1 << v8;\n    if ( v7 + 1 < 3 )\n      memset(&v81 + v7 + 1, 0, 4 * (3 - (v7 + 1)));\n    v18 = v73;\n    if ( v66 )\n      v18 = v73 + 1;\n    if ( v18 >= dword_455ABC - dword_455AC0 )\n    {\n      if ( v18 > dword_455ABC )\n      {\n        if ( v18 < dword_455AB8 )\n        {\n          v81 &= ~0x80000000;\n          v61 = v18 + dword_455ACC;\n          v70 = dword_455AC4 / 32;\n          v47 = dword_455AC4 % 32;\n          v77 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v49 = *(&v81 + k);\n            *(&v81 + k) = v77 | (v49 >> v47);\n            v77 = (~(-1 << v47) & v49) << (32 - v47);\n          }\n          v5 = v61;\n          v50 = &v83 - v70;\n          v2 = 0;\n          for ( m = 2; m >= 0; --m )\n          {\n            if ( m < v70 )\n              *(&v81 + m) = 0;\n            else\n              *(&v81 + m) = *v50;\n            --v50;\n          }\n        }\n        else\n        {\n          v82 = 0;\n          v83 = 0;\n          v81 = 0x80000000;\n          v64 = dword_455AC4 / 32;\n          v41 = dword_455AC4 % 32;\n          v60 = dword_455AC4 % 32;\n          v76 = 0;\n          v42 = ~(-1 << (dword_455AC4 % 32));\n          v69 = 32 - dword_455AC4 % 32;\n          do\n          {\n            v43 = *(&v81 + v2);\n            v44 = v76 | (v43 >> v41);\n            LOBYTE(v41) = v60;\n            *(&v81 + v2++) = v44;\n            v76 = (v42 & v43) << v69;\n          }\n          while ( v2 < 3 );\n          v45 = &v83 - v64;\n          for ( n = 2; n >= 0; --n )\n          {\n            if ( n < v64 )\n              *(&v81 + n) = 0;\n            else\n              *(&v81 + n) = *v45;\n            --v45;\n          }\n          v5 = dword_455AB8 + dword_455ACC;\n          v2 = 1;\n        }\n        goto LABEL_83;\n      }\n      v81 = v78;\n      v82 = v79;\n      v57 = (dword_455ABC - v71) / 32;\n      v83 = v80;\n      v19 = (dword_455ABC - v71) % 32;\n      v74 = 0;\n      v20 = v19;\n      v67 = ~(-1 << v19);\n      v59 = 32 - v19;\n      do\n      {\n        v21 = *(&v81 + v2);\n        *(&v81 + v2++) = v74 | (v21 >> v20);\n        v74 = (v67 & v21) << v59;\n      }\n      while ( v2 < 3 );\n      v22 = &v83 - v57;\n      v23 = v57;\n      for ( ii = 2; ii >= 0; --ii )\n      {\n        if ( ii < v23 )\n        {\n          *(&v81 + ii) = 0;\n        }\n        else\n        {\n          *(&v81 + ii) = *v22;\n          v23 = v57;\n        }\n        --v22;\n      }\n      v25 = (v62 + 1) / 32;\n      v26 = 31 - (v62 + 1) % 32;\n      if ( ((1 << v26) & *(&v81 + v25)) != 0 )\n      {\n        for ( jj = (~(-1 << v26) & *(&v81 + v25)) == 0; jj; jj = *(&v81 + v25) == 0 )\n        {\n          if ( ++v25 >= 3 )\n            goto LABEL_56;\n        }\n        v28 = v62 / 32;\n        v29 = *(&v81 + v62 / 32);\n        v30 = 0;\n        v72 = 1 << (31 - v62 % 32);\n        v12 = v29 + v72 < v29;\n        v31 = v29 + v72;\n        if ( v12 || v31 < v72 )\n          v30 = 1;\n        *(&v81 + v28) = v31;\n        for ( kk = v28 - 1; kk >= 0; *(&v81 + kk--) = v34 )\n        {\n          if ( !v30 )\n            break;\n          v33 = *(&v81 + kk);\n          v30 = 0;\n          v12 = v33 + 1 < v33;\n          v34 = v33 + 1;\n          if ( v12 || !v34 )\n            v30 = 1;\n        }\n        v26 = 31 - (v62 + 1) % 32;\nLABEL_56:\n        v25 = (v62 + 1) / 32;\n      }\n      *(&v81 + v25) &= -1 << v26;\n      v35 = v25 + 1;\n      if ( v35 < 3 )\n        memset(&v81 + v35, 0, 4 * (3 - v35));\n      v68 = (dword_455AC4 + 1) / 32;\n      v36 = (dword_455AC4 + 1) % 32;\n      v37 = 0;\n      v75 = 0;\n      v63 = 0;\n      do\n      {\n        v38 = *(&v81 + v37);\n        *(&v81 + v63) = v75 | (v38 >> v36);\n        v75 = (~(-1 << v36) & v38) << (32 - v36);\n        v37 = v63 + 1;\n        v63 = v37;\n      }\n      while ( v37 < 3 );\n      v39 = &v83 - v68;\n      for ( mm = 2; mm >= 0; --mm )\n      {\n        if ( mm < v68 )\n          *(&v81 + mm) = 0;\n        else\n          *(&v81 + mm) = *v39;\n        --v39;\n      }\n    }\n    else\n    {\n      v81 = 0;\n      v82 = 0;\n      v83 = 0;\n    }\n    v5 = 0;\n  }\n  v2 = 2;\nLABEL_83:\n  v3 = a2;\nLABEL_84:\n  v52 = v81 | (v55 != 0 ? 0x80000000 : 0) | (v5 << (31 - dword_455AC4));\n  if ( dword_455AC8 == 64 )\n  {\n    v53 = v82;\n    v3[1] = v52;\n    *v3 = v53;\n  }\n  else if ( dword_455AC8 == 32 )\n  {\n    *v3 = v52;\n  }\n  return v2;\n}\n// 455AB8: using guessed type int dword_455AB8;\n// 455ABC: using guessed type int dword_455ABC;\n// 455AC0: using guessed type int dword_455AC0;\n// 455AC4: using guessed type int dword_455AC4;\n// 455AC8: using guessed type int dword_455AC8;\n// 455ACC: using guessed type int dword_455ACC;\n\n"
    },
    {
        "Function": "sub_401338",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "3.33%",
        "Function Body": "\nint __thiscall sub_401338(_DWORD *this, unsigned int a2, int a3)\n{\n  _DWORD *v3; // esi\n  unsigned int v4; // edi\n  unsigned int v5; // ebx\n  unsigned int v6; // ecx\n  void *v7; // eax\n  _DWORD *v8; // ecx\n  int result; // eax\n  _DWORD v10[5]; // [esp+0h] [ebp-28h] BYREF\n  void *v11; // [esp+14h] [ebp-14h]\n  _DWORD *v12; // [esp+18h] [ebp-10h]\n  int v13; // [esp+24h] [ebp-4h]\n\n  v12 = v10;\n  v3 = this;\n  v10[4] = this;\n  v4 = a2 | 7;\n  if ( (a2 | 7) <= 0x7FFFFFFE )\n  {\n    v5 = this[5];\n    v6 = v5 >> 1;\n    v10[3] = 3;\n    if ( v5 >> 1 > v4 / 3 )\n    {\n      v4 = 2147483646;\n      if ( v5 <= 2147483646 - v6 )\n        v4 = v6 + v5;\n    }\n  }\n  else\n  {\n    v4 = a2;\n  }\n  v13 = 0;\n  v7 = sub_40109A(v4 + 1, 0);\n  v11 = v7;\n  v13 = -1;\n  if ( a3 )\n  {\n    if ( v3[5] < 8u )\n      v8 = v3;\n    else\n      v8 = (_DWORD *)*v3;\n    sub_40193D(v7, v8, a3);\n  }\n  std::wstring::_Tidy(v3, 1, 0);\n  if ( v3 )\n    *v3 = v11;\n  v3[5] = v4;\n  v3[4] = a3;\n  if ( v4 >= 8 )\n    v3 = (_DWORD *)*v3;\n  result = 0;\n  *((_WORD *)v3 + a3) = 0;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_401227",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "3.23%",
        "Function Body": "\nint __thiscall sub_401227(const void **this, int a2, int Size)\n{\n  const void **v3; // esi\n  unsigned int v4; // edi\n  unsigned int v5; // ebx\n  unsigned int v6; // ecx\n  void *v7; // ecx\n  const void **v8; // edx\n  int result; // eax\n  _DWORD v10[5]; // [esp+0h] [ebp-28h] BYREF\n  void *v11; // [esp+14h] [ebp-14h]\n  _DWORD *v12; // [esp+18h] [ebp-10h]\n  int v13; // [esp+24h] [ebp-4h]\n\n  v12 = v10;\n  v3 = this;\n  v10[4] = this;\n  v4 = a2 | 0xF;\n  if ( (a2 | 0xF) == -1 )\n  {\n    v4 = a2;\n  }\n  else\n  {\n    v5 = (unsigned int)this[5];\n    v6 = v5 >> 1;\n    v10[3] = 3;\n    if ( v5 >> 1 > v4 / 3 )\n    {\n      if ( v5 > -2 - v6 )\n        v4 = -2;\n      else\n        v4 = v6 + v5;\n    }\n  }\n  v13 = 0;\n  v7 = sub_401070(v4 + 1, 0);\n  v11 = v7;\n  v13 = -1;\n  if ( Size )\n  {\n    if ( (unsigned int)v3[5] < 0x10 )\n      v8 = v3;\n    else\n      v8 = (const void **)*v3;\n    memmove_0(v7, v8, Size);\n  }\n  std::string::_Tidy(v3, 1, 0);\n  if ( v3 )\n    *v3 = v11;\n  v3[5] = (const void *)v4;\n  result = Size;\n  v3[4] = (const void *)Size;\n  if ( v4 >= 0x10 )\n    v3 = (const void **)*v3;\n  *((_BYTE *)v3 + Size) = 0;\n  return result;\n}\n// 4012DD: conditional instruction was optimized away because %Size.4!=0\n\n"
    },
    {
        "Function": "sub_403203",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "1.16%",
        "Function Body": "\nint __stdcall sub_403203(int *a1, SIZE_T *a2)\n{\n  _BYTE *v2; // edi\n  int i; // esi\n  unsigned int v5; // ecx\n  int v6; // eax\n  char v7; // dh\n  char v8; // bl\n  int result; // eax\n  WCHAR Dst[1024]; // [esp+Ch] [ebp-C2Ch] BYREF\n  CHAR szLongPath[1024]; // [esp+80Ch] [ebp-42Ch] BYREF\n  unsigned int j; // [esp+C0Ch] [ebp-2Ch]\n  int v13; // [esp+C10h] [ebp-28h]\n  int v14; // [esp+C14h] [ebp-24h]\n  char v15; // [esp+C1Ah] [ebp-1Eh]\n  char v16; // [esp+C1Bh] [ebp-1Dh]\n  SIZE_T v17; // [esp+C1Ch] [ebp-1Ch]\n  int v18; // [esp+C20h] [ebp-18h]\n  char v19; // [esp+C27h] [ebp-11h]\n  int v20; // [esp+C28h] [ebp-10h]\n  int v21; // [esp+C2Ch] [ebp-Ch]\n  int v22; // [esp+C30h] [ebp-8h]\n  int v23; // [esp+C34h] [ebp-4h]\n  char v24; // [esp+C47h] [ebp+Fh]\n  char v25; // [esp+C47h] [ebp+Fh]\n\n  v2 = a2;\n  for ( i = 0; i < 9117715; ++i )\n  {\n    if ( i == 8832220 )\n      v2 = LocalAlloc(0, *a2);\n  }\n  v17 = 0;\n  v22 = 4;\n  v5 = 0;\n  for ( j = 0; v5 < *a2; j = v5 )\n  {\n    v6 = *a1;\n    v7 = *(_BYTE *)(*a1 + v5 + 3);\n    v24 = *(_BYTE *)(*a1 + v5);\n    v19 = *(_BYTE *)(*a1 + v5 + 1);\n    v16 = *(_BYTE *)(v6 + v5 + 2);\n    v15 = v7;\n    v20 = 2;\n    v23 = 192;\n    v25 = (4 * v7) & 0xC0 | v24;\n    v14 = 4;\n    v18 = 192;\n    v19 |= (16 * v7) & 0xC0;\n    if ( dwSize == 618 )\n    {\n      WritePrivateProfileStructW(\n        L\"socuhopaxatajesijavelatisiru zijokibocukiwi vohivaganadeyixetutowasovozo yipubigokumugohedilijonuci\",\n        L\"yezi fowutikuyiwugefalofinaji\",\n        0,\n        0,\n        L\"kubojasulekohibixozaxiti kab pewibu pobubavofigi pinope\");\n      v7 = v15;\n    }\n    v21 = 6;\n    v13 = 192;\n    v8 = (v7 << 6) | v16;\n    if ( dwSize == 2153 )\n    {\n      ExpandEnvironmentStringsW(L\"jebolarakasuwikesuru yunuxatuboda\", Dst, 0);\n      GetLongPathNameA(\n        \"duyumavohevifafajesibicepuxidu maxebocugazimehuxadixi citulosizinivuxolifiri vin\",\n        szLongPath,\n        0);\n    }\n    v2[v17] = v25;\n    v2[++v17] = v19;\n    v2[++v17] = v8;\n    ++v17;\n    v5 = v22 + j;\n  }\n  *a1 = (int)v2;\n  result = v17;\n  *a2 = v17;\n  return result;\n}\n// 403203: using guessed type WCHAR Dst[1024];\n// 403203: using guessed type CHAR szLongPath[1024];\n\n"
    },
    {
        "Function": "sub_40100C",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nint sub_40100C()\n{\n  return atexit(sub_427458);\n}\n\n"
    },
    {
        "Function": "sub_401018",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nint sub_401018()\n{\n  return atexit(sub_427463);\n}\n\n"
    },
    {
        "Function": "sub_401070",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid *__stdcall sub_401070(size_t Size, int a2)\n{\n  void *v2; // ecx\n\n  v2 = 0;\n  if ( Size )\n  {\n    v2 = operator new(Size);\n    if ( !v2 )\n      unknown_libname_12();\n  }\n  return v2;\n}\n// 403E6E: using guessed type void __noreturn unknown_libname_12(void);\n\n"
    },
    {
        "Function": "sub_40109A",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid *__stdcall sub_40109A(unsigned int a1, int a2)\n{\n  void *v2; // ecx\n\n  v2 = 0;\n  if ( a1 )\n  {\n    if ( a1 > 0x7FFFFFFF || (v2 = operator new(2 * a1)) == 0 )\n      unknown_libname_12(v2);\n  }\n  return v2;\n}\n// 403E6E: using guessed type void __fastcall __noreturn unknown_libname_12(_DWORD);\n\n"
    }
]