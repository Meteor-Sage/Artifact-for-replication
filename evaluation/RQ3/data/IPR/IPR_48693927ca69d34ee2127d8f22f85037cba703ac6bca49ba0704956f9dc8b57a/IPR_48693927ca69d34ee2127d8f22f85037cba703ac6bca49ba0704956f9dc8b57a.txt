[
    {
        "Function": "sub_462FE4",
        "Total XOR and shift operations": 49,
        "XOR operations": 40,
        "Shift operations": 9,
        "Operation percentage": "83.05%",
        "Function Body": "\nunsigned int __fastcall sub_462FE4(unsigned int a1, unsigned __int8 *a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  int v4; // edi\n  unsigned __int8 *i; // edx\n  _DWORD *v6; // edx\n  unsigned int v7; // eax\n  unsigned int v8; // eax\n  unsigned int v9; // eax\n  unsigned int v10; // eax\n  unsigned int v11; // eax\n  unsigned int v12; // eax\n  unsigned int v13; // eax\n  unsigned int v14; // eax\n  unsigned int v15; // eax\n  unsigned __int8 *j; // edx\n  int v17; // edi\n\n  v3 = ~(((unsigned __int8)a1 << 24) + ((a1 & 0xFF00) << 8) + ((a1 >> 8) & 0xFF00) + HIC0B9(a1));\n  while ( a3 && ((unsigned __int8)a2 & 3) != 0 )\n  {\n    v4 = *a2++;\n    --a3;\n    v3 = (v3 << 8) ^ *((_DWORD *)&unk_50E1B2 + (v4 ^ HIC0B9(v3)) + 1024);\n  }\n  for ( i = a2 - 4;\n        a3 >= 0x20;\n        v3 = *((_DWORD *)&unk_50E1B2 + HIC0B9(v14) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v14) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v14) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v14 + 1024) )\n  {\n    v6 = i + 4;\n    a3 -= 32;\n    v7 = *v6++ ^ v3;\n    v8 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v7) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v7) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v7) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v7 + 1024);\n    v9 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v8) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v8) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v8) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v8 + 1024);\n    v10 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v9) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v9) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v9) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v9 + 1024);\n    v11 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v10) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v10) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v10) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v10 + 1024);\n    v12 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v11) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v11) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v11) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v11 + 1024);\n    v13 = *v6 ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v12) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v12) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v12) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v12 + 1024);\n    i = (unsigned __int8 *)(v6 + 1);\n    v14 = *(_DWORD *)i ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v13) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v13) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v13) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v13 + 1024);\n  }\n  for ( ;\n        a3 >= 4;\n        v3 = *((_DWORD *)&unk_50E1B2 + HIC0B9(v15) + 1792) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v15) + 1536) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v15) + 1280) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v15 + 1024) )\n  {\n    i += 4;\n    a3 -= 4;\n    v15 = *(_DWORD *)i ^ v3;\n  }\n  for ( j = i + 4; a3; v3 = (v3 << 8) ^ *((_DWORD *)&unk_50E1B2 + (v17 ^ HIC0B9(v3)) + 1024) )\n  {\n    v17 = *j++;\n    --a3;\n  }\n  return ((unsigned __int8)~(_BYTE)v3 << 24) + ((~(_WORD)v3 & 0xFF00) << 8) + ((~v3 >> 8) & 0xFF00) + (~v3 >> 24);\n}\n\n"
    },
    {
        "Function": "sub_466C7D",
        "Total XOR and shift operations": 42,
        "XOR operations": 40,
        "Shift operations": 2,
        "Operation percentage": "73.68%",
        "Function Body": "\nint __fastcall sub_466C7D(int a1, _BYTE *a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  unsigned __int8 v4; // si\n  unsigned int v5; // eax\n  _DWORD *v6; // edx\n  unsigned int v7; // eax\n  unsigned int v8; // eax\n  unsigned int v9; // eax\n  unsigned int v10; // eax\n  unsigned int v11; // eax\n  unsigned int v12; // eax\n  unsigned int v13; // eax\n  unsigned int v14; // eax\n  unsigned __int8 v15; // si\n\n  v3 = ~a1;\n  while ( a3 && ((unsigned __int8)a2 & 3) != 0 )\n  {\n    v4 = v3 ^ *a2++;\n    --a3;\n    v3 = (v3 >> 8) ^ *((_DWORD *)&unk_50E1B2 + v4);\n  }\n  for ( ;\n        a3 >= 0x20;\n        v3 = *((_DWORD *)&unk_50E1B2 + HIC0B9(v13)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v13) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v13) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v13 + 768) )\n  {\n    v5 = *(_DWORD *)a2 ^ v3;\n    v6 = a2 + 4;\n    a3 -= 32;\n    v7 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v5)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v5) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v5) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v5 + 768);\n    v8 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v7)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v7) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v7) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v7 + 768);\n    v9 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v8)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v8) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v8) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v8 + 768);\n    v10 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v9)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v9) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v9) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v9 + 768);\n    v11 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v10)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v10) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v10) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v10 + 768);\n    v12 = *v6++ ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v11)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v11) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v11) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v11 + 768);\n    v13 = *v6 ^ *((_DWORD *)&unk_50E1B2 + HIC0B9(v12)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v12) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v12) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v12 + 768);\n    a2 = v6 + 1;\n  }\n  for ( ;\n        a3 >= 4;\n        v3 = *((_DWORD *)&unk_50E1B2 + HIC0B9(v14)) ^ *((_DWORD *)&unk_50E1B2 + BYTE2(v14) + 256) ^ *((_DWORD *)&unk_50E1B2 + BYTE1(v14) + 512) ^ *((_DWORD *)&unk_50E1B2 + (unsigned __int8)v14 + 768) )\n  {\n    v14 = *(_DWORD *)a2 ^ v3;\n    a2 += 4;\n    a3 -= 4;\n  }\n  for ( ; a3; v3 = (v3 >> 8) ^ *((_DWORD *)&unk_50E1B2 + v15) )\n  {\n    v15 = v3 ^ *a2++;\n    --a3;\n  }\n  return ~v3;\n}\n\n"
    },
    {
        "Function": "sub_4FF29D",
        "Total XOR and shift operations": 27,
        "XOR operations": 18,
        "Shift operations": 9,
        "Operation percentage": "67.50%",
        "Function Body": "\nint __fastcall sub_4FF29D(int a1, _BYTE *a2, unsigned int a3)\n{\n  _BYTE *v4; // esi\n  unsigned int i; // ebx\n  unsigned int v8; // ebx\n  _BYTE *v9; // esi\n  unsigned int v10; // ebx\n  unsigned int v11; // ebx\n  unsigned int v12; // ebx\n  unsigned int v13; // ebx\n  unsigned int v14; // ebx\n  unsigned int v15; // ebx\n\n  v4 = a2;\n  if ( !a2 )\n    return 0;\n  if ( !dword_509AFD )\n    sub_4FD49C();\n  for ( i = ~a1; a3 >= 8; a3 -= 8 )\n  {\n    v8 = (i >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(*v4 ^ i));\n    v9 = v4 + 1;\n    v10 = (v8 >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(*v9++ ^ v8));\n    v11 = (v10 >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(*v9++ ^ v10));\n    v12 = (v11 >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(*v9++ ^ v11));\n    v13 = (v12 >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(*v9++ ^ v12));\n    v14 = (v13 >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(*v9++ ^ v13));\n    v15 = (v14 >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(*v9++ ^ v14));\n    i = (v15 >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(*v9 ^ v15));\n    v4 = v9 + 1;\n  }\n  for ( ; a3; --a3 )\n    i = (i >> 8) ^ *(_DWORD *)(dword_509AFD + 4 * (unsigned __int8)(i ^ *v4++));\n  return ~i;\n}\n// 4FD49C: using guessed type int sub_4FD49C(void);\n// 509AFD: using guessed type int dword_509AFD;\n\n"
    },
    {
        "Function": "sub_4E683E",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "42.86%",
        "Function Body": "\nunsigned int __fastcall sub_4E683E(unsigned int a1)\n{\n  return (((a1 >> 8) & 0x8059C2FF) << 8) + (((int)a1 % 256) << 16) + HI282E(a1);\n}\n\n"
    },
    {
        "Function": "sub_4EE46E",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "23.33%",
        "Function Body": "\nint __fastcall sub_4EE46E(unsigned int a1, int a2)\n{\n  int v3; // [esp+8h] [ebp-4h]\n\n  HIC0B9(v3) = HIC0B9(a1);\n  if ( BYTE1(a1) >= BYTE2(a1) )\n  {\n    if ( BYTE1(a1) <= (unsigned __int8)a1 )\n      BYTE2(v3) = a1;\n    else\n      BYTE2(v3) = BYTE1(a1);\n  }\n  else if ( (unsigned __int8)((unsigned __int16)(a1 >> 8) >> 8) <= (unsigned __int8)a1 )\n  {\n    BYTE2(v3) = a1;\n  }\n  else\n  {\n    BYTE2(v3) = (unsigned __int16)(a1 >> 8) >> 8;\n  }\n  BYTE1(v3) = BYTE2(v3);\n  LOE09B(v3) = BYTE2(v3);\n  BYTE2(v3) = (unsigned __int16)((unsigned __int8)a2 * BYTE2(v3)) >> 8;\n  BYTE1(v3) = (unsigned __int16)(BYTE1(a2) * BYTE1(v3)) >> 8;\n  LOE09B(v3) = (unsigned __int16)(BYTE2(a2) * (unsigned __int8)v3) >> 8;\n  return v3;\n}\n\n"
    },
    {
        "Function": "sub_4FB377",
        "Total XOR and shift operations": 13,
        "XOR operations": 0,
        "Shift operations": 13,
        "Operation percentage": "18.31%",
        "Function Body": "\nchar __fastcall sub_4FB377(int a1, _BYTE **a2, int a3, _BYTE *a4, unsigned int a5, unsigned __int8 a6)\n{\n  _BYTE *v6; // edi\n  unsigned __int8 v7; // dl\n  unsigned __int8 v8; // al\n  int v9; // eax\n  unsigned __int8 v10; // bl\n  unsigned int v11; // esi\n  unsigned int v12; // ecx\n  unsigned __int8 v14; // [esp+Fh] [ebp-11h]\n  unsigned __int8 v15; // [esp+10h] [ebp-10h]\n  unsigned __int8 v16; // [esp+11h] [ebp-Fh]\n  char v17; // [esp+12h] [ebp-Eh]\n  char v18; // [esp+13h] [ebp-Dh]\n  unsigned __int8 v19; // [esp+14h] [ebp-Ch]\n  unsigned __int8 v20; // [esp+15h] [ebp-Bh]\n  unsigned __int8 v21; // [esp+16h] [ebp-Ah]\n  _BYTE *v22; // [esp+18h] [ebp-8h]\n\n  v22 = *a2;\n  v6 = a4;\n  v7 = *(_BYTE *)(a1 + 6);\n  v8 = *(_BYTE *)(a1 + 5);\n  if ( v7 == v8 && a6 == 0xFF )\n  {\n    LOE09B(v9) = System::Move(v22, a4, (a5 * v8 + 7) >> 3);\n  }\n  else\n  {\n    v21 = 0x80;\n    v14 = v8;\n    v10 = v7;\n    v19 = ~((1 << (8 - v8)) - 1);\n    v16 = (1 << v8) - 1;\n    v20 = (1 << (8 - v7)) - 1;\n    v15 = (1 << v7) - 1;\n    v18 = 8;\n    LOE09B(v9) = 8 - v7;\n    v17 = 8 - v7;\n    v11 = 0;\n    while ( v11 < a5 )\n    {\n      if ( (v21 & a6) != 0 )\n      {\n        v18 -= v14;\n        *v6 = v20 & *v6 | ((unsigned __int8)sub_4F6E71((unsigned __int8)(v19 & *v22) >> v18, v15, v16) << v17);\n        if ( !v18 )\n        {\n          v18 = 8;\n          ++v22;\n        }\n        v19 = (v19 >> v14) | (v19 << (8 - v14));\n      }\n      v21 = (v21 << 7) | (v21 >> 1);\n      v20 = (v20 >> v10) | (v20 << (8 - v10));\n      if ( v17 )\n        v17 -= v10;\n      else\n        v17 = 8 - v10;\n      ++v11;\n      v12 = 8u / v10;\n      v9 = v11 / v12;\n      if ( !(v11 % v12) )\n        ++v6;\n    }\n  }\n  return v9;\n}\n\n"
    },
    {
        "Function": "sub_4F9621",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "17.31%",
        "Function Body": "\nint __fastcall sub_4F9621(int a1, _BYTE **a2, int a3, __int16 *a4, int a5, unsigned __int8 a6)\n{\n  int v6; // esi\n  unsigned __int8 v8; // bl\n  int v9; // eax\n  int result; // eax\n  __int16 v11; // ax\n  char v12; // t0\n  char v13; // [esp+Ch] [ebp-Ch]\n  unsigned __int8 v14; // [esp+Dh] [ebp-Bh]\n  char i; // [esp+Eh] [ebp-Ah]\n  unsigned __int8 v16; // [esp+Fh] [ebp-9h]\n  _BYTE *v17; // [esp+10h] [ebp-8h]\n\n  v6 = a5;\n  v17 = *a2;\n  v8 = 0x80;\n  v13 = *(_BYTE *)(a1 + 5);\n  v9 = (unsigned __int8)(1 << (8 - v13)) - 1;\n  v16 = ~(_BYTE)v9;\n  LOE09B(v9) = 1 << v13;\n  result = v9 - 1;\n  v14 = result;\n  for ( i = 8; v6; ++a4 )\n  {\n    if ( (v8 & a6) != 0 )\n    {\n      i -= v13;\n      v11 = sub_4F6E71((unsigned __int8)(v16 & *v17) >> i, 0xFFFFu, v14);\n      if ( (*(_BYTE *)(a1 + 320) & 4) != 0 )\n      {\n        v12 = HIC0B9(v11);\n        HIC0B9(v11) = v11;\n        LOE09B(v11) = v12;\n      }\n      *a4 = v11;\n      if ( !i )\n      {\n        i = 8;\n        ++v17;\n      }\n      v16 = (v16 >> v13) | (v16 << (8 - v13));\n    }\n    result = (unsigned __int8)((v8 << 7) | (v8 >> 1));\n    v8 = (v8 << 7) | (v8 >> 1);\n    --v6;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_468DB1",
        "Total XOR and shift operations": 2,
        "XOR operations": 1,
        "Shift operations": 1,
        "Operation percentage": "13.33%",
        "Function Body": "\nint __fastcall sub_468DB1(_DWORD *a1, unsigned int a2)\n{\n  int i; // ecx\n\n  for ( i = 0; a2; ++a1 )\n  {\n    if ( (a2 & 1) != 0 )\n      i ^= *a1;\n    a2 >>= 1;\n  }\n  return i;\n}\n\n"
    },
    {
        "Function": "sub_453537",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "12.50%",
        "Function Body": "\nint __fastcall sub_453537(int a1, int a2, int a3)\n{\n  int v4; // eax\n\n  if ( !a1 || !*(_DWORD *)(a1 + 28) )\n    return -2;\n  v4 = *(_DWORD *)(a1 + 28);\n  if ( a2 > 16 || (unsigned int)(a2 + *(_DWORD *)(v4 + 60)) > 0x20 )\n    return -2;\n  *(_DWORD *)(v4 + 56) += (((1 << a2) - 1) & a3) << *(_DWORD *)(v4 + 60);\n  *(_DWORD *)(v4 + 60) += a2;\n  return 0;\n}\n\n"
    },
    {
        "Function": "sub_4F39A4",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "12.28%",
        "Function Body": "\nchar __fastcall sub_4F39A4(int a1, unsigned __int16 **a2, int a3, _BYTE *a4, unsigned int a5, unsigned __int8 a6)\n{\n  unsigned int v6; // esi\n  unsigned __int8 v8; // bl\n  unsigned __int16 v9; // ax\n  char v10; // al\n  unsigned int v11; // ecx\n  unsigned __int8 v13; // [esp+Ch] [ebp-Ch]\n  char v14; // [esp+Dh] [ebp-Bh]\n  unsigned __int8 v15; // [esp+Eh] [ebp-Ah]\n  unsigned __int8 v16; // [esp+Fh] [ebp-9h]\n  unsigned __int16 *v17; // [esp+10h] [ebp-8h]\n  int v18; // [esp+14h] [ebp-4h]\n\n  v18 = a1;\n  v6 = a5;\n  v17 = *a2;\n  v16 = 0x80;\n  v8 = *(_BYTE *)(a1 + 6);\n  v15 = (1 << (8 - v8)) - 1;\n  v13 = (1 << v8) - 1;\n  LOE09B(a1) = 8 - v8;\n  v14 = 8 - v8;\n  while ( v6 )\n  {\n    if ( (v16 & a6) != 0 )\n    {\n      if ( (*(_BYTE *)(v18 + 320) & 4) != 0 )\n      {\n        HIC0B9(v9) = *v17;\n        LOE09B(v9) = HIC0B9(*v17);\n        v10 = sub_4F6E71(v9, v13, 0xFFFFu);\n      }\n      else\n      {\n        v10 = sub_4F6E71(*v17, v13, 0xFFFFu);\n      }\n      *a4 = v15 & *a4 | (v10 << v14);\n      ++v17;\n    }\n    v16 = (v16 << 7) | (v16 >> 1);\n    v15 = (v15 >> v8) | (v15 << (8 - v8));\n    if ( v14 )\n      v14 -= v8;\n    else\n      v14 = 8 - v8;\n    --v6;\n    v11 = 8u / v8;\n    a1 = v6 / v11;\n    if ( !(v6 % v11) )\n      ++a4;\n  }\n  return a1;\n}\n\n"
    },
    {
        "Function": "sub_4F5D24",
        "Total XOR and shift operations": 66,
        "XOR operations": 0,
        "Shift operations": 66,
        "Operation percentage": "7.59%",
        "Function Body": "\nchar __fastcall sub_4F5D24(\n        __int64 a1,\n        Graphics::TBitmap *a2,\n        Graphics::TBitmap *a3,\n        _DWORD *a4,\n        char a5,\n        int a6,\n        int a7,\n        char a8)\n{\n  int v8; // eax\n  int v9; // eax\n  int v10; // eax\n  int v11; // eax\n  int v12; // eax\n  int v13; // eax\n  int v14; // eax\n  int v15; // eax\n  int v16; // eax\n  int v17; // eax\n  int v18; // eax\n  int v19; // eax\n  double v20; // st7\n  double v21; // st7\n  double v22; // st7\n  int v23; // edi\n  int v24; // esi\n  unsigned __int8 *v25; // ebx\n  __int64 v26; // rax\n  __int64 v27; // rax\n  __int64 v28; // rax\n  int v29; // edi\n  int v30; // ebx\n  int v31; // esi\n  __int64 v32; // rax\n  __int16 v33; // ax\n  __int64 v34; // rax\n  __int16 v35; // ax\n  __int64 v36; // rax\n  Graphics::TCanvas *Canvas; // eax\n  int v38; // edi\n  int v39; // ebx\n  int v40; // esi\n  __int64 v41; // rax\n  __int16 v42; // ax\n  __int64 v43; // rax\n  __int16 v44; // ax\n  __int64 v45; // rax\n  int v46; // edi\n  int v47; // ebx\n  int v48; // esi\n  __int64 v49; // rax\n  __int16 v50; // ax\n  __int64 v51; // rax\n  __int16 v52; // ax\n  __int64 v53; // rax\n  Graphics::TCanvas *v54; // eax\n  int v55; // eax\n  int v56; // eax\n  int v57; // edi\n  int v58; // ebx\n  int v59; // esi\n  __int64 v60; // rax\n  __int16 v61; // ax\n  __int64 v62; // rax\n  __int16 v63; // ax\n  __int64 v64; // rax\n  int v65; // edi\n  int v66; // esi\n  int v67; // edi\n  int v68; // ebx\n  int v69; // esi\n  Graphics::TCanvas *v70; // eax\n  int v71; // edi\n  int v72; // ebx\n  int v73; // esi\n  int v74; // edi\n  int v75; // ebx\n  int v76; // esi\n  Graphics::TCanvas *v77; // eax\n  int v78; // eax\n  int v79; // eax\n  int v80; // edi\n  int v81; // ebx\n  int v82; // esi\n  unsigned __int8 *v83; // eax\n  int v85; // [esp+8h] [ebp-B4h]\n  __int64 v86; // [esp+8h] [ebp-B4h]\n  __int64 v87; // [esp+8h] [ebp-B4h]\n  __int64 v88; // [esp+8h] [ebp-B4h]\n  __int64 v89; // [esp+8h] [ebp-B4h]\n  __int64 v90; // [esp+8h] [ebp-B4h]\n  __int64 v91; // [esp+8h] [ebp-B4h]\n  __int64 v92; // [esp+8h] [ebp-B4h]\n  __int64 v93; // [esp+8h] [ebp-B4h]\n  __int64 v94; // [esp+8h] [ebp-B4h]\n  __int64 v95; // [esp+8h] [ebp-B4h]\n  __int64 v96; // [esp+8h] [ebp-B4h]\n  __int64 v97; // [esp+8h] [ebp-B4h]\n  __int64 v98; // [esp+8h] [ebp-B4h]\n  __int64 v99; // [esp+8h] [ebp-B4h]\n  __int64 v100; // [esp+8h] [ebp-B4h]\n  __int64 v101; // [esp+8h] [ebp-B4h]\n  __int64 v102; // [esp+8h] [ebp-B4h]\n  __int16 v103; // [esp+8h] [ebp-B4h]\n  int v104; // [esp+Ch] [ebp-B0h]\n  int v105; // [esp+Ch] [ebp-B0h]\n  int v106; // [esp+Ch] [ebp-B0h]\n  int v107; // [esp+Ch] [ebp-B0h]\n  __int64 v108; // [esp+20h] [ebp-9Ch] BYREF\n  __int64 v109; // [esp+28h] [ebp-94h]\n  int v110; // [esp+30h] [ebp-8Ch] BYREF\n  int v111; // [esp+34h] [ebp-88h]\n  int v112; // [esp+38h] [ebp-84h]\n  int v113; // [esp+3Ch] [ebp-80h]\n  _BYTE *v114; // [esp+40h] [ebp-7Ch]\n  unsigned __int8 *v115; // [esp+44h] [ebp-78h]\n  unsigned __int8 *v116; // [esp+48h] [ebp-74h]\n  _BYTE *v117; // [esp+4Ch] [ebp-70h]\n  unsigned __int8 *v118; // [esp+50h] [ebp-6Ch]\n  _BYTE *v119; // [esp+54h] [ebp-68h]\n  unsigned __int8 *v120; // [esp+58h] [ebp-64h]\n  unsigned __int8 *v121; // [esp+5Ch] [ebp-60h]\n  _BYTE *v122; // [esp+60h] [ebp-5Ch]\n  unsigned __int8 *v123; // [esp+64h] [ebp-58h]\n  int v124; // [esp+68h] [ebp-54h]\n  double v125; // [esp+6Ch] [ebp-50h]\n  double v126; // [esp+74h] [ebp-48h]\n  double v127; // [esp+7Ch] [ebp-40h]\n  unsigned __int8 v128; // [esp+86h] [ebp-36h]\n  char v129; // [esp+87h] [ebp-35h]\n  int v130; // [esp+88h] [ebp-34h]\n  int Pixel; // [esp+8Ch] [ebp-30h]\n  int v132; // [esp+90h] [ebp-2Ch]\n  int v133; // [esp+94h] [ebp-28h]\n  int v134; // [esp+98h] [ebp-24h]\n  int v135; // [esp+9Ch] [ebp-20h]\n  int v136; // [esp+A0h] [ebp-1Ch]\n  int v137; // [esp+A4h] [ebp-18h] BYREF\n  int v138; // [esp+A8h] [ebp-14h] BYREF\n  int v139; // [esp+ACh] [ebp-10h]\n  int v140; // [esp+B0h] [ebp-Ch] BYREF\n  int v141; // [esp+B4h] [ebp-8h] BYREF\n  Graphics::TBitmap *v142; // [esp+B8h] [ebp-4h]\n\n  v108 = *(_QWORD *)HI6728D(a1);\n  v109 = *(_QWORD *)(HI6728D(a1) + 8);\n  v110 = *(_DWORD *)a1;\n  v111 = *(_DWORD *)(a1 + 4);\n  v112 = *(_DWORD *)(a1 + 8);\n  v113 = *(_DWORD *)(a1 + 12);\n  v142 = a2;\n  if ( a3 )\n  {\n    BYTE4(a1) = 7;\n    Graphics::TBitmap::SetPixelFormat(a3, HI6728D(a1));\n    v104 = sub_4EF2EC((int)&v108, 1);\n    v8 = sub_4EF2EC((int)&v110, 1);\n    v134 = sub_42649A(v8, v104);\n    v9 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)v142 + 32))(v142);\n    v134 = sub_42649A(v134, v9 - v111);\n    v10 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 32))(a3);\n    LOE39DD(a1) = sub_42649A(v134, v10 - HI6728D(v108)) - 1;\n    v134 = a1;\n    if ( (int)a1 >= 0 )\n    {\n      v105 = sub_4E2A86(&v108, 1);\n      v11 = sub_4E2A86(&v110, 1);\n      v133 = sub_42649A(v11, v105);\n      v12 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)v142 + 44))(v142);\n      v133 = sub_42649A(v133, v12 - v110);\n      v13 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 44))(a3);\n      LOE39DD(a1) = sub_42649A(v133, v13 - v108);\n      v133 = a1;\n      if ( (int)a1 >= 0 )\n      {\n        if ( (int)v108 > v110 )\n        {\n          if ( v110 >= 0 )\n          {\n            if ( (int)v108 < 0 )\n            {\n              v110 -= v108;\n              v133 += v108;\n              LOE39DD(v108) = 0;\n              v15 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)v142 + 44))(v142);\n              v133 = sub_42649A(v133, v15 - v110) - 1;\n            }\n          }\n          else\n          {\n            LOE39DD(v108) = v108 - v110;\n            v133 += v110;\n            v110 = 0;\n            v14 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 44))(a3);\n            v133 = sub_42649A(v133, v14 - v108) - 1;\n          }\n        }\n        if ( SHI6728D(v108) > v111 )\n        {\n          if ( v111 >= 0 )\n          {\n            if ( v108 < 0 )\n            {\n              v111 -= HI6728D(v108);\n              v134 += HI6728D(v108);\n              HI6728D(v108) = 0;\n              v17 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)v142 + 32))(v142);\n              v134 = sub_42649A(v134, v17 - v111) - 1;\n            }\n          }\n          else\n          {\n            HI6728D(v108) -= v111;\n            v134 += v111;\n            v111 = 0;\n            v16 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 32))(a3);\n            v134 = sub_42649A(v134, v16 - HI6728D(v108)) - 1;\n          }\n        }\n        v18 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)v142 + 44))(v142);\n        v133 = sub_42649A(v133, v18 - v110);\n        v19 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 44))(a3);\n        v133 = sub_42649A(v133, v19 - v108) - 1;\n        (*(void (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 100))(a3);\n        LOE09B(a1) = sub_4E769D(a3, &v140, &v137);\n        if ( (_BYTE)a1 )\n        {\n          LOE09B(a1) = sub_4E769D(v142, &v141, &v138);\n          if ( (_BYTE)a1 )\n          {\n            if ( a6 != 0x1FE5CFFF )\n            {\n              Pixel = a6;\n              v128 = sub_42086C((unsigned __int8)a6, BYTE1(a6));\n              v128 = -1 - sub_42086C(BYTE2(Pixel), v128);\n              LOE09B(Pixel) = v128 + Pixel;\n              BYTE1(Pixel) += v128;\n              BYTE2(Pixel) += v128;\n              v20 = (double)(unsigned __int8)Pixel;\n              System::__linkproc__ FSafeDivide(v20);\n              v127 = v20;\n              v21 = (double)BYTE1(Pixel);\n              System::__linkproc__ FSafeDivide(v21);\n              v126 = v21;\n              v22 = (double)BYTE2(Pixel);\n              System::__linkproc__ FSafeDivide(v22);\n              v125 = v22;\n              if ( a7 )\n              {\n                if ( !*((_BYTE *)a4 + 32) )\n                {\n                  LOE09B(a1) = v134;\n                  if ( v134 >= 0 )\n                  {\n                    v124 = v134 + 1;\n                    v135 = 0;\n                    do\n                    {\n                      v23 = v140 + v137 * (v135 + HI6728D(v108));\n                      LOE09B(a1) = v141 + v138 * (v135 + v111);\n                      v139 = v141 + v138 * (v135 + v111);\n                      if ( v133 >= 0 )\n                      {\n                        v24 = v133 + 1;\n                        v136 = 0;\n                        do\n                        {\n                          v132 = v136 + v110;\n                          v130 = *(_DWORD *)(v23 + 4 * (v136 + v108));\n                          v128 = (100 - a7) * HIC0B9(v130) / 100;\n                          v129 = ((unsigned __int8)v130 + BYTE1(v130) + (unsigned int)BYTE2(v130)) / 3;\n                          v25 = (unsigned __int8 *)(v139 + 4 * (v136 + v110));\n                          v85 = v128;\n                          v26 = System::__linkproc__ TRUNC();\n                          Math::Min((Math *)v26, v26, 255i64);\n                          v25[2] = (unsigned __int16)(unknown_libname_68(v85, 0) + (v25[2] << 8)) >> 8;\n                          v86 = v128;\n                          v27 = System::__linkproc__ TRUNC();\n                          Math::Min((Math *)v27, v27, 255i64);\n                          v25[1] = (unsigned __int16)(unknown_libname_68(v86, HI6728D(v86)) + (v25[1] << 8)) >> 8;\n                          v87 = v128;\n                          v28 = System::__linkproc__ TRUNC();\n                          Math::Min((Math *)v28, v28, 255i64);\n                          a1 = (unknown_libname_68(v87, HI6728D(v87)) + (unsigned __int64)(*v25 << 8)) >> 8;\n                          *v25 = a1;\n                          ++v136;\n                          --v24;\n                        }\n                        while ( v24 );\n                      }\n                      ++v135;\n                      --v124;\n                    }\n                    while ( v124 );\n                  }\n                  goto LABEL_65;\n                }\n                LOE09B(a1) = v134;\n                if ( v134 >= 0 )\n                {\n                  v124 = v134 + 1;\n                  v135 = 0;\n                  while ( 1 )\n                  {\n                    v29 = v140 + v137 * (v135 + HI6728D(v108));\n                    v139 = v141 + v138 * (v135 + v111);\n                    LOE09B(a1) = v110;\n                    v132 = v110;\n                    v30 = v108;\n                    if ( v133 >= 0 )\n                      break;\nLABEL_40:\n                    ++v135;\n                    if ( !--v124 )\n                      goto LABEL_65;\n                  }\n                  v31 = v133 + 1;\n                  while ( 1 )\n                  {\n                    LOE39DD(a1) = *(_DWORD *)(v29 + 4 * v30);\n                    v130 = a1;\n                    if ( (_DWORD)a1 != 16D0D535 )\n                      break;\n                    if ( !a5 )\n                      goto LABEL_38;\n                    LOE39DD(a1) = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a4 + 32))(*a4);\n                    if ( (int)a1 > v135 + v111 + a4[2] )\n                    {\n                      LOE39DD(a1) = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a4 + 44))(*a4);\n                      if ( (int)a1 <= v132 + a4[1] )\n                        goto LABEL_40;\n                      LOE39DD(a1) = v135 + v111 + a4[2];\n                      if ( (int)a1 < 0 )\n                        goto LABEL_40;\n                      LOE39DD(a1) = v132 + a4[1];\n                      if ( (int)a1 >= 0 )\n                      {\n                        Canvas = (Graphics::TCanvas *)Graphics::TBitmap::GetCanvas((Graphics::TBitmap *)*a4);\n                        Pixel = Graphics::TCanvas::GetPixel(Canvas, v132 + a4[1], v135 + v111 + a4[2]);\n                        v122 = (_BYTE *)(v139 + 4 * v132);\n                        v122[2] = Pixel;\n                        v122[1] = BYTE1(Pixel);\n                        LOE09B(a1) = (_BYTE)v122;\n                        *v122 = BYTE2(Pixel);\n                        goto LABEL_38;\n                      }\n                    }\nLABEL_39:\n                    if ( !--v31 )\n                      goto LABEL_40;\n                  }\n                  v128 = (100 - a7) * HIC0B9(v130) / 100;\n                  v129 = ((unsigned __int8)v130 + BYTE1(v130) + (unsigned int)BYTE2(v130)) / 3;\n                  v123 = (unsigned __int8 *)(v139 + 4 * v132);\n                  v88 = v128;\n                  v32 = System::__linkproc__ TRUNC();\n                  Math::Min((Math *)v32, v32, 255i64);\n                  v33 = unknown_libname_68(v88, HI6728D(v88));\n                  v123[2] = (unsigned __int16)(v33 + (v123[2] << 8)) >> 8;\n                  v89 = v128;\n                  v34 = System::__linkproc__ TRUNC();\n                  Math::Min((Math *)v34, v34, 255i64);\n                  v35 = unknown_libname_68(v89, HI6728D(v89));\n                  v123[1] = (unsigned __int16)(v35 + (v123[1] << 8)) >> 8;\n                  v90 = v128;\n                  v36 = System::__linkproc__ TRUNC();\n                  Math::Min((Math *)v36, v36, 255i64);\n                  v91 = unknown_libname_68(v90, HI6728D(v90));\n                  a1 = (v91 + (unsigned __int64)(*v123 << 8)) >> 8;\n                  *v123 = a1;\nLABEL_38:\n                  ++v132;\n                  ++v30;\n                  goto LABEL_39;\n                }\nLABEL_65:\n                if ( a8 )\n                {\n                  v55 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)v142 + 32))(v142);\n                  v106 = v55 - v113 - 1;\n                  v56 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 32))(a3);\n                  v134 = sub_42649A(v56 / 2 - 1, v106);\n                  HIC0B9(Pixel) = 255 / ((*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 32))(a3) / 2);\n                  LOE09B(Pixel) = -1;\n                  LOE09B(a1) = v134;\n                  if ( v134 > 0 )\n                  {\n                    v124 = v134;\n                    v135 = 1;\n                    do\n                    {\n                      v57 = v140 + v137 * (HI6728D(v109) - v135 - 1);\n                      v139 = v141 + v138 * (v135 + v113);\n                      v132 = v110;\n                      v58 = v108;\n                      if ( v133 >= 0 )\n                      {\n                        v59 = v133 + 1;\n                        do\n                        {\n                          v130 = *(_DWORD *)(v57 + 4 * v58);\n                          if ( v130 != 16D0D535 )\n                          {\n                            if ( a7 )\n                              v128 = (int)((100 - a7)\n                                         * (((unsigned int)(unsigned __int8)Pixel * ((v134 - v135) * HIC0B9(v130) / v134)) >> 9))\n                                   / 100;\n                            else\n                              v128 = ((unsigned int)(unsigned __int8)Pixel * ((v134 - v135) * HIC0B9(v130) / v134)) >> 9;\n                            v129 = ((unsigned __int8)v130 + BYTE1(v130) + (unsigned int)BYTE2(v130)) / 3;\n                            v118 = (unsigned __int8 *)(v139 + 4 * v132);\n                            v100 = v128;\n                            v60 = System::__linkproc__ TRUNC();\n                            Math::Min((Math *)v60, v60, 255i64);\n                            v61 = unknown_libname_68(v100, HI6728D(v100));\n                            v118[2] = (unsigned __int16)(v61 + (v118[2] << 8)) >> 8;\n                            v101 = v128;\n                            v62 = System::__linkproc__ TRUNC();\n                            Math::Min((Math *)v62, v62, 255i64);\n                            v63 = unknown_libname_68(v101, HI6728D(v101));\n                            v118[1] = (unsigned __int16)(v63 + (v118[1] << 8)) >> 8;\n                            v102 = v128;\n                            v64 = System::__linkproc__ TRUNC();\n                            Math::Min((Math *)v64, v64, 255i64);\n                            v103 = unknown_libname_68(v102, HI6728D(v102));\n                            *v118 = (unsigned __int16)(v103 + (*v118 << 8)) >> 8;\n                          }\n                          ++v132;\n                          ++v58;\n                          --v59;\n                        }\n                        while ( v59 );\n                      }\n                      LOE09B(a1) = HIC0B9(Pixel);\n                      LOE09B(Pixel) = Pixel - HIC0B9(Pixel);\n                      ++v135;\n                      --v124;\n                    }\n                    while ( v124 );\n                  }\n                }\n                return a1;\n              }\n              if ( !*((_BYTE *)a4 + 32) )\n              {\n                LOE09B(a1) = v134;\n                if ( v134 >= 0 )\n                {\n                  v124 = v134 + 1;\n                  v135 = 0;\n                  do\n                  {\n                    v38 = v140 + v137 * (v135 + HI6728D(v108));\n                    v139 = v141 + v138 * (v135 + v111);\n                    LOE09B(a1) = v110;\n                    v132 = v110;\n                    v39 = v108;\n                    if ( v133 >= 0 )\n                    {\n                      v40 = v133 + 1;\n                      do\n                      {\n                        v130 = *(_DWORD *)(v38 + 4 * v39);\n                        v129 = ((unsigned __int8)v130 + BYTE1(v130) + (unsigned int)BYTE2(v130)) / 3;\n                        v121 = (unsigned __int8 *)(v139 + 4 * v132);\n                        v92 = *(unsigned __int8 *)(v38 + 4 * v39 + 3);\n                        v41 = System::__linkproc__ TRUNC();\n                        Math::Min((Math *)v41, v41, 255i64);\n                        v42 = unknown_libname_68(v92, HI6728D(v92));\n                        v121[2] = (unsigned __int16)(v42 + (v121[2] << 8)) >> 8;\n                        v93 = *(unsigned __int8 *)(v38 + 4 * v39 + 3);\n                        v43 = System::__linkproc__ TRUNC();\n                        Math::Min((Math *)v43, v43, 255i64);\n                        v44 = unknown_libname_68(v93, HI6728D(v93));\n                        v121[1] = (unsigned __int16)(v44 + (v121[1] << 8)) >> 8;\n                        v94 = *(unsigned __int8 *)(v38 + 4 * v39 + 3);\n                        v45 = System::__linkproc__ TRUNC();\n                        Math::Min((Math *)v45, v45, 255i64);\n                        v95 = unknown_libname_68(v94, HI6728D(v94));\n                        LOE39DD(a1) = (v95 + (unsigned __int64)(*v121 << 8)) >> 8;\n                        *v121 = (unsigned __int16)(v95 + (*v121 << 8)) >> 8;\n                        ++v132;\n                        ++v39;\n                        --v40;\n                      }\n                      while ( v40 );\n                    }\n                    ++v135;\n                    --v124;\n                  }\n                  while ( v124 );\n                }\n                goto LABEL_65;\n              }\n              LOE09B(a1) = v134;\n              if ( v134 < 0 )\n                goto LABEL_65;\n              v124 = v134 + 1;\n              v135 = 0;\n              while ( 1 )\n              {\n                v46 = v140 + v137 * (v135 + HI6728D(v108));\n                v139 = v141 + v138 * (v135 + v111);\n                LOE09B(a1) = v110;\n                v132 = v110;\n                v47 = v108;\n                if ( v133 >= 0 )\n                  break;\nLABEL_64:\n                ++v135;\n                if ( !--v124 )\n                  goto LABEL_65;\n              }\n              v48 = v133 + 1;\n              v136 = 0;\n              while ( 1 )\n              {\n                v130 = *(_DWORD *)(v46 + 4 * v47);\n                LOE39DD(a1) = ((unsigned __int8)v130 + BYTE1(v130) + (unsigned int)BYTE2(v130)) / 3;\n                v129 = a1;\n                if ( v130 != 16D0D535 )\n                  break;\n                if ( !a5 )\n                  goto LABEL_62;\n                LOE39DD(a1) = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a4 + 32))(*a4);\n                if ( (int)a1 > v135 + v111 + a4[2] )\n                {\n                  LOE39DD(a1) = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a4 + 44))(*a4);\n                  if ( (int)a1 <= v132 + a4[1] )\n                    goto LABEL_64;\n                  LOE39DD(a1) = v135 + v111 + a4[2];\n                  if ( (int)a1 < 0 )\n                    goto LABEL_64;\n                  LOE39DD(a1) = v132 + a4[1];\n                  if ( (int)a1 >= 0 )\n                  {\n                    v54 = (Graphics::TCanvas *)Graphics::TBitmap::GetCanvas((Graphics::TBitmap *)*a4);\n                    Pixel = Graphics::TCanvas::GetPixel(v54, v136 + v110 + a4[1], v135 + v111 + a4[2]);\n                    v119 = (_BYTE *)(v139 + 4 * v132);\n                    v119[2] = Pixel;\n                    v119[1] = BYTE1(Pixel);\n                    LOE09B(a1) = (_BYTE)v119;\n                    *v119 = BYTE2(Pixel);\n                    goto LABEL_62;\n                  }\n                }\nLABEL_63:\n                ++v136;\n                if ( !--v48 )\n                  goto LABEL_64;\n              }\n              v120 = (unsigned __int8 *)(v139 + 4 * v132);\n              v96 = *(unsigned __int8 *)(v46 + 4 * v47 + 3);\n              v49 = System::__linkproc__ TRUNC();\n              Math::Min((Math *)v49, v49, 255i64);\n              v50 = unknown_libname_68(v96, HI6728D(v96));\n              v120[2] = (unsigned __int16)(v50 + (v120[2] << 8)) >> 8;\n              v97 = *(unsigned __int8 *)(v46 + 4 * v47 + 3);\n              v51 = System::__linkproc__ TRUNC();\n              Math::Min((Math *)v51, v51, 255i64);\n              v52 = unknown_libname_68(v97, HI6728D(v97));\n              v120[1] = (unsigned __int16)(v52 + (v120[1] << 8)) >> 8;\n              v98 = *(unsigned __int8 *)(v46 + 4 * v47 + 3);\n              v53 = System::__linkproc__ TRUNC();\n              Math::Min((Math *)v53, v53, 255i64);\n              v99 = unknown_libname_68(v98, HI6728D(v98));\n              a1 = (v99 + (unsigned __int64)(*v120 << 8)) >> 8;\n              *v120 = a1;\nLABEL_62:\n              ++v132;\n              ++v47;\n              goto LABEL_63;\n            }\n            if ( a7 )\n            {\n              if ( !*((_BYTE *)a4 + 32) )\n              {\n                LOE09B(a1) = v134;\n                if ( v134 >= 0 )\n                {\n                  v124 = v134 + 1;\n                  v135 = 0;\n                  do\n                  {\n                    v65 = v140 + v137 * (v135 + HI6728D(v108));\n                    LOE09B(a1) = v141 + v138 * (v135 + v111);\n                    v139 = v141 + v138 * (v135 + v111);\n                    if ( v133 >= 0 )\n                    {\n                      v66 = v133 + 1;\n                      v136 = 0;\n                      do\n                      {\n                        v132 = v136 + v110;\n                        v130 = *(_DWORD *)(v65 + 4 * (v136 + v108));\n                        v128 = (100 - a7) * HIC0B9(v130) / 100;\n                        LOE39DD(a1) = v139 + 4 * (v136 + v110);\n                        *(_BYTE *)(a1 + 2) = (unsigned __int16)((*(unsigned __int8 *)(a1 + 2) << 8)\n                                                              + v128 * (BYTE2(v130) - *(unsigned __int8 *)(a1 + 2))) >> 8;\n                        *(_BYTE *)(a1 + 1) = (unsigned __int16)((*(unsigned __int8 *)(a1 + 1) << 8)\n                                                              + v128 * (BYTE1(v130) - *(unsigned __int8 *)(a1 + 1))) >> 8;\n                        *(_BYTE *)a1 = (unsigned __int16)((*(unsigned __int8 *)a1 << 8)\n                                                        + v128 * ((unsigned __int8)v130 - *(unsigned __int8 *)a1)) >> 8;\n                        ++v136;\n                        --v66;\n                      }\n                      while ( v66 );\n                    }\n                    ++v135;\n                    --v124;\n                  }\n                  while ( v124 );\n                }\n                goto LABEL_126;\n              }\n              LOE09B(a1) = v134;\n              if ( v134 >= 0 )\n              {\n                v124 = v134 + 1;\n                v135 = 0;\n                while ( 1 )\n                {\n                  v67 = v140 + v137 * (v135 + HI6728D(v108));\n                  v139 = v141 + v138 * (v135 + v111);\n                  LOE09B(a1) = v110;\n                  v132 = v110;\n                  v68 = v108;\n                  if ( v133 >= 0 )\n                    break;\nLABEL_101:\n                  ++v135;\n                  if ( !--v124 )\n                    goto LABEL_126;\n                }\n                v69 = v133 + 1;\n                while ( 1 )\n                {\n                  LOE39DD(a1) = *(_DWORD *)(v67 + 4 * v68);\n                  v130 = a1;\n                  if ( (_DWORD)a1 != 16D0D535 )\n                    break;\n                  if ( !a5 )\n                    goto LABEL_99;\n                  LOE39DD(a1) = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a4 + 32))(*a4);\n                  if ( (int)a1 > v135 + v111 + a4[2] )\n                  {\n                    LOE39DD(a1) = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a4 + 44))(*a4);\n                    if ( (int)a1 <= v132 + a4[1] )\n                      goto LABEL_101;\n                    LOE39DD(a1) = v135 + v111 + a4[2];\n                    if ( (int)a1 < 0 )\n                      goto LABEL_101;\n                    LOE39DD(a1) = v132 + a4[1];\n                    if ( (int)a1 >= 0 )\n                    {\n                      v70 = (Graphics::TCanvas *)Graphics::TBitmap::GetCanvas((Graphics::TBitmap *)*a4);\n                      Pixel = Graphics::TCanvas::GetPixel(v70, v132 + a4[1], v135 + v111 + a4[2]);\n                      v117 = (_BYTE *)(v139 + 4 * v132);\n                      v117[2] = Pixel;\n                      v117[1] = BYTE1(Pixel);\n                      LOE09B(a1) = (_BYTE)v117;\n                      *v117 = BYTE2(Pixel);\n                      goto LABEL_99;\n                    }\n                  }\nLABEL_100:\n                  if ( !--v69 )\n                    goto LABEL_101;\n                }\n                v128 = (100 - a7) * HIC0B9(v130) / 100;\n                LOE39DD(a1) = v139 + 4 * v132;\n                *(_BYTE *)(a1 + 2) = (unsigned __int16)((*(unsigned __int8 *)(a1 + 2) << 8)\n                                                      + v128 * (BYTE2(v130) - *(unsigned __int8 *)(a1 + 2))) >> 8;\n                *(_BYTE *)(a1 + 1) = (unsigned __int16)((*(unsigned __int8 *)(a1 + 1) << 8)\n                                                      + v128 * (BYTE1(v130) - *(unsigned __int8 *)(a1 + 1))) >> 8;\n                *(_BYTE *)a1 = (unsigned __int16)((*(unsigned __int8 *)a1 << 8)\n                                                + v128 * ((unsigned __int8)v130 - *(unsigned __int8 *)a1)) >> 8;\nLABEL_99:\n                ++v132;\n                ++v68;\n                goto LABEL_100;\n              }\nLABEL_126:\n              if ( a8 )\n              {\n                v78 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)v142 + 32))(v142);\n                v107 = v78 - v113 - 1;\n                v79 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 32))(a3);\n                v134 = sub_42649A(v79 / 2 - 1, v107);\n                HIC0B9(Pixel) = 255 / (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a3 + 32))(a3);\n                LOE09B(Pixel) = -1;\n                LOE09B(a1) = v134;\n                if ( v134 > 0 )\n                {\n                  v124 = v134;\n                  v135 = 1;\n                  do\n                  {\n                    v80 = v140 + v137 * (HI6728D(v109) - v135 - 1);\n                    v139 = v141 + v138 * (v135 + v113);\n                    v132 = v110;\n                    v81 = v108;\n                    if ( v133 >= 0 )\n                    {\n                      v82 = v133 + 1;\n                      do\n                      {\n                        v130 = *(_DWORD *)(v80 + 4 * v81);\n                        if ( v130 != 16D0D535 )\n                        {\n                          if ( a7 )\n                            v128 = (int)((100 - a7)\n                                       * (((unsigned int)(unsigned __int8)Pixel * ((v134 - v135) * HIC0B9(v130) / v134)) >> 9))\n                                 / 100;\n                          else\n                            v128 = ((unsigned int)(unsigned __int8)Pixel * ((v134 - v135) * HIC0B9(v130) / v134)) >> 9;\n                          v83 = (unsigned __int8 *)(v139 + 4 * v132);\n                          v83[2] = (unsigned __int16)((v83[2] << 8) + v128 * (BYTE2(v130) - v83[2])) >> 8;\n                          v83[1] = (unsigned __int16)((v83[1] << 8) + v128 * (BYTE1(v130) - v83[1])) >> 8;\n                          *v83 = (unsigned __int16)((*v83 << 8) + v128 * ((unsigned __int8)v130 - *v83)) >> 8;\n                        }\n                        ++v132;\n                        ++v81;\n                        --v82;\n                      }\n                      while ( v82 );\n                    }\n                    LOE09B(a1) = HIC0B9(Pixel);\n                    LOE09B(Pixel) = Pixel - HIC0B9(Pixel);\n                    ++v135;\n                    --v124;\n                  }\n                  while ( v124 );\n                }\n              }\n              return a1;\n            }\n            if ( !*((_BYTE *)a4 + 32) )\n            {\n              LOE09B(a1) = v134;\n              if ( v134 >= 0 )\n              {\n                v124 = v134 + 1;\n                v135 = 0;\n                do\n                {\n                  v71 = v140 + v137 * (v135 + HI6728D(v108));\n                  v139 = v141 + v138 * (v135 + v111);\n                  LOE09B(a1) = v110;\n                  v132 = v110;\n                  v72 = v108;\n                  if ( v133 >= 0 )\n                  {\n                    v73 = v133 + 1;\n                    do\n                    {\n                      v116 = (unsigned __int8 *)(v139 + 4 * v132);\n                      v116[2] = (unsigned __int16)((v116[2] << 8)\n                                                 + *(unsigned __int8 *)(v71 + 4 * v72 + 3)\n                                                 * (*(unsigned __int8 *)(v71 + 4 * v72 + 2) - v116[2])) >> 8;\n                      v116[1] = (unsigned __int16)((v116[1] << 8)\n                                                 + *(unsigned __int8 *)(v71 + 4 * v72 + 3)\n                                                 * (*(unsigned __int8 *)(v71 + 4 * v72 + 1) - v116[1])) >> 8;\n                      *v116 = (unsigned __int16)((*v116 << 8)\n                                               + *(unsigned __int8 *)(v71 + 4 * v72 + 3)\n                                               * (*(unsigned __int8 *)(v71 + 4 * v72) - *v116)) >> 8;\n                      LOE09B(a1) = sub_42086C(\n                                     *(unsigned __int8 *)(v139 + 4 * v132 + 3),\n                                     *(unsigned __int8 *)(v71 + 4 * v72 + 3));\n                      v116[3] = a1;\n                      ++v132;\n                      ++v72;\n                      --v73;\n                    }\n                    while ( v73 );\n                  }\n                  ++v135;\n                  --v124;\n                }\n                while ( v124 );\n              }\n              goto LABEL_126;\n            }\n            LOE09B(a1) = v134;\n            if ( v134 < 0 )\n              goto LABEL_126;\n            v124 = v134 + 1;\n            v135 = 0;\n            while ( 1 )\n            {\n              v74 = v140 + v137 * (v135 + HI6728D(v108));\n              v139 = v141 + v138 * (v135 + v111);\n              LOE09B(a1) = v110;\n              v132 = v110;\n              v75 = v108;\n              if ( v133 >= 0 )\n                break;\nLABEL_125:\n              ++v135;\n              if ( !--v124 )\n                goto LABEL_126;\n            }\n            v76 = v133 + 1;\n            v136 = 0;\n            while ( 1 )\n            {\n              LOE39DD(a1) = *(_DWORD *)(v74 + 4 * v75);\n              v130 = a1;\n              if ( (_DWORD)a1 != 16D0D535 )\n                break;\n              if ( !a5 )\n                goto LABEL_123;\n              LOE39DD(a1) = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a4 + 32))(*a4);\n              if ( (int)a1 > v135 + v111 + a4[2] )\n              {\n                LOE39DD(a1) = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a4 + 44))(*a4);\n                if ( (int)a1 <= v132 + a4[1] )\n                  goto LABEL_125;\n                LOE39DD(a1) = v135 + v111 + a4[2];\n                if ( (int)a1 < 0 )\n                  goto LABEL_125;\n                LOE39DD(a1) = v132 + a4[1];\n                if ( (int)a1 >= 0 )\n                {\n                  v77 = (Graphics::TCanvas *)Graphics::TBitmap::GetCanvas((Graphics::TBitmap *)*a4);\n                  Pixel = Graphics::TCanvas::GetPixel(v77, v136 + v110 + a4[1], v135 + v111 + a4[2]);\n                  v114 = (_BYTE *)(v139 + 4 * v132);\n                  v114[2] = Pixel;\n                  v114[1] = BYTE1(Pixel);\n                  LOE09B(a1) = (_BYTE)v114;\n                  *v114 = BYTE2(Pixel);\n                  goto LABEL_123;\n                }\n              }\nLABEL_124:\n              ++v136;\n              if ( !--v76 )\n                goto LABEL_125;\n            }\n            v115 = (unsigned __int8 *)(v139 + 4 * v132);\n            v115[2] = (unsigned __int16)((v115[2] << 8)\n                                       + *(unsigned __int8 *)(v74 + 4 * v75 + 3)\n                                       * (*(unsigned __int8 *)(v74 + 4 * v75 + 2) - v115[2])) >> 8;\n            v115[1] = (unsigned __int16)((v115[1] << 8)\n                                       + *(unsigned __int8 *)(v74 + 4 * v75 + 3)\n                                       * (*(unsigned __int8 *)(v74 + 4 * v75 + 1) - v115[1])) >> 8;\n            *v115 = (unsigned __int16)((*v115 << 8)\n                                     + *(unsigned __int8 *)(v74 + 4 * v75 + 3)\n                                     * (*(unsigned __int8 *)(v74 + 4 * v75) - *v115)) >> 8;\n            LOE09B(a1) = sub_42086C(*(unsigned __int8 *)(v139 + 4 * v132 + 3), *(unsigned __int8 *)(v74 + 4 * v75 + 3));\n            v115[3] = a1;\nLABEL_123:\n            ++v132;\n            ++v75;\n            goto LABEL_124;\n          }\n        }\n      }\n    }\n  }\n  return a1;\n}\n// 406496: using guessed type double __usercall System::__linkproc__ FSafeDivide@<st0>(double@<st0>);\n// 40A409: using guessed type __int64 __stdcall unknown_libname_68(_DWORD, _DWORD);\n// 427831: using guessed type int __fastcall Graphics::TBitmap::SetPixelFormat(_DWORD, _DWORD);\n\n"
    },
    {
        "Function": "sub_4FD91F",
        "Total XOR and shift operations": 24,
        "XOR operations": 0,
        "Shift operations": 24,
        "Operation percentage": "6.63%",
        "Function Body": "\nint __fastcall sub_4FD91F(\n        int *a1,\n        int *a2,\n        Graphics::TBitmap *this,\n        Graphics::TBitmap *a4,\n        _DWORD *a5,\n        char a6,\n        Graphics::TBitmap *a7)\n{\n  int v8; // ebx\n  int result; // eax\n  int v10; // ebx\n  int v11; // eax\n  int v12; // edi\n  int v13; // ebx\n  int v14; // esi\n  unsigned __int8 *v15; // eax\n  unsigned int v16; // edx\n  int v17; // edi\n  int v18; // ebx\n  int v19; // esi\n  unsigned int v20; // edx\n  int v21; // edi\n  int v22; // ebx\n  int v23; // esi\n  unsigned __int8 *v24; // eax\n  unsigned int v25; // edx\n  int v26; // edi\n  int v27; // ebx\n  int v28; // esi\n  int v29; // [esp+Ch] [ebp-74h]\n  int v30; // [esp+10h] [ebp-70h]\n  int v31; // [esp+14h] [ebp-6Ch]\n  int v32; // [esp+18h] [ebp-68h]\n  int v33; // [esp+1Ch] [ebp-64h]\n  int v34; // [esp+20h] [ebp-60h]\n  int v35; // [esp+24h] [ebp-5Ch]\n  unsigned __int8 *v36; // [esp+2Ch] [ebp-54h]\n  unsigned __int8 *v37; // [esp+30h] [ebp-50h]\n  unsigned __int8 *v38; // [esp+34h] [ebp-4Ch]\n  unsigned __int8 *v39; // [esp+38h] [ebp-48h]\n  int v40; // [esp+3Ch] [ebp-44h]\n  int v41; // [esp+3Ch] [ebp-44h]\n  int v42; // [esp+3Ch] [ebp-44h]\n  int v43; // [esp+3Ch] [ebp-44h]\n  int v44; // [esp+40h] [ebp-40h]\n  int v45; // [esp+44h] [ebp-3Ch]\n  int v46; // [esp+48h] [ebp-38h]\n  int v47; // [esp+4Ch] [ebp-34h]\n  int v48; // [esp+50h] [ebp-30h]\n  int v49; // [esp+54h] [ebp-2Ch]\n  int v50; // [esp+58h] [ebp-28h]\n  int v51; // [esp+58h] [ebp-28h]\n  int v52; // [esp+5Ch] [ebp-24h]\n  int v53; // [esp+5Ch] [ebp-24h]\n  int i; // [esp+5Ch] [ebp-24h]\n  int v55; // [esp+5Ch] [ebp-24h]\n  int v56; // [esp+60h] [ebp-20h]\n  int v57; // [esp+64h] [ebp-1Ch] BYREF\n  int v58; // [esp+68h] [ebp-18h] BYREF\n  int v59; // [esp+6Ch] [ebp-14h]\n  int v60; // [esp+70h] [ebp-10h] BYREF\n  int v61; // [esp+74h] [ebp-Ch]\n  int v62; // [esp+78h] [ebp-8h]\n  int v63; // [esp+7Ch] [ebp-4h] BYREF\n\n  v29 = *a2;\n  v30 = a2[1];\n  v31 = a2[2];\n  v32 = a2[3];\n  v33 = *a1;\n  v34 = a1[1];\n  v35 = a1[2];\n  v8 = a1[3] - v34;\n  if ( v8 > v32 - v30 )\n    v8 = v32 - v30;\n  if ( v8 > (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)this + 32))(this) - v34 )\n    v8 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)this + 32))(this) - v34;\n  result = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a4 + 32))(a4) - v30;\n  if ( v8 <= result )\n  {\n    v10 = v8 - 1;\n  }\n  else\n  {\n    result = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a4 + 32))(a4);\n    v10 = result - v30 - 1;\n  }\n  if ( v10 >= 0 )\n  {\n    v50 = v35 - v33;\n    if ( v31 - v29 < v35 - v33 )\n      v50 = v31 - v29;\n    if ( (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)this + 44))(this) - v33 < v50 )\n      v50 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)this + 44))(this) - v33;\n    result = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a4 + 44))(a4) - v29;\n    if ( result >= v50 )\n    {\n      v51 = v50 - 1;\n    }\n    else\n    {\n      result = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a4 + 44))(a4) - v29 - 1;\n      v51 = result;\n    }\n    if ( v51 >= 0 )\n    {\n      if ( v29 <= v33 )\n      {\n        if ( v29 < 0 )\n        {\n          v33 -= v29;\n          v51 += v29;\n          v29 = 0;\n        }\n      }\n      else if ( v33 < 0 )\n      {\n        v29 -= v33;\n        v51 += v33;\n        v33 = 0;\n      }\n      if ( v30 <= v34 )\n      {\n        if ( v30 < 0 )\n        {\n          v34 -= v30;\n          v10 += v30;\n          v30 = 0;\n        }\n      }\n      else if ( v34 < 0 )\n      {\n        v30 -= v34;\n        v10 += v34;\n        v34 = 0;\n      }\n      HIC0B9(dword_50FEC3) = 0;\n      HIC0B9(v44) = *((_BYTE *)a5 + 15);\n      BYTE2(v44) = *((_BYTE *)a5 + 12);\n      BYTE1(v44) = *((_BYTE *)a5 + 13);\n      LOE09B(v44) = *((_BYTE *)a5 + 14);\n      v47 = (*((_DWORD *)a7 + 6) - *((_DWORD *)a7 + 4)) / 2;\n      v11 = (*(int (__fastcall **)(Graphics::TBitmap *))(*(_DWORD *)a4 + 32))(a4);\n      v46 = sub_42649A(v47 + v30, v11 - v10 - 1);\n      v45 = v33 + a5[1];\n      result = sub_4E769D(a4, &v63, &v58);\n      if ( (_BYTE)result )\n      {\n        result = sub_4E769D(this, &v60, &v57);\n        if ( (_BYTE)result )\n        {\n          result = (int)a5;\n          if ( !*((_BYTE *)a5 + 32) )\n          {\n            if ( a6 )\n            {\n              if ( v10 >= 0 )\n              {\n                v40 = v10 + 1;\n                v52 = 0;\n                do\n                {\n                  v62 = v63 + v58 * (v52 + v30);\n                  v59 = v60 + v57 * (v52 + v34);\n                  result = v63 + v58 * (v52 + v46);\n                  v61 = result;\n                  v12 = v33;\n                  v13 = v29;\n                  if ( v51 >= 0 )\n                  {\n                    v14 = v51 + 1;\n                    do\n                    {\n                      v15 = (unsigned __int8 *)(v62 + 4 * v13);\n                      v39 = (unsigned __int8 *)(v59 + 4 * v12);\n                      if ( *(_DWORD *)v15 == 16D0D535 )\n                      {\n                        result = v59;\n                        *(_DWORD *)(v59 + 4 * v12) = v44;\n                      }\n                      else\n                      {\n                        v39[2] = (unsigned __int16)((v15[2] << 8)\n                                                  + *(unsigned __int8 *)(v61 + 4 * v13 + 2) * (v39[2] - v15[2])) >> 8;\n                        v39[1] = (unsigned __int16)((v15[1] << 8)\n                                                  + *(unsigned __int8 *)(v61 + 4 * v13 + 1) * (v39[1] - v15[1])) >> 8;\n                        v16 = ((*v15 << 8) + *(unsigned __int8 *)(v61 + 4 * v13) * (*v39 - (unsigned int)*v15)) >> 8;\n                        result = (int)v39;\n                        *v39 = v16;\n                      }\n                      ++v12;\n                      ++v13;\n                      --v14;\n                    }\n                    while ( v14 );\n                  }\n                  ++v52;\n                  --v40;\n                }\n                while ( v40 );\n              }\n            }\n            else if ( v10 >= 0 )\n            {\n              v41 = v10 + 1;\n              v53 = 0;\n              do\n              {\n                v62 = v63 + v58 * (v53 + v30);\n                v59 = v60 + v57 * (v53 + v34);\n                result = v63 + v58 * (v53 + v46);\n                v61 = result;\n                v17 = v33;\n                v18 = v29;\n                if ( v51 >= 0 )\n                {\n                  v19 = v51 + 1;\n                  do\n                  {\n                    v38 = (unsigned __int8 *)(v59 + 4 * v17);\n                    result = v62 + 4 * v18;\n                    if ( *(_DWORD *)result != 16D0D535 )\n                    {\n                      v38[2] = (unsigned __int16)((*(unsigned __int8 *)(result + 2) << 8)\n                                                + *(unsigned __int8 *)(v61 + 4 * v18 + 2)\n                                                * (v38[2] - *(unsigned __int8 *)(result + 2))) >> 8;\n                      v38[1] = (unsigned __int16)((*(unsigned __int8 *)(result + 1) << 8)\n                                                + *(unsigned __int8 *)(v61 + 4 * v18 + 1)\n                                                * (v38[1] - *(unsigned __int8 *)(result + 1))) >> 8;\n                      v20 = ((*(unsigned __int8 *)result << 8)\n                           + *(unsigned __int8 *)(v61 + 4 * v18) * (*v38 - (unsigned int)*(unsigned __int8 *)result)) >> 8;\n                      result = (int)v38;\n                      *v38 = v20;\n                    }\n                    ++v17;\n                    ++v18;\n                    --v19;\n                  }\n                  while ( v19 );\n                }\n                ++v53;\n                --v41;\n              }\n              while ( v41 );\n            }\n            return result;\n          }\n          v49 = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a5 + 32))(*a5);\n          result = (*(int (__fastcall **)(_DWORD))(*(_DWORD *)*a5 + 44))(*a5);\n          v48 = result;\n          if ( a6 )\n          {\n            if ( v10 < 0 )\n              return result;\n            v42 = v10 + 1;\n            for ( i = 0; ; ++i )\n            {\n              v62 = v63 + v58 * (i + v30);\n              v59 = v60 + v57 * (i + v34);\n              result = v63 + v58 * (i + v46);\n              v61 = result;\n              v21 = v33;\n              v22 = v29;\n              if ( v51 >= 0 )\n                break;\nLABEL_64:\n              if ( !--v42 )\n                return result;\n            }\n            v23 = v51 + 1;\n            v56 = 0;\n            while ( 1 )\n            {\n              v37 = (unsigned __int8 *)(v59 + 4 * v21);\n              v24 = (unsigned __int8 *)(v62 + 4 * v22);\n              v37[3] = -1;\n              if ( *(_DWORD *)v24 != 16D0D535 )\n                break;\n              result = i + v34 + a5[2];\n              if ( result < v49 )\n              {\n                result = v56 + v45;\n                if ( v56 + v45 >= v48 )\n                  goto LABEL_64;\n                result = i + v34 + a5[2];\n                if ( result < 0 )\n                  goto LABEL_64;\n                result = -v45;\n                if ( -v45 <= v56 )\n                {\n                  result = sub_462E9A((Graphics::TBitmap *)*a5, v56 + v45, i + v34 + a5[2]);\n                  *(_DWORD *)v37 = result;\n                  goto LABEL_62;\n                }\n              }\nLABEL_63:\n              ++v56;\n              if ( !--v23 )\n                goto LABEL_64;\n            }\n            v37[2] = (unsigned __int16)((v24[2] << 8) + *(unsigned __int8 *)(v61 + 4 * v22 + 2) * (v37[2] - v24[2])) >> 8;\n            v37[1] = (unsigned __int16)((v24[1] << 8) + *(unsigned __int8 *)(v61 + 4 * v22 + 1) * (v37[1] - v24[1])) >> 8;\n            v25 = ((*v24 << 8) + *(unsigned __int8 *)(v61 + 4 * v22) * (*v37 - (unsigned int)*v24)) >> 8;\n            result = (int)v37;\n            *v37 = v25;\nLABEL_62:\n            ++v21;\n            ++v22;\n            goto LABEL_63;\n          }\n          if ( v10 >= 0 )\n          {\n            v43 = v10 + 1;\n            v55 = 0;\n            do\n            {\n              v62 = v63 + v58 * (v55 + v30);\n              v59 = v60 + v57 * (v55 + v34);\n              result = v63 + v58 * (v55 + v46);\n              v61 = result;\n              v26 = v33;\n              v27 = v29;\n              if ( v51 >= 0 )\n              {\n                v28 = v51 + 1;\n                do\n                {\n                  result = v59 + 4 * v26;\n                  v36 = (unsigned __int8 *)(v62 + 4 * v27);\n                  *(_BYTE *)(result + 2) = (unsigned __int16)((v36[2] << 8)\n                                                            + *(unsigned __int8 *)(v61 + 4 * v27 + 2)\n                                                            * (*(unsigned __int8 *)(result + 2) - v36[2])) >> 8;\n                  *(_BYTE *)(result + 1) = (unsigned __int16)((v36[1] << 8)\n                                                            + *(unsigned __int8 *)(v61 + 4 * v27 + 1)\n                                                            * (*(unsigned __int8 *)(result + 1) - v36[1])) >> 8;\n                  *(_BYTE *)result = (unsigned __int16)((*v36 << 8)\n                                                      + *(unsigned __int8 *)(v61 + 4 * v27)\n                                                      * (*(unsigned __int8 *)result - *v36)) >> 8;\n                  *(_BYTE *)(result + 3) = -1;\n                  ++v26;\n                  ++v27;\n                  --v28;\n                }\n                while ( v28 );\n              }\n              ++v55;\n              --v43;\n            }\n            while ( v43 );\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n// 50FEC3: using guessed type int dword_50FEC3;\n// 4FD91F: using guessed type _DWORD *arg_8;\n\n"
    },
    {
        "Function": "sub_458B6B",
        "Total XOR and shift operations": 70,
        "XOR operations": 1,
        "Shift operations": 69,
        "Operation percentage": "6.03%",
        "Function Body": "\nint __fastcall sub_458B6B(unsigned __int8 **a1, int a2)\n{\n  unsigned __int8 *v3; // ebx\n  unsigned int v4; // edi\n  unsigned __int8 *v5; // ebp\n  unsigned int v6; // esi\n  int v7; // eax\n  unsigned int v8; // eax\n  int v9; // ecx\n  int v10; // eax\n  int v11; // eax\n  int v12; // eax\n  int v13; // eax\n  int v14; // eax\n  int v15; // eax\n  int v16; // ecx\n  int v17; // eax\n  int v18; // ecx\n  int v19; // edx\n  int v20; // eax\n  int v21; // eax\n  int v22; // edx\n  unsigned int v23; // eax\n  int v24; // edx\n  unsigned int v25; // esi\n  int v26; // edx\n  bool v27; // cf\n  int v28; // edx\n  int v29; // edx\n  int v30; // ecx\n  int v31; // eax\n  int v32; // eax\n  int v33; // eax\n  int v34; // eax\n  int v35; // eax\n  int v36; // eax\n  int v37; // edx\n  int v38; // eax\n  int v39; // eax\n  int v40; // edx\n  int v41; // eax\n  int v42; // ecx\n  int v44; // eax\n  int v45; // eax\n  int v46; // eax\n  int v47; // eax\n  int v48; // eax\n  int v49; // eax\n  unsigned int v50; // eax\n  unsigned int v51; // eax\n  unsigned __int8 *v52; // eax\n  int v53; // eax\n  unsigned int v54; // eax\n  int v55; // eax\n  int v56; // eax\n  unsigned int v57; // eax\n  int v58; // ecx\n  int v59; // ecx\n  int v60; // eax\n  unsigned __int8 *v63; // [esp+8h] [ebp-3Ch]\n  unsigned int v64; // [esp+Ch] [ebp-38h]\n  unsigned int v65; // [esp+10h] [ebp-34h]\n  unsigned int v66; // [esp+10h] [ebp-34h]\n  unsigned int v67; // [esp+10h] [ebp-34h]\n  unsigned int v68; // [esp+10h] [ebp-34h]\n  unsigned int v69; // [esp+10h] [ebp-34h]\n  unsigned int v70; // [esp+14h] [ebp-30h]\n  unsigned int v71; // [esp+14h] [ebp-30h]\n  int v72; // [esp+18h] [ebp-2Ch]\n  unsigned int v73; // [esp+18h] [ebp-2Ch]\n  unsigned int v74; // [esp+18h] [ebp-2Ch]\n  unsigned int v75; // [esp+1Ch] [ebp-28h]\n  unsigned int v76; // [esp+1Ch] [ebp-28h]\n  unsigned int v77; // [esp+1Ch] [ebp-28h]\n  unsigned int v78; // [esp+1Ch] [ebp-28h]\n  int v79; // [esp+1Ch] [ebp-28h]\n  unsigned int v80; // [esp+1Ch] [ebp-28h]\n  int v81; // [esp+20h] [ebp-24h]\n  int v82; // [esp+20h] [ebp-24h]\n  int v83; // [esp+20h] [ebp-24h]\n  int v84; // [esp+24h] [ebp-20h]\n  int v85; // [esp+24h] [ebp-20h]\n  int v86; // [esp+28h] [ebp-1Ch]\n  int v87; // [esp+28h] [ebp-1Ch]\n  int v88; // [esp+28h] [ebp-1Ch]\n  __int16 v89; // [esp+28h] [ebp-1Ch]\n  int v90; // [esp+2Ch] [ebp-18h]\n  int v91[5]; // [esp+30h] [ebp-14h] BYREF\n\n  if ( !a1 || !a1[7] || !a1[3] || !*a1 && a1[1] )\n    return -2;\n  v3 = a1[7];\n  if ( *(_DWORD *)v3 == 11 )\n    *(_DWORD *)v3 = 12;\n  v63 = a1[3];\n  v64 = (unsigned int)a1[4];\n  v4 = (unsigned int)a1[1];\n  v5 = *a1;\n  v65 = *((_DWORD *)v3 + 14);\n  v6 = *((_DWORD *)v3 + 15);\n  v70 = v4;\n  v72 = v64;\n  v90 = 0;\n  while ( 2 )\n  {\n    switch ( *(_DWORD *)v3 )\n    {\n      case 0:\n        if ( !*((_DWORD *)v3 + 2) )\n        {\n          *(_DWORD *)v3 = 12;\n          continue;\n        }\n        for ( ; v6 < 0x10; --v4 )\n        {\n          if ( !v4 )\n            goto LABEL_315;\n          v7 = *v5++;\n          v65 += v7 << v6;\n          v6 += 8;\n        }\n        if ( (v3[8] & 2) != 0 && v65 == 35615 )\n        {\n          *((_DWORD *)v3 + 6) = sub_464B1F(0, 0, 0);\n          LOB30E(v91[0]) = -29921;\n          *((_DWORD *)v3 + 6) = sub_464B1F(*((_DWORD *)v3 + 6), v91, 2u);\n          v65 = 0;\n          v6 = 0;\n          *(_DWORD *)v3 = 1;\n        }\n        else\n        {\n          *((_DWORD *)v3 + 4) = 0;\n          if ( *((_DWORD *)v3 + 8) )\n            *(_DWORD *)(*((_DWORD *)v3 + 8) + 48) = -1;\n          if ( (v3[8] & 1) != 0 && !(((v65 >> 8) + ((unsigned __int8)v65 << 8)) % 0x1F) )\n          {\n            if ( (v65 & 0xF) == 8 )\n            {\n              v65 >>= 4;\n              v6 -= 4;\n              if ( (v65 & 0xF) + 8 <= *((_DWORD *)v3 + 9) )\n              {\n                *((_DWORD *)v3 + 5) = 1 << ((v65 & 0xF) + 8);\n                v8 = sub_4665FF(0, 0, 0);\n                *((_DWORD *)v3 + 6) = v8;\n                a1[12] = (unsigned __int8 *)v8;\n                if ( (v65 & 0x200) != 0 )\n                  v9 = 9;\n                else\n                  v9 = 11;\n                *(_DWORD *)v3 = v9;\n                v65 = 0;\n                v6 = 0;\n              }\n              else\n              {\n                a1[6] = (unsigned __int8 *)aInvalidWindowS;\n                *(_DWORD *)v3 = 27;\n              }\n            }\n            else\n            {\n              a1[6] = (unsigned __int8 *)aUnknownCompres;\n              *(_DWORD *)v3 = 27;\n            }\n          }\n          else\n          {\n            a1[6] = (unsigned __int8 *)aIncorrectHeade;\n            *(_DWORD *)v3 = 27;\n          }\n        }\n        continue;\n      case 1:\n        if ( v6 >= 0x10 )\n          goto LABEL_35;\n        do\n        {\n          if ( !v4 )\n            goto LABEL_315;\n          v10 = *v5++;\n          v65 += v10 << v6;\n          v6 += 8;\n          --v4;\n        }\n        while ( v6 < 0x10 );\nLABEL_35:\n        *((_DWORD *)v3 + 4) = v65;\n        if ( (unsigned __int8)v65 != 8 )\n        {\n          a1[6] = (unsigned __int8 *)aUnknownCompres;\n          *(_DWORD *)v3 = 27;\n          continue;\n        }\n        if ( (v3[17] & 0xE0) != 0 )\n        {\n          a1[6] = (unsigned __int8 *)aUnknownHeaderF;\n          *(_DWORD *)v3 = 27;\n          continue;\n        }\n        if ( *((_DWORD *)v3 + 8) )\n          **((_DWORD **)v3 + 8) = (v65 >> 8) & 1;\n        if ( (v3[17] & 2) != 0 )\n        {\n          LOB30E(v91[0]) = v65;\n          *((_DWORD *)v3 + 6) = sub_464B1F(*((_DWORD *)v3 + 6), v91, 2u);\n        }\n        v6 = 0;\n        v65 = 0;\n        *(_DWORD *)v3 = 2;\nLABEL_44:\n        if ( v6 < 0x20 )\n        {\n          while ( v4 )\n          {\n            v11 = *v5++;\n            v65 += v11 << v6;\n            v6 += 8;\n            --v4;\n            if ( v6 >= 0x20 )\n              goto LABEL_47;\n          }\n          goto LABEL_315;\n        }\nLABEL_47:\n        if ( *((_DWORD *)v3 + 8) )\n          *(_DWORD *)(*((_DWORD *)v3 + 8) + 4) = v65;\n        if ( (v3[17] & 2) != 0 )\n        {\n          v91[0] = v65;\n          *((_DWORD *)v3 + 6) = sub_464B1F(*((_DWORD *)v3 + 6), v91, 4u);\n        }\n        v6 = 0;\n        v65 = 0;\n        *(_DWORD *)v3 = 3;\nLABEL_52:\n        if ( v6 < 0x10 )\n        {\n          while ( v4 )\n          {\n            v12 = *v5++;\n            v65 += v12 << v6;\n            v6 += 8;\n            --v4;\n            if ( v6 >= 0x10 )\n              goto LABEL_55;\n          }\n          goto LABEL_315;\n        }\nLABEL_55:\n        if ( *((_DWORD *)v3 + 8) )\n        {\n          *(_DWORD *)(*((_DWORD *)v3 + 8) + 8) = (unsigned __int8)v65;\n          *(_DWORD *)(*((_DWORD *)v3 + 8) + 12) = v65 >> 8;\n        }\n        if ( (v3[17] & 2) != 0 )\n        {\n          LOB30E(v91[0]) = v65;\n          *((_DWORD *)v3 + 6) = sub_464B1F(*((_DWORD *)v3 + 6), v91, 2u);\n        }\n        v6 = 0;\n        v65 = 0;\n        *(_DWORD *)v3 = 4;\nLABEL_60:\n        if ( (v3[17] & 4) != 0 )\n        {\n          if ( v6 < 0x10 )\n          {\n            while ( v4 )\n            {\n              v13 = *v5++;\n              v65 += v13 << v6;\n              v6 += 8;\n              --v4;\n              if ( v6 >= 0x10 )\n                goto LABEL_64;\n            }\n            goto LABEL_315;\n          }\nLABEL_64:\n          *((_DWORD *)v3 + 16) = v65;\n          if ( *((_DWORD *)v3 + 8) )\n            *(_DWORD *)(*((_DWORD *)v3 + 8) + 20) = v65;\n          if ( (v3[17] & 2) != 0 )\n          {\n            LOB30E(v91[0]) = v65;\n            *((_DWORD *)v3 + 6) = sub_464B1F(*((_DWORD *)v3 + 6), v91, 2u);\n          }\n          v6 = 0;\n          v65 = 0;\n        }\n        else if ( *((_DWORD *)v3 + 8) )\n        {\n          *(_DWORD *)(*((_DWORD *)v3 + 8) + 16) = 0;\n        }\n        *(_DWORD *)v3 = 5;\nLABEL_72:\n        if ( (v3[17] & 4) != 0 )\n        {\n          v75 = *((_DWORD *)v3 + 16);\n          if ( v4 < v75 )\n            v75 = v4;\n          if ( v75 )\n          {\n            if ( *((_DWORD *)v3 + 8) && *(_DWORD *)(*((_DWORD *)v3 + 8) + 16) )\n            {\n              v86 = *(_DWORD *)(*((_DWORD *)v3 + 8) + 20) - *((_DWORD *)v3 + 16);\n              if ( v75 + v86 <= *(_DWORD *)(*((_DWORD *)v3 + 8) + 24) )\n                v14 = v75;\n              else\n                v14 = *(_DWORD *)(*((_DWORD *)v3 + 8) + 24) - v86;\n              unknown_libname_934((void *)(v86 + *(_DWORD *)(*((_DWORD *)v3 + 8) + 16)), v5, v14);\n            }\n            if ( (v3[17] & 2) != 0 )\n              *((_DWORD *)v3 + 6) = sub_464B1F(*((_DWORD *)v3 + 6), v5, v75);\n            v4 -= v75;\n            v5 += v75;\n            *((_DWORD *)v3 + 16) -= v75;\n          }\n          if ( *((_DWORD *)v3 + 16) )\n            goto LABEL_315;\n        }\n        *((_DWORD *)v3 + 16) = 0;\n        *(_DWORD *)v3 = 6;\nLABEL_87:\n        if ( (v3[17] & 8) != 0 )\n        {\n          if ( !v4 )\n            goto LABEL_315;\n          v76 = 0;\n          do\n          {\n            v87 = v5[v76++];\n            v15 = *((_DWORD *)v3 + 8);\n            if ( v15 && *(_DWORD *)(v15 + 28) && *(_DWORD *)(v15 + 32) > *((_DWORD *)v3 + 16) )\n            {\n              v16 = *((_DWORD *)v3 + 16);\n              *((_DWORD *)v3 + 16) = v16 + 1;\n              *(_BYTE *)(*(_DWORD *)(v15 + 28) + v16) = v87;\n            }\n          }\n          while ( v87 && v4 > v76 );\n          if ( (v3[17] & 2) != 0 )\n            *((_DWORD *)v3 + 6) = sub_464B1F(*((_DWORD *)v3 + 6), v5, v76);\n          v4 -= v76;\n          v5 += v76;\n          if ( v87 )\n            goto LABEL_315;\n        }\n        else if ( *((_DWORD *)v3 + 8) )\n        {\n          *(_DWORD *)(*((_DWORD *)v3 + 8) + 28) = 0;\n        }\n        *((_DWORD *)v3 + 16) = 0;\n        *(_DWORD *)v3 = 7;\nLABEL_103:\n        if ( (v3[17] & 0x10) != 0 )\n        {\n          if ( !v4 )\n            goto LABEL_315;\n          v77 = 0;\n          do\n          {\n            v88 = v5[v77++];\n            v17 = *((_DWORD *)v3 + 8);\n            if ( v17 && *(_DWORD *)(v17 + 36) && *(_DWORD *)(v17 + 40) > *((_DWORD *)v3 + 16) )\n            {\n              v18 = *((_DWORD *)v3 + 16);\n              *((_DWORD *)v3 + 16) = v18 + 1;\n              *(_BYTE *)(*(_DWORD *)(v17 + 36) + v18) = v88;\n            }\n          }\n          while ( v88 && v4 > v77 );\n          if ( (v3[17] & 2) != 0 )\n            *((_DWORD *)v3 + 6) = sub_464B1F(*((_DWORD *)v3 + 6), v5, v77);\n          v4 -= v77;\n          v5 += v77;\n          if ( v88 )\n            goto LABEL_315;\n        }\n        else if ( *((_DWORD *)v3 + 8) )\n        {\n          *(_DWORD *)(*((_DWORD *)v3 + 8) + 36) = 0;\n        }\n        *(_DWORD *)v3 = 8;\nLABEL_119:\n        if ( (v3[17] & 2) == 0 )\n          goto LABEL_126;\n        if ( v6 < 0x10 )\n        {\n          while ( v4 )\n          {\n            v19 = *v5++;\n            v65 += v19 << v6;\n            v6 += 8;\n            --v4;\n            if ( v6 >= 0x10 )\n              goto LABEL_123;\n          }\n          goto LABEL_315;\n        }\nLABEL_123:\n        if ( (unsigned __int16)*((_DWORD *)v3 + 6) == v65 )\n        {\n          v6 = 0;\n          v65 = 0;\nLABEL_126:\n          if ( *((_DWORD *)v3 + 8) )\n          {\n            *(_DWORD *)(*((_DWORD *)v3 + 8) + 44) = (*((int *)v3 + 4) >> 9) & 1;\n            *(_DWORD *)(*((_DWORD *)v3 + 8) + 48) = 1;\n          }\n          v20 = sub_464B1F(0, 0, 0);\n          *((_DWORD *)v3 + 6) = v20;\n          a1[12] = (unsigned __int8 *)v20;\n          *(_DWORD *)v3 = 11;\n        }\n        else\n        {\n          a1[6] = (unsigned __int8 *)aHeaderCrcMisma;\n          *(_DWORD *)v3 = 27;\n        }\n        continue;\n      case 2:\n        goto LABEL_44;\n      case 3:\n        goto LABEL_52;\n      case 4:\n        goto LABEL_60;\n      case 5:\n        goto LABEL_72;\n      case 6:\n        goto LABEL_87;\n      case 7:\n        goto LABEL_103;\n      case 8:\n        goto LABEL_119;\n      case 9:\n        if ( v6 >= 0x20 )\n          goto LABEL_132;\n        do\n        {\n          if ( !v4 )\n            goto LABEL_315;\n          v21 = *v5++;\n          v65 += v21 << v6;\n          v6 += 8;\n          --v4;\n        }\n        while ( v6 < 0x20 );\nLABEL_132:\n        v22 = ((unsigned __int8)v65 << 24) + ((v65 & 0xFF00) << 8) + ((v65 >> 8) & 0xFF00) + HIC0B9(v65);\n        *((_DWORD *)v3 + 6) = v22;\n        a1[12] = (unsigned __int8 *)v22;\n        v65 = 0;\n        *(_DWORD *)v3 = 10;\n        v6 = 0;\nLABEL_133:\n        if ( !*((_DWORD *)v3 + 3) )\n        {\n          a1[3] = v63;\n          a1[4] = (unsigned __int8 *)v64;\n          *a1 = v5;\n          a1[1] = (unsigned __int8 *)v4;\n          *((_DWORD *)v3 + 14) = v65;\n          *((_DWORD *)v3 + 15) = v6;\n          return 2;\n        }\n        v23 = sub_4665FF(0, 0, 0);\n        *((_DWORD *)v3 + 6) = v23;\n        a1[12] = (unsigned __int8 *)v23;\n        *(_DWORD *)v3 = 11;\nLABEL_136:\n        if ( a2 == 5 )\n          goto LABEL_315;\nLABEL_137:\n        if ( *((_DWORD *)v3 + 1) )\n        {\n          v65 >>= v6 & 7;\n          v6 -= v6 & 7;\n          *(_DWORD *)v3 = 24;\n        }\n        else\n        {\n          if ( v6 < 3 )\n          {\n            while ( v4 )\n            {\n              v24 = *v5++;\n              v65 += v24 << v6;\n              v6 += 8;\n              --v4;\n              if ( v6 >= 3 )\n                goto LABEL_142;\n            }\n            goto LABEL_315;\n          }\nLABEL_142:\n          *((_DWORD *)v3 + 1) = v65 & 1;\n          v66 = v65 >> 1;\n          v25 = v6 - 1;\n          v26 = v66 & 3;\n          v27 = v26 == 0;\n          v28 = v26 - 1;\n          if ( v27 )\n          {\n            *(_DWORD *)v3 = 13;\n          }\n          else if ( v28 )\n          {\n            v29 = v28 - 1;\n            if ( v29 )\n            {\n              if ( v29 == 1 )\n              {\n                a1[6] = (unsigned __int8 *)aInvalidBlockTy;\n                *(_DWORD *)v3 = 27;\n              }\n            }\n            else\n            {\n              *(_DWORD *)v3 = 15;\n            }\n          }\n          else\n          {\n            sub_45E69E(v3);\n            *(_DWORD *)v3 = 18;\n          }\n          v65 = v66 >> 2;\n          v6 = v25 - 2;\n        }\n        continue;\n      case 0xA:\n        goto LABEL_133;\n      case 0xB:\n        goto LABEL_136;\n      case 0xC:\n        goto LABEL_137;\n      case 0xD:\n        v30 = v6 & 7;\n        v6 -= v30;\n        v65 >>= v30;\n        if ( v6 >= 0x20 )\n          goto LABEL_155;\n        do\n        {\n          if ( !v4 )\n            goto LABEL_315;\n          v31 = *v5++;\n          v65 += v31 << v6;\n          v6 += 8;\n          --v4;\n        }\n        while ( v6 < 0x20 );\nLABEL_155:\n        if ( (unsigned __int16)v65 == (HI282E(v65) ^ 0xFFFF) )\n        {\n          *((_DWORD *)v3 + 16) = (unsigned __int16)v65;\n          v65 = 0;\n          v6 = 0;\n          *(_DWORD *)v3 = 14;\nLABEL_158:\n          v78 = *((_DWORD *)v3 + 16);\n          if ( v78 )\n          {\n            if ( v4 < v78 )\n              v78 = v4;\n            if ( v78 > v64 )\n              v78 = v64;\n            if ( !v78 )\n              goto LABEL_315;\n            unknown_libname_934(v63, v5, v78);\n            v4 -= v78;\n            v5 += v78;\n            v64 -= v78;\n            v63 += v78;\n            *((_DWORD *)v3 + 16) -= v78;\n          }\n          else\n          {\n            *(_DWORD *)v3 = 11;\n          }\n        }\n        else\n        {\n          a1[6] = (unsigned __int8 *)aInvalidStoredB;\n          *(_DWORD *)v3 = 27;\n        }\n        continue;\n      case 0xE:\n        goto LABEL_158;\n      case 0xF:\n        if ( v6 >= 0xE )\n          goto LABEL_169;\n        do\n        {\n          if ( !v4 )\n            goto LABEL_315;\n          v32 = *v5++;\n          v65 += v32 << v6;\n          v6 += 8;\n          --v4;\n        }\n        while ( v6 < 0xE );\nLABEL_169:\n        v6 -= 14;\n        *((_DWORD *)v3 + 24) = (v65 & 0x1F) + 257;\n        v67 = v65 >> 5;\n        *((_DWORD *)v3 + 25) = (v67 & 0x1F) + 1;\n        v67 >>= 5;\n        *((_DWORD *)v3 + 23) = (v67 & 0xF) + 4;\n        v65 = v67 >> 4;\n        if ( *((_DWORD *)v3 + 24) > 0x11Eu || *((_DWORD *)v3 + 25) > 0x1Eu )\n        {\n          a1[6] = (unsigned __int8 *)aTooManyLengthO;\n          *(_DWORD *)v3 = 27;\n          continue;\n        }\n        *((_DWORD *)v3 + 26) = 0;\n        *(_DWORD *)v3 = 16;\nLABEL_177:\n        if ( *((_DWORD *)v3 + 26) >= *((_DWORD *)v3 + 23) )\n        {\n          while ( *((_DWORD *)v3 + 26) < 0x13u )\n          {\n            v35 = *((_DWORD *)v3 + 26);\n            *((_DWORD *)v3 + 26) = v35 + 1;\n            *(_WORD *)&v3[2 * (unsigned __int16)word_50987A[v35] + 112] = 0;\n          }\n          *((_DWORD *)v3 + 27) = v3 + 1328;\n          *((_DWORD *)v3 + 19) = v3 + 1328;\n          *((_DWORD *)v3 + 21) = 7;\n          v90 = sub_466B0B(0, (int)(v3 + 112), 0x13u, (int *)v3 + 27, (int *)v3 + 21, (_WORD *)v3 + 376);\n          if ( v90 )\n          {\n            a1[6] = (unsigned __int8 *)aInvalidCodeLen;\n            *(_DWORD *)v3 = 27;\n          }\n          else\n          {\n            *((_DWORD *)v3 + 26) = 0;\n            *(_DWORD *)v3 = 17;\nLABEL_215:\n            while ( (unsigned int)(*((_DWORD *)v3 + 25) + *((_DWORD *)v3 + 24)) > *((_DWORD *)v3 + 26) )\n            {\n              while ( 1 )\n              {\n                v81 = *(_DWORD *)(*((_DWORD *)v3 + 19) + 4 * (v65 & ((1 << *((_DWORD *)v3 + 21)) - 1)));\n                if ( v6 >= BYTE1(v81) )\n                  break;\n                if ( !v4 )\n                  goto LABEL_315;\n                v36 = *v5++;\n                v65 += v36 << v6;\n                --v4;\n                v6 += 8;\n              }\n              if ( HI282E(v81) >= 0x10u )\n              {\n                if ( HI282E(v81) == 16 )\n                {\n                  while ( v6 < (unsigned int)BYTE1(v81) + 2 )\n                  {\n                    if ( !v4 )\n                      goto LABEL_315;\n                    v39 = *v5++;\n                    v65 += v39 << v6;\n                    --v4;\n                    v6 += 8;\n                  }\n                  v65 >>= SBA5A8(v81);\n                  v6 -= BYTE1(v81);\n                  if ( !*((_DWORD *)v3 + 26) )\n                  {\n                    a1[6] = (unsigned __int8 *)aInvalidBitLeng;\n                    *(_DWORD *)v3 = 27;\n                    break;\n                  }\n                  v89 = *(_WORD *)&v3[2 * *((_DWORD *)v3 + 26) + 110];\n                  v79 = (v65 & 3) + 3;\n                  v65 >>= 2;\n                  v6 -= 2;\n                }\n                else if ( HI282E(v81) == 17 )\n                {\n                  while ( v6 < (unsigned int)BYTE1(v81) + 3 )\n                  {\n                    if ( !v4 )\n                      goto LABEL_315;\n                    v40 = *v5++;\n                    v65 += v40 << v6;\n                    --v4;\n                    v6 += 8;\n                  }\n                  v68 = v65 >> SBA5A8(v81);\n                  v89 = 0;\n                  v79 = (v68 & 7) + 3;\n                  v65 = v68 >> 3;\n                  v6 = v6 - BYTE1(v81) - 3;\n                }\n                else\n                {\n                  while ( v6 < (unsigned int)BYTE1(v81) + 7 )\n                  {\n                    if ( !v4 )\n                      goto LABEL_315;\n                    v41 = *v5++;\n                    v65 += v41 << v6;\n                    --v4;\n                    v6 += 8;\n                  }\n                  v69 = v65 >> SBA5A8(v81);\n                  v89 = 0;\n                  v79 = (v69 & 0x7F) + 11;\n                  v65 = v69 >> 7;\n                  v6 = v6 - BYTE1(v81) - 7;\n                }\n                if ( v79 + *((_DWORD *)v3 + 26) > (unsigned int)(*((_DWORD *)v3 + 25) + *((_DWORD *)v3 + 24)) )\n                {\n                  a1[6] = (unsigned __int8 *)aInvalidBitLeng;\n                  *(_DWORD *)v3 = 27;\n                  break;\n                }\n                while ( v79-- )\n                {\n                  v42 = *((_DWORD *)v3 + 26);\n                  *((_DWORD *)v3 + 26) = v42 + 1;\n                  *(_WORD *)&v3[2 * v42 + 112] = v89;\n                }\n              }\n              else\n              {\n                while ( v6 < BYTE1(v81) )\n                {\n                  if ( !v4 )\n                    goto LABEL_315;\n                  v37 = *v5++;\n                  v65 += v37 << v6;\n                  --v4;\n                  v6 += 8;\n                }\n                v65 >>= SBA5A8(v81);\n                v38 = *((_DWORD *)v3 + 26);\n                v6 -= BYTE1(v81);\n                *((_DWORD *)v3 + 26) = v38 + 1;\n                *(_WORD *)&v3[2 * v38 + 112] = HI282E(v81);\n              }\n            }\n            if ( *(_DWORD *)v3 != 27 )\n            {\n              *((_DWORD *)v3 + 27) = v3 + 1328;\n              *((_DWORD *)v3 + 19) = *((_DWORD *)v3 + 27);\n              *((_DWORD *)v3 + 21) = 9;\n              v90 = sub_466B0B(\n                      1,\n                      (int)(v3 + 112),\n                      *((_DWORD *)v3 + 24),\n                      (int *)v3 + 27,\n                      (int *)v3 + 21,\n                      (_WORD *)v3 + 376);\n              if ( v90 )\n              {\n                a1[6] = (unsigned __int8 *)aInvalidLiteral;\n                *(_DWORD *)v3 = 27;\n              }\n              else\n              {\n                *((_DWORD *)v3 + 20) = *((_DWORD *)v3 + 27);\n                *((_DWORD *)v3 + 22) = 6;\n                v90 = sub_466B0B(\n                        2,\n                        (int)&v3[2 * *((_DWORD *)v3 + 24) + 112],\n                        *((_DWORD *)v3 + 25),\n                        (int *)v3 + 27,\n                        (int *)v3 + 22,\n                        (_WORD *)v3 + 376);\n                if ( v90 )\n                {\n                  a1[6] = (unsigned __int8 *)aInvalidDistanc;\n                  *(_DWORD *)v3 = 27;\n                }\n                else\n                {\n                  *(_DWORD *)v3 = 18;\nLABEL_222:\n                  if ( v4 < 6 || v64 < 0x102 )\n                  {\n                    while ( 1 )\n                    {\n                      v82 = *(_DWORD *)(*((_DWORD *)v3 + 19) + 4 * (v65 & ((1 << *((_DWORD *)v3 + 21)) - 1)));\n                      if ( v6 >= BYTE1(v82) )\n                        break;\n                      if ( !v4 )\n                        goto LABEL_315;\n                      v44 = *v5++;\n                      v65 += v44 << v6;\n                      --v4;\n                      v6 += 8;\n                    }\n                    if ( (_BYTE)v82 && (v82 & 0xF0) == 0 )\n                    {\n                      v84 = *(_DWORD *)(*((_DWORD *)v3 + 19) + 4 * (v65 & ((1 << *((_DWORD *)v3 + 21)) - 1)));\n                      while ( 1 )\n                      {\n                        v82 = *(_DWORD *)(*((_DWORD *)v3 + 19)\n                                        + 4 * (HI282E(v84) + ((v65 & ((1 << (v84 + BYTE1(v84))) - 1)) >> SBA5A8(v84))));\n                        if ( v6 >= BYTE1(v82) + (unsigned int)BYTE1(v84) )\n                          break;\n                        if ( !v4 )\n                          goto LABEL_315;\n                        v45 = *v5++;\n                        v65 += v45 << v6;\n                        --v4;\n                        v6 += 8;\n                      }\n                      v65 >>= SBA5A8(v84);\n                      v6 -= BYTE1(v84);\n                    }\n                    v65 >>= SBA5A8(v82);\n                    *((_DWORD *)v3 + 16) = HI282E(v82);\n                    v6 -= BYTE1(v82);\n                    if ( (_BYTE)v82 )\n                    {\n                      if ( (v82 & 0x20) != 0 )\n                      {\n                        *(_DWORD *)v3 = 11;\n                      }\n                      else if ( (v82 & 0x40) != 0 )\n                      {\n                        a1[6] = (unsigned __int8 *)aInvalidLiteral_0;\n                        *(_DWORD *)v3 = 27;\n                      }\n                      else\n                      {\n                        *((_DWORD *)v3 + 18) = v82 & 0xF;\n                        *(_DWORD *)v3 = 19;\nLABEL_242:\n                        if ( *((_DWORD *)v3 + 18) )\n                        {\n                          while ( v6 < *((_DWORD *)v3 + 18) )\n                          {\n                            if ( !v4 )\n                              goto LABEL_315;\n                            v46 = *v5++;\n                            v65 += v46 << v6;\n                            --v4;\n                            v6 += 8;\n                          }\n                          *((_DWORD *)v3 + 16) += v65 & ((1 << *((_DWORD *)v3 + 18)) - 1);\n                          v65 >>= *((_DWORD *)v3 + 18);\n                          v6 -= *((_DWORD *)v3 + 18);\n                        }\n                        *(_DWORD *)v3 = 20;\nLABEL_249:\n                        while ( 1 )\n                        {\n                          v83 = *(_DWORD *)(*((_DWORD *)v3 + 20) + 4 * (v65 & ((1 << *((_DWORD *)v3 + 22)) - 1)));\n                          if ( v6 >= BYTE1(v83) )\n                            break;\n                          if ( !v4 )\n                            goto LABEL_315;\n                          v47 = *v5++;\n                          v65 += v47 << v6;\n                          --v4;\n                          v6 += 8;\n                        }\n                        if ( (v83 & 0xF0) == 0 )\n                        {\n                          v85 = *(_DWORD *)(*((_DWORD *)v3 + 20) + 4 * (v65 & ((1 << *((_DWORD *)v3 + 22)) - 1)));\n                          while ( 1 )\n                          {\n                            v83 = *(_DWORD *)(*((_DWORD *)v3 + 20)\n                                            + 4\n                                            * (HI282E(v85) + ((v65 & ((1 << (v85 + BYTE1(v85))) - 1)) >> SBA5A8(v85))));\n                            if ( v6 >= BYTE1(v83) + (unsigned int)BYTE1(v85) )\n                              break;\n                            if ( !v4 )\n                              goto LABEL_315;\n                            v48 = *v5++;\n                            v65 += v48 << v6;\n                            --v4;\n                            v6 += 8;\n                          }\n                          v65 >>= SBA5A8(v85);\n                          v6 -= BYTE1(v85);\n                        }\n                        v65 >>= SBA5A8(v83);\n                        v6 -= BYTE1(v83);\n                        if ( (v83 & 0x40) != 0 )\n                        {\n                          a1[6] = (unsigned __int8 *)aInvalidDistanc_0;\n                          *(_DWORD *)v3 = 27;\n                        }\n                        else\n                        {\n                          *((_DWORD *)v3 + 17) = HI282E(v83);\n                          *((_DWORD *)v3 + 18) = v83 & 0xF;\n                          *(_DWORD *)v3 = 21;\nLABEL_261:\n                          if ( *((_DWORD *)v3 + 18) )\n                          {\n                            while ( v6 < *((_DWORD *)v3 + 18) )\n                            {\n                              if ( !v4 )\n                                goto LABEL_315;\n                              v49 = *v5++;\n                              v65 += v49 << v6;\n                              --v4;\n                              v6 += 8;\n                            }\n                            *((_DWORD *)v3 + 17) += v65 & ((1 << *((_DWORD *)v3 + 18)) - 1);\n                            v65 >>= *((_DWORD *)v3 + 18);\n                            v6 -= *((_DWORD *)v3 + 18);\n                          }\n                          if ( v72 + *((_DWORD *)v3 + 11) - v64 >= *((_DWORD *)v3 + 17) )\n                          {\n                            *(_DWORD *)v3 = 22;\nLABEL_270:\n                            if ( !v64 )\n                              goto LABEL_315;\n                            if ( *((_DWORD *)v3 + 17) <= v72 - v64 )\n                            {\n                              v52 = &v63[-*((_DWORD *)v3 + 17)];\n                              v80 = *((_DWORD *)v3 + 16);\n                            }\n                            else\n                            {\n                              v80 = *((_DWORD *)v3 + 17) - (v72 - v64);\n                              v50 = *((_DWORD *)v3 + 12);\n                              if ( v50 >= v80 )\n                              {\n                                v51 = v50 - v80;\n                              }\n                              else\n                              {\n                                v80 -= v50;\n                                v51 = *((_DWORD *)v3 + 10) - v80;\n                              }\n                              v52 = (unsigned __int8 *)(*((_DWORD *)v3 + 13) + v51);\n                              if ( *((_DWORD *)v3 + 16) < v80 )\n                                v80 = *((_DWORD *)v3 + 16);\n                            }\n                            if ( v80 > v64 )\n                              v80 = v64;\n                            v64 -= v80;\n                            *((_DWORD *)v3 + 16) -= v80;\n                            do\n                            {\n                              *v63++ = *v52++;\n                              --v80;\n                            }\n                            while ( v80 );\n                            if ( !*((_DWORD *)v3 + 16) )\n                              *(_DWORD *)v3 = 18;\n                          }\n                          else\n                          {\n                            a1[6] = (unsigned __int8 *)aInvalidDistanc_1;\n                            *(_DWORD *)v3 = 27;\n                          }\n                        }\n                      }\n                    }\n                    else\n                    {\n                      *(_DWORD *)v3 = 23;\n                    }\n                  }\n                  else\n                  {\n                    a1[3] = v63;\n                    a1[4] = (unsigned __int8 *)v64;\n                    *a1 = v5;\n                    a1[1] = (unsigned __int8 *)v4;\n                    *((_DWORD *)v3 + 14) = v65;\n                    *((_DWORD *)v3 + 15) = v6;\n                    sub_469732(a1, v72);\n                    v63 = a1[3];\n                    v64 = (unsigned int)a1[4];\n                    v5 = *a1;\n                    v4 = (unsigned int)a1[1];\n                    v65 = *((_DWORD *)v3 + 14);\n                    v6 = *((_DWORD *)v3 + 15);\n                  }\n                }\n              }\n            }\n          }\n          continue;\n        }\n        if ( v6 >= 3 )\n        {\nLABEL_176:\n          v34 = *((_DWORD *)v3 + 26);\n          *((_DWORD *)v3 + 26) = v34 + 1;\n          *(_WORD *)&v3[2 * (unsigned __int16)word_50987A[v34] + 112] = v65 & 7;\n          v65 >>= 3;\n          v6 -= 3;\n          goto LABEL_177;\n        }\n        while ( v4 )\n        {\n          v33 = *v5++;\n          v65 += v33 << v6;\n          v6 += 8;\n          --v4;\n          if ( v6 >= 3 )\n            goto LABEL_176;\n        }\nLABEL_315:\n        a1[3] = v63;\n        a1[4] = (unsigned __int8 *)v64;\n        *a1 = v5;\n        a1[1] = (unsigned __int8 *)v4;\n        *((_DWORD *)v3 + 14) = v65;\n        *((_DWORD *)v3 + 15) = v6;\n        if ( (*((_DWORD *)v3 + 10) || *(int *)v3 < 24 && a1[4] != (unsigned __int8 *)v72) && sub_454FB5((int)a1, v72) )\n        {\n          *(_DWORD *)v3 = 28;\n          return -4;\n        }\n        else\n        {\n          v71 = v70 - (_DWORD)a1[1];\n          v74 = v72 - (_DWORD)a1[4];\n          a1[2] += v71;\n          a1[5] += v74;\n          *((_DWORD *)v3 + 7) += v74;\n          if ( *((_DWORD *)v3 + 2) && v74 )\n          {\n            if ( *((_DWORD *)v3 + 4) )\n              v57 = sub_464B1F(*((_DWORD *)v3 + 6), &a1[3][-v74], v74);\n            else\n              v57 = sub_4665FF(*((_DWORD *)v3 + 6), &a1[3][-v74], v74);\n            *((_DWORD *)v3 + 6) = v57;\n            a1[12] = (unsigned __int8 *)v57;\n          }\n          if ( *((_DWORD *)v3 + 1) )\n            v58 = 64;\n          else\n            v58 = 0;\n          v59 = *((_DWORD *)v3 + 15) + v58;\n          if ( *(_DWORD *)v3 == 11 )\n            v60 = 128;\n          else\n            v60 = 0;\n          a1[11] = (unsigned __int8 *)(v60 + v59);\n          if ( (!v71 && !v74 || a2 == 4) && !v90 )\n            return -5;\n          return v90;\n        }\n      case 0x10:\n        goto LABEL_177;\n      case 0x11:\n        goto LABEL_215;\n      case 0x12:\n        goto LABEL_222;\n      case 0x13:\n        goto LABEL_242;\n      case 0x14:\n        goto LABEL_249;\n      case 0x15:\n        goto LABEL_261;\n      case 0x16:\n        goto LABEL_270;\n      case 0x17:\n        if ( !v64 )\n          goto LABEL_315;\n        *v63++ = v3[64];\n        --v64;\n        *(_DWORD *)v3 = 18;\n        continue;\n      case 0x18:\n        if ( !*((_DWORD *)v3 + 2) )\n          goto LABEL_301;\n        if ( v6 >= 0x20 )\n          goto LABEL_290;\n        do\n        {\n          if ( !v4 )\n            goto LABEL_315;\n          v53 = *v5++;\n          v65 += v53 << v6;\n          v6 += 8;\n          --v4;\n        }\n        while ( v6 < 0x20 );\nLABEL_290:\n        v73 = v72 - v64;\n        a1[5] += v73;\n        *((_DWORD *)v3 + 7) += v73;\n        if ( v73 )\n        {\n          if ( *((_DWORD *)v3 + 4) )\n            v54 = sub_464B1F(*((_DWORD *)v3 + 6), &v63[-v73], v73);\n          else\n            v54 = sub_4665FF(*((_DWORD *)v3 + 6), &v63[-v73], v73);\n          *((_DWORD *)v3 + 6) = v54;\n          a1[12] = (unsigned __int8 *)v54;\n        }\n        v72 = v64;\n        if ( *((_DWORD *)v3 + 4) )\n          v55 = v65;\n        else\n          v55 = ((unsigned __int8)v65 << 24) + ((v65 & 0xFF00) << 8) + ((v65 >> 8) & 0xFF00) + HIC0B9(v65);\n        if ( v55 == *((_DWORD *)v3 + 6) )\n        {\n          v6 = 0;\n          v65 = 0;\nLABEL_301:\n          *(_DWORD *)v3 = 25;\nLABEL_302:\n          if ( !*((_DWORD *)v3 + 2) || !*((_DWORD *)v3 + 4) )\n            goto LABEL_310;\n          for ( ; v6 < 0x20; --v4 )\n          {\n            if ( !v4 )\n              goto LABEL_315;\n            v56 = *v5++;\n            v65 += v56 << v6;\n            v6 += 8;\n          }\n          if ( *((_DWORD *)v3 + 7) == v65 )\n          {\n            v6 = 0;\n            v65 = 0;\nLABEL_310:\n            *(_DWORD *)v3 = 26;\nLABEL_311:\n            v90 = 1;\n            goto LABEL_315;\n          }\n          a1[6] = (unsigned __int8 *)aIncorrectLengt;\n          *(_DWORD *)v3 = 27;\n        }\n        else\n        {\n          a1[6] = (unsigned __int8 *)aIncorrectDataC;\n          *(_DWORD *)v3 = 27;\n        }\n        continue;\n      case 0x19:\n        goto LABEL_302;\n      case 0x1A:\n        goto LABEL_311;\n      case 0x1B:\n        v90 = -3;\n        goto LABEL_315;\n      case 0x1C:\n        return -4;\n      default:\n        return -2;\n    }\n  }\n}\n// 50987A: using guessed type __int16 word_50987A[19];\n\n"
    },
    {
        "Function": "sub_4F9430",
        "Total XOR and shift operations": 24,
        "XOR operations": 0,
        "Shift operations": 24,
        "Operation percentage": "5.03%",
        "Function Body": "\nint __fastcall sub_4F9430(int result, _DWORD *a2, int a3, _BYTE *a4, int a5, unsigned __int8 a6)\n{\n  unsigned __int8 v6; // bl\n  _BYTE *v7; // edx\n  _BYTE *i; // esi\n  int v9; // edx\n  int v10; // edx\n  _BYTE *j; // esi\n  int v12; // edx\n  int v13; // edx\n  _WORD *k; // esi\n  unsigned __int8 v15; // al\n  int v16; // eax\n  int v17; // edx\n  unsigned __int8 v18; // al\n  int v19; // eax\n  int v20; // edx\n  unsigned __int8 v21; // al\n  int v22; // eax\n  int v23; // eax\n  _WORD *m; // esi\n  unsigned __int8 v25; // al\n  int v26; // eax\n  int v27; // edx\n  unsigned __int8 v28; // al\n  int v29; // eax\n  int v30; // edx\n  unsigned __int8 v31; // al\n  int v32; // eax\n  _BYTE *n; // esi\n  _DWORD *v34; // edx\n  _DWORD *v35; // edx\n  int v36; // edx\n  _BYTE *ii; // esi\n  _DWORD *v38; // edx\n  _DWORD *v39; // edx\n  _WORD *jj; // esi\n  int v41; // edx\n  int v42; // edx\n  int v43; // edx\n  _WORD *kk; // esi\n  int v45; // edx\n  int v46; // edx\n  bool v47; // [esp+Bh] [ebp-51h]\n  int v48; // [esp+Ch] [ebp-50h]\n  int v49; // [esp+10h] [ebp-4Ch]\n  int (__fastcall *v50)(int, int); // [esp+14h] [ebp-48h]\n  int (__fastcall *v51)(int, int); // [esp+14h] [ebp-48h]\n  int v52; // [esp+18h] [ebp-44h]\n  int v53; // [esp+18h] [ebp-44h]\n  int (__fastcall *v54)(int, int); // [esp+1Ch] [ebp-40h]\n  int v55; // [esp+20h] [ebp-3Ch]\n  int (__fastcall *v56)(int, _DWORD *); // [esp+24h] [ebp-38h]\n  int v57; // [esp+28h] [ebp-34h]\n  int (__fastcall *v58)(int, int); // [esp+2Ch] [ebp-30h]\n  int (__fastcall *v59)(int, int); // [esp+2Ch] [ebp-30h]\n  int v60; // [esp+30h] [ebp-2Ch]\n  int v61; // [esp+30h] [ebp-2Ch]\n  _BYTE *v62; // [esp+38h] [ebp-24h]\n  unsigned __int8 *v63; // [esp+38h] [ebp-24h]\n  _BYTE *v64; // [esp+3Ch] [ebp-20h]\n  _BYTE *v65; // [esp+3Ch] [ebp-20h]\n  _BYTE *v66; // [esp+40h] [ebp-1Ch]\n  _BYTE *v67; // [esp+40h] [ebp-1Ch]\n  _BYTE *v68; // [esp+44h] [ebp-18h]\n  _BYTE *v69; // [esp+44h] [ebp-18h]\n  _WORD *v70; // [esp+48h] [ebp-14h]\n  _WORD *v71; // [esp+48h] [ebp-14h]\n  _WORD *v72; // [esp+4Ch] [ebp-10h]\n  _WORD *v73; // [esp+4Ch] [ebp-10h]\n  _WORD *v74; // [esp+50h] [ebp-Ch]\n  _WORD *v75; // [esp+50h] [ebp-Ch]\n  _WORD *v76; // [esp+54h] [ebp-8h]\n  _WORD *v77; // [esp+54h] [ebp-8h]\n  _DWORD *v78; // [esp+58h] [ebp-4h]\n\n  v78 = a2;\n  v6 = 0x80;\n  v47 = 0;\n  if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n  {\n    v49 = 4;\n    v48 = 3;\n    v47 = (*(_BYTE *)(result + 321) & 1) != 0;\n  }\n  else\n  {\n    v49 = 3;\n    if ( (*(_BYTE *)(result + 321) & 1) != 0 )\n      v48 = 4;\n    else\n      v48 = 3;\n  }\n  if ( a3 + 1 > 1 )\n    v49 = 1;\n  if ( *(_BYTE *)(result + 5) == 8 )\n  {\n    if ( a3 )\n    {\n      v64 = (_BYTE *)*a2;\n      v66 = (_BYTE *)a2[1];\n      v68 = (_BYTE *)a2[2];\n      if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n      {\n        v7 = (_BYTE *)a2[3];\n        v62 = (_BYTE *)v78[3];\n      }\n      else\n      {\n        v7 = 0;\n        v62 = 0;\n      }\n    }\n    else\n    {\n      v64 = (_BYTE *)*a2;\n      v66 = (_BYTE *)(*a2 + 1);\n      v68 = (_BYTE *)(*a2 + 2);\n      v7 = v68;\n      v62 = (_BYTE *)(*v78 + 3);\n    }\n    if ( *(_BYTE *)(result + 6) == 8 )\n    {\n      v60 = result;\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n        v58 = (int (__fastcall *)(int, int))sub_4F5B3E;\n      else\n        v58 = sub_4F4284;\n      if ( v47 )\n      {\n        for ( i = a4; a5; i += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v68;\n            i[2] = v58(v60, (int)v7);\n            LOE09B(v9) = *v66;\n            i[1] = v58(v60, v9);\n            LOE09B(v10) = *v64;\n            *i = v58(v60, v10);\n            i[3] = *v62;\n            v64 += v49;\n            v66 += v49;\n            v68 += v49;\n            v62 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( j = a4; a5; j += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v68;\n            j[2] = v58(v60, (int)v7);\n            LOE09B(v12) = *v66;\n            j[1] = v58(v60, v12);\n            LOE09B(v13) = *v64;\n            *j = v58(v60, v13);\n            v64 += v49;\n            v66 += v49;\n            v68 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = v48;\n        }\n      }\n    }\n    else if ( *(_BYTE *)(result + 6) == 16 )\n    {\n      v61 = result;\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n        v59 = (int (__fastcall *)(int, int))sub_4F5B3E;\n      else\n        v59 = sub_4F4284;\n      v52 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v50 = (int (__fastcall *)(int, int))sub_4F0172;\n      else\n        v50 = sub_4FDDA3;\n      if ( a3 )\n      {\n        v65 = (_BYTE *)*v78;\n        v67 = (_BYTE *)v78[1];\n        v7 = (_BYTE *)v78[2];\n        v69 = v7;\n        if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n        {\n          result = v78[3];\n          v63 = (unsigned __int8 *)result;\n        }\n        else\n        {\n          result = 0;\n          v63 = 0;\n        }\n      }\n      else\n      {\n        v65 = (_BYTE *)*v78;\n        v67 = (_BYTE *)(*v78 + 1);\n        v69 = (_BYTE *)(*v78 + 2);\n        result = (int)v69;\n        v63 = (unsigned __int8 *)(*v78 + 3);\n      }\n      if ( v47 )\n      {\n        for ( k = a4; a5; k += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v69;\n            v15 = v59(v61, (int)v7);\n            LOB30E(v16) = sub_4F6E71(v15, 0xFFFFu, 0xFFu);\n            k[2] = v50(v52, v16);\n            LOE09B(v17) = *v67;\n            v18 = v59(v61, v17);\n            LOB30E(v19) = sub_4F6E71(v18, 0xFFFFu, 0xFFu);\n            k[1] = v50(v52, v19);\n            LOE09B(v20) = *v65;\n            v21 = v59(v61, v20);\n            LOB30E(v22) = sub_4F6E71(v21, 0xFFFFu, 0xFFu);\n            *k = v50(v52, v22);\n            LOB30E(v23) = sub_4F6E71(*v63, 0xFFFFu, 0xFFu);\n            k[3] = v50(v52, v23);\n            v65 += v49;\n            v67 += v49;\n            v69 += v49;\n            v63 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( m = a4; a5; m += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v69;\n            v25 = v59(v61, (int)v7);\n            LOB30E(v26) = sub_4F6E71(v25, 0xFFFFu, 0xFFu);\n            m[2] = v50(v52, v26);\n            LOE09B(v27) = *v67;\n            v28 = v59(v61, v27);\n            LOB30E(v29) = sub_4F6E71(v28, 0xFFFFu, 0xFFu);\n            m[1] = v50(v52, v29);\n            LOE09B(v30) = *v65;\n            v31 = v59(v61, v30);\n            LOB30E(v32) = sub_4F6E71(v31, 0xFFFFu, 0xFFu);\n            *m = v50(v52, v32);\n            v65 += v49;\n            v67 += v49;\n            v69 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = 2 * v48;\n        }\n      }\n    }\n  }\n  else if ( *(_BYTE *)(result + 5) == 16 )\n  {\n    if ( a3 )\n    {\n      v72 = (_WORD *)*a2;\n      v74 = (_WORD *)a2[1];\n      v76 = (_WORD *)a2[2];\n      if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n      {\n        a2 = (_DWORD *)a2[3];\n        v70 = (_WORD *)v78[3];\n      }\n      else\n      {\n        HI282E(a2) = 0;\n        v70 = 0;\n      }\n    }\n    else\n    {\n      v72 = (_WORD *)*a2;\n      v74 = (_WORD *)(*a2 + 2);\n      v76 = (_WORD *)(*a2 + 4);\n      HI282E(a2) = HI282E(v76);\n      v70 = (_WORD *)(*v78 + 6);\n    }\n    if ( *(_BYTE *)(result + 6) == 8 )\n    {\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n      {\n        v57 = result;\n        if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F5B19;\n        else\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4FF02F;\n      }\n      else\n      {\n        v57 = result;\n        if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F731C;\n        else\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F22A3;\n      }\n      v55 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v54 = (int (__fastcall *)(int, int))sub_4F731C;\n      else\n        v54 = (int (__fastcall *)(int, int))sub_4F22A3;\n      if ( v47 )\n      {\n        for ( n = a4; a5; n += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v76;\n            n[2] = v56(v57, a2);\n            LOB30E(v34) = *v74;\n            n[1] = v56(v57, v34);\n            LOB30E(v35) = *v72;\n            *n = v56(v57, v35);\n            LOB30E(v36) = *v70;\n            n[3] = v54(v55, v36);\n            v72 += v49;\n            v74 += v49;\n            v76 += v49;\n            v70 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( ii = a4; a5; ii += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v76;\n            ii[2] = v56(v57, a2);\n            LOB30E(v38) = *v74;\n            ii[1] = v56(v57, v38);\n            LOB30E(v39) = *v72;\n            *ii = v56(v57, v39);\n            v72 += v49;\n            v74 += v49;\n            v76 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = v48;\n        }\n      }\n    }\n    else if ( *(_BYTE *)(result + 6) == 16 )\n    {\n      v53 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v51 = (int (__fastcall *)(int, int))sub_4F0172;\n      else\n        v51 = sub_4FDDA3;\n      if ( a3 )\n      {\n        v73 = (_WORD *)*v78;\n        v75 = (_WORD *)v78[1];\n        a2 = (_DWORD *)v78[2];\n        v77 = a2;\n        if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n        {\n          result = v78[3];\n          v71 = (_WORD *)result;\n        }\n        else\n        {\n          result = 0;\n          v71 = 0;\n        }\n      }\n      else\n      {\n        v73 = (_WORD *)*v78;\n        v75 = (_WORD *)(*v78 + 2);\n        v77 = (_WORD *)(*v78 + 4);\n        result = (int)v77;\n        v71 = (_WORD *)(*v78 + 6);\n      }\n      if ( v47 )\n      {\n        for ( jj = a4; a5; jj += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v77;\n            jj[2] = v51(v53, (int)a2);\n            LOB30E(v41) = *v75;\n            jj[1] = v51(v53, v41);\n            LOB30E(v42) = *v73;\n            *jj = v51(v53, v42);\n            LOB30E(v43) = *v71;\n            jj[3] = v51(v53, v43);\n            v73 += v49;\n            v75 += v49;\n            v77 += v49;\n            v71 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( kk = a4; a5; kk += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v77;\n            kk[2] = v51(v53, (int)a2);\n            LOB30E(v45) = *v75;\n            kk[1] = v51(v53, v45);\n            LOB30E(v46) = *v73;\n            *kk = v51(v53, v46);\n            v73 += v49;\n            v75 += v49;\n            v77 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = 2 * v48;\n        }\n      }\n    }\n  }\n  return result;\n}\n// 4F7830: variable 'v7' is possibly undefined\n// 4FB27A: variable 'v9' is possibly undefined\n// 4F6FB9: variable 'v10' is possibly undefined\n// 4F56F5: variable 'v12' is possibly undefined\n// 4F5040: variable 'v13' is possibly undefined\n// 4FD6BD: variable 'v16' is possibly undefined\n// 4F1AE0: variable 'v17' is possibly undefined\n// 4F109F: variable 'v19' is possibly undefined\n// 4F98BC: variable 'v20' is possibly undefined\n// 4FEE42: variable 'v22' is possibly undefined\n// 4F978A: variable 'v23' is possibly undefined\n// 4FC919: variable 'v26' is possibly undefined\n// 4FFB47: variable 'v27' is possibly undefined\n// 4FBD6C: variable 'v29' is possibly undefined\n// 4FEAC3: variable 'v30' is possibly undefined\n// 4FEEBD: variable 'v32' is possibly undefined\n// 4FE983: variable 'a2' is possibly undefined\n// 4FE38B: variable 'v34' is possibly undefined\n// 4F9441: variable 'v35' is possibly undefined\n// 4F7EF5: variable 'v36' is possibly undefined\n// 4F6F22: variable 'v38' is possibly undefined\n// 4FC35A: variable 'v39' is possibly undefined\n// 4FBCAE: variable 'v41' is possibly undefined\n// 4FDF5D: variable 'v42' is possibly undefined\n// 4F2D3B: variable 'v43' is possibly undefined\n// 4FDC6F: variable 'v45' is possibly undefined\n// 4F2A8F: variable 'v46' is possibly undefined\n// 4F5B3E: using guessed type int sub_4F5B3E();\n// 4F0172: using guessed type int sub_4F0172();\n\n"
    },
    {
        "Function": "sub_4FD6DC",
        "Total XOR and shift operations": 24,
        "XOR operations": 0,
        "Shift operations": 24,
        "Operation percentage": "5.03%",
        "Function Body": "\nint __fastcall sub_4FD6DC(int result, _DWORD *a2, int a3, _BYTE *a4, int a5, unsigned __int8 a6)\n{\n  unsigned __int8 v6; // bl\n  _BYTE *v7; // edx\n  _BYTE *i; // esi\n  int v9; // edx\n  int v10; // edx\n  _BYTE *j; // esi\n  int v12; // edx\n  int v13; // edx\n  _WORD *k; // esi\n  unsigned __int8 v15; // al\n  int v16; // eax\n  int v17; // edx\n  unsigned __int8 v18; // al\n  int v19; // eax\n  int v20; // edx\n  unsigned __int8 v21; // al\n  int v22; // eax\n  int v23; // eax\n  _WORD *m; // esi\n  unsigned __int8 v25; // al\n  int v26; // eax\n  int v27; // edx\n  unsigned __int8 v28; // al\n  int v29; // eax\n  int v30; // edx\n  unsigned __int8 v31; // al\n  int v32; // eax\n  _BYTE *n; // esi\n  _DWORD *v34; // edx\n  _DWORD *v35; // edx\n  int v36; // edx\n  _BYTE *ii; // esi\n  _DWORD *v38; // edx\n  _DWORD *v39; // edx\n  _WORD *jj; // esi\n  int v41; // edx\n  int v42; // edx\n  int v43; // edx\n  _WORD *kk; // esi\n  int v45; // edx\n  int v46; // edx\n  bool v47; // [esp+Bh] [ebp-51h]\n  int v48; // [esp+Ch] [ebp-50h]\n  int v49; // [esp+10h] [ebp-4Ch]\n  int (__fastcall *v50)(int, int); // [esp+14h] [ebp-48h]\n  int (__fastcall *v51)(int, int); // [esp+14h] [ebp-48h]\n  int v52; // [esp+18h] [ebp-44h]\n  int v53; // [esp+18h] [ebp-44h]\n  int (__fastcall *v54)(int, int); // [esp+1Ch] [ebp-40h]\n  int v55; // [esp+20h] [ebp-3Ch]\n  int (__fastcall *v56)(int, _DWORD *); // [esp+24h] [ebp-38h]\n  int v57; // [esp+28h] [ebp-34h]\n  int (__fastcall *v58)(int, int); // [esp+2Ch] [ebp-30h]\n  int (__fastcall *v59)(int, int); // [esp+2Ch] [ebp-30h]\n  int v60; // [esp+30h] [ebp-2Ch]\n  int v61; // [esp+30h] [ebp-2Ch]\n  _BYTE *v62; // [esp+38h] [ebp-24h]\n  unsigned __int8 *v63; // [esp+38h] [ebp-24h]\n  _BYTE *v64; // [esp+3Ch] [ebp-20h]\n  _BYTE *v65; // [esp+3Ch] [ebp-20h]\n  _BYTE *v66; // [esp+40h] [ebp-1Ch]\n  _BYTE *v67; // [esp+40h] [ebp-1Ch]\n  _BYTE *v68; // [esp+44h] [ebp-18h]\n  _BYTE *v69; // [esp+44h] [ebp-18h]\n  _WORD *v70; // [esp+48h] [ebp-14h]\n  _WORD *v71; // [esp+48h] [ebp-14h]\n  _WORD *v72; // [esp+4Ch] [ebp-10h]\n  _WORD *v73; // [esp+4Ch] [ebp-10h]\n  _WORD *v74; // [esp+50h] [ebp-Ch]\n  _WORD *v75; // [esp+50h] [ebp-Ch]\n  _WORD *v76; // [esp+54h] [ebp-8h]\n  _WORD *v77; // [esp+54h] [ebp-8h]\n  _DWORD *v78; // [esp+58h] [ebp-4h]\n\n  v78 = a2;\n  v6 = 0x80;\n  v47 = 0;\n  if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n  {\n    v49 = 4;\n    v48 = 3;\n    v47 = (*(_BYTE *)(result + 321) & 1) != 0;\n  }\n  else\n  {\n    v49 = 3;\n    if ( (*(_BYTE *)(result + 321) & 1) != 0 )\n      v48 = 4;\n    else\n      v48 = 3;\n  }\n  if ( a3 + 1 > 1 )\n    v49 = 1;\n  if ( *(_BYTE *)(result + 5) == 8 )\n  {\n    if ( a3 )\n    {\n      v64 = (_BYTE *)*a2;\n      v66 = (_BYTE *)a2[1];\n      v68 = (_BYTE *)a2[2];\n      if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n      {\n        v7 = (_BYTE *)a2[3];\n        v62 = (_BYTE *)v78[3];\n      }\n      else\n      {\n        v7 = 0;\n        v62 = 0;\n      }\n    }\n    else\n    {\n      v64 = (_BYTE *)*a2;\n      v66 = (_BYTE *)(*a2 + 1);\n      v68 = (_BYTE *)(*a2 + 2);\n      v7 = v68;\n      v62 = (_BYTE *)(*v78 + 3);\n    }\n    if ( *(_BYTE *)(result + 6) == 8 )\n    {\n      v60 = result;\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n        v58 = (int (__fastcall *)(int, int))sub_4F5B3E;\n      else\n        v58 = sub_4F4284;\n      if ( v47 )\n      {\n        for ( i = a4; a5; i += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v68;\n            *i = v58(v60, (int)v7);\n            LOE09B(v9) = *v66;\n            i[1] = v58(v60, v9);\n            LOE09B(v10) = *v64;\n            i[2] = v58(v60, v10);\n            i[3] = *v62;\n            v64 += v49;\n            v66 += v49;\n            v68 += v49;\n            v62 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( j = a4; a5; j += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v68;\n            *j = v58(v60, (int)v7);\n            LOE09B(v12) = *v66;\n            j[1] = v58(v60, v12);\n            LOE09B(v13) = *v64;\n            j[2] = v58(v60, v13);\n            v64 += v49;\n            v66 += v49;\n            v68 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = v48;\n        }\n      }\n    }\n    else if ( *(_BYTE *)(result + 6) == 16 )\n    {\n      v61 = result;\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n        v59 = (int (__fastcall *)(int, int))sub_4F5B3E;\n      else\n        v59 = sub_4F4284;\n      v52 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v50 = (int (__fastcall *)(int, int))sub_4F0172;\n      else\n        v50 = sub_4FDDA3;\n      if ( a3 )\n      {\n        v65 = (_BYTE *)*v78;\n        v67 = (_BYTE *)v78[1];\n        v7 = (_BYTE *)v78[2];\n        v69 = v7;\n        if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n        {\n          result = v78[3];\n          v63 = (unsigned __int8 *)result;\n        }\n        else\n        {\n          result = 0;\n          v63 = 0;\n        }\n      }\n      else\n      {\n        v65 = (_BYTE *)*v78;\n        v67 = (_BYTE *)(*v78 + 1);\n        v69 = (_BYTE *)(*v78 + 2);\n        result = (int)v69;\n        v63 = (unsigned __int8 *)(*v78 + 3);\n      }\n      if ( v47 )\n      {\n        for ( k = a4; a5; k += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v69;\n            v15 = v59(v61, (int)v7);\n            LOB30E(v16) = sub_4F6E71(v15, 0xFFFFu, 0xFFu);\n            *k = v50(v52, v16);\n            LOE09B(v17) = *v67;\n            v18 = v59(v61, v17);\n            LOB30E(v19) = sub_4F6E71(v18, 0xFFFFu, 0xFFu);\n            k[1] = v50(v52, v19);\n            LOE09B(v20) = *v65;\n            v21 = v59(v61, v20);\n            LOB30E(v22) = sub_4F6E71(v21, 0xFFFFu, 0xFFu);\n            k[2] = v50(v52, v22);\n            LOB30E(v23) = sub_4F6E71(*v63, 0xFFFFu, 0xFFu);\n            k[3] = v50(v52, v23);\n            v65 += v49;\n            v67 += v49;\n            v69 += v49;\n            v63 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( m = a4; a5; m += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v69;\n            v25 = v59(v61, (int)v7);\n            LOB30E(v26) = sub_4F6E71(v25, 0xFFFFu, 0xFFu);\n            *m = v50(v52, v26);\n            LOE09B(v27) = *v67;\n            v28 = v59(v61, v27);\n            LOB30E(v29) = sub_4F6E71(v28, 0xFFFFu, 0xFFu);\n            m[1] = v50(v52, v29);\n            LOE09B(v30) = *v65;\n            v31 = v59(v61, v30);\n            LOB30E(v32) = sub_4F6E71(v31, 0xFFFFu, 0xFFu);\n            m[2] = v50(v52, v32);\n            v65 += v49;\n            v67 += v49;\n            v69 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = 2 * v48;\n        }\n      }\n    }\n  }\n  else if ( *(_BYTE *)(result + 5) == 16 )\n  {\n    if ( a3 )\n    {\n      v72 = (_WORD *)*a2;\n      v74 = (_WORD *)a2[1];\n      v76 = (_WORD *)a2[2];\n      if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n      {\n        a2 = (_DWORD *)a2[3];\n        v70 = (_WORD *)v78[3];\n      }\n      else\n      {\n        HI282E(a2) = 0;\n        v70 = 0;\n      }\n    }\n    else\n    {\n      v72 = (_WORD *)*a2;\n      v74 = (_WORD *)(*a2 + 2);\n      v76 = (_WORD *)(*a2 + 4);\n      HI282E(a2) = HI282E(v76);\n      v70 = (_WORD *)(*v78 + 6);\n    }\n    if ( *(_BYTE *)(result + 6) == 8 )\n    {\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n      {\n        v57 = result;\n        if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F5B19;\n        else\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4FF02F;\n      }\n      else\n      {\n        v57 = result;\n        if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F731C;\n        else\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F22A3;\n      }\n      v55 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v54 = (int (__fastcall *)(int, int))sub_4F731C;\n      else\n        v54 = (int (__fastcall *)(int, int))sub_4F22A3;\n      if ( v47 )\n      {\n        for ( n = a4; a5; n += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v76;\n            *n = v56(v57, a2);\n            LOB30E(v34) = *v74;\n            n[1] = v56(v57, v34);\n            LOB30E(v35) = *v72;\n            n[2] = v56(v57, v35);\n            LOB30E(v36) = *v70;\n            n[3] = v54(v55, v36);\n            v72 += v49;\n            v74 += v49;\n            v76 += v49;\n            v70 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( ii = a4; a5; ii += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v76;\n            *ii = v56(v57, a2);\n            LOB30E(v38) = *v74;\n            ii[1] = v56(v57, v38);\n            LOB30E(v39) = *v72;\n            ii[2] = v56(v57, v39);\n            v72 += v49;\n            v74 += v49;\n            v76 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = v48;\n        }\n      }\n    }\n    else if ( *(_BYTE *)(result + 6) == 16 )\n    {\n      v53 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v51 = (int (__fastcall *)(int, int))sub_4F0172;\n      else\n        v51 = sub_4FDDA3;\n      if ( a3 )\n      {\n        v73 = (_WORD *)*v78;\n        v75 = (_WORD *)v78[1];\n        a2 = (_DWORD *)v78[2];\n        v77 = a2;\n        if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n        {\n          result = v78[3];\n          v71 = (_WORD *)result;\n        }\n        else\n        {\n          result = 0;\n          v71 = 0;\n        }\n      }\n      else\n      {\n        v73 = (_WORD *)*v78;\n        v75 = (_WORD *)(*v78 + 2);\n        v77 = (_WORD *)(*v78 + 4);\n        result = (int)v77;\n        v71 = (_WORD *)(*v78 + 6);\n      }\n      if ( v47 )\n      {\n        for ( jj = a4; a5; jj += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v77;\n            *jj = v51(v53, (int)a2);\n            LOB30E(v41) = *v75;\n            jj[1] = v51(v53, v41);\n            LOB30E(v42) = *v73;\n            jj[2] = v51(v53, v42);\n            LOB30E(v43) = *v71;\n            jj[3] = v51(v53, v43);\n            v73 += v49;\n            v75 += v49;\n            v77 += v49;\n            v71 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( kk = a4; a5; kk += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v77;\n            *kk = v51(v53, (int)a2);\n            LOB30E(v45) = *v75;\n            kk[1] = v51(v53, v45);\n            LOB30E(v46) = *v73;\n            kk[2] = v51(v53, v46);\n            v73 += v49;\n            v75 += v49;\n            v77 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = 2 * v48;\n        }\n      }\n    }\n  }\n  return result;\n}\n// 4FAB3A: variable 'v7' is possibly undefined\n// 4FB0FE: variable 'v9' is possibly undefined\n// 4FE3C4: variable 'v10' is possibly undefined\n// 4F1F2F: variable 'v12' is possibly undefined\n// 4F55B4: variable 'v13' is possibly undefined\n// 4F70F1: variable 'v16' is possibly undefined\n// 4FB34C: variable 'v17' is possibly undefined\n// 4F0BCB: variable 'v19' is possibly undefined\n// 4F1389: variable 'v20' is possibly undefined\n// 4F697C: variable 'v22' is possibly undefined\n// 4F58CC: variable 'v23' is possibly undefined\n// 4F635D: variable 'v26' is possibly undefined\n// 4F937F: variable 'v27' is possibly undefined\n// 4F09BF: variable 'v29' is possibly undefined\n// 4FF171: variable 'v30' is possibly undefined\n// 4FB508: variable 'v32' is possibly undefined\n// 4F80DE: variable 'a2' is possibly undefined\n// 4F2FFD: variable 'v34' is possibly undefined\n// 4F4EDA: variable 'v35' is possibly undefined\n// 4F7EA5: variable 'v36' is possibly undefined\n// 4FECB2: variable 'v38' is possibly undefined\n// 4FE6CA: variable 'v39' is possibly undefined\n// 4F8C8C: variable 'v41' is possibly undefined\n// 4FBF2D: variable 'v42' is possibly undefined\n// 4F4C22: variable 'v43' is possibly undefined\n// 4F1801: variable 'v45' is possibly undefined\n// 4FFFA6: variable 'v46' is possibly undefined\n// 4F5B3E: using guessed type int sub_4F5B3E();\n// 4F0172: using guessed type int sub_4F0172();\n\n"
    },
    {
        "Function": "sub_4F9D32",
        "Total XOR and shift operations": 24,
        "XOR operations": 0,
        "Shift operations": 24,
        "Operation percentage": "5.03%",
        "Function Body": "\nint __fastcall sub_4F9D32(int result, _DWORD *a2, int a3, _BYTE *a4, int a5, unsigned __int8 a6)\n{\n  unsigned __int8 v6; // bl\n  _BYTE *v7; // edx\n  _BYTE *i; // esi\n  int v9; // edx\n  int v10; // edx\n  _BYTE *j; // esi\n  int v12; // edx\n  int v13; // edx\n  _WORD *k; // esi\n  unsigned __int8 v15; // al\n  int v16; // eax\n  int v17; // edx\n  unsigned __int8 v18; // al\n  int v19; // eax\n  int v20; // edx\n  unsigned __int8 v21; // al\n  int v22; // eax\n  int v23; // eax\n  _WORD *m; // esi\n  unsigned __int8 v25; // al\n  int v26; // eax\n  int v27; // edx\n  unsigned __int8 v28; // al\n  int v29; // eax\n  int v30; // edx\n  unsigned __int8 v31; // al\n  int v32; // eax\n  _BYTE *n; // esi\n  _DWORD *v34; // edx\n  _DWORD *v35; // edx\n  int v36; // edx\n  _BYTE *ii; // esi\n  _DWORD *v38; // edx\n  _DWORD *v39; // edx\n  _WORD *jj; // esi\n  int v41; // edx\n  int v42; // edx\n  int v43; // edx\n  _WORD *kk; // esi\n  int v45; // edx\n  int v46; // edx\n  bool v47; // [esp+Bh] [ebp-51h]\n  int v48; // [esp+Ch] [ebp-50h]\n  int v49; // [esp+10h] [ebp-4Ch]\n  int (__fastcall *v50)(int, int); // [esp+14h] [ebp-48h]\n  int (__fastcall *v51)(int, int); // [esp+14h] [ebp-48h]\n  int v52; // [esp+18h] [ebp-44h]\n  int v53; // [esp+18h] [ebp-44h]\n  int (__fastcall *v54)(int, int); // [esp+1Ch] [ebp-40h]\n  int v55; // [esp+20h] [ebp-3Ch]\n  int (__fastcall *v56)(int, _DWORD *); // [esp+24h] [ebp-38h]\n  int v57; // [esp+28h] [ebp-34h]\n  int (__fastcall *v58)(int, int); // [esp+2Ch] [ebp-30h]\n  int (__fastcall *v59)(int, int); // [esp+2Ch] [ebp-30h]\n  int v60; // [esp+30h] [ebp-2Ch]\n  int v61; // [esp+30h] [ebp-2Ch]\n  _BYTE *v62; // [esp+38h] [ebp-24h]\n  unsigned __int8 *v63; // [esp+38h] [ebp-24h]\n  _BYTE *v64; // [esp+3Ch] [ebp-20h]\n  _BYTE *v65; // [esp+3Ch] [ebp-20h]\n  _BYTE *v66; // [esp+40h] [ebp-1Ch]\n  _BYTE *v67; // [esp+40h] [ebp-1Ch]\n  _BYTE *v68; // [esp+44h] [ebp-18h]\n  _BYTE *v69; // [esp+44h] [ebp-18h]\n  _WORD *v70; // [esp+48h] [ebp-14h]\n  _WORD *v71; // [esp+48h] [ebp-14h]\n  _WORD *v72; // [esp+4Ch] [ebp-10h]\n  _WORD *v73; // [esp+4Ch] [ebp-10h]\n  _WORD *v74; // [esp+50h] [ebp-Ch]\n  _WORD *v75; // [esp+50h] [ebp-Ch]\n  _WORD *v76; // [esp+54h] [ebp-8h]\n  _WORD *v77; // [esp+54h] [ebp-8h]\n  _DWORD *v78; // [esp+58h] [ebp-4h]\n\n  v78 = a2;\n  v6 = 0x80;\n  v47 = 0;\n  if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n  {\n    v49 = 4;\n    v48 = 3;\n    v47 = (*(_BYTE *)(result + 321) & 1) != 0;\n  }\n  else\n  {\n    v49 = 3;\n    if ( (*(_BYTE *)(result + 321) & 1) != 0 )\n      v48 = 4;\n    else\n      v48 = 3;\n  }\n  if ( a3 + 1 > 1 )\n    v49 = 1;\n  if ( *(_BYTE *)(result + 5) == 8 )\n  {\n    if ( a3 )\n    {\n      v68 = (_BYTE *)*a2;\n      v66 = (_BYTE *)a2[1];\n      v64 = (_BYTE *)a2[2];\n      if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n      {\n        v7 = (_BYTE *)a2[3];\n        v62 = (_BYTE *)v78[3];\n      }\n      else\n      {\n        v7 = 0;\n        v62 = 0;\n      }\n    }\n    else\n    {\n      v68 = (_BYTE *)*a2;\n      v66 = (_BYTE *)(*a2 + 1);\n      v64 = (_BYTE *)(*a2 + 2);\n      v7 = v64;\n      v62 = (_BYTE *)(*v78 + 3);\n    }\n    if ( *(_BYTE *)(result + 6) == 8 )\n    {\n      v60 = result;\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n        v58 = (int (__fastcall *)(int, int))sub_4F5B3E;\n      else\n        v58 = sub_4F4284;\n      if ( v47 )\n      {\n        for ( i = a4; a5; i += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v68;\n            i[2] = v58(v60, (int)v7);\n            LOE09B(v9) = *v66;\n            i[1] = v58(v60, v9);\n            LOE09B(v10) = *v64;\n            *i = v58(v60, v10);\n            i[3] = *v62;\n            v64 += v49;\n            v66 += v49;\n            v68 += v49;\n            v62 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( j = a4; a5; j += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v68;\n            j[2] = v58(v60, (int)v7);\n            LOE09B(v12) = *v66;\n            j[1] = v58(v60, v12);\n            LOE09B(v13) = *v64;\n            *j = v58(v60, v13);\n            v64 += v49;\n            v66 += v49;\n            v68 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = v48;\n        }\n      }\n    }\n    else if ( *(_BYTE *)(result + 6) == 16 )\n    {\n      v61 = result;\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n        v59 = (int (__fastcall *)(int, int))sub_4F5B3E;\n      else\n        v59 = sub_4F4284;\n      v52 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v50 = (int (__fastcall *)(int, int))sub_4F0172;\n      else\n        v50 = sub_4FDDA3;\n      if ( a3 )\n      {\n        v65 = (_BYTE *)*v78;\n        v67 = (_BYTE *)v78[1];\n        v7 = (_BYTE *)v78[2];\n        v69 = v7;\n        if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n        {\n          result = v78[3];\n          v63 = (unsigned __int8 *)result;\n        }\n        else\n        {\n          result = 0;\n          v63 = 0;\n        }\n      }\n      else\n      {\n        v65 = (_BYTE *)*v78;\n        v67 = (_BYTE *)(*v78 + 1);\n        v69 = (_BYTE *)(*v78 + 2);\n        result = (int)v69;\n        v63 = (unsigned __int8 *)(*v78 + 3);\n      }\n      if ( v47 )\n      {\n        for ( k = a4; a5; k += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v69;\n            v15 = v59(v61, (int)v7);\n            LOB30E(v16) = sub_4F6E71(v15, 0xFFFFu, 0xFFu);\n            k[2] = v50(v52, v16);\n            LOE09B(v17) = *v67;\n            v18 = v59(v61, v17);\n            LOB30E(v19) = sub_4F6E71(v18, 0xFFFFu, 0xFFu);\n            k[1] = v50(v52, v19);\n            LOE09B(v20) = *v65;\n            v21 = v59(v61, v20);\n            LOB30E(v22) = sub_4F6E71(v21, 0xFFFFu, 0xFFu);\n            *k = v50(v52, v22);\n            LOB30E(v23) = sub_4F6E71(*v63, 0xFFFFu, 0xFFu);\n            k[3] = v50(v52, v23);\n            v65 += v49;\n            v67 += v49;\n            v69 += v49;\n            v63 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( m = a4; a5; m += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v69;\n            v25 = v59(v61, (int)v7);\n            LOB30E(v26) = sub_4F6E71(v25, 0xFFFFu, 0xFFu);\n            m[2] = v50(v52, v26);\n            LOE09B(v27) = *v67;\n            v28 = v59(v61, v27);\n            LOB30E(v29) = sub_4F6E71(v28, 0xFFFFu, 0xFFu);\n            m[1] = v50(v52, v29);\n            LOE09B(v30) = *v65;\n            v31 = v59(v61, v30);\n            LOB30E(v32) = sub_4F6E71(v31, 0xFFFFu, 0xFFu);\n            *m = v50(v52, v32);\n            v65 += v49;\n            v67 += v49;\n            v69 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = 2 * v48;\n        }\n      }\n    }\n  }\n  else if ( *(_BYTE *)(result + 5) == 16 )\n  {\n    if ( a3 )\n    {\n      v76 = (_WORD *)*a2;\n      v74 = (_WORD *)a2[1];\n      v72 = (_WORD *)a2[2];\n      if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n      {\n        a2 = (_DWORD *)a2[3];\n        v70 = (_WORD *)v78[3];\n      }\n      else\n      {\n        HI282E(a2) = 0;\n        v70 = 0;\n      }\n    }\n    else\n    {\n      v76 = (_WORD *)*a2;\n      v74 = (_WORD *)(*a2 + 2);\n      v72 = (_WORD *)(*a2 + 4);\n      HI282E(a2) = HI282E(v72);\n      v70 = (_WORD *)(*v78 + 6);\n    }\n    if ( *(_BYTE *)(result + 6) == 8 )\n    {\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n      {\n        v57 = result;\n        if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F5B19;\n        else\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4FF02F;\n      }\n      else\n      {\n        v57 = result;\n        if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F731C;\n        else\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F22A3;\n      }\n      v55 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v54 = (int (__fastcall *)(int, int))sub_4F731C;\n      else\n        v54 = (int (__fastcall *)(int, int))sub_4F22A3;\n      if ( v47 )\n      {\n        for ( n = a4; a5; n += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v76;\n            n[2] = v56(v57, a2);\n            LOB30E(v34) = *v74;\n            n[1] = v56(v57, v34);\n            LOB30E(v35) = *v72;\n            *n = v56(v57, v35);\n            LOB30E(v36) = *v70;\n            n[3] = v54(v55, v36);\n            v72 += v49;\n            v74 += v49;\n            v76 += v49;\n            v70 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( ii = a4; a5; ii += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v76;\n            ii[2] = v56(v57, a2);\n            LOB30E(v38) = *v74;\n            ii[1] = v56(v57, v38);\n            LOB30E(v39) = *v72;\n            *ii = v56(v57, v39);\n            v72 += v49;\n            v74 += v49;\n            v76 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = v48;\n        }\n      }\n    }\n    else if ( *(_BYTE *)(result + 6) == 16 )\n    {\n      v53 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v51 = (int (__fastcall *)(int, int))sub_4F0172;\n      else\n        v51 = sub_4FDDA3;\n      if ( a3 )\n      {\n        v73 = (_WORD *)*v78;\n        v75 = (_WORD *)v78[1];\n        a2 = (_DWORD *)v78[2];\n        v77 = a2;\n        if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n        {\n          result = v78[3];\n          v71 = (_WORD *)result;\n        }\n        else\n        {\n          result = 0;\n          v71 = 0;\n        }\n      }\n      else\n      {\n        v73 = (_WORD *)*v78;\n        v75 = (_WORD *)(*v78 + 2);\n        v77 = (_WORD *)(*v78 + 4);\n        result = (int)v77;\n        v71 = (_WORD *)(*v78 + 6);\n      }\n      if ( v47 )\n      {\n        for ( jj = a4; a5; jj += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v77;\n            jj[2] = v51(v53, (int)a2);\n            LOB30E(v41) = *v75;\n            jj[1] = v51(v53, v41);\n            LOB30E(v42) = *v73;\n            *jj = v51(v53, v42);\n            LOB30E(v43) = *v71;\n            jj[3] = v51(v53, v43);\n            v73 += v49;\n            v75 += v49;\n            v77 += v49;\n            v71 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( kk = a4; a5; kk += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v77;\n            kk[2] = v51(v53, (int)a2);\n            LOB30E(v45) = *v75;\n            kk[1] = v51(v53, v45);\n            LOB30E(v46) = *v73;\n            *kk = v51(v53, v46);\n            v73 += v49;\n            v75 += v49;\n            v77 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = 2 * v48;\n        }\n      }\n    }\n  }\n  return result;\n}\n// 4FC357: variable 'v7' is possibly undefined\n// 4F9464: variable 'v9' is possibly undefined\n// 4F8FB4: variable 'v10' is possibly undefined\n// 4F9164: variable 'v12' is possibly undefined\n// 4F8CAF: variable 'v13' is possibly undefined\n// 4F69C9: variable 'v16' is possibly undefined\n// 4F87F6: variable 'v17' is possibly undefined\n// 4FC085: variable 'v19' is possibly undefined\n// 4F0E19: variable 'v20' is possibly undefined\n// 4FF7D4: variable 'v22' is possibly undefined\n// 4F223C: variable 'v23' is possibly undefined\n// 4F4908: variable 'v26' is possibly undefined\n// 4FB9B8: variable 'v27' is possibly undefined\n// 4F9EB7: variable 'v29' is possibly undefined\n// 4F713F: variable 'v30' is possibly undefined\n// 4F1113: variable 'v32' is possibly undefined\n// 4FD916: variable 'a2' is possibly undefined\n// 4F288D: variable 'v34' is possibly undefined\n// 4FB725: variable 'v35' is possibly undefined\n// 4FE842: variable 'v36' is possibly undefined\n// 4FD119: variable 'v38' is possibly undefined\n// 4F6A31: variable 'v39' is possibly undefined\n// 4F5879: variable 'v41' is possibly undefined\n// 4F2DA2: variable 'v42' is possibly undefined\n// 4F8881: variable 'v43' is possibly undefined\n// 4F26EA: variable 'v45' is possibly undefined\n// 4FBC46: variable 'v46' is possibly undefined\n// 4F5B3E: using guessed type int sub_4F5B3E();\n// 4F0172: using guessed type int sub_4F0172();\n\n"
    },
    {
        "Function": "sub_4F7AEB",
        "Total XOR and shift operations": 24,
        "XOR operations": 0,
        "Shift operations": 24,
        "Operation percentage": "5.03%",
        "Function Body": "\nint __fastcall sub_4F7AEB(int result, _DWORD *a2, int a3, _BYTE *a4, int a5, unsigned __int8 a6)\n{\n  unsigned __int8 v6; // bl\n  _BYTE *v7; // edx\n  _BYTE *i; // esi\n  int v9; // edx\n  int v10; // edx\n  _BYTE *j; // esi\n  int v12; // edx\n  int v13; // edx\n  _WORD *k; // esi\n  unsigned __int8 v15; // al\n  int v16; // eax\n  int v17; // edx\n  unsigned __int8 v18; // al\n  int v19; // eax\n  int v20; // edx\n  unsigned __int8 v21; // al\n  int v22; // eax\n  int v23; // eax\n  _WORD *m; // esi\n  unsigned __int8 v25; // al\n  int v26; // eax\n  int v27; // edx\n  unsigned __int8 v28; // al\n  int v29; // eax\n  int v30; // edx\n  unsigned __int8 v31; // al\n  int v32; // eax\n  _BYTE *n; // esi\n  _DWORD *v34; // edx\n  _DWORD *v35; // edx\n  int v36; // edx\n  _BYTE *ii; // esi\n  _DWORD *v38; // edx\n  _DWORD *v39; // edx\n  _WORD *jj; // esi\n  int v41; // edx\n  int v42; // edx\n  int v43; // edx\n  _WORD *kk; // esi\n  int v45; // edx\n  int v46; // edx\n  bool v47; // [esp+Bh] [ebp-51h]\n  int v48; // [esp+Ch] [ebp-50h]\n  int v49; // [esp+10h] [ebp-4Ch]\n  int (__fastcall *v50)(int, int); // [esp+14h] [ebp-48h]\n  int (__fastcall *v51)(int, int); // [esp+14h] [ebp-48h]\n  int v52; // [esp+18h] [ebp-44h]\n  int v53; // [esp+18h] [ebp-44h]\n  int (__fastcall *v54)(int, int); // [esp+1Ch] [ebp-40h]\n  int v55; // [esp+20h] [ebp-3Ch]\n  int (__fastcall *v56)(int, _DWORD *); // [esp+24h] [ebp-38h]\n  int v57; // [esp+28h] [ebp-34h]\n  int (__fastcall *v58)(int, int); // [esp+2Ch] [ebp-30h]\n  int (__fastcall *v59)(int, int); // [esp+2Ch] [ebp-30h]\n  int v60; // [esp+30h] [ebp-2Ch]\n  int v61; // [esp+30h] [ebp-2Ch]\n  _BYTE *v62; // [esp+38h] [ebp-24h]\n  unsigned __int8 *v63; // [esp+38h] [ebp-24h]\n  _BYTE *v64; // [esp+3Ch] [ebp-20h]\n  _BYTE *v65; // [esp+3Ch] [ebp-20h]\n  _BYTE *v66; // [esp+40h] [ebp-1Ch]\n  _BYTE *v67; // [esp+40h] [ebp-1Ch]\n  _BYTE *v68; // [esp+44h] [ebp-18h]\n  _BYTE *v69; // [esp+44h] [ebp-18h]\n  _WORD *v70; // [esp+48h] [ebp-14h]\n  _WORD *v71; // [esp+48h] [ebp-14h]\n  _WORD *v72; // [esp+4Ch] [ebp-10h]\n  _WORD *v73; // [esp+4Ch] [ebp-10h]\n  _WORD *v74; // [esp+50h] [ebp-Ch]\n  _WORD *v75; // [esp+50h] [ebp-Ch]\n  _WORD *v76; // [esp+54h] [ebp-8h]\n  _WORD *v77; // [esp+54h] [ebp-8h]\n  _DWORD *v78; // [esp+58h] [ebp-4h]\n\n  v78 = a2;\n  v6 = 0x80;\n  v47 = 0;\n  if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n  {\n    v49 = 4;\n    v48 = 3;\n    v47 = (*(_BYTE *)(result + 321) & 1) != 0;\n  }\n  else\n  {\n    v49 = 3;\n    if ( (*(_BYTE *)(result + 321) & 1) != 0 )\n      v48 = 4;\n    else\n      v48 = 3;\n  }\n  if ( a3 + 1 > 1 )\n    v49 = 1;\n  if ( *(_BYTE *)(result + 5) == 8 )\n  {\n    if ( a3 )\n    {\n      v68 = (_BYTE *)*a2;\n      v66 = (_BYTE *)a2[1];\n      v64 = (_BYTE *)a2[2];\n      if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n      {\n        v7 = (_BYTE *)a2[3];\n        v62 = (_BYTE *)v78[3];\n      }\n      else\n      {\n        v7 = 0;\n        v62 = 0;\n      }\n    }\n    else\n    {\n      v68 = (_BYTE *)*a2;\n      v66 = (_BYTE *)(*a2 + 1);\n      v64 = (_BYTE *)(*a2 + 2);\n      v7 = v64;\n      v62 = (_BYTE *)(*v78 + 3);\n    }\n    if ( *(_BYTE *)(result + 6) == 8 )\n    {\n      v60 = result;\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n        v58 = (int (__fastcall *)(int, int))sub_4F5B3E;\n      else\n        v58 = sub_4F4284;\n      if ( v47 )\n      {\n        for ( i = a4; a5; i += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v68;\n            *i = v58(v60, (int)v7);\n            LOE09B(v9) = *v66;\n            i[1] = v58(v60, v9);\n            LOE09B(v10) = *v64;\n            i[2] = v58(v60, v10);\n            i[3] = *v62;\n            v64 += v49;\n            v66 += v49;\n            v68 += v49;\n            v62 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( j = a4; a5; j += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v68;\n            *j = v58(v60, (int)v7);\n            LOE09B(v12) = *v66;\n            j[1] = v58(v60, v12);\n            LOE09B(v13) = *v64;\n            j[2] = v58(v60, v13);\n            v64 += v49;\n            v66 += v49;\n            v68 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = v48;\n        }\n      }\n    }\n    else if ( *(_BYTE *)(result + 6) == 16 )\n    {\n      v61 = result;\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n        v59 = (int (__fastcall *)(int, int))sub_4F5B3E;\n      else\n        v59 = sub_4F4284;\n      v52 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v50 = (int (__fastcall *)(int, int))sub_4F0172;\n      else\n        v50 = sub_4FDDA3;\n      if ( a3 )\n      {\n        v65 = (_BYTE *)*v78;\n        v67 = (_BYTE *)v78[1];\n        v7 = (_BYTE *)v78[2];\n        v69 = v7;\n        if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n        {\n          result = v78[3];\n          v63 = (unsigned __int8 *)result;\n        }\n        else\n        {\n          result = 0;\n          v63 = 0;\n        }\n      }\n      else\n      {\n        v65 = (_BYTE *)*v78;\n        v67 = (_BYTE *)(*v78 + 1);\n        v69 = (_BYTE *)(*v78 + 2);\n        result = (int)v69;\n        v63 = (unsigned __int8 *)(*v78 + 3);\n      }\n      if ( v47 )\n      {\n        for ( k = a4; a5; k += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v69;\n            v15 = v59(v61, (int)v7);\n            LOB30E(v16) = sub_4F6E71(v15, 0xFFFFu, 0xFFu);\n            *k = v50(v52, v16);\n            LOE09B(v17) = *v67;\n            v18 = v59(v61, v17);\n            LOB30E(v19) = sub_4F6E71(v18, 0xFFFFu, 0xFFu);\n            k[1] = v50(v52, v19);\n            LOE09B(v20) = *v65;\n            v21 = v59(v61, v20);\n            LOB30E(v22) = sub_4F6E71(v21, 0xFFFFu, 0xFFu);\n            k[2] = v50(v52, v22);\n            LOB30E(v23) = sub_4F6E71(*v63, 0xFFFFu, 0xFFu);\n            k[3] = v50(v52, v23);\n            v65 += v49;\n            v67 += v49;\n            v69 += v49;\n            v63 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( m = a4; a5; m += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOE09B(v7) = *v69;\n            v25 = v59(v61, (int)v7);\n            LOB30E(v26) = sub_4F6E71(v25, 0xFFFFu, 0xFFu);\n            *m = v50(v52, v26);\n            LOE09B(v27) = *v67;\n            v28 = v59(v61, v27);\n            LOB30E(v29) = sub_4F6E71(v28, 0xFFFFu, 0xFFu);\n            m[1] = v50(v52, v29);\n            LOE09B(v30) = *v65;\n            v31 = v59(v61, v30);\n            LOB30E(v32) = sub_4F6E71(v31, 0xFFFFu, 0xFFu);\n            m[2] = v50(v52, v32);\n            v65 += v49;\n            v67 += v49;\n            v69 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = 2 * v48;\n        }\n      }\n    }\n  }\n  else if ( *(_BYTE *)(result + 5) == 16 )\n  {\n    if ( a3 )\n    {\n      v76 = (_WORD *)*a2;\n      v74 = (_WORD *)a2[1];\n      v72 = (_WORD *)a2[2];\n      if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n      {\n        a2 = (_DWORD *)a2[3];\n        v70 = (_WORD *)v78[3];\n      }\n      else\n      {\n        HI282E(a2) = 0;\n        v70 = 0;\n      }\n    }\n    else\n    {\n      v76 = (_WORD *)*a2;\n      v74 = (_WORD *)(*a2 + 2);\n      v72 = (_WORD *)(*a2 + 4);\n      HI282E(a2) = HI282E(v72);\n      v70 = (_WORD *)(*v78 + 6);\n    }\n    if ( *(_BYTE *)(result + 6) == 8 )\n    {\n      if ( (*(_BYTE *)(result + 321) & 2) != 0 )\n      {\n        v57 = result;\n        if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F5B19;\n        else\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4FF02F;\n      }\n      else\n      {\n        v57 = result;\n        if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F731C;\n        else\n          v56 = (int (__fastcall *)(int, _DWORD *))sub_4F22A3;\n      }\n      v55 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v54 = (int (__fastcall *)(int, int))sub_4F731C;\n      else\n        v54 = (int (__fastcall *)(int, int))sub_4F22A3;\n      if ( v47 )\n      {\n        for ( n = a4; a5; n += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v76;\n            *n = v56(v57, a2);\n            LOB30E(v34) = *v74;\n            n[1] = v56(v57, v34);\n            LOB30E(v35) = *v72;\n            n[2] = v56(v57, v35);\n            LOB30E(v36) = *v70;\n            n[3] = v54(v55, v36);\n            v72 += v49;\n            v74 += v49;\n            v76 += v49;\n            v70 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( ii = a4; a5; ii += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v76;\n            *ii = v56(v57, a2);\n            LOB30E(v38) = *v74;\n            ii[1] = v56(v57, v38);\n            LOB30E(v39) = *v72;\n            ii[2] = v56(v57, v39);\n            v72 += v49;\n            v74 += v49;\n            v76 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = v48;\n        }\n      }\n    }\n    else if ( *(_BYTE *)(result + 6) == 16 )\n    {\n      v53 = result;\n      if ( (*(_BYTE *)(result + 320) & 4) != 0 )\n        v51 = (int (__fastcall *)(int, int))sub_4F0172;\n      else\n        v51 = sub_4FDDA3;\n      if ( a3 )\n      {\n        v73 = (_WORD *)*v78;\n        v75 = (_WORD *)v78[1];\n        a2 = (_DWORD *)v78[2];\n        v77 = a2;\n        if ( (*(_BYTE *)(result + 320) & 1) != 0 )\n        {\n          result = v78[3];\n          v71 = (_WORD *)result;\n        }\n        else\n        {\n          result = 0;\n          v71 = 0;\n        }\n      }\n      else\n      {\n        v73 = (_WORD *)*v78;\n        v75 = (_WORD *)(*v78 + 2);\n        v77 = (_WORD *)(*v78 + 4);\n        result = (int)v77;\n        v71 = (_WORD *)(*v78 + 6);\n      }\n      if ( v47 )\n      {\n        for ( jj = a4; a5; jj += 4 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v77;\n            *jj = v51(v53, (int)a2);\n            LOB30E(v41) = *v75;\n            jj[1] = v51(v53, v41);\n            LOB30E(v42) = *v73;\n            jj[2] = v51(v53, v42);\n            LOB30E(v43) = *v71;\n            jj[3] = v51(v53, v43);\n            v73 += v49;\n            v75 += v49;\n            v77 += v49;\n            v71 += v49;\n          }\n          result = (unsigned __int8)((v6 << 7) | (v6 >> 1));\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n        }\n      }\n      else\n      {\n        for ( kk = a4; a5; kk += v48 )\n        {\n          if ( (v6 & a6) != 0 )\n          {\n            LOB30E(a2) = *v77;\n            *kk = v51(v53, (int)a2);\n            LOB30E(v45) = *v75;\n            kk[1] = v51(v53, v45);\n            LOB30E(v46) = *v73;\n            kk[2] = v51(v53, v46);\n            v73 += v49;\n            v75 += v49;\n            v77 += v49;\n          }\n          v6 = (v6 << 7) | (v6 >> 1);\n          --a5;\n          result = 2 * v48;\n        }\n      }\n    }\n  }\n  return result;\n}\n// 4F7647: variable 'v7' is possibly undefined\n// 4FB474: variable 'v9' is possibly undefined\n// 4F1F28: variable 'v10' is possibly undefined\n// 4FBA59: variable 'v12' is possibly undefined\n// 4F5618: variable 'v13' is possibly undefined\n// 4F008D: variable 'v16' is possibly undefined\n// 4FF32B: variable 'v17' is possibly undefined\n// 4F3F85: variable 'v19' is possibly undefined\n// 4FA59E: variable 'v20' is possibly undefined\n// 4F8F89: variable 'v22' is possibly undefined\n// 4FE41C: variable 'v23' is possibly undefined\n// 4FD4E9: variable 'v26' is possibly undefined\n// 4F3245: variable 'v27' is possibly undefined\n// 4FC35B: variable 'v29' is possibly undefined\n// 4F8757: variable 'v30' is possibly undefined\n// 4F207A: variable 'v32' is possibly undefined\n// 4F3A0C: variable 'a2' is possibly undefined\n// 4F585B: variable 'v34' is possibly undefined\n// 4FEE28: variable 'v35' is possibly undefined\n// 4FAB84: variable 'v36' is possibly undefined\n// 50E639: variable 'v38' is possibly undefined\n// 50202A: variable 'v39' is possibly undefined\n// 5031F8: variable 'v41' is possibly undefined\n// 502C81: variable 'v42' is possibly undefined\n// 50B100: variable 'v43' is possibly undefined\n// 50F33D: variable 'v45' is possibly undefined\n// 504EFD: variable 'v46' is possibly undefined\n// 4F5B3E: using guessed type int sub_4F5B3E();\n// 4F0172: using guessed type int sub_4F0172();\n\n"
    }
]