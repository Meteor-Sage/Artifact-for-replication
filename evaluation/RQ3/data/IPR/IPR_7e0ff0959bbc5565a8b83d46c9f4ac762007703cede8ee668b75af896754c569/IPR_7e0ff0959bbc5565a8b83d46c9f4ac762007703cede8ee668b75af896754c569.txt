[
    {
        "Function": "sub_401095",
        "Total XOR and shift operations": 28,
        "XOR operations": 18,
        "Shift operations": 10,
        "Operation percentage": "33.33%",
        "Function Body": "\nunsigned int __stdcall sub_401095(LP5FF7 lpFileName, __int64 lDistanceToMove, __int64 a3)\n{\n  unsigned int v3; // esi\n  int v4; // ebx\n  HA82C0 FileA; // edi\n  void *v6; // ebp\n  _BYTE *v7; // eax\n  DWORD v8; // edx\n  DWORD v9; // edi\n  unsigned int v10; // ecx\n  unsigned int v11; // ecx\n  unsigned int v12; // ecx\n  unsigned int v13; // ecx\n  unsigned int v14; // ecx\n  unsigned int v15; // ecx\n  unsigned int v16; // ecx\n  int v17; // ecx\n  DWORD nNumberOfBytesToRead; // [esp+8h] [ebp-14h]\n  DWORD NumberOfBytesRead; // [esp+10h] [ebp-Ch] BYREF\n  int v21; // [esp+14h] [ebp-8h]\n  HA82C0 v22; // [esp+18h] [ebp-4h]\n  LP5FF7 lpFileNamea; // [esp+20h] [ebp+4h]\n\n  v3 = -1;\n  v4 = 0;\n  nNumberOfBytesToRead = 0x80000;\n  if ( lpFileName )\n  {\n    FileA = CreateFileA(lpFileName, 0x80DBA300, 1u, 0, 3u, 0x80u, 0);\n    v22 = FileA;\n    if ( FileA != (HA82C0)-1 )\n    {\n      v6 = HeapAlloc(hHeap, 0, 0x80000u);\n      if ( v6 )\n      {\n        if ( lDistanceToMove > 0 )\n          SetFilePointer(FileA, lDistanceToMove, (PLONG)&lDistanceToMove + 1, 0);\n        lpFileNamea = (LP5FF7)(a3 + 0x80000);\n        do\n        {\n          lpFileNamea -= 0x80000;\n          v4 += 0x80000;\n          if ( (HI63BCD(a3) & (unsigned int)a3) != -1 && v4 > a3 )\n            nNumberOfBytesToRead = (DWORD)lpFileNamea;\n          ReadFile(FileA, v6, nNumberOfBytesToRead, &NumberOfBytesRead, 0);\n          v7 = v6;\n          v8 = NumberOfBytesRead;\n          if ( NumberOfBytesRead >= 8 )\n          {\n            v9 = NumberOfBytesRead >> 3;\n            do\n            {\n              v21 = (unsigned __int8)(v3 ^ *v7);\n              v10 = dword_414930[v21] ^ (v3 >> 8);\n              v11 = dword_414930[(unsigned __int8)(v10 ^ v7[1])] ^ (v10 >> 8);\n              v12 = dword_414930[(unsigned __int8)(v11 ^ v7[2])] ^ (v11 >> 8);\n              v13 = dword_414930[(unsigned __int8)(v12 ^ v7[3])] ^ (v12 >> 8);\n              v14 = dword_414930[(unsigned __int8)(v13 ^ v7[4])] ^ (v13 >> 8);\n              v15 = dword_414930[(unsigned __int8)(v14 ^ v7[5])] ^ (v14 >> 8);\n              v16 = dword_414930[(unsigned __int8)(v15 ^ v7[6])] ^ (v15 >> 8);\n              v17 = dword_414930[(unsigned __int8)(v16 ^ v7[7])] ^ (v16 >> 8);\n              v7 += 8;\n              v8 -= 8;\n              --v9;\n              v3 = v17;\n            }\n            while ( v9 );\n            FileA = v22;\n          }\n          for ( ; v8; --v8 )\n            v3 = dword_414930[(unsigned __int8)(v3 ^ *v7++)] ^ (v3 >> 8);\n        }\n        while ( NumberOfBytesRead == 0x80000 );\n        HeapFree(hHeap, 0, v6);\n      }\n      CloseHandle(FileA);\n    }\n  }\n  return ~v3;\n}\n// 414930: using guessed type int dword_414930[128];\n\n"
    },
    {
        "Function": "sub_40E03E",
        "Total XOR and shift operations": 50,
        "XOR operations": 48,
        "Shift operations": 2,
        "Operation percentage": "27.62%",
        "Function Body": "\nint __cdecl sub_40E03E(_DWORD *a1)\n{\n  int v1; // ecx\n  unsigned __int16 *v2; // ecx\n  int *v3; // edx\n  int v4; // esi\n  int v5; // esi\n  int v6; // edx\n  int v7; // ecx\n  int v8; // eax\n  int v9; // ecx\n  int v10; // edx\n  int v11; // esi\n  int v12; // eax\n  int v13; // ecx\n  int v14; // edx\n  int v15; // esi\n  int v16; // eax\n  int v17; // ecx\n  int v18; // edx\n  int v19; // esi\n  int v20; // eax\n  int v21; // ecx\n  int v22; // edx\n  int v23; // esi\n  int v24; // eax\n  int v25; // ecx\n  int v26; // edx\n  int v27; // esi\n  int v28; // eax\n  int v29; // ecx\n  int v30; // edx\n  int v31; // esi\n  int v32; // eax\n  int v33; // ecx\n  int v34; // edx\n  int v35; // esi\n  int v36; // eax\n  int v37; // ecx\n  int v38; // edx\n  int v39; // esi\n  int v40; // eax\n  int v41; // edi\n  int v42; // edx\n  int v43; // ecx\n  int v44; // eax\n  int v45; // esi\n  int v46; // edx\n  int v47; // ecx\n  int v48; // eax\n  int v49; // esi\n  int v50; // edi\n  int v51; // ecx\n  int v52; // eax\n  int v53; // edx\n  int v54; // esi\n  int v55; // ecx\n  int v56; // eax\n  int v57; // edx\n  int v58; // esi\n  int v59; // ecx\n  int v60; // eax\n  int v61; // edx\n  int v62; // esi\n  int v63; // ecx\n  int v64; // eax\n  int v65; // edx\n  int v66; // esi\n  int v67; // ecx\n  int v68; // eax\n  int v69; // edx\n  int v70; // ebx\n  int v71; // esi\n  int v72; // eax\n  int result; // eax\n  int v74; // [esp+14h] [ebp-40h] BYREF\n  int v75; // [esp+18h] [ebp-3Ch]\n  int v76; // [esp+1Ch] [ebp-38h]\n  int v77; // [esp+20h] [ebp-34h]\n  int v78; // [esp+24h] [ebp-30h]\n  int v79; // [esp+28h] [ebp-2Ch]\n  int v80; // [esp+2Ch] [ebp-28h]\n  int v81; // [esp+30h] [ebp-24h]\n  int v82; // [esp+34h] [ebp-20h]\n  int v83; // [esp+38h] [ebp-1Ch]\n  int v84; // [esp+3Ch] [ebp-18h]\n  int v85; // [esp+40h] [ebp-14h]\n  int v86; // [esp+44h] [ebp-10h]\n  int v87; // [esp+48h] [ebp-Ch]\n  int v88; // [esp+4Ch] [ebp-8h]\n  int v89; // [esp+50h] [ebp-4h]\n\n  v2 = (unsigned __int16 *)(v1 + 2);\n  v3 = &v74;\n  v4 = 16;\n  do\n  {\n    *v3++ = *((unsigned __int8 *)v2 - 2) | ((*((unsigned __int8 *)v2 - 1) | (*v2 << 8)) << 8);\n    v2 += 2;\n    --v4;\n  }\n  while ( v4 );\n  v5 = a1[1];\n  v6 = a1[2];\n  v7 = a1[3];\n  v8 = v5 + __ROL4__(v74 + (v5 & v6 | v7 & ~v5) + *a1 - 6883E4936, 7);\n  v9 = v8 + __ROL4__(v75 + (v8 & v5 | v6 & ~v8) + v7 - 38EBB0586, 12);\n  v10 = v9 + __ROR4__(v76 + (v8 & v9 | v5 & ~v9) + v6 + 6044D1819, 15);\n  v11 = v10 + __ROR4__(v77 + (v10 & v9 | v8 & ~v10) + v5 - 106BBD5330, 10);\n  v12 = v11 + __ROL4__(v78 + (v11 & v10 | v9 & ~v11) + v8 - 1768A2897, 7);\n  v13 = v12 + __ROL4__(v79 + (v12 & v11 | v10 & ~v12) + v9 + 1207D80426, 12);\n  v14 = v13 + __ROR4__(v80 + (v12 & v13 | v11 & ~v13) + v10 - 1498541341, 15);\n  v15 = v14 + __ROR4__(v81 + (v14 & v13 | v12 & ~v14) + v11 - 45B9A083, 10);\n  v16 = v15 + __ROL4__(v82 + (v15 & v14 | v13 & ~v15) + v12 + 17810A5416, 7);\n  v17 = v16 + __ROL4__(v83 + (v16 & v15 | v14 & ~v16) + v13 - 19D1934417, 12);\n  v18 = v17 + __ROR4__(v84 + (v16 & v17 | v15 & ~v17) + v14 - 42063, 15);\n  v19 = v18 + __ROR4__(v85 + (v18 & v17 | v16 & ~v18) + v15 - 19A03C4162, 10);\n  v20 = v19 + __ROL4__(v86 + (v19 & v18 | v17 & ~v19) + v16 + 18AB953682, 7);\n  v21 = v20 + __ROL4__(v87 + (v20 & v19 | v18 & ~v20) + v17 - 405B6F01, 12);\n  v22 = v21 + __ROR4__(v88 + (v20 & v21 | v19 & ~v21) + v18 - 1597BE2290, 15);\n  v23 = v22 + __ROR4__(v89 + (v22 & v21 | v20 & ~v22) + v19 + 12C4445329, 10);\n  v24 = v23 + __ROL4__(v75 + (v23 & v21 | v22 & ~v21) + v20 - 169936510, 5);\n  v25 = v24 + __ROL4__(v80 + (v24 & v22 | v23 & ~v22) + v21 - 10E7CE1632, 9);\n  v26 = v25 + __ROL4__(v85 + (v23 & v25 | v24 & ~v23) + v22 + 647945713, 14);\n  v27 = v26 + __ROR4__(v74 + (v24 & v26 | v25 & ~v24) + v23 - 3782BC302, 12);\n  v28 = v27 + __ROL4__(v79 + (v27 & v25 | v26 & ~v25) + v24 - 70E21E691, 5);\n  v29 = v28 + __ROL4__(v84 + (v28 & v26 | v27 & ~v26) + v25 + 3803B283, 9);\n  v30 = v29 + __ROL4__(v89 + (v27 & v29 | v28 & ~v27) + v26 - 66524F335, 14);\n  v31 = v30 + __ROR4__(v78 + (v28 & v30 | v29 & ~v28) + v27 - 40B3C3848, 12);\n  v32 = v31 + __ROL4__(v83 + (v31 & v29 | v30 & ~v29) + v28 + 56F598438, 5);\n  v33 = v32 + __ROL4__(v88 + (v32 & v30 | v31 & ~v30) + v29 - 1090B93690, 9);\n  v34 = v33 + __ROL4__(v77 + (v31 & v33 | v32 & ~v31) + v30 - 18A701961, 14);\n  v35 = v34 + __ROR4__(v82 + (v32 & v34 | v33 & ~v32) + v31 + 1167E31501, 12);\n  v36 = v35 + __ROL4__(v87 + (v35 & v33 | v34 & ~v33) + v32 - 14CB4F1467, 5);\n  v37 = v36 + __ROL4__(v76 + (v36 & v34 | v35 & ~v34) + v33 - 514A1984, 9);\n  v38 = v37 + __ROL4__(v81 + (v35 & v37 | v36 & ~v35) + v34 + 17C9098473, 14);\n  v39 = v38 + __ROR4__(v86 + (v36 & v38 | v37 & ~v36) + v35 - 19AA807734, 12);\n  v40 = v39 + __ROL4__(v79 + (v39 ^ v38 ^ v37) + v36 - 37251A, 4);\n  v41 = v40 + __ROL4__(v82 + (v40 ^ v39 ^ v38) + v37 - 20BB684463, 11);\n  v42 = v41 + __ROL4__(v85 + (v40 ^ v39 ^ v41) + v38 + 18D5E20562, 16);\n  v43 = v42 + __ROR4__(v88 + (v40 ^ v42 ^ v41) + v39 - 35143856, 9);\n  v44 = v43 + __ROL4__(v75 + (v43 ^ v42 ^ v41) + v40 - 15E9072060, 4);\n  v45 = v44 + __ROL4__(v78 + (v44 ^ v43 ^ v42) + v41 + 123B6C3353, 11);\n  v46 = v45 + __ROL4__(v81 + (v44 ^ v43 ^ v45) + v42 - 15C462632, 16);\n  v47 = v46 + __ROR4__(v84 + (v44 ^ v46 ^ v45) + v43 - 104DD60640, 9);\n  v48 = v47 + __ROL4__(v87 + (v47 ^ v46 ^ v45) + v44 + 68F005174, 4);\n  v49 = v48 + __ROL4__(v74 + (v48 ^ v47 ^ v46) + v45 - 35B557222, 11);\n  v50 = v49 + __ROL4__(v77 + (v48 ^ v47 ^ v49) + v46 - 72B8B2979, 16);\n  v51 = v50 + __ROR4__(v80 + (v48 ^ v50 ^ v49) + v47 + 76667989, 9);\n  v52 = v51 + __ROL4__(v83 + (v51 ^ v50 ^ v49) + v48 - 6464ED487, 4);\n  v53 = v52 + __ROL4__(v86 + (v52 ^ v51 ^ v50) + v49 - 424729835, 11);\n  v54 = v53 + __ROL4__(v89 + (v52 ^ v51 ^ v53) + v50 + 53F4B4520, 16);\n  v55 = v54 + __ROR4__(v76 + (v52 ^ v54 ^ v53) + v51 - 992E71651, 9);\n  v56 = v55 + __ROL4__(v74 + (v54 ^ (v55 | ~v53)) + v52 - 19D561844, 6);\n  v57 = v56 + __ROL4__(v81 + (v55 ^ (v56 | ~v54)) + v53 + 11185E1415, 10);\n  v58 = v57 + __ROL4__(v88 + (v56 ^ (v57 | ~v55)) + v54 - 14CB2C4905, 15);\n  v59 = v58 + __ROR4__(v79 + (v57 ^ (v58 | ~v56)) + v55 - 57654855, 11);\n  v60 = v59 + __ROL4__(v86 + (v58 ^ (v59 | ~v57)) + v56 + 17A7E65571, 6);\n  v61 = v60 + __ROL4__(v77 + (v59 ^ (v60 | ~v58)) + v57 - 18B8C36606, 10);\n  v62 = v61 + __ROL4__(v84 + (v60 ^ (v61 | ~v59)) + v58 - 1054523, 15);\n  v63 = v62 + __ROR4__(v75 + (v61 ^ (v62 | ~v60)) + v59 - 20DFDE2799, 11);\n  v64 = v63 + __ROL4__(v82 + (v62 ^ (v63 | ~v61)) + v60 + 186D313359, 6);\n  v65 = v64 + __ROL4__(v89 + (v63 ^ (v64 | ~v62)) + v61 - 30DA3A44, 10);\n  v66 = v65 + __ROL4__(v80 + (v64 ^ (v65 | ~v63)) + v62 - 15D7FD8380, 15);\n  v67 = v66 + __ROR4__(v87 + (v65 ^ (v66 | ~v64)) + v63 + 1335FC1649, 11);\n  v68 = v67 + __ROL4__(v78 + (v66 ^ (v67 | ~v65)) + v64 - 1499AB070, 6);\n  v69 = v68 + __ROL4__(v85 + (v67 ^ (v68 | ~v66)) + v65 - 11F8580379, 10);\n  v70 = v68 + *a1;\n  v71 = v69 + __ROL4__(v76 + (v68 ^ (v69 | ~v67)) + v66 + 71E656259, 15);\n  v72 = v83 + (v69 ^ (v71 | ~v68));\n  *a1 = v70;\n  a1[1] += v71 + __ROR4__(v72 + v67 - 34E636551, 11);\n  a1[2] += v71;\n  result = v69 + a1[3];\n  a1[3] = result;\n  return result;\n}\n// 40179D: variable 'v1' is possibly undefined\n\n"
    },
    {
        "Function": "sub_40F643",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "14.29%",
        "Function Body": "\nint __cdecl sub_40F643(unsigned int a1)\n{\n  return (a1 >> 3) + a1 + 64;\n}\n\n"
    },
    {
        "Function": "sub_40FA31",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "13.33%",
        "Function Body": "\nchar *__stdcall sub_40FA31(int a1, unsigned int a2, int a3)\n{\n  char *result; // eax\n  int i; // ecx\n  _BYTE v5[16]; // [esp+0h] [ebp-68h] BYREF\n  _DWORD v6[22]; // [esp+10h] [ebp-58h] BYREF\n\n  sub_4083D1(v6);\n  sub_40D9CC(v6, a1, a2);\n  sub_40F9B3((int)v5, (char *)v6);\n  result = sub_405315(32, a3);\n  for ( i = 0; i < 16; i += 4 )\n  {\n    *result = byte_413671[(unsigned __int8)v5[i] >> 4];\n    result[1] = byte_413671[v5[i] & 0xF];\n    result[2] = byte_413671[(unsigned __int8)v5[i + 1] >> 4];\n    result[3] = byte_413671[v5[i + 1] & 0xF];\n    result[4] = byte_413671[(unsigned __int8)v5[i + 2] >> 4];\n    result[5] = byte_413671[v5[i + 2] & 0xF];\n    result[6] = byte_413671[(unsigned __int8)v5[i + 3] >> 4];\n    result[7] = byte_413671[v5[i + 3] & 0xF];\n    result += 8;\n  }\n  *result = 0;\n  return result;\n}\n// 40FA31: using guessed type _BYTE var_68[16];\n\n"
    },
    {
        "Function": "sub_406227",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "12.82%",
        "Function Body": "\nunsigned int __stdcall sub_406227(unsigned __int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rtt\n  unsigned int v4; // ecx\n  unsigned int v5; // ebx\n  unsigned __int64 v6; // rax\n  char v7; // cf\n  unsigned int v8; // esi\n  unsigned __int64 v9; // rax\n\n  if ( HI63BCD(a2) )\n  {\n    v4 = HI63BCD(a2);\n    v5 = a2;\n    v6 = a1;\n    do\n    {\n      v7 = v4 & 1;\n      v4 >>= 1;\n      v5 = (v5 >> 1) | (v7 << 31);\n      v6 >>= 1;\n    }\n    while ( v4 );\n    v8 = v6 / v5;\n    v9 = v8 * (unsigned __int64)(unsigned int)a2;\n    if ( __CFADD__(HI63BCD(a2) * v8, HI63BCD(v9)) || (HI63BCD(v9) = (a2 * (unsigned __int64)v8) >> 32, v9 > a1) )\n      --v8;\n    return v8;\n  }\n  else\n  {\n    LOC676D(v3) = a1;\n    HI63BCD(v3) = HI63BCD(a1) % (unsigned int)a2;\n    return v3 / (unsigned int)a2;\n  }\n}\n\n"
    },
    {
        "Function": "sub_403159",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "10.00%",
        "Function Body": "\nint __usercall sub_403159@<eax>(int a1@<eax>, unsigned int a2)\n{\n  unsigned int i; // esi\n  int j; // eax\n  int v4; // eax\n\n  for ( i = a2 >> 1; (i & (i - 1)) != 0; i &= i - 1 )\n    ;\n  for ( j = sub_40CCB4(a1, a2 & i); ; j = sub_40CCB4(v4, a2 & i) )\n  {\n    i >>= 1;\n    if ( !i )\n      break;\n    v4 = sub_40CCB4(j, 1);\n  }\n  return sub_40CCB4(j, 0);\n}\n\n"
    },
    {
        "Function": "sub_4052E7",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "9.09%",
        "Function Body": "\nint __thiscall sub_4052E7(int *this)\n{\n  unsigned __int8 *v1; // eax\n  int v2; // eax\n  int result; // eax\n\n  v1 = (unsigned __int8 *)this[3];\n  this[3] = (int)(v1 - 1);\n  if ( !v1 )\n  {\n    v2 = *this + 2;\n    this[2] = *(unsigned __int8 *)*this + (*(unsigned __int8 *)(*this + 1) << 8);\n    *this = v2;\n    this[3] = 15;\n  }\n  result = ((unsigned int)this[2] >> 15) & 1;\n  this[2] *= 2;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40DE14",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "6.45%",
        "Function Body": "\nint __usercall sub_40DE14@<eax>(double a1@<st0>)\n{\n  int result; // eax\n  int v2; // edx\n  float v3; // [esp+0h] [ebp-24h]\n  int v4; // [esp+18h] [ebp-Ch]\n\n  if ( dword_419859 )\n    return (int)a1;\n  *(float *)&v4 = a1;\n  v2 = v4;\n  result = (__int64)a1;\n  if ( result || (v2 = (unsigned __int64)(__int64)a1 >> 32, (v2 & 0x7F7E45FF) != 0) )\n  {\n    if ( v2 >= 0 )\n    {\n      v3 = a1 - (double)(__int64)a1;\n      result -= __CFADD__(LOC676D(v3), 0x7F7E45FF);\n    }\n    else\n    {\n      return (__PA09B1__(result, -(float)(a1 - (double)(__int64)a1)) + 0x7F7E45FF) >> 32;\n    }\n  }\n  return result;\n}\n// 40DE14: could not find valid save-restore pair for ebp\n// 419859: using guessed type int dword_419859;\n\n"
    },
    {
        "Function": "sub_40D8F0",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "4.55%",
        "Function Body": "\nconst CHAR *__stdcall sub_40D8F0(__int64 a1, int a2)\n{\n  __int64 v2; // rdi\n  char *v4; // eax\n  const char *v5; // ebx\n\n  v2 = a1;\n  if ( !((unsigned __int64)(a1 + 0x80DBA300i64) >> 32) )\n    return sub_40BBDC(a2, a1);\n  v4 = sub_405315(64, a2);\n  v5 = v4;\n  if ( a1 < 0 )\n  {\n    *v4++ = 45;\n    v2 = -a1;\n  }\n  sub_40A67E(v4, v2, HI63BCD(v2));\n  return sub_40508D(64 - strlen(v5));\n}\n\n"
    },
    {
        "Function": "sub_40D9CC",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "3.64%",
        "Function Body": "\nunsigned int __cdecl sub_40D9CC(_DWORD *a1, int a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  int v4; // ecx\n  unsigned int v5; // edi\n  unsigned int i; // eax\n  unsigned int v7; // ebp\n  unsigned int j; // edi\n  unsigned int result; // eax\n  unsigned int v10; // ebx\n  int v11; // ebp\n  int v12; // ecx\n\n  v3 = a1[4] + 8 * a3;\n  v4 = (a1[4] >> 3) & 0x3F;\n  a1[4] = v3;\n  if ( v3 < 8 * a3 )\n    ++a1[5];\n  a1[5] += a3 >> 29;\n  v5 = 64 - v4;\n  if ( a3 < 64 - v4 )\n  {\n    v7 = 0;\n  }\n  else\n  {\n    for ( i = 0; i < v5; ++i )\n      *((_BYTE *)a1 + v4 + i + 24) = *(_BYTE *)(i + a2);\n    sub_40E03E(a1);\n    v7 = v5;\n    for ( j = v5 + 63; j < a3; v7 += 64 )\n    {\n      sub_40E03E(a1);\n      j += 64;\n    }\n    v4 = 0;\n  }\n  result = 0;\n  v10 = a3 - v7;\n  if ( a3 != v7 )\n  {\n    v11 = a2 + v7;\n    v12 = (int)a1 + v4 + 24;\n    do\n    {\n      *(_BYTE *)(v12 + result) = *(_BYTE *)(result + v11);\n      ++result;\n    }\n    while ( result < v10 );\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40183D",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "2.20%",
        "Function Body": "\n__int64 __stdcall sub_40183D(char *a1)\n{\n  char *v1; // esi\n  __int64 result; // rax\n  int v3; // edi\n  char v4; // cl\n  char v5; // cl\n  __int64 v6; // kr00_8\n  char v7; // cl\n  _BYTE *i; // esi\n  unsigned __int64 v9; // rax\n  unsigned int v10; // ebx\n  int v11; // ebx\n  unsigned int v12; // ebp\n  int v13; // eax\n\n  v1 = a1;\n  result = 0i64;\n  if ( !a1 )\n    return result;\n  while ( *v1 == 32 || *v1 == 9 )\n    ++v1;\n  if ( *v1 == 45 )\n  {\n    v3 = 1;\nLABEL_8:\n    ++v1;\n    goto LABEL_9;\n  }\n  v3 = 0;\n  if ( *v1 == 43 )\n    goto LABEL_8;\nLABEL_9:\n  v4 = *v1;\n  if ( *v1 == 36 )\n  {\n    while ( 1 )\n    {\n      v5 = *++v1;\n      if ( (v5 < 48 || v5 > 57) && (v5 < 65 || v5 > 70) && (v5 < 97 || v5 > 102) )\n        break;\n      if ( v5 > 57 )\n      {\n        v6 = 16 * result;\n        if ( v5 < 97 )\n          result = v6 + v5 - 55;\n        else\n          result = v6 + v5 - 87;\n      }\n      else\n      {\n        result = 16 * (result - 3) + v5;\n      }\n    }\n  }\n  else if ( v4 == 37 )\n  {\n    v7 = v1[1];\n    for ( i = v1 + 1; v7 >= 48; ++i )\n    {\n      if ( v7 > 49 )\n        break;\n      v9 = result - 24;\n      HI63BCD(v9) = v9 >> 31;\n      v10 = 2 * v9;\n      LOC676D(v9) = v7;\n      v7 = i[1];\n      result = __PA09B1__(HI63BCD(v9), v10) + (int)v9;\n    }\n  }\n  else\n  {\n    for ( ; v4 >= 48; ++v1 )\n    {\n      if ( v4 > 57 )\n        break;\n      v11 = 5 * result;\n      v12 = (unsigned __int64)(10 * result) >> 32;\n      v13 = v4;\n      v4 = v1[1];\n      result = __PA09B1__(v12, 2 * v11) + v13 - 48;\n    }\n  }\n  if ( v3 )\n    return -result;\n  return result;\n}\n// 40C34F: conditional instruction was optimized away because cl.1 is in (30..39|41..46|61..66)\n\n"
    },
    {
        "Function": "sub_40B467",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "1.77%",
        "Function Body": "\nint __cdecl sub_40B467(unsigned __int8 *a1, unsigned __int8 *a2, int a3, void *a4)\n{\n  int result; // eax\n  unsigned int v5; // esi\n  unsigned __int8 *v6; // ebx\n  int v7; // eax\n  unsigned int v8; // edi\n  int v9; // eax\n  unsigned __int8 *v10; // edx\n  int v11; // eax\n  unsigned __int8 *v12; // ecx\n  unsigned int v13; // ebx\n  unsigned __int8 v14; // al\n  unsigned __int8 *v15; // ecx\n  unsigned __int8 v16; // al\n  unsigned __int8 *v17; // ecx\n  unsigned __int8 *v18; // [esp+4h] [ebp-14h] BYREF\n  unsigned __int8 *v19; // [esp+8h] [ebp-10h]\n  _WORD *v20; // [esp+Ch] [ebp-Ch]\n  int v21; // [esp+10h] [ebp-8h]\n  int v22; // [esp+14h] [ebp-4h]\n\n  result = 0;\n  if ( a3 )\n  {\n    memset(a4, 0, 0x10E2AAu);\n    *a2 = *a1;\n    v5 = a3 - 1;\n    v6 = a1 + 1;\n    v18 = a1 + 1;\n    if ( a3 == 1 )\n    {\n      return 1;\n    }\n    else\n    {\n      v20 = a2 + 1;\n      v19 = a2 + 3;\n      v7 = 0;\n      v21 = 0;\n      v22 = 16;\n      if ( v5 > 4 )\n      {\n        do\n        {\n          v8 = 0;\n          while ( a1 < v6 )\n          {\n            v9 = sub_4073E3(a1);\n            v10 = a1++;\n            *((_DWORD *)a4 + v9) = v10;\n          }\n          v11 = *((_DWORD *)a4 + sub_4073E3(v6));\n          if ( !v11 )\n            goto LABEL_14;\n          v12 = v6;\n          do\n          {\n            if ( v12[v11 - (_DWORD)v6] != *v12 )\n              break;\n            ++v8;\n            ++v12;\n          }\n          while ( v8 < v5 );\n          if ( v8 > 3 )\n          {\n            v13 = (unsigned int)&v6[-v11 - 1];\n            sub_40CCB4((int)&v18, 1);\n            sub_403159((int)&v18, v8 - 2);\n            sub_403159((int)&v18, (v13 >> 8) + 2);\n            *v19++ = v13;\n            v6 = &v18[v8];\n            v5 -= v8;\n          }\n          else\n          {\nLABEL_14:\n            sub_40CCB4((int)&v18, 0);\n            v14 = *v18;\n            v15 = v19++;\n            v6 = v18 + 1;\n            *v15 = v14;\n            --v5;\n          }\n          v18 = v6;\n        }\n        while ( v5 > 4 );\n        v7 = v21;\n      }\n      if ( v5 )\n      {\n        do\n        {\n          sub_40CCB4((int)&v18, 0);\n          v16 = *v18;\n          v17 = v19++;\n          ++v18;\n          --v5;\n          *v17 = v16;\n        }\n        while ( v5 );\n        v7 = v21;\n      }\n      *v20 = v7 << v22;\n      return v19 - a2;\n    }\n  }\n  return result;\n}\n// 40A0DC: conditional instruction was optimized away because esi.4>=5u\n\n"
    }
]