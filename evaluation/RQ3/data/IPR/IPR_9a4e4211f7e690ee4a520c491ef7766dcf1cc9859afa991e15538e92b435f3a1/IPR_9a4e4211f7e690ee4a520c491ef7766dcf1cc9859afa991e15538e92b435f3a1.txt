[
    {
        "Function": "sub_40DC41",
        "Total XOR and shift operations": 30,
        "XOR operations": 24,
        "Shift operations": 6,
        "Operation percentage": "68.18%",
        "Function Body": "\n_DWORD *__usercall sub_40DC41@<eax>(int a1@<eax>)\n{\n  _DWORD *result; // eax\n  int v2; // edx\n  int v3; // esi\n  int v4; // edi\n  int v5; // esi\n  int v6; // edi\n  unsigned int v7; // ecx\n\n  result = (_DWORD *)(a1 + 1592);\n  v2 = 104;\n  do\n  {\n    v3 = *(result - 396);\n    result[227] = *result ^ ((*(result - 397) ^ (v3 ^ *(result - 397)) & 0x7F559EFFu) >> 1) ^ ((v3 & 1) != 0\n                                                                                             ? 0x9928E0DF\n                                                                                             : 0);\n    v4 = *(result - 395);\n    result[228] = ((v3 ^ (v3 ^ v4) & 0x7F559EFFu) >> 1) ^ result[1] ^ ((*(_BYTE *)(result - 395) & 1) != 0\n                                                                     ? 0x9928E0DF\n                                                                     : 0);\n    v5 = *(result - 394);\n    result[229] = ((v4 ^ (v4 ^ v5) & 0x7F559EFFu) >> 1) ^ result[2] ^ ((*(_BYTE *)(result - 394) & 1) != 0\n                                                                     ? 0x9928E0DF\n                                                                     : 0);\n    v6 = *(result - 393);\n    result[230] = ((v5 ^ (v5 ^ v6) & 0x7F559EFFu) >> 1) ^ result[3] ^ ((*(_BYTE *)(result - 393) & 1) != 0\n                                                                     ? 0x9928E0DF\n                                                                     : 0);\n    v7 = *(result - 392) ^ (*(result - 392) ^ *(result - 391)) & 0x7F559EFF;\n    result[231] = ((v6 ^ (v6 ^ *(result - 392)) & 0x7F559EFFu) >> 1) ^ result[4] ^ ((*(_BYTE *)(result - 392) & 1) != 0\n                                                                                  ? 0x9928E0DF\n                                                                                  : 0);\n    result[232] = (v7 >> 1) ^ result[5] ^ ((v7 & 1) != 0 ? 0x9928E0DF : 0);\n    result += 6;\n    --v2;\n  }\n  while ( v2 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_406882",
        "Total XOR and shift operations": 50,
        "XOR operations": 36,
        "Shift operations": 14,
        "Operation percentage": "53.19%",
        "Function Body": "\nunsigned int __fastcall sub_406882(unsigned int a1, int a2, _DWORD *a3, int a4)\n{\n  unsigned int v4; // ebx\n  _DWORD *v5; // edi\n  _BYTE *v7; // eax\n  int *v8; // eax\n  unsigned int v9; // ecx\n  unsigned int v10; // edx\n  _DWORD *v11; // esi\n  unsigned int v12; // edi\n  bool v13; // zf\n  int v14; // esi\n  unsigned int v16; // [esp+Ch] [ebp-20h]\n  unsigned int v17; // [esp+10h] [ebp-1Ch]\n  unsigned int v18; // [esp+14h] [ebp-18h]\n  int v19; // [esp+14h] [ebp-18h]\n  unsigned int v20; // [esp+20h] [ebp-Ch]\n  unsigned int v21; // [esp+24h] [ebp-8h]\n\n  v4 = a1;\n  v5 = a3;\n  v16 = a1;\n  if ( (a1 & 0xF) != 0 )\n  {\n    do\n      ++v4;\n    while ( (v4 & 0xF) != 0 );\n    v16 = v4;\n  }\n  if ( a1 )\n  {\n    v7 = (_BYTE *)a2;\n    v18 = a1;\n    do\n    {\n      *v7 = v7[a4 - a2];\n      ++v7;\n      --v18;\n    }\n    while ( v18 );\n  }\n  if ( a1 < v4 )\n    memset((void *)(a2 + a1), 0, v4 - a1);\n  if ( !(v4 >> 4) )\n    return v4;\n  v8 = (int *)(a2 + 8);\n  v17 = v4 >> 4;\n  do\n  {\n    *(v8 - 2) ^= *v5;\n    *(v8 - 1) ^= v5[1];\n    *v8 ^= v5[2];\n    v8[1] ^= v5[3];\n    v9 = *(v8 - 2);\n    v10 = *(v8 - 1);\n    v11 = v5 + 2;\n    v20 = *v8;\n    v12 = v8[1];\n    v21 = v12;\n    v19 = 13;\n    do\n    {\n      *(v8 - 2) = v11[2] ^ dword_41F52E[(unsigned __int8)v9] ^ dword_417AF7[BYTE1(v10)] ^ dword_419267[BYTE2(v20)] ^ dword_41EF28[HI0D7D(v12)];\n      v11 += 4;\n      *(v8 - 1) = *(v11 - 1) ^ dword_41F52E[(unsigned __int8)v10] ^ dword_41EF28[HI0D7D(v9)] ^ dword_417AF7[BYTE1(v20)] ^ dword_419267[BYTE2(v21)];\n      *v8 = *v11 ^ dword_41F52E[(unsigned __int8)v20] ^ dword_419267[BYTE2(v9)] ^ dword_41EF28[HI0D7D(v10)] ^ dword_417AF7[BYTE1(v21)];\n      v13 = v19-- == 1;\n      v8[1] = v11[1] ^ dword_41F52E[(unsigned __int8)v21] ^ dword_417AF7[BYTE1(v9)] ^ dword_419267[BYTE2(v10)] ^ dword_41EF28[HI0D7D(v20)];\n      v9 = *(v8 - 2);\n      v10 = *(v8 - 1);\n      v20 = *v8;\n      v12 = v8[1];\n      v21 = v12;\n    }\n    while ( !v13 );\n    v14 = (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v9] ^ (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v10)] ^ (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v20)] ^ ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v12)] << 8)) << 8)) << 8);\n    v5 = a3;\n    *(v8 - 2) = a3[56] ^ v14;\n    *(v8 - 1) = a3[57] ^ (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v10] ^ (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v20)] ^ (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v21)] ^ ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v9)] << 8)) << 8)) << 8);\n    *v8 = a3[58] ^ (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v20] ^ (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v21)] ^ (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v9)] ^ ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v10)] << 8)) << 8)) << 8);\n    v8[1] = a3[59] ^ (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v21] ^ (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v9)] ^ (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v10)] ^ ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v20)] << 8)) << 8)) << 8);\n    v8 += 4;\n    --v17;\n  }\n  while ( v17 );\n  return v16;\n}\n// 41F52E: using guessed type int dword_41F52E[256];\n// 417AF7: using guessed type int dword_417AF7[256];\n// 419267: using guessed type int dword_419267[256];\n// 41EF28: using guessed type int dword_41EF28[256];\n\n"
    },
    {
        "Function": "sub_400FDB",
        "Total XOR and shift operations": 12,
        "XOR operations": 6,
        "Shift operations": 6,
        "Operation percentage": "50.00%",
        "Function Body": "\ndouble __usercall sub_400FDB@<st0>(unsigned int a1@<eax>, _DWORD *a2@<ecx>, double a3)\n{\n  unsigned int v5; // eax\n  int v6; // edx\n  unsigned int v7; // eax\n\n  if ( *a2 == 624 )\n  {\n    sub_40DC41((int)a2);\n  }\n  else if ( *a2 >= 0x4E0u )\n  {\n    sub_403401(a2);\n  }\n  v5 = a2[*a2 + 1];\n  v6 = a2[1249];\n  ++*a2;\n  v7 = ((((v5 >> 11) & v6 ^ v5) & 0xFF65E8AD) << 7) ^ (v5 >> 11) & v6 ^ v5;\n  return (double)((((v7 & 0xFFA7B18C) << 15) ^ v7 ^ ((((v7 & 0xFFA7B18C) << 15) ^ v7) >> 18)) - a1)\n       / (423CA37295.0 - (double)a1 + a3);\n}\n\n"
    },
    {
        "Function": "sub_403401",
        "Total XOR and shift operations": 15,
        "XOR operations": 12,
        "Shift operations": 3,
        "Operation percentage": "44.12%",
        "Function Body": "\nunsigned int __usercall sub_403401@<eax>(_DWORD *a1@<esi>)\n{\n  _DWORD *v1; // ecx\n  int v2; // edi\n  _DWORD *v3; // ecx\n  int v4; // edi\n  unsigned int result; // eax\n\n  v1 = a1 + 625;\n  v2 = 227;\n  do\n  {\n    *(v1 - 624) = ((*v1 ^ (*v1 ^ v1[1]) & 0x7F559EFFu) >> 1) ^ v1[397] ^ ((v1[1] & 1) != 0 ? 0x9928E0DF : 0);\n    ++v1;\n    --v2;\n  }\n  while ( v2 );\n  v3 = a1 + 852;\n  v4 = 396;\n  do\n  {\n    *(v3 - 624) = ((*v3 ^ (v3[1] ^ *v3) & 0x7F559EFFu) >> 1) ^ *(v3 - 851) ^ ((v3[1] & 1) != 0 ? 0x9928E0DF : 0);\n    ++v3;\n    --v4;\n  }\n  while ( v4 );\n  result = (a1[1248] ^ (a1[1] ^ a1[1248]) & 0x7F559EFFu) >> 1;\n  a1[624] = result ^ a1[397] ^ ((a1[1] & 1) != 0 ? 0x9928E0DF : 0);\n  *a1 = 0;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4088A3",
        "Total XOR and shift operations": 15,
        "XOR operations": 12,
        "Shift operations": 3,
        "Operation percentage": "44.12%",
        "Function Body": "\nint __usercall sub_4088A3@<eax>(int a1@<esi>)\n{\n  int result; // eax\n  int v2; // edi\n  int v3; // ecx\n  int v4; // edx\n  int v5; // ecx\n  int v6; // edx\n  int v7; // [esp+8h] [ebp-10h]\n  int v8; // [esp+Ch] [ebp-Ch]\n  int v9; // [esp+10h] [ebp-8h]\n\n  for ( result = 0;\n        result < 4;\n        *(_DWORD *)(a1 + 4 * result - 4) = v6 | ((dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v8]] ^ BYTE1(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v9]]) ^ BYTE2(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v7]]) ^ HI0D7D(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v2]])) << 24) )\n  {\n    v2 = *(unsigned __int8 *)(a1 + 4 * result);\n    v8 = *(unsigned __int8 *)(a1 + 4 * result + 3);\n    v9 = *(unsigned __int8 *)(a1 + 4 * result + 2);\n    v3 = *(unsigned __int8 *)(a1 + 4 * result + 1);\n    v4 = BYTE2(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v9]]) ^ BYTE1(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v8]]) ^ HI0D7D(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v3]]) ^ LO1492(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v2]]);\n    *(_DWORD *)(a1 + 4 * result) = v4;\n    v7 = v3;\n    v5 = v4 | ((HI0D7D(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v9]]) ^ BYTE2(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v8]]) ^ BYTE1(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v2]]) ^ LO1492(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v3]])) << 8);\n    *(_DWORD *)(a1 + 4 * result) = v5;\n    v6 = v5 | ((LO1492(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v9]]) ^ HI0D7D(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v8]]) ^ BYTE1(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v7]]) ^ BYTE2(dword_4184D0[(unsigned __int8)RijnDael_AES_LONG_4143F6[v2]])) << 16);\n    *(_DWORD *)(a1 + 4 * result++) = v6;\n  }\n  return result;\n}\n// 4184D0: using guessed type int dword_4184D0[];\n\n"
    },
    {
        "Function": "sub_4051F2",
        "Total XOR and shift operations": 53,
        "XOR operations": 8,
        "Shift operations": 45,
        "Operation percentage": "36.55%",
        "Function Body": "\nint __thiscall sub_4051F2(int *this, unsigned __int8 *a2)\n{\n  int v2; // edx\n  unsigned int v3; // edi\n  int *v4; // eax\n  unsigned int v5; // edx\n  int v6; // esi\n  unsigned int v7; // edx\n  int v8; // esi\n  unsigned int v9; // edx\n  int v10; // ebx\n  int v11; // esi\n  unsigned int v12; // edx\n  int v13; // esi\n  unsigned int v14; // edx\n  int v15; // esi\n  unsigned int v16; // edx\n  int v17; // ebx\n  int v18; // esi\n  int v19; // edx\n  int v20; // eax\n  int v21; // edx\n  int v22; // eax\n  int v23; // edx\n  int v24; // esi\n  int v25; // eax\n  int v26; // edx\n  int v27; // edi\n  int result; // eax\n  unsigned int v29; // [esp+8h] [ebp-34h]\n  unsigned int v30; // [esp+8h] [ebp-34h]\n  int v31[11]; // [esp+Ch] [ebp-30h]\n\n  *this = *a2 | ((a2[1] | (*((unsigned __int16 *)a2 + 1) << 8)) << 8);\n  this[1] = a2[4] | ((a2[5] | (*((unsigned __int16 *)a2 + 3) << 8)) << 8);\n  this[2] = a2[8] | ((a2[9] | (*((unsigned __int16 *)a2 + 5) << 8)) << 8);\n  this[3] = a2[12] | ((a2[13] | (*((unsigned __int16 *)a2 + 7) << 8)) << 8);\n  this[4] = a2[16] | ((a2[17] | (*((unsigned __int16 *)a2 + 9) << 8)) << 8);\n  this[5] = a2[20] | ((a2[21] | (*((unsigned __int16 *)a2 + 11) << 8)) << 8);\n  v2 = a2[27];\n  v31[1] = 1;\n  v31[2] = 2;\n  v31[3] = 4;\n  v31[4] = 8;\n  v31[5] = 16;\n  v31[6] = 32;\n  v31[7] = 64;\n  v31[8] = 128;\n  v31[9] = 27;\n  v31[10] = 54;\n  this[6] = a2[24] | ((a2[25] | ((a2[26] | (v2 << 8)) << 8)) << 8);\n  this[7] = a2[28] | ((a2[29] | (*((unsigned __int16 *)a2 + 15) << 8)) << 8);\n  v3 = 10;\n  v4 = this;\n  do\n  {\n    v5 = v4[7];\n    v6 = (v3 - 2) & 7;\n    v31[0] = v6;\n    if ( !v6 )\n    {\n      v7 = __ROR4__(v5, 8);\n      v5 = v31[(v3 - 2) >> 3] ^ ((unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v7] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v7)] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v7)] | ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v7)] << 8)) << 8)) << 8));\n      v6 = 0;\n    }\n    if ( v6 == 4 )\n      v5 = (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v5)] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v5)] | ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v5)] << 8)) << 8)) << 8) | (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v5];\n    v8 = v5 ^ *v4;\n    v4[8] = v8;\n    v4[68] = v8;\n    v9 = v8;\n    v10 = ((_BYTE)v3 - 1) & 7;\n    v31[0] = v10;\n    if ( (((_BYTE)v3 - 1) & 7) == 0 )\n    {\n      v29 = __ROR4__(v8, 8);\n      v10 = v31[0];\n      v9 = v31[(v3 - 1) >> 3] ^ ((((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v29)] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v29)] | ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v29)] << 8)) << 8)) << 8) | (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v29]);\n    }\n    if ( v10 == 4 )\n      v9 = (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v9)] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v9)] | ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v9)] << 8)) << 8)) << 8) | (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v9];\n    v11 = v9 ^ v4[1];\n    v4[9] = v11;\n    v4[69] = v11;\n    v12 = v11;\n    v13 = v3 & 7;\n    v31[0] = v13;\n    if ( (v3 & 7) == 0 )\n    {\n      v14 = __ROR4__(v12, 8);\n      v12 = v31[v3 >> 3] ^ ((unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v14] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v14)] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v14)] | ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v14)] << 8)) << 8)) << 8));\n      v13 = v31[0];\n    }\n    if ( v13 == 4 )\n      v12 = (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v12)] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v12)] | ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v12)] << 8)) << 8)) << 8) | (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v12];\n    v15 = v12 ^ v4[2];\n    v4[10] = v15;\n    v4[70] = v15;\n    v16 = v15;\n    v17 = ((_BYTE)v3 + 1) & 7;\n    v31[0] = v17;\n    if ( (((_BYTE)v3 + 1) & 7) == 0 )\n    {\n      v30 = __ROR4__(v15, 8);\n      v17 = v31[0];\n      v16 = v31[(v3 + 1) >> 3] ^ ((((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v30)] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v30)] | ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v30)] << 8)) << 8)) << 8) | (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v30]);\n    }\n    if ( v17 == 4 )\n      v16 = (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE1(v16)] | (((unsigned __int8)RijnDael_AES_LONG_4143F6[BYTE2(v16)] | ((unsigned __int8)RijnDael_AES_LONG_4143F6[HI0D7D(v16)] << 8)) << 8)) << 8) | (unsigned __int8)RijnDael_AES_LONG_4143F6[(unsigned __int8)v16];\n    v18 = v16 ^ v4[3];\n    v3 += 4;\n    v4[11] = v18;\n    v4[71] = v18;\n    v4 += 4;\n  }\n  while ( v3 - 2 < 0x3C );\n  v19 = this[1];\n  this[60] = *this;\n  v20 = this[2];\n  this[61] = v19;\n  v21 = this[3];\n  this[62] = v20;\n  v22 = this[4];\n  this[63] = v21;\n  v23 = this[5];\n  v24 = (int)(this + 64);\n  this[64] = v22;\n  v25 = this[6];\n  this[65] = v23;\n  v26 = this[7];\n  this[66] = v25;\n  this[67] = v26;\n  v27 = 13;\n  do\n  {\n    result = sub_4088A3(v24);\n    v24 += 16;\n    --v27;\n  }\n  while ( v27 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40EBEB",
        "Total XOR and shift operations": 41,
        "XOR operations": 22,
        "Shift operations": 19,
        "Operation percentage": "15.41%",
        "Function Body": "\nint __cdecl sub_40EBEB(int a1, unsigned int a2, int a3, int a4)\n{\n  int v4; // ecx\n  _BYTE *v5; // ebx\n  int v6; // esi\n  _BYTE *v7; // edi\n  int v8; // esi\n  int result; // eax\n  unsigned int v10; // edi\n  unsigned int v11; // ecx\n  int i; // eax\n  unsigned int v13; // ecx\n  bool v14; // sf\n  double v15; // st7\n  double v16; // st6\n  unsigned int v17; // ebx\n  _BYTE *v18; // ecx\n  unsigned int v19; // esi\n  unsigned int v20; // eax\n  _BYTE *v21; // ecx\n  int v22; // eax\n  _DWORD *v23; // ecx\n  int v24; // eax\n  int *v25; // ecx\n  int v26; // esi\n  _BYTE *v27; // ebx\n  int v28; // esi\n  int v29; // ebx\n  int v30; // edi\n  int v31; // edi\n  int v32; // eax\n  int v33; // [esp-648h] [ebp-2060h] BYREF\n  int v34[200]; // [esp-644h] [ebp-205Ch] BYREF\n  int v35; // [esp-324h] [ebp-1D3Ch] BYREF\n  _BYTE v36[800]; // [esp-320h] [ebp-1D38h] BYREF\n  std::tr1 *v37; // [esp+0h] [ebp-1A18h]\n  double v38; // [esp+10h] [ebp-1A08h]\n  int v39; // [esp+1Ch] [ebp-19FCh]\n  int v40; // [esp+20h] [ebp-19F8h]\n  int v41; // [esp+24h] [ebp-19F4h]\n  unsigned int v42; // [esp+28h] [ebp-19F0h]\n  int v43; // [esp+2Ch] [ebp-19ECh]\n  void *v44; // [esp+30h] [ebp-19E8h]\n  char v45; // [esp+37h] [ebp-19E1h]\n  int v46; // [esp+38h] [ebp-19E0h] BYREF\n  int v47[1248]; // [esp+3Ch] [ebp-19DCh]\n  int v48; // [esp+13BCh] [ebp-65Ch]\n  int v49[202]; // [esp+13C0h] [ebp-658h] BYREF\n  int v50[203]; // [esp+16E8h] [ebp-330h] BYREF\n\n  v5 = (_BYTE *)v4;\n  v6 = 4 * a3;\n  v40 = v4;\n  v7 = operator new[](4 * a3);\n  v8 = sub_40CD87(&a3, v7, v6);\n  v39 = v8;\n  operator delete[](v7);\n  result = 0;\n  v10 = 0;\n  v42 = 0;\n  v41 = 0;\n  if ( a2 )\n  {\n    v38 = 423CA37295.0 - 0.0 + 1.0;\n    while ( 1 )\n    {\n      if ( v8 - 1 > (int)(a2 - v10) )\n        v43 = a2 - v10;\n      else\n        v43 = v8 - 1;\n      v47[0] = std::tr1::_Random_device(v37);\n      v11 = v47[0];\n      v48 = -1;\n      for ( i = 1; i < 624; ++i )\n      {\n        v11 = i + 1808203253 * ((v11 >> 30) ^ v11);\n        v47[i] = v11;\n      }\n      v46 = 624;\n      sub_40DC41((int)&v46);\n      v13 = (((((v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) & 0xFF65E8AD) << 7) ^ v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) & 0xFFA7B18C) << 15;\n      v14 = ((((v13 ^ (((v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) & 0xFF65E8AD) << 7) ^ v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) >> 18) ^ v13 ^ (((v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) & 0xFF65E8AD) << 7) ^ v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) & 0x808F4300) != 0;\n      v44 = (void *)(((v13 ^ (((v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) & 0xFF65E8AD) << 7) ^ v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) >> 18) ^ v13 ^ (((v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]) & 0xFF65E8AD) << 7) ^ v48 & ((unsigned int)v47[v46] >> 11) ^ v47[v46]);\n      v15 = (double)(int)v44;\n      if ( v14 )\n        v15 = v15 + 423CA37296.0;\n      v16 = v15 / v38 * 255.0 + 1.0;\n      if ( v16 < 255.0 )\n      {\n        v17 = v43 + 1;\n        v44 = (void *)(int)v16;\n        v45 = (int)v16;\n      }\n      else\n      {\n        v45 = -1;\n        v17 = v43 + 1;\n      }\n      while ( 1 )\n      {\n        v18 = operator new[](v17);\n        v19 = v10 + v17 - 1;\n        v44 = v18;\n        *v18 = v45;\n        v20 = v10;\n        if ( v10 < v19 )\n        {\n          v21 = v18 + 1;\n          do\n          {\n            *v21 = *(_BYTE *)(v20 + a1);\n            ++v20;\n            ++v21;\n          }\n          while ( v20 < v19 );\n          v18 = v44;\n        }\n        qmemcpy(v50, sub_40A8D2(v17, v49, v18), 0x324u);\n        if ( !sub_405D47((char *)&a3, (char *)v50) )\n          break;\n        operator delete[](v44);\n        --v17;\n        if ( --v43 <= 0 )\n          _wassert(L\"blockSize > 0\", L\"Crypto\\\\rsa.cpp\", 0x4Fu);\n        v10 = v42;\n      }\n      v42 += v43;\n      memset(v36, 0, sizeof(v36));\n      v35 = a3;\n      v22 = 0;\n      v43 = (int)&v35;\n      if ( a3 > 0 )\n      {\n        v23 = v36;\n        do\n          *v23++ = *(&a4 + v22++);\n        while ( v22 < v35 );\n      }\n      v33 = 0;\n      v24 = 0;\n      memset(v34, 0, sizeof(v34));\n      v33 = STACK[0x1D4C];\n      v43 = (int)&v33;\n      if ( (int)STACK[0x1D4C] > 0 )\n      {\n        v25 = v34;\n        do\n          *v25++ = *(&STACK[0x1D50] + v24++);\n        while ( v24 < v33 );\n      }\n      qmemcpy(\n        v50,\n        sub_401563(\n          v50,\n          v49,\n          v33,\n          v34[0],\n          v34[1],\n          v34[2],\n          v34[3],\n          v34[4],\n          v34[5],\n          v34[6],\n          v34[7],\n          v34[8],\n          v34[9],\n          v34[10],\n          v34[11],\n          v34[12],\n          v34[13],\n          v34[14],\n          v34[15],\n          v34[16],\n          v34[17],\n          v34[18],\n          v34[19],\n          v34[20],\n          v34[21],\n          v34[22],\n          v34[23],\n          v34[24],\n          v34[25],\n          v34[26],\n          v34[27],\n          v34[28],\n          v34[29],\n          v34[30],\n          v34[31],\n          v34[32],\n          v34[33],\n          v34[34],\n          v34[35],\n          v34[36],\n          v34[37],\n          v34[38],\n          v34[39],\n          v34[40],\n          v34[41],\n          v34[42],\n          v34[43],\n          v34[44],\n          v34[45],\n          v34[46],\n          v34[47],\n          v34[48],\n          v34[49],\n          v34[50],\n          v34[51],\n          v34[52],\n          v34[53],\n          v34[54],\n          v34[55],\n          v34[56],\n          v34[57],\n          v34[58],\n          v34[59]),\n        0x324u);\n      operator delete[](v44);\n      v26 = 4 * v50[0];\n      v27 = operator new[](4 * v50[0]);\n      v44 = v27;\n      v28 = sub_40CD87(v50, v27, v26);\n      if ( v28 < v39 )\n      {\n        v29 = v39 - v28;\n        if ( v39 - v28 > 0 )\n        {\n          v30 = v41;\n          memset((void *)(v41 + v40), 0, v39 - v28);\n          v31 = v29 + v30;\n          v27 = v44;\n          v41 = v31;\n          goto LABEL_33;\n        }\n        v27 = v44;\n      }\n      v31 = v41;\nLABEL_33:\n      v32 = 0;\n      if ( v28 > 0 )\n      {\n        do\n          *(_BYTE *)(v40 + v31++) = v27[v32++];\n        while ( v32 < v28 );\n        v41 = v31;\n      }\n      operator delete[](v27);\n      if ( v42 >= a2 )\n      {\n        result = v41;\n        *(_BYTE *)(v40 + v41) = 0;\n        return result;\n      }\n      v10 = v42;\n      v8 = v39;\n    }\n  }\n  *v5 = 0;\n  return result;\n}\n// 40B83A: variable 'v4' is possibly undefined\n// 40EBEB: using guessed type int var_19DC[1248];\n// 40EBEB: using guessed type int var_658[202];\n\n"
    },
    {
        "Function": "sub_40A8D2",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "9.09%",
        "Function Body": "\nint *__usercall sub_40A8D2@<eax>(int a1@<eax>, int *a2@<edx>, unsigned __int8 *a3@<esi>)\n{\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ecx\n  int v6; // eax\n  _DWORD *v7; // ecx\n  int v8; // eax\n  int v9; // eax\n  int v10; // ecx\n  int v11; // eax\n  int v13; // [esp+8h] [ebp-4h]\n\n  v3 = a1;\n  memset(a2 + 1, 0, 0x320u);\n  v4 = a1 >> 2;\n  v5 = v3 & 3;\n  *a2 = v3 >> 2;\n  v13 = v5;\n  if ( (v3 & 3) != 0 )\n    *a2 = v4 + 1;\n  if ( *a2 > 200 )\n  {\n    *a2 = 200;\n    v3 = 800;\n  }\n  v6 = v3 - 1;\n  if ( v3 - 1 >= 3 )\n  {\n    v7 = a2 + 1;\n    do\n    {\n      *v7 = a3[v6] + ((a3[v6 - 1] + ((a3[v6 - 2] + (a3[v6 - 3] << 8)) << 8)) << 8);\n      v6 -= 4;\n      ++v7;\n    }\n    while ( v6 >= 3 );\n    v5 = v13;\n  }\n  if ( v5 == 1 )\n  {\n    v8 = *a3;\n  }\n  else\n  {\n    if ( v5 == 2 )\n    {\n      v9 = *a3;\n      v10 = a3[1];\n    }\n    else\n    {\n      if ( v5 != 3 )\n        goto LABEL_17;\n      v9 = a3[1] + (*a3 << 8);\n      v10 = a3[2];\n    }\n    v8 = v10 + (v9 << 8);\n  }\n  a2[*a2] = v8;\nLABEL_17:\n  if ( *a2 > 1 )\n  {\n    do\n    {\n      if ( a2[*a2] )\n        break;\n      v11 = *a2 - 1;\n      *a2 = v11;\n    }\n    while ( v11 > 1 );\n  }\n  return a2;\n}\n\n"
    },
    {
        "Function": "sub_403676",
        "Total XOR and shift operations": 2,
        "XOR operations": 1,
        "Shift operations": 1,
        "Operation percentage": "8.70%",
        "Function Body": "\nunsigned int __stdcall sub_403676(unsigned int a1, unsigned int a2)\n{\n  unsigned int v2; // ecx\n  int i; // eax\n  std::tr1 *v5; // [esp+0h] [ebp-1398h]\n  int v6; // [esp+8h] [ebp-1390h] BYREF\n  int v7[1250]; // [esp+Ch] [ebp-138Ch]\n\n  v7[0] = std::tr1::_Random_device(v5);\n  v2 = v7[0];\n  v7[1248] = -1;\n  for ( i = 1; i < 624; ++i )\n  {\n    v2 = i + 1808203253 * ((v2 >> 30) ^ v2);\n    v7[i] = v2;\n  }\n  v6 = 624;\n  return sub_404B3A(a1, a2, &v6);\n}\n// 406F11: variable 'v5' is possibly undefined\n\n"
    },
    {
        "Function": "sub_415325",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.59%",
        "Function Body": "\nint __cdecl sub_415325(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // edi\n  int *v9; // esi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // edi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  int v20; // edx\n  int *v21; // ecx\n  int v22; // esi\n  int v23; // eax\n  int *v24; // ebx\n  bool n; // zf\n  int v26; // eax\n  unsigned int v27; // edx\n  int *v28; // ecx\n  unsigned int v29; // edi\n  int ii; // ecx\n  int *v31; // ecx\n  unsigned int v32; // esi\n  int v33; // edi\n  int v34; // eax\n  int v35; // edx\n  int *v36; // ebx\n  int v37; // edx\n  int *v38; // ecx\n  int v39; // eax\n  int v40; // edx\n  int *v41; // ebx\n  int v42; // edx\n  int *v43; // ecx\n  int v44; // eax\n  int v45; // edx\n  int v46; // edx\n  int *v47; // ecx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // [esp+8h] [ebp-38h]\n  char v51; // [esp+10h] [ebp-30h]\n  int v52; // [esp+10h] [ebp-30h]\n  int v53; // [esp+14h] [ebp-2Ch]\n  int v54; // [esp+14h] [ebp-2Ch]\n  char v55; // [esp+14h] [ebp-2Ch]\n  int v56; // [esp+14h] [ebp-2Ch]\n  int v57; // [esp+14h] [ebp-2Ch]\n  int v58; // [esp+14h] [ebp-2Ch]\n  int v59; // [esp+18h] [ebp-28h]\n  int v60; // [esp+18h] [ebp-28h]\n  int v61; // [esp+18h] [ebp-28h]\n  int v62; // [esp+18h] [ebp-28h]\n  int v63; // [esp+18h] [ebp-28h]\n  int v64; // [esp+18h] [ebp-28h]\n  int v65; // [esp+1Ch] [ebp-24h]\n  unsigned int v66; // [esp+20h] [ebp-20h]\n  int m; // [esp+20h] [ebp-20h]\n  int jj; // [esp+20h] [ebp-20h]\n  int k; // [esp+20h] [ebp-20h]\n  int j; // [esp+20h] [ebp-20h]\n  int v71; // [esp+24h] [ebp-1Ch]\n  int v72; // [esp+28h] [ebp-18h]\n  int v73; // [esp+2Ch] [ebp-14h]\n  int v74; // [esp+30h] [ebp-10h] BYREF\n  int v75; // [esp+34h] [ebp-Ch]\n  int v76; // [esp+38h] [ebp-8h] BYREF\n\n  v2 = a1[5];\n  v50 = v2 & 0x8000;\n  v74 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v75 = *(_DWORD *)(a1 + 1);\n  v76 = v4;\n  if ( v3 != -16383 )\n  {\n    v65 = 0;\n    v71 = v74;\n    v72 = v75;\n    v73 = v76;\n    v8 = dword_411C71 - 1;\n    v53 = v3;\n    v59 = dword_411C71 / 32;\n    v9 = &v74 + dword_411C71 / 32;\n    v51 = 31 - dword_411C71 % 32;\n    if ( ((1 << v51) & *v9) != 0 )\n    {\n      v10 = dword_411C71 / 32;\n      for ( i = (~(-1 << (31 - dword_411C71 % 32)) & *(&v74 + v59)) == 0; i; i = *(&v74 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_21;\n      }\n      v12 = v8 / 32;\n      v65 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v74 + v8 / 32;\n      v66 = v13 + *v14;\n      if ( v66 >= *v14 )\n      {\n        v15 = v66 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v65 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v66;\n        if ( v12 < 0 || !v65 )\n          break;\n        v65 = 0;\n        v14 = &v74 + v12;\n        v16 = *v14 + 1;\n        v66 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n    }\nLABEL_21:\n    *v9 &= -1 << v51;\n    if ( v59 + 1 < 3 )\n      memset(&v74 + v59 + 1, 0, 4 * (3 - (v59 + 1)));\n    if ( v65 )\n      ++v3;\n    if ( v3 >= dword_41D665 - dword_411C71 )\n    {\n      if ( v3 > dword_41D665 )\n      {\n        if ( v3 < dword_41344C )\n        {\n          v5 = dword_41BBDA + v3;\n          v74 &= ~0x808F4300;\n          v44 = dword_41D8DC / 32;\n          v45 = dword_41D8DC % 32;\n          v64 = 0;\n          for ( j = 0; j < 3; ++j )\n          {\n            v58 = ~(-1 << v45) & *(&v74 + j);\n            *(&v74 + j) = v64 | ((unsigned int)*(&v74 + j) >> v45);\n            v64 = v58 << (32 - v45);\n          }\n          v46 = 2;\n          v47 = &v76 - v44;\n          do\n          {\n            if ( v46 < v44 )\n              *(&v74 + v46) = 0;\n            else\n              *(&v74 + v46) = *v47;\n            --v47;\n            --v46;\n          }\n          while ( v46 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v75 = 0;\n          v76 = 0;\n          v74 = 0x808F4300;\n          v39 = dword_41D8DC / 32;\n          v40 = dword_41D8DC % 32;\n          v63 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v41 = &v74 + k;\n            v57 = ~(-1 << v40) & *v41;\n            *v41 = v63 | ((unsigned int)*v41 >> v40);\n            v63 = v57 << (32 - v40);\n          }\n          v42 = 2;\n          v43 = &v76 - v39;\n          do\n          {\n            if ( v42 < v39 )\n              *(&v74 + v42) = 0;\n            else\n              *(&v74 + v42) = *v43;\n            --v43;\n            --v42;\n          }\n          while ( v42 >= 0 );\n          v5 = dword_41344C + dword_41BBDA;\n          result = 1;\n        }\n        goto LABEL_78;\n      }\n      v74 = v71;\n      v75 = v72;\n      v17 = (dword_41D665 - v53) / 32;\n      v76 = v73;\n      v18 = (dword_41D665 - v53) % 32;\n      v60 = 0;\n      for ( m = 0; m < 3; ++m )\n      {\n        v19 = &v74 + m;\n        v54 = ~(-1 << v18) & *v19;\n        *v19 = v60 | ((unsigned int)*v19 >> v18);\n        v60 = v54 << (32 - v18);\n      }\n      v20 = 2;\n      v21 = &v76 - v17;\n      do\n      {\n        if ( v20 < v17 )\n          *(&v74 + v20) = 0;\n        else\n          *(&v74 + v20) = *v21;\n        --v21;\n        --v20;\n      }\n      while ( v20 >= 0 );\n      v22 = dword_411C71 - 1;\n      v23 = dword_411C71 / 32;\n      v52 = dword_411C71 / 32;\n      v24 = &v74 + dword_411C71 / 32;\n      v55 = 31 - dword_411C71 % 32;\n      if ( ((1 << v55) & *v24) != 0 )\n      {\n        for ( n = (~(-1 << (31 - dword_411C71 % 32)) & *(&v74 + v23)) == 0; n; n = *(&v74 + v23) == 0 )\n        {\n          if ( ++v23 >= 3 )\n            goto LABEL_51;\n        }\n        v26 = v22 / 32;\n        v61 = 0;\n        v27 = 1 << (31 - v22 % 32);\n        v28 = &v74 + v22 / 32;\n        v29 = *v28 + v27;\n        if ( v29 < *v28 || v29 < v27 )\n          v61 = 1;\n        *v28 = v29;\n        for ( ii = v61; --v26 >= 0 && ii; ii = v33 )\n        {\n          v31 = &v74 + v26;\n          v32 = *v31 + 1;\n          v33 = 0;\n          if ( v32 < *v31 || *v31 == -1 )\n            v33 = 1;\n          *v31 = v32;\n        }\n      }\nLABEL_51:\n      *v24 &= -1 << v55;\n      if ( v52 + 1 < 3 )\n        memset(&v74 + v52 + 1, 0, 4 * (3 - (v52 + 1)));\n      v34 = (dword_41D8DC + 1) / 32;\n      v35 = (dword_41D8DC + 1) % 32;\n      v62 = 0;\n      for ( jj = 0; jj < 3; ++jj )\n      {\n        v36 = &v74 + jj;\n        v56 = ~(-1 << v35) & *v36;\n        *v36 = v62 | ((unsigned int)*v36 >> v35);\n        v62 = v56 << (32 - v35);\n      }\n      v37 = 2;\n      v38 = &v76 - v34;\n      do\n      {\n        if ( v37 < v34 )\n          *(&v74 + v37) = 0;\n        else\n          *(&v74 + v37) = *v38;\n        --v38;\n        --v37;\n      }\n      while ( v37 >= 0 );\n    }\n    else\n    {\n      v74 = 0;\n      v75 = 0;\n      v76 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_78;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v74 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_78;\n    }\n  }\n  v74 = 0;\n  v75 = 0;\n  v76 = 0;\n  result = 2;\nLABEL_78:\n  v48 = v74 | (v50 != 0 ? 0x808F4300 : 0) | (v5 << (31 - dword_41D8DC));\n  if ( dword_41870E == 64 )\n  {\n    v49 = v75;\n    a2[1] = v48;\n    *a2 = v49;\n  }\n  else if ( dword_41870E == 32 )\n  {\n    *a2 = v48;\n  }\n  return result;\n}\n// 41344C: using guessed type int dword_41344C;\n// 41D665: using guessed type int dword_41D665;\n// 411C71: using guessed type int dword_411C71;\n// 41D8DC: using guessed type int dword_41D8DC;\n// 41870E: using guessed type int dword_41870E;\n// 41BBDA: using guessed type int dword_41BBDA;\n\n"
    },
    {
        "Function": "sub_4161FE",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.59%",
        "Function Body": "\nint __cdecl sub_4161FE(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // edi\n  int *v9; // esi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // edi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  int v20; // edx\n  int *v21; // ecx\n  int v22; // esi\n  int v23; // eax\n  int *v24; // ebx\n  bool n; // zf\n  int v26; // eax\n  unsigned int v27; // edx\n  int *v28; // ecx\n  unsigned int v29; // edi\n  int ii; // ecx\n  int *v31; // ecx\n  unsigned int v32; // esi\n  int v33; // edi\n  int v34; // eax\n  int v35; // edx\n  int *v36; // ebx\n  int v37; // edx\n  int *v38; // ecx\n  int v39; // eax\n  int v40; // edx\n  int *v41; // ebx\n  int v42; // edx\n  int *v43; // ecx\n  int v44; // eax\n  int v45; // edx\n  int v46; // edx\n  int *v47; // ecx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // [esp+8h] [ebp-38h]\n  char v51; // [esp+10h] [ebp-30h]\n  int v52; // [esp+10h] [ebp-30h]\n  int v53; // [esp+14h] [ebp-2Ch]\n  int v54; // [esp+14h] [ebp-2Ch]\n  char v55; // [esp+14h] [ebp-2Ch]\n  int v56; // [esp+14h] [ebp-2Ch]\n  int v57; // [esp+14h] [ebp-2Ch]\n  int v58; // [esp+14h] [ebp-2Ch]\n  int v59; // [esp+18h] [ebp-28h]\n  int v60; // [esp+18h] [ebp-28h]\n  int v61; // [esp+18h] [ebp-28h]\n  int v62; // [esp+18h] [ebp-28h]\n  int v63; // [esp+18h] [ebp-28h]\n  int v64; // [esp+18h] [ebp-28h]\n  int v65; // [esp+1Ch] [ebp-24h]\n  unsigned int v66; // [esp+20h] [ebp-20h]\n  int m; // [esp+20h] [ebp-20h]\n  int jj; // [esp+20h] [ebp-20h]\n  int k; // [esp+20h] [ebp-20h]\n  int j; // [esp+20h] [ebp-20h]\n  int v71; // [esp+24h] [ebp-1Ch]\n  int v72; // [esp+28h] [ebp-18h]\n  int v73; // [esp+2Ch] [ebp-14h]\n  int v74; // [esp+30h] [ebp-10h] BYREF\n  int v75; // [esp+34h] [ebp-Ch]\n  int v76; // [esp+38h] [ebp-8h] BYREF\n\n  v2 = a1[5];\n  v50 = v2 & 0x8000;\n  v74 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v75 = *(_DWORD *)(a1 + 1);\n  v76 = v4;\n  if ( v3 != -16383 )\n  {\n    v65 = 0;\n    v71 = v74;\n    v72 = v75;\n    v73 = v76;\n    v8 = dword_4139A2 - 1;\n    v53 = v3;\n    v59 = dword_4139A2 / 32;\n    v9 = &v74 + dword_4139A2 / 32;\n    v51 = 31 - dword_4139A2 % 32;\n    if ( ((1 << v51) & *v9) != 0 )\n    {\n      v10 = dword_4139A2 / 32;\n      for ( i = (~(-1 << (31 - dword_4139A2 % 32)) & *(&v74 + v59)) == 0; i; i = *(&v74 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_21;\n      }\n      v12 = v8 / 32;\n      v65 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v74 + v8 / 32;\n      v66 = v13 + *v14;\n      if ( v66 >= *v14 )\n      {\n        v15 = v66 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v65 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v66;\n        if ( v12 < 0 || !v65 )\n          break;\n        v65 = 0;\n        v14 = &v74 + v12;\n        v16 = *v14 + 1;\n        v66 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n    }\nLABEL_21:\n    *v9 &= -1 << v51;\n    if ( v59 + 1 < 3 )\n      memset(&v74 + v59 + 1, 0, 4 * (3 - (v59 + 1)));\n    if ( v65 )\n      ++v3;\n    if ( v3 >= dword_410F12 - dword_4139A2 )\n    {\n      if ( v3 > dword_410F12 )\n      {\n        if ( v3 < dword_41052F )\n        {\n          v5 = dword_417AB5 + v3;\n          v74 &= ~0x808F4300;\n          v44 = dword_415715 / 32;\n          v45 = dword_415715 % 32;\n          v64 = 0;\n          for ( j = 0; j < 3; ++j )\n          {\n            v58 = ~(-1 << v45) & *(&v74 + j);\n            *(&v74 + j) = v64 | ((unsigned int)*(&v74 + j) >> v45);\n            v64 = v58 << (32 - v45);\n          }\n          v46 = 2;\n          v47 = &v76 - v44;\n          do\n          {\n            if ( v46 < v44 )\n              *(&v74 + v46) = 0;\n            else\n              *(&v74 + v46) = *v47;\n            --v47;\n            --v46;\n          }\n          while ( v46 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v75 = 0;\n          v76 = 0;\n          v74 = 0x808F4300;\n          v39 = dword_415715 / 32;\n          v40 = dword_415715 % 32;\n          v63 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v41 = &v74 + k;\n            v57 = ~(-1 << v40) & *v41;\n            *v41 = v63 | ((unsigned int)*v41 >> v40);\n            v63 = v57 << (32 - v40);\n          }\n          v42 = 2;\n          v43 = &v76 - v39;\n          do\n          {\n            if ( v42 < v39 )\n              *(&v74 + v42) = 0;\n            else\n              *(&v74 + v42) = *v43;\n            --v43;\n            --v42;\n          }\n          while ( v42 >= 0 );\n          v5 = dword_41052F + dword_417AB5;\n          result = 1;\n        }\n        goto LABEL_78;\n      }\n      v74 = v71;\n      v75 = v72;\n      v17 = (dword_410F12 - v53) / 32;\n      v76 = v73;\n      v18 = (dword_410F12 - v53) % 32;\n      v60 = 0;\n      for ( m = 0; m < 3; ++m )\n      {\n        v19 = &v74 + m;\n        v54 = ~(-1 << v18) & *v19;\n        *v19 = v60 | ((unsigned int)*v19 >> v18);\n        v60 = v54 << (32 - v18);\n      }\n      v20 = 2;\n      v21 = &v76 - v17;\n      do\n      {\n        if ( v20 < v17 )\n          *(&v74 + v20) = 0;\n        else\n          *(&v74 + v20) = *v21;\n        --v21;\n        --v20;\n      }\n      while ( v20 >= 0 );\n      v22 = dword_4139A2 - 1;\n      v23 = dword_4139A2 / 32;\n      v52 = dword_4139A2 / 32;\n      v24 = &v74 + dword_4139A2 / 32;\n      v55 = 31 - dword_4139A2 % 32;\n      if ( ((1 << v55) & *v24) != 0 )\n      {\n        for ( n = (~(-1 << (31 - dword_4139A2 % 32)) & *(&v74 + v23)) == 0; n; n = *(&v74 + v23) == 0 )\n        {\n          if ( ++v23 >= 3 )\n            goto LABEL_51;\n        }\n        v26 = v22 / 32;\n        v61 = 0;\n        v27 = 1 << (31 - v22 % 32);\n        v28 = &v74 + v22 / 32;\n        v29 = *v28 + v27;\n        if ( v29 < *v28 || v29 < v27 )\n          v61 = 1;\n        *v28 = v29;\n        for ( ii = v61; --v26 >= 0 && ii; ii = v33 )\n        {\n          v31 = &v74 + v26;\n          v32 = *v31 + 1;\n          v33 = 0;\n          if ( v32 < *v31 || *v31 == -1 )\n            v33 = 1;\n          *v31 = v32;\n        }\n      }\nLABEL_51:\n      *v24 &= -1 << v55;\n      if ( v52 + 1 < 3 )\n        memset(&v74 + v52 + 1, 0, 4 * (3 - (v52 + 1)));\n      v34 = (dword_415715 + 1) / 32;\n      v35 = (dword_415715 + 1) % 32;\n      v62 = 0;\n      for ( jj = 0; jj < 3; ++jj )\n      {\n        v36 = &v74 + jj;\n        v56 = ~(-1 << v35) & *v36;\n        *v36 = v62 | ((unsigned int)*v36 >> v35);\n        v62 = v56 << (32 - v35);\n      }\n      v37 = 2;\n      v38 = &v76 - v34;\n      do\n      {\n        if ( v37 < v34 )\n          *(&v74 + v37) = 0;\n        else\n          *(&v74 + v37) = *v38;\n        --v38;\n        --v37;\n      }\n      while ( v37 >= 0 );\n    }\n    else\n    {\n      v74 = 0;\n      v75 = 0;\n      v76 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_78;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v74 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_78;\n    }\n  }\n  v74 = 0;\n  v75 = 0;\n  v76 = 0;\n  result = 2;\nLABEL_78:\n  v48 = v74 | (v50 != 0 ? 0x808F4300 : 0) | (v5 << (31 - dword_415715));\n  if ( dword_41D655 == 64 )\n  {\n    v49 = v75;\n    a2[1] = v48;\n    *a2 = v49;\n  }\n  else if ( dword_41D655 == 32 )\n  {\n    *a2 = v48;\n  }\n  return result;\n}\n// 41052F: using guessed type int dword_41052F;\n// 410F12: using guessed type int dword_410F12;\n// 4139A2: using guessed type int dword_4139A2;\n// 415715: using guessed type int dword_415715;\n// 41D655: using guessed type int dword_41D655;\n// 417AB5: using guessed type int dword_417AB5;\n\n"
    },
    {
        "Function": "sub_40D7DF",
        "Total XOR and shift operations": 9,
        "XOR operations": 3,
        "Shift operations": 6,
        "Operation percentage": "3.95%",
        "Function Body": "\nint *__usercall sub_40D7DF@<eax>(int *a1@<esi>, void *a2, int a3, int a4, int a5, int a6, unsigned int a7)\n{\n  int v7; // edx\n  int v8; // eax\n  int v9; // edi\n  _BYTE *v10; // ecx\n  _BYTE *v11; // eax\n  _BYTE *v12; // eax\n  unsigned __int8 v13; // bl\n  _BYTE *v14; // eax\n  int i; // edi\n  int v16; // edx\n  int v17; // eax\n  char v18; // bl\n  unsigned int v19; // edi\n  unsigned int v20; // ecx\n  bool v21; // zf\n  _BYTE *v22; // eax\n  int *v23; // eax\n  bool v24; // cf\n  int *v25; // eax\n  int j; // edi\n  int v27; // edx\n  int v28; // eax\n  char v29; // bl\n  unsigned int v30; // edi\n  unsigned int v31; // ecx\n  bool v32; // zf\n  _BYTE *v33; // eax\n  _BYTE *v34; // eax\n  _BYTE *v35; // eax\n  int v37; // [esp+14h] [ebp-24h]\n  int v38; // [esp+18h] [ebp-20h]\n  int v39; // [esp+18h] [ebp-20h]\n  int v40; // [esp+1Ch] [ebp-1Ch]\n  int v41; // [esp+1Ch] [ebp-1Ch]\n  char v42; // [esp+20h] [ebp-18h]\n  char v43; // [esp+21h] [ebp-17h]\n  char v44; // [esp+22h] [ebp-16h]\n  char v45; // [esp+24h] [ebp-14h] BYREF\n  unsigned __int8 v46; // [esp+25h] [ebp-13h]\n  unsigned __int8 v47; // [esp+26h] [ebp-12h]\n  char v48; // [esp+27h] [ebp-11h]\n  unsigned __int8 v49[4]; // [esp+28h] [ebp-10h] BYREF\n  int v50; // [esp+34h] [ebp-4h]\n\n  v7 = 0;\n  v50 = 1;\n  v8 = a6;\n  v9 = 0;\n  a1[5] = 15;\n  a1[4] = 0;\n  v40 = 0;\n  v38 = 0;\n  for ( *(_BYTE *)a1 = 0; v8; v10[v8] ^= 0xEu )\n  {\n    v10 = a2;\n    --v8;\n    if ( a7 < 0x10 )\n      v10 = &a2;\n  }\n  v37 = a6;\n  if ( a6 )\n  {\n    while ( 1 )\n    {\n      --v37;\n      v11 = a2;\n      if ( a7 < 0x10 )\n        v11 = &a2;\n      if ( v11[v7] == 61 )\n        break;\n      v12 = a2;\n      if ( a7 < 0x10 )\n        v12 = &a2;\n      v13 = v12[v7];\n      if ( !isalnum(v13) && v13 != 43 && v13 != 47 )\n        break;\n      v14 = a2;\n      if ( a7 < 0x10 )\n        v14 = &a2;\n      *(&v45 + v9++) = v14[v38];\n      v40 = v9;\n      ++v38;\n      if ( v9 == 4 )\n      {\n        for ( i = 0; i < 4; ++i )\n        {\n          v49[0] = *(&v45 + i);\n          *(&v45 + i) = sub_40DC3C(v49, &Buf);\n        }\n        v42 = 4 * v45 + ((v46 >> 4) & 3);\n        v43 = (16 * v46) ^ (v47 >> 2) & 0xF;\n        v16 = 0;\n        v44 = v48 + (v47 << 6);\n        v41 = 0;\n        while ( 1 )\n        {\n          v17 = a1[4];\n          v18 = *(&v42 + v16);\n          if ( v17 == -1 || v17 == -2 || (v19 = v17 + 1, v17 == -2) )\nLABEL_42:\n            std::_Xlength_error(\"string too long\");\n          v20 = a1[5];\n          if ( v20 < v19 )\n            break;\n          v21 = v19 == 0;\n          if ( v17 == -1 )\n          {\n            a1[4] = 0;\n            if ( v20 < 0x10 )\n              v22 = a1;\n            else\n              v22 = (_BYTE *)*a1;\n            *v22 = 0;\n            goto LABEL_29;\n          }\nLABEL_30:\n          if ( !v21 )\n          {\n            if ( (unsigned int)a1[5] < 0x10 )\n              v23 = a1;\n            else\n              v23 = (int *)*a1;\n            *((_BYTE *)v23 + a1[4]) = v18;\n            v24 = (unsigned int)a1[5] < 0x10;\n            a1[4] = v19;\n            if ( v24 )\n              v25 = a1;\n            else\n              v25 = (int *)*a1;\n            *((_BYTE *)v25 + v19) = 0;\n          }\n          v41 = ++v16;\n          if ( v16 >= 3 )\n          {\n            v40 = 0;\n            v9 = 0;\n            goto LABEL_40;\n          }\n        }\n        sub_408383((const void **)a1, v17 + 1, a1[4]);\n        v16 = v41;\nLABEL_29:\n        v21 = v19 == 0;\n        goto LABEL_30;\n      }\nLABEL_40:\n      if ( !v37 )\n        break;\n      v7 = v38;\n    }\n    if ( v9 )\n    {\n      if ( v9 < 4 )\n        memset(&v45 + v9, 0, 4 - v9);\n      for ( j = 0; j < 4; ++j )\n      {\n        v49[0] = *(&v45 + j);\n        *(&v45 + j) = sub_40DC3C(v49, &Buf);\n      }\n      v42 = 4 * v45 + ((v46 >> 4) & 3);\n      v44 = v48 + (v47 << 6);\n      v43 = (16 * v46) ^ (v47 >> 2) & 0xF;\n      v27 = 0;\n      v39 = 0;\n      if ( v40 - 1 > 0 )\n      {\n        while ( 1 )\n        {\n          v28 = a1[4];\n          v29 = *(&v42 + v27);\n          if ( v28 == -1 || v28 == -2 )\n            goto LABEL_42;\n          v30 = v28 + 1;\n          if ( v28 == -2 )\n            goto LABEL_42;\n          v31 = a1[5];\n          if ( v31 < v30 )\n            break;\n          v32 = v30 == 0;\n          if ( v28 == -1 )\n          {\n            a1[4] = 0;\n            if ( v31 < 0x10 )\n              v33 = a1;\n            else\n              v33 = (_BYTE *)*a1;\n            *v33 = 0;\n            goto LABEL_58;\n          }\nLABEL_59:\n          if ( !v32 )\n          {\n            if ( (unsigned int)a1[5] < 0x10 )\n              v34 = a1;\n            else\n              v34 = (_BYTE *)*a1;\n            v34[a1[4]] = v29;\n            v24 = (unsigned int)a1[5] < 0x10;\n            a1[4] = v30;\n            if ( v24 )\n              v35 = a1;\n            else\n              v35 = (_BYTE *)*a1;\n            v35[v30] = 0;\n          }\n          v39 = ++v27;\n          if ( v27 >= v40 - 1 )\n            goto LABEL_68;\n        }\n        sub_408383((const void **)a1, v28 + 1, a1[4]);\n        v27 = v39;\nLABEL_58:\n        v32 = v30 == 0;\n        goto LABEL_59;\n      }\n    }\n  }\nLABEL_68:\n  if ( a7 >= 0x10 )\n    operator delete(a2);\n  return a1;\n}\n// 40D7DF: using guessed type unsigned __int8 var_10[4];\n\n"
    }
]