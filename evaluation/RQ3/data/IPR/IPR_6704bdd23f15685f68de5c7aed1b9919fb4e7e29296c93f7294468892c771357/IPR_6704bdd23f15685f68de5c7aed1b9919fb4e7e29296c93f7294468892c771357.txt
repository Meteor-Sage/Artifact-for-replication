[
    {
        "Function": "sub_405221",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.59%",
        "Function Body": "\nint __cdecl sub_405221(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // edi\n  int *v9; // esi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // edi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  int v20; // edx\n  int *v21; // ecx\n  int v22; // esi\n  int v23; // eax\n  int *v24; // ebx\n  bool n; // zf\n  int v26; // eax\n  unsigned int v27; // edx\n  int *v28; // ecx\n  unsigned int v29; // edi\n  int ii; // ecx\n  int *v31; // ecx\n  unsigned int v32; // esi\n  int v33; // edi\n  int v34; // eax\n  int v35; // edx\n  int *v36; // ebx\n  int v37; // edx\n  int *v38; // ecx\n  int v39; // eax\n  int v40; // edx\n  int *v41; // ebx\n  int v42; // edx\n  int *v43; // ecx\n  int v44; // eax\n  int v45; // edx\n  int v46; // edx\n  int *v47; // ecx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // [esp+8h] [ebp-38h]\n  char v51; // [esp+10h] [ebp-30h]\n  int v52; // [esp+10h] [ebp-30h]\n  int v53; // [esp+14h] [ebp-2Ch]\n  int v54; // [esp+14h] [ebp-2Ch]\n  char v55; // [esp+14h] [ebp-2Ch]\n  int v56; // [esp+14h] [ebp-2Ch]\n  int v57; // [esp+14h] [ebp-2Ch]\n  int v58; // [esp+14h] [ebp-2Ch]\n  int v59; // [esp+18h] [ebp-28h]\n  int v60; // [esp+18h] [ebp-28h]\n  int v61; // [esp+18h] [ebp-28h]\n  int v62; // [esp+18h] [ebp-28h]\n  int v63; // [esp+18h] [ebp-28h]\n  int v64; // [esp+18h] [ebp-28h]\n  int v65; // [esp+1Ch] [ebp-24h]\n  unsigned int v66; // [esp+20h] [ebp-20h]\n  int m; // [esp+20h] [ebp-20h]\n  int jj; // [esp+20h] [ebp-20h]\n  int k; // [esp+20h] [ebp-20h]\n  int j; // [esp+20h] [ebp-20h]\n  int v71; // [esp+24h] [ebp-1Ch]\n  int v72; // [esp+28h] [ebp-18h]\n  int v73; // [esp+2Ch] [ebp-14h]\n  int v74; // [esp+30h] [ebp-10h] BYREF\n  int v75; // [esp+34h] [ebp-Ch]\n  int v76; // [esp+38h] [ebp-8h] BYREF\n\n  v2 = a1[5];\n  v50 = v2 & 0x8000;\n  v74 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v75 = *(_DWORD *)(a1 + 1);\n  v76 = v4;\n  if ( v3 != -16383 )\n  {\n    v65 = 0;\n    v71 = v74;\n    v72 = v75;\n    v73 = v76;\n    v8 = dword_45BCCF - 1;\n    v53 = v3;\n    v59 = dword_45BCCF / 32;\n    v9 = &v74 + dword_45BCCF / 32;\n    v51 = 31 - dword_45BCCF % 32;\n    if ( ((1 << v51) & *v9) != 0 )\n    {\n      v10 = dword_45BCCF / 32;\n      for ( i = (~(-1 << (31 - dword_45BCCF % 32)) & *(&v74 + v59)) == 0; i; i = *(&v74 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_21;\n      }\n      v12 = v8 / 32;\n      v65 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v74 + v8 / 32;\n      v66 = v13 + *v14;\n      if ( v66 >= *v14 )\n      {\n        v15 = v66 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v65 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v66;\n        if ( v12 < 0 || !v65 )\n          break;\n        v65 = 0;\n        v14 = &v74 + v12;\n        v16 = *v14 + 1;\n        v66 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n    }\nLABEL_21:\n    *v9 &= -1 << v51;\n    if ( v59 + 1 < 3 )\n      memset(&v74 + v59 + 1, 0, 4 * (3 - (v59 + 1)));\n    if ( v65 )\n      ++v3;\n    if ( v3 >= dword_451D05 - dword_45BCCF )\n    {\n      if ( v3 > dword_451D05 )\n      {\n        if ( v3 < dword_457E69 )\n        {\n          v5 = dword_45CC6D + v3;\n          v74 &= ~0x80845500;\n          v44 = dword_458294 / 32;\n          v45 = dword_458294 % 32;\n          v64 = 0;\n          for ( j = 0; j < 3; ++j )\n          {\n            v58 = ~(-1 << v45) & *(&v74 + j);\n            *(&v74 + j) = v64 | ((unsigned int)*(&v74 + j) >> v45);\n            v64 = v58 << (32 - v45);\n          }\n          v46 = 2;\n          v47 = &v76 - v44;\n          do\n          {\n            if ( v46 < v44 )\n              *(&v74 + v46) = 0;\n            else\n              *(&v74 + v46) = *v47;\n            --v47;\n            --v46;\n          }\n          while ( v46 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v75 = 0;\n          v76 = 0;\n          v74 = 0x80845500;\n          v39 = dword_458294 / 32;\n          v40 = dword_458294 % 32;\n          v63 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v41 = &v74 + k;\n            v57 = ~(-1 << v40) & *v41;\n            *v41 = v63 | ((unsigned int)*v41 >> v40);\n            v63 = v57 << (32 - v40);\n          }\n          v42 = 2;\n          v43 = &v76 - v39;\n          do\n          {\n            if ( v42 < v39 )\n              *(&v74 + v42) = 0;\n            else\n              *(&v74 + v42) = *v43;\n            --v43;\n            --v42;\n          }\n          while ( v42 >= 0 );\n          v5 = dword_457E69 + dword_45CC6D;\n          result = 1;\n        }\n        goto LABEL_78;\n      }\n      v74 = v71;\n      v75 = v72;\n      v17 = (dword_451D05 - v53) / 32;\n      v76 = v73;\n      v18 = (dword_451D05 - v53) % 32;\n      v60 = 0;\n      for ( m = 0; m < 3; ++m )\n      {\n        v19 = &v74 + m;\n        v54 = ~(-1 << v18) & *v19;\n        *v19 = v60 | ((unsigned int)*v19 >> v18);\n        v60 = v54 << (32 - v18);\n      }\n      v20 = 2;\n      v21 = &v76 - v17;\n      do\n      {\n        if ( v20 < v17 )\n          *(&v74 + v20) = 0;\n        else\n          *(&v74 + v20) = *v21;\n        --v21;\n        --v20;\n      }\n      while ( v20 >= 0 );\n      v22 = dword_45BCCF - 1;\n      v23 = dword_45BCCF / 32;\n      v52 = dword_45BCCF / 32;\n      v24 = &v74 + dword_45BCCF / 32;\n      v55 = 31 - dword_45BCCF % 32;\n      if ( ((1 << v55) & *v24) != 0 )\n      {\n        for ( n = (~(-1 << (31 - dword_45BCCF % 32)) & *(&v74 + v23)) == 0; n; n = *(&v74 + v23) == 0 )\n        {\n          if ( ++v23 >= 3 )\n            goto LABEL_51;\n        }\n        v26 = v22 / 32;\n        v61 = 0;\n        v27 = 1 << (31 - v22 % 32);\n        v28 = &v74 + v22 / 32;\n        v29 = *v28 + v27;\n        if ( v29 < *v28 || v29 < v27 )\n          v61 = 1;\n        *v28 = v29;\n        for ( ii = v61; --v26 >= 0 && ii; ii = v33 )\n        {\n          v31 = &v74 + v26;\n          v32 = *v31 + 1;\n          v33 = 0;\n          if ( v32 < *v31 || *v31 == -1 )\n            v33 = 1;\n          *v31 = v32;\n        }\n      }\nLABEL_51:\n      *v24 &= -1 << v55;\n      if ( v52 + 1 < 3 )\n        memset(&v74 + v52 + 1, 0, 4 * (3 - (v52 + 1)));\n      v34 = (dword_458294 + 1) / 32;\n      v35 = (dword_458294 + 1) % 32;\n      v62 = 0;\n      for ( jj = 0; jj < 3; ++jj )\n      {\n        v36 = &v74 + jj;\n        v56 = ~(-1 << v35) & *v36;\n        *v36 = v62 | ((unsigned int)*v36 >> v35);\n        v62 = v56 << (32 - v35);\n      }\n      v37 = 2;\n      v38 = &v76 - v34;\n      do\n      {\n        if ( v37 < v34 )\n          *(&v74 + v37) = 0;\n        else\n          *(&v74 + v37) = *v38;\n        --v38;\n        --v37;\n      }\n      while ( v37 >= 0 );\n    }\n    else\n    {\n      v74 = 0;\n      v75 = 0;\n      v76 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_78;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v74 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_78;\n    }\n  }\n  v74 = 0;\n  v75 = 0;\n  v76 = 0;\n  result = 2;\nLABEL_78:\n  v48 = v74 | (v50 != 0 ? 0x80845500 : 0) | (v5 << (31 - dword_458294));\n  if ( dword_458B71 == 64 )\n  {\n    v49 = v75;\n    a2[1] = v48;\n    *a2 = v49;\n  }\n  else if ( dword_458B71 == 32 )\n  {\n    *a2 = v48;\n  }\n  return result;\n}\n// 457E69: using guessed type int dword_457E69;\n// 451D05: using guessed type int dword_451D05;\n// 45BCCF: using guessed type int dword_45BCCF;\n// 458294: using guessed type int dword_458294;\n// 458B71: using guessed type int dword_458B71;\n// 45CC6D: using guessed type int dword_45CC6D;\n\n"
    },
    {
        "Function": "sub_40BE35",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.59%",
        "Function Body": "\nint __cdecl sub_40BE35(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // edi\n  int *v9; // esi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // edi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  int v20; // edx\n  int *v21; // ecx\n  int v22; // esi\n  int v23; // eax\n  int *v24; // ebx\n  bool n; // zf\n  int v26; // eax\n  unsigned int v27; // edx\n  int *v28; // ecx\n  unsigned int v29; // edi\n  int ii; // ecx\n  int *v31; // ecx\n  unsigned int v32; // esi\n  int v33; // edi\n  int v34; // eax\n  int v35; // edx\n  int *v36; // ebx\n  int v37; // edx\n  int *v38; // ecx\n  int v39; // eax\n  int v40; // edx\n  int *v41; // ebx\n  int v42; // edx\n  int *v43; // ecx\n  int v44; // eax\n  int v45; // edx\n  int v46; // edx\n  int *v47; // ecx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // [esp+8h] [ebp-38h]\n  char v51; // [esp+10h] [ebp-30h]\n  int v52; // [esp+10h] [ebp-30h]\n  int v53; // [esp+14h] [ebp-2Ch]\n  int v54; // [esp+14h] [ebp-2Ch]\n  char v55; // [esp+14h] [ebp-2Ch]\n  int v56; // [esp+14h] [ebp-2Ch]\n  int v57; // [esp+14h] [ebp-2Ch]\n  int v58; // [esp+14h] [ebp-2Ch]\n  int v59; // [esp+18h] [ebp-28h]\n  int v60; // [esp+18h] [ebp-28h]\n  int v61; // [esp+18h] [ebp-28h]\n  int v62; // [esp+18h] [ebp-28h]\n  int v63; // [esp+18h] [ebp-28h]\n  int v64; // [esp+18h] [ebp-28h]\n  int v65; // [esp+1Ch] [ebp-24h]\n  unsigned int v66; // [esp+20h] [ebp-20h]\n  int m; // [esp+20h] [ebp-20h]\n  int jj; // [esp+20h] [ebp-20h]\n  int k; // [esp+20h] [ebp-20h]\n  int j; // [esp+20h] [ebp-20h]\n  int v71; // [esp+24h] [ebp-1Ch]\n  int v72; // [esp+28h] [ebp-18h]\n  int v73; // [esp+2Ch] [ebp-14h]\n  int v74; // [esp+30h] [ebp-10h] BYREF\n  int v75; // [esp+34h] [ebp-Ch]\n  int v76; // [esp+38h] [ebp-8h] BYREF\n\n  v2 = a1[5];\n  v50 = v2 & 0x8000;\n  v74 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v75 = *(_DWORD *)(a1 + 1);\n  v76 = v4;\n  if ( v3 != -16383 )\n  {\n    v65 = 0;\n    v71 = v74;\n    v72 = v75;\n    v73 = v76;\n    v8 = dword_45E4AA - 1;\n    v53 = v3;\n    v59 = dword_45E4AA / 32;\n    v9 = &v74 + dword_45E4AA / 32;\n    v51 = 31 - dword_45E4AA % 32;\n    if ( ((1 << v51) & *v9) != 0 )\n    {\n      v10 = dword_45E4AA / 32;\n      for ( i = (~(-1 << (31 - dword_45E4AA % 32)) & *(&v74 + v59)) == 0; i; i = *(&v74 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_21;\n      }\n      v12 = v8 / 32;\n      v65 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v74 + v8 / 32;\n      v66 = v13 + *v14;\n      if ( v66 >= *v14 )\n      {\n        v15 = v66 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v65 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v66;\n        if ( v12 < 0 || !v65 )\n          break;\n        v65 = 0;\n        v14 = &v74 + v12;\n        v16 = *v14 + 1;\n        v66 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n    }\nLABEL_21:\n    *v9 &= -1 << v51;\n    if ( v59 + 1 < 3 )\n      memset(&v74 + v59 + 1, 0, 4 * (3 - (v59 + 1)));\n    if ( v65 )\n      ++v3;\n    if ( v3 >= dword_45087F - dword_45E4AA )\n    {\n      if ( v3 > dword_45087F )\n      {\n        if ( v3 < dword_45C3EC )\n        {\n          v5 = dword_4524F0 + v3;\n          v74 &= ~0x80845500;\n          v44 = dword_45DE9B / 32;\n          v45 = dword_45DE9B % 32;\n          v64 = 0;\n          for ( j = 0; j < 3; ++j )\n          {\n            v58 = ~(-1 << v45) & *(&v74 + j);\n            *(&v74 + j) = v64 | ((unsigned int)*(&v74 + j) >> v45);\n            v64 = v58 << (32 - v45);\n          }\n          v46 = 2;\n          v47 = &v76 - v44;\n          do\n          {\n            if ( v46 < v44 )\n              *(&v74 + v46) = 0;\n            else\n              *(&v74 + v46) = *v47;\n            --v47;\n            --v46;\n          }\n          while ( v46 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v75 = 0;\n          v76 = 0;\n          v74 = 0x80845500;\n          v39 = dword_45DE9B / 32;\n          v40 = dword_45DE9B % 32;\n          v63 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v41 = &v74 + k;\n            v57 = ~(-1 << v40) & *v41;\n            *v41 = v63 | ((unsigned int)*v41 >> v40);\n            v63 = v57 << (32 - v40);\n          }\n          v42 = 2;\n          v43 = &v76 - v39;\n          do\n          {\n            if ( v42 < v39 )\n              *(&v74 + v42) = 0;\n            else\n              *(&v74 + v42) = *v43;\n            --v43;\n            --v42;\n          }\n          while ( v42 >= 0 );\n          v5 = dword_45C3EC + dword_4524F0;\n          result = 1;\n        }\n        goto LABEL_78;\n      }\n      v74 = v71;\n      v75 = v72;\n      v17 = (dword_45087F - v53) / 32;\n      v76 = v73;\n      v18 = (dword_45087F - v53) % 32;\n      v60 = 0;\n      for ( m = 0; m < 3; ++m )\n      {\n        v19 = &v74 + m;\n        v54 = ~(-1 << v18) & *v19;\n        *v19 = v60 | ((unsigned int)*v19 >> v18);\n        v60 = v54 << (32 - v18);\n      }\n      v20 = 2;\n      v21 = &v76 - v17;\n      do\n      {\n        if ( v20 < v17 )\n          *(&v74 + v20) = 0;\n        else\n          *(&v74 + v20) = *v21;\n        --v21;\n        --v20;\n      }\n      while ( v20 >= 0 );\n      v22 = dword_45E4AA - 1;\n      v23 = dword_45E4AA / 32;\n      v52 = dword_45E4AA / 32;\n      v24 = &v74 + dword_45E4AA / 32;\n      v55 = 31 - dword_45E4AA % 32;\n      if ( ((1 << v55) & *v24) != 0 )\n      {\n        for ( n = (~(-1 << (31 - dword_45E4AA % 32)) & *(&v74 + v23)) == 0; n; n = *(&v74 + v23) == 0 )\n        {\n          if ( ++v23 >= 3 )\n            goto LABEL_51;\n        }\n        v26 = v22 / 32;\n        v61 = 0;\n        v27 = 1 << (31 - v22 % 32);\n        v28 = &v74 + v22 / 32;\n        v29 = *v28 + v27;\n        if ( v29 < *v28 || v29 < v27 )\n          v61 = 1;\n        *v28 = v29;\n        for ( ii = v61; --v26 >= 0 && ii; ii = v33 )\n        {\n          v31 = &v74 + v26;\n          v32 = *v31 + 1;\n          v33 = 0;\n          if ( v32 < *v31 || *v31 == -1 )\n            v33 = 1;\n          *v31 = v32;\n        }\n      }\nLABEL_51:\n      *v24 &= -1 << v55;\n      if ( v52 + 1 < 3 )\n        memset(&v74 + v52 + 1, 0, 4 * (3 - (v52 + 1)));\n      v34 = (dword_45DE9B + 1) / 32;\n      v35 = (dword_45DE9B + 1) % 32;\n      v62 = 0;\n      for ( jj = 0; jj < 3; ++jj )\n      {\n        v36 = &v74 + jj;\n        v56 = ~(-1 << v35) & *v36;\n        *v36 = v62 | ((unsigned int)*v36 >> v35);\n        v62 = v56 << (32 - v35);\n      }\n      v37 = 2;\n      v38 = &v76 - v34;\n      do\n      {\n        if ( v37 < v34 )\n          *(&v74 + v37) = 0;\n        else\n          *(&v74 + v37) = *v38;\n        --v38;\n        --v37;\n      }\n      while ( v37 >= 0 );\n    }\n    else\n    {\n      v74 = 0;\n      v75 = 0;\n      v76 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_78;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v74 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_78;\n    }\n  }\n  v74 = 0;\n  v75 = 0;\n  v76 = 0;\n  result = 2;\nLABEL_78:\n  v48 = v74 | (v50 != 0 ? 0x80845500 : 0) | (v5 << (31 - dword_45DE9B));\n  if ( dword_456CD0 == 64 )\n  {\n    v49 = v75;\n    a2[1] = v48;\n    *a2 = v49;\n  }\n  else if ( dword_456CD0 == 32 )\n  {\n    *a2 = v48;\n  }\n  return result;\n}\n// 45C3EC: using guessed type int dword_45C3EC;\n// 45087F: using guessed type int dword_45087F;\n// 45E4AA: using guessed type int dword_45E4AA;\n// 45DE9B: using guessed type int dword_45DE9B;\n// 456CD0: using guessed type int dword_456CD0;\n// 4524F0: using guessed type int dword_4524F0;\n\n"
    },
    {
        "Function": "sub_40660A",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "4.08%",
        "Function Body": "\nint __stdcall sub_40660A(const void **a1, unsigned int a2, int Size)\n{\n  unsigned int v3; // ebx\n  unsigned int v4; // ecx\n  const void *v5; // eax\n  int v6; // ecx\n  int result; // eax\n  unsigned int v8; // [esp+10h] [ebp-14h]\n  void *v9; // [esp+30h] [ebp+Ch]\n\n  v3 = a2 | 0xF;\n  if ( (a2 | 0xF) == -1 )\n  {\n    v3 = a2;\n  }\n  else\n  {\n    v4 = (unsigned int)a1[5];\n    v8 = v4 >> 1;\n    if ( v4 >> 1 > v3 / 3 )\n    {\n      v3 = -2;\n      if ( v4 <= -2 - v8 )\n        v3 = v8 + v4;\n    }\n  }\n  v9 = sub_4048D0(v3 + 1);\n  if ( Size )\n  {\n    if ( (unsigned int)a1[5] < 0x10 )\n      v5 = a1;\n    else\n      v5 = *a1;\n    memcpy(v9, v5, Size);\n  }\n  sub_409443(0, (void **)a1, 1);\n  v6 = (int)v9;\n  result = Size;\n  *a1 = v9;\n  a1[5] = (const void *)v3;\n  a1[4] = (const void *)Size;\n  if ( v3 < 0x10 )\n    v6 = (int)a1;\n  *(_BYTE *)(v6 + Size) = 0;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4501AB",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "2.78%",
        "Function Body": "\nLONG sub_4501AB()\n{\n  int v0; // edi\n  int v1; // esi\n  LONG result; // eax\n  SIZE_T v3; // [esp+Ch] [ebp-80h]\n  int v4; // [esp+Ch] [ebp-80h]\n  WCHAR Buffer[1024]; // [esp+10h] [ebp-7Ch] BYREF\n\n  v0 = dword_4DF66C;\n  v3 = uBytes;\n  v1 = sub_45F7E0();\n  if ( uBytes == 1160 )\n    HeapAlloc(0, 0, 0);\n  result = sub_455649(v1);\n  if ( uBytes == 2753 )\n    result = RegDeleteValueW(0, 0);\n  v4 = v3 - 1;\n  if ( uBytes == 1592 )\n  {\n    GetTempPathW(0, Buffer);\n    result = SetComputerNameW(0);\n  }\n  while ( v4 >= 0 )\n  {\n    *(_BYTE *)(v4 + v0) ^= sub_454415();\n    result = 1;\n    --v4;\n  }\n  return result;\n}\n// 4DF66C: using guessed type int dword_4DF66C;\n// 4501AB: using guessed type WCHAR Buffer[1024];\n\n"
    },
    {
        "Function": "sub_40747C",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid __thiscall sub_40747C(std::exception *this)\n{\n  *(_DWORD *)this = std::bad_alloc::`vftable';\n  sub_40AD86(this);\n}\n// 406582: using guessed type int __far std::bad_alloc::`vftable'();\n\n"
    },
    {
        "Function": "sub_409443",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid __userpurge sub_409443(size_t a1@<edi>, void **a2@<esi>, char a3)\n{\n  void *v3; // ebx\n\n  if ( a3 && (unsigned int)a2[5] >= 0x10 )\n  {\n    v3 = *a2;\n    if ( a1 )\n      memcpy(a2, v3, a1);\n    operator delete(v3);\n  }\n  a2[5] = (void *)15;\n  a2[4] = (void *)a1;\n  *((_BYTE *)a2 + a1) = 0;\n}\n\n"
    },
    {
        "Function": "sub_404BDD",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid **__usercall sub_404BDD@<eax>(_BYTE *Src@<ecx>, unsigned int a2@<eax>, void **a3@<edx>)\n{\n  unsigned int v6; // ecx\n  _BYTE *v7; // eax\n  char *v8; // eax\n  _BYTE *v9; // eax\n  void *v11; // eax\n  bool v12; // cf\n  _BYTE *v13; // eax\n\n  if ( Src\n    && ((v6 = (unsigned int)a3[5], v6 < 0x10) ? (v7 = a3) : (v7 = *a3),\n        Src >= v7 && (v6 < 0x10 ? (v8 = (char *)a3) : (v8 = (char *)*a3), (char *)a3[4] + (int)v8 > Src)) )\n  {\n    if ( v6 < 0x10 )\n      v9 = a3;\n    else\n      v9 = *a3;\n    return sub_40A000(a3, a3, Src - v9, a2);\n  }\n  else\n  {\n    if ( sub_4022AD((const void **)a3, a2) )\n    {\n      if ( (unsigned int)a3[5] < 0x10 )\n        v11 = a3;\n      else\n        v11 = *a3;\n      memcpy(v11, Src, a2);\n      v12 = (unsigned int)a3[5] < 0x10;\n      a3[4] = (void *)a2;\n      if ( v12 )\n        v13 = a3;\n      else\n        v13 = *a3;\n      v13[a2] = 0;\n    }\n    return a3;\n  }\n}\n\n"
    },
    {
        "Function": "sub_40A000",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid **__userpurge sub_40A000@<eax>(void **a1@<eax>, void **a2@<edi>, unsigned int a3, unsigned int a4)\n{\n  void **v4; // ebx\n  unsigned int v5; // eax\n  size_t v6; // esi\n  void *v7; // eax\n  bool v8; // cf\n  void **v9; // eax\n\n  v4 = a1;\n  v5 = (unsigned int)a1[4];\n  if ( v5 < a3 )\n    std::_Xout_of_range(\"invalid string position\");\n  v6 = v5 - a3;\n  if ( a4 < v5 - a3 )\n    v6 = a4;\n  if ( a2 == v4 )\n  {\n    sub_40D377(0xFF60E8FF, v6 + a3, a2);\n    sub_40D377(a3, 0, a2);\n  }\n  else if ( sub_4022AD((const void **)a2, v6) )\n  {\n    if ( (unsigned int)v4[5] >= 0x10 )\n      v4 = (void **)*v4;\n    if ( (unsigned int)a2[5] < 0x10 )\n      v7 = a2;\n    else\n      v7 = *a2;\n    memcpy(v7, (char *)v4 + a3, v6);\n    v8 = (unsigned int)a2[5] < 0x10;\n    a2[4] = (void *)v6;\n    if ( v8 )\n      v9 = a2;\n    else\n      v9 = (void **)*a2;\n    *((_BYTE *)v9 + v6) = 0;\n  }\n  return a2;\n}\n\n"
    },
    {
        "Function": "sub_4022AD",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nBOOL __usercall sub_4022AD@<eax>(const void **a1@<eax>, unsigned int a2@<esi>)\n{\n  unsigned int v2; // ecx\n\n  if ( a2 == -1 )\n    std::_Xlength_error(\"string too long\");\n  v2 = (unsigned int)a1[5];\n  if ( v2 >= a2 )\n  {\n    if ( !a2 )\n    {\n      a1[4] = 0;\n      if ( v2 >= 0x10 )\n        a1 = (const void **)*a1;\n      *(_BYTE *)a1 = 0;\n    }\n  }\n  else\n  {\n    sub_40660A(a1, a2, (int)a1[4]);\n  }\n  return a2 != 0;\n}\n\n"
    },
    {
        "Function": "sub_40D377",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n_DWORD *__usercall sub_40D377@<eax>(unsigned int a1@<eax>, unsigned int a2@<ecx>, _DWORD *a3@<esi>)\n{\n  unsigned int v4; // eax\n  unsigned int v5; // eax\n  unsigned int v6; // edx\n  _DWORD *v7; // edi\n  _DWORD *v8; // edx\n  unsigned int v9; // eax\n  bool v10; // cf\n  _DWORD *v11; // ecx\n\n  v4 = a3[4];\n  if ( v4 < a2 )\n    std::_Xout_of_range(\"invalid string position\");\n  v5 = v4 - a2;\n  if ( v5 < a1 )\n    a1 = v5;\n  if ( a1 )\n  {\n    v6 = a3[5];\n    if ( v6 < 0x10 )\n      v7 = a3;\n    else\n      v7 = (_DWORD *)*a3;\n    if ( v6 < 0x10 )\n      v8 = a3;\n    else\n      v8 = (_DWORD *)*a3;\n    memcpy_0((char *)v8 + a2, (char *)v7 + a2 + a1, v5 - a1);\n    v9 = a3[4] - a1;\n    v10 = a3[5] < 0x10u;\n    a3[4] = v9;\n    if ( v10 )\n      v11 = a3;\n    else\n      v11 = (_DWORD *)*a3;\n    *((_BYTE *)v11 + v9) = 0;\n  }\n  return a3;\n}\n\n"
    }
]