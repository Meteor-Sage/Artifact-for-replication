[
    {
        "Function": "sub_416C5C",
        "Total XOR and shift operations": 312,
        "XOR operations": 312,
        "Shift operations": 0,
        "Operation percentage": "56.42%",
        "Function Body": "\nunsigned int *__cdecl sub_416C5C(int *a1, unsigned int *a2, int a3)\n{\n  unsigned int *result; // eax\n  int v4; // ebx\n  int v5; // ebp\n  int v6; // esi\n  int v7; // edi\n  int v8; // esi\n  int v9; // ebp\n  int v10; // edi\n  int v11; // ebx\n  int v12; // esi\n  int v13; // ebp\n  int v14; // edi\n  int v15; // ebx\n  int v16; // esi\n  int v17; // ebp\n  int v18; // edi\n  int v19; // ebx\n  int v20; // esi\n  int v21; // ebp\n  int v22; // edi\n  int v23; // ebx\n  int v24; // esi\n  unsigned int v25; // edx\n  int v26; // edi\n  unsigned int v27; // ecx\n  int v28; // ebx\n  int v29; // ebp\n  int v30; // esi\n  int v31; // ebx\n  int v32; // ebp\n  int v33; // ebx\n  int v34; // ebx\n  int v35; // edx\n  int v36; // edi\n  int v37; // ebx\n  int v38; // ebp\n  int v39; // esi\n  int v40; // ecx\n  int v41; // ebx\n  int v42; // ebx\n  int v43; // ebp\n  int v44; // ebx\n  int v45; // edi\n  int v46; // ecx\n  int v47; // ebx\n  int v48; // edx\n  int v49; // ebp\n  int v50; // edi\n  int v51; // ebp\n  int v52; // edi\n  int v53; // ebp\n  int v54; // ebp\n  int v55; // ebp\n  int v56; // edi\n  int v57; // ebp\n  int v58; // ebp\n  int v59; // esi\n  int v60; // ebp\n  int v61; // esi\n  int v62; // ebx\n  int v63; // ebp\n  int v64; // ebx\n  int v65; // ecx\n  int v66; // ebx\n  int v67; // edx\n  int v68; // ebx\n  int v69; // ebx\n  int v70; // ebx\n  int v71; // ebx\n  int v72; // edi\n  int v73; // ebp\n  int v74; // esi\n  int v75; // ebp\n  int v76; // edx\n  int v77; // esi\n  int v78; // edx\n  bool v79; // zf\n  int v80; // [esp+10h] [ebp-4Ch]\n  int v81; // [esp+10h] [ebp-4Ch]\n  int v82; // [esp+10h] [ebp-4Ch]\n  int v83; // [esp+10h] [ebp-4Ch]\n  int v84; // [esp+10h] [ebp-4Ch]\n  int v85; // [esp+10h] [ebp-4Ch]\n  int v86; // [esp+10h] [ebp-4Ch]\n  int v87; // [esp+10h] [ebp-4Ch]\n  int v88; // [esp+10h] [ebp-4Ch]\n  int v89; // [esp+10h] [ebp-4Ch]\n  int v90; // [esp+10h] [ebp-4Ch]\n  int v91; // [esp+10h] [ebp-4Ch]\n  int v92; // [esp+10h] [ebp-4Ch]\n  int v93; // [esp+10h] [ebp-4Ch]\n  int v94; // [esp+10h] [ebp-4Ch]\n  int v95; // [esp+10h] [ebp-4Ch]\n  int v96; // [esp+10h] [ebp-4Ch]\n  int v97; // [esp+10h] [ebp-4Ch]\n  int v98; // [esp+10h] [ebp-4Ch]\n  int v99; // [esp+10h] [ebp-4Ch]\n  int v100; // [esp+10h] [ebp-4Ch]\n  int v101; // [esp+14h] [ebp-48h]\n  int v102; // [esp+14h] [ebp-48h]\n  int v103; // [esp+14h] [ebp-48h]\n  int v104; // [esp+14h] [ebp-48h]\n  int v105; // [esp+14h] [ebp-48h]\n  int v106; // [esp+14h] [ebp-48h]\n  int v107; // [esp+14h] [ebp-48h]\n  int v108; // [esp+14h] [ebp-48h]\n  int v109; // [esp+14h] [ebp-48h]\n  int v110; // [esp+14h] [ebp-48h]\n  int v111; // [esp+14h] [ebp-48h]\n  int v112; // [esp+14h] [ebp-48h]\n  int v113; // [esp+14h] [ebp-48h]\n  int v114; // [esp+14h] [ebp-48h]\n  int v115; // [esp+14h] [ebp-48h]\n  int v116; // [esp+14h] [ebp-48h]\n  int v117; // [esp+14h] [ebp-48h]\n  int v118; // [esp+14h] [ebp-48h]\n  int v119; // [esp+14h] [ebp-48h]\n  int v120; // [esp+14h] [ebp-48h]\n  int i; // [esp+18h] [ebp-44h]\n  int v122; // [esp+18h] [ebp-44h]\n  int v123; // [esp+18h] [ebp-44h]\n  int v124; // [esp+18h] [ebp-44h]\n  int v125; // [esp+18h] [ebp-44h]\n  int v126; // [esp+18h] [ebp-44h]\n  int v127; // [esp+18h] [ebp-44h]\n  int v128; // [esp+18h] [ebp-44h]\n  int v129; // [esp+18h] [ebp-44h]\n  int v130; // [esp+18h] [ebp-44h]\n  int v131; // [esp+18h] [ebp-44h]\n  int v132; // [esp+18h] [ebp-44h]\n  int v133; // [esp+18h] [ebp-44h]\n  int v134; // [esp+18h] [ebp-44h]\n  int v135; // [esp+18h] [ebp-44h]\n  int v136; // [esp+18h] [ebp-44h]\n  int v137; // [esp+18h] [ebp-44h]\n  int v138; // [esp+18h] [ebp-44h]\n  int v139; // [esp+18h] [ebp-44h]\n  int v140; // [esp+1Ch] [ebp-40h]\n  int v141; // [esp+1Ch] [ebp-40h]\n  int v142; // [esp+1Ch] [ebp-40h]\n  int v143; // [esp+1Ch] [ebp-40h]\n  int v144; // [esp+1Ch] [ebp-40h]\n  int v145; // [esp+1Ch] [ebp-40h]\n  int v146; // [esp+1Ch] [ebp-40h]\n  int v147; // [esp+1Ch] [ebp-40h]\n  int v148; // [esp+1Ch] [ebp-40h]\n  int v149; // [esp+1Ch] [ebp-40h]\n  int v150; // [esp+1Ch] [ebp-40h]\n  int v151; // [esp+1Ch] [ebp-40h]\n  int v152; // [esp+1Ch] [ebp-40h]\n  int v153; // [esp+1Ch] [ebp-40h]\n  int v154; // [esp+1Ch] [ebp-40h]\n  int v155; // [esp+1Ch] [ebp-40h]\n  int v156; // [esp+1Ch] [ebp-40h]\n  int v157; // [esp+1Ch] [ebp-40h]\n  int v158; // [esp+1Ch] [ebp-40h]\n  int v159; // [esp+1Ch] [ebp-40h]\n  int v160; // [esp+1Ch] [ebp-40h]\n  int v161; // [esp+20h] [ebp-3Ch]\n  int v162; // [esp+20h] [ebp-3Ch]\n  int v163; // [esp+20h] [ebp-3Ch]\n  int v164; // [esp+20h] [ebp-3Ch]\n  int v165; // [esp+20h] [ebp-3Ch]\n  int v166; // [esp+20h] [ebp-3Ch]\n  int v167; // [esp+20h] [ebp-3Ch]\n  int v168; // [esp+20h] [ebp-3Ch]\n  int v169; // [esp+20h] [ebp-3Ch]\n  int v170; // [esp+20h] [ebp-3Ch]\n  int v171; // [esp+20h] [ebp-3Ch]\n  int v172; // [esp+20h] [ebp-3Ch]\n  int v173; // [esp+20h] [ebp-3Ch]\n  int v174; // [esp+20h] [ebp-3Ch]\n  int v175; // [esp+20h] [ebp-3Ch]\n  int v176; // [esp+20h] [ebp-3Ch]\n  int v177; // [esp+20h] [ebp-3Ch]\n  int v178; // [esp+20h] [ebp-3Ch]\n  unsigned int v179; // [esp+24h] [ebp-38h]\n  int v180; // [esp+24h] [ebp-38h]\n  int v181; // [esp+24h] [ebp-38h]\n  int v182; // [esp+24h] [ebp-38h]\n  int v183; // [esp+24h] [ebp-38h]\n  unsigned int v184; // [esp+28h] [ebp-34h]\n  int v185; // [esp+28h] [ebp-34h]\n  int v186; // [esp+28h] [ebp-34h]\n  int v187; // [esp+28h] [ebp-34h]\n  int v188; // [esp+28h] [ebp-34h]\n  unsigned int v189; // [esp+2Ch] [ebp-30h]\n  int v190; // [esp+2Ch] [ebp-30h]\n  int v191; // [esp+2Ch] [ebp-30h]\n  int v192; // [esp+2Ch] [ebp-30h]\n  int v193; // [esp+2Ch] [ebp-30h]\n  unsigned int v194; // [esp+30h] [ebp-2Ch]\n  int v195; // [esp+30h] [ebp-2Ch]\n  int v196; // [esp+30h] [ebp-2Ch]\n  int v197; // [esp+30h] [ebp-2Ch]\n  int v198; // [esp+30h] [ebp-2Ch]\n  unsigned int v199; // [esp+34h] [ebp-28h]\n  int v200; // [esp+34h] [ebp-28h]\n  int v201; // [esp+34h] [ebp-28h]\n  int v202; // [esp+34h] [ebp-28h]\n  int v203; // [esp+34h] [ebp-28h]\n  unsigned int v204; // [esp+38h] [ebp-24h]\n  int v205; // [esp+38h] [ebp-24h]\n  int v206; // [esp+38h] [ebp-24h]\n  int v207; // [esp+38h] [ebp-24h]\n  int v208; // [esp+38h] [ebp-24h]\n  unsigned int v209; // [esp+3Ch] [ebp-20h]\n  int v210; // [esp+3Ch] [ebp-20h]\n  int v211; // [esp+3Ch] [ebp-20h]\n  int v212; // [esp+3Ch] [ebp-20h]\n  int v213; // [esp+3Ch] [ebp-20h]\n  unsigned int v214; // [esp+40h] [ebp-1Ch]\n  int v215; // [esp+40h] [ebp-1Ch]\n  int v216; // [esp+40h] [ebp-1Ch]\n  int v217; // [esp+40h] [ebp-1Ch]\n  unsigned int v218; // [esp+44h] [ebp-18h]\n  int v219; // [esp+44h] [ebp-18h]\n  int v220; // [esp+44h] [ebp-18h]\n  int v221; // [esp+44h] [ebp-18h]\n  int v222; // [esp+44h] [ebp-18h]\n  unsigned int v223; // [esp+48h] [ebp-14h]\n  int v224; // [esp+48h] [ebp-14h]\n  int v225; // [esp+48h] [ebp-14h]\n  int v226; // [esp+48h] [ebp-14h]\n  int v227; // [esp+48h] [ebp-14h]\n  unsigned int v228; // [esp+4Ch] [ebp-10h]\n  int v229; // [esp+4Ch] [ebp-10h]\n  int v230; // [esp+4Ch] [ebp-10h]\n  int v231; // [esp+4Ch] [ebp-10h]\n  int v232; // [esp+4Ch] [ebp-10h]\n  unsigned int v233; // [esp+50h] [ebp-Ch]\n  int v234; // [esp+50h] [ebp-Ch]\n  int v235; // [esp+50h] [ebp-Ch]\n  int v236; // [esp+50h] [ebp-Ch]\n  int v237; // [esp+50h] [ebp-Ch]\n  unsigned int v238; // [esp+54h] [ebp-8h]\n  int v239; // [esp+54h] [ebp-8h]\n  int v240; // [esp+54h] [ebp-8h]\n  int v241; // [esp+54h] [ebp-8h]\n  unsigned int v242; // [esp+58h] [ebp-4h]\n  int v243; // [esp+58h] [ebp-4h]\n  int v244; // [esp+58h] [ebp-4h]\n  int v245; // [esp+58h] [ebp-4h]\n  int v246; // [esp+64h] [ebp+8h]\n  int v247; // [esp+64h] [ebp+8h]\n  int v248; // [esp+64h] [ebp+8h]\n  int v249; // [esp+64h] [ebp+8h]\n  int v250; // [esp+64h] [ebp+8h]\n  int v251; // [esp+64h] [ebp+8h]\n  int v252; // [esp+64h] [ebp+8h]\n  int v253; // [esp+64h] [ebp+8h]\n  int v254; // [esp+64h] [ebp+8h]\n  int v255; // [esp+64h] [ebp+8h]\n  int v256; // [esp+64h] [ebp+8h]\n  int v257; // [esp+64h] [ebp+8h]\n  int v258; // [esp+64h] [ebp+8h]\n  int v259; // [esp+64h] [ebp+8h]\n  int v260; // [esp+64h] [ebp+8h]\n  int v261; // [esp+64h] [ebp+8h]\n  int v262; // [esp+64h] [ebp+8h]\n  int v263; // [esp+64h] [ebp+8h]\n  int v264; // [esp+64h] [ebp+8h]\n  int v265; // [esp+64h] [ebp+8h]\n  int v266; // [esp+64h] [ebp+8h]\n  int v267; // [esp+64h] [ebp+8h]\n\n  result = a2;\n  v4 = *a1;\n  v5 = a1[1];\n  v6 = a1[3];\n  v7 = a1[2];\n  v140 = v7;\n  for ( i = a1[4]; ; i = v78 )\n  {\n    v223 = _byteswap_ulong(*result);\n    v233 = _byteswap_ulong(result[1]);\n    v246 = v6;\n    v8 = v223 + __ROL4__(v4, 5) + (v6 ^ v5 & (v7 ^ v6)) + i + 15FD020249;\n    v179 = _byteswap_ulong(result[2]);\n    v9 = __ROL4__(v5, 30);\n    v10 = v233 + __ROL4__(v8, 5) + (v7 ^ v4 & (v9 ^ v7)) + v246 + 15FD020249;\n    v189 = _byteswap_ulong(result[3]);\n    v80 = __ROL4__(v4, 30);\n    v11 = v179 + __ROL4__(v10, 5) + (v9 ^ v8 & (v80 ^ v9)) + v140 + 15FD020249;\n    v101 = __ROL4__(v8, 30);\n    v199 = _byteswap_ulong(result[4]);\n    v209 = _byteswap_ulong(result[5]);\n    v12 = v189 + __ROL4__(v11, 5) + (v80 ^ v10 & (v80 ^ v101)) + v9 + 15FD020249;\n    v13 = __ROL4__(v10, 30);\n    v14 = v199 + __ROL4__(v12, 5) + (v101 ^ v11 & (v13 ^ v101)) + v80 + 15FD020249;\n    v218 = _byteswap_ulong(result[6]);\n    v247 = __ROL4__(v11, 30);\n    v15 = v209 + __ROL4__(v14, 5) + (v13 ^ v12 & (v247 ^ v13)) + v101 + 15FD020249;\n    v228 = _byteswap_ulong(result[7]);\n    v141 = __ROL4__(v12, 30);\n    v16 = v218 + __ROL4__(v15, 5) + (v247 ^ v14 & (v141 ^ v247)) + v13 + 15FD020249;\n    v184 = _byteswap_ulong(result[8]);\n    v17 = __ROL4__(v14, 30);\n    v18 = v228 + __ROL4__(v16, 5) + (v141 ^ v15 & (v17 ^ v141)) + v247 + 15FD020249;\n    v194 = _byteswap_ulong(result[9]);\n    v81 = __ROL4__(v15, 30);\n    v19 = v184 + __ROL4__(v18, 5) + (v17 ^ v16 & (v81 ^ v17)) + v141 + 15FD020249;\n    v102 = __ROL4__(v16, 30);\n    v204 = _byteswap_ulong(result[10]);\n    v20 = v194 + __ROL4__(v19, 5) + (v81 ^ v18 & (v81 ^ v102)) + v17 + 15FD020249;\n    v21 = __ROL4__(v18, 30);\n    v214 = _byteswap_ulong(result[11]);\n    v22 = v204 + __ROL4__(v20, 5) + (v102 ^ v19 & (v21 ^ v102)) + v81 + 15FD020249;\n    v242 = _byteswap_ulong(result[12]);\n    v248 = __ROL4__(v19, 30);\n    v23 = v214 + __ROL4__(v22, 5) + (v21 ^ v20 & (v248 ^ v21)) + v102 + 15FD020249;\n    v238 = _byteswap_ulong(result[13]);\n    v142 = __ROL4__(v20, 30);\n    v24 = v242 + __ROL4__(v23, 5) + (v248 ^ v22 & (v142 ^ v248)) + v21 + 15FD020249;\n    v25 = _byteswap_ulong(result[14]);\n    v161 = __ROL4__(v22, 30);\n    result += 16;\n    v26 = v248 + v238 + __ROL4__(v24, 5) + (v142 ^ v23 & (v161 ^ v142)) + 15FD020249;\n    v27 = _byteswap_ulong(*(result - 1));\n    v28 = __ROL4__(v23, 30);\n    v249 = v142 + v25 + __ROL4__(v26, 5) + (v161 ^ v24 & (v28 ^ v161)) + 15FD020249;\n    v29 = __ROL4__(v26, 30);\n    v103 = __ROL4__(v24, 30);\n    v143 = v161 + v27 + __ROL4__(v249, 5) + (v28 ^ v26 & (v28 ^ v103)) + 15FD020249;\n    v224 = __ROL4__(v223 ^ v179 ^ v184 ^ v238, 1);\n    v30 = v224 + v28 + __ROL4__(v143, 5) + (v103 ^ v249 & (v29 ^ v103)) + 15FD020249;\n    v31 = __ROL4__(v249, 30);\n    v234 = __ROL4__(v233 ^ v189 ^ v194 ^ v25, 1);\n    v82 = v234 + v103 + __ROL4__(v30, 5) + (v29 ^ v143 & (v31 ^ v29)) + 15FD020249;\n    v144 = __ROL4__(v143, 30);\n    v180 = __ROL4__(v179 ^ v199 ^ v204 ^ v27, 1);\n    v104 = v180 + v29 + __ROL4__(v82, 5) + (v31 ^ v30 & (v144 ^ v31)) + 15FD020249;\n    v162 = __ROL4__(v30, 30);\n    v32 = v31 + __ROL4__(v104, 5) + (v144 ^ v82 & (v162 ^ v144));\n    v83 = __ROL4__(v82, 30);\n    v190 = __ROL4__(v224 ^ v189 ^ v209 ^ v214, 1);\n    v122 = v190 + v32 + 15FD020249;\n    v200 = __ROL4__(v234 ^ v199 ^ v218 ^ v242, 1);\n    v250 = v200 + v144 + __ROL4__(v122, 5) + (v83 ^ v162 ^ v104) + 18E5A65393;\n    v105 = __ROL4__(v104, 30);\n    v210 = __ROL4__(v180 ^ v209 ^ v228 ^ v238, 1);\n    v145 = v210 + v162 + __ROL4__(v250, 5) + (v83 ^ v122 ^ v105) + 18E5A65393;\n    v219 = __ROL4__(v190 ^ v218 ^ v184 ^ v25, 1);\n    v123 = __ROL4__(v122, 30);\n    v163 = v219 + v83 + __ROL4__(v145, 5) + (v250 ^ v123 ^ v105) + 18E5A65393;\n    v251 = __ROL4__(v250, 30);\n    v229 = __ROL4__(v200 ^ v228 ^ v194 ^ v27, 1);\n    v84 = v229 + v105 + __ROL4__(v163, 5) + (v145 ^ v251 ^ v123) + 18E5A65393;\n    v146 = __ROL4__(v145, 30);\n    v185 = __ROL4__(v224 ^ v210 ^ v184 ^ v204, 1);\n    v106 = v185 + v123 + __ROL4__(v84, 5) + (v163 ^ v146 ^ v251) + 18E5A65393;\n    v164 = __ROL4__(v163, 30);\n    v195 = __ROL4__(v234 ^ v219 ^ v194 ^ v214, 1);\n    v33 = v251 + __ROL4__(v106, 5) + (v84 ^ v164 ^ v146);\n    v85 = __ROL4__(v84, 30);\n    v124 = v195 + v33 + 18E5A65393;\n    v205 = __ROL4__(v180 ^ v229 ^ v204 ^ v242, 1);\n    v252 = v205 + v146 + __ROL4__(v124, 5) + (v85 ^ v164 ^ v106) + 18E5A65393;\n    v107 = __ROL4__(v106, 30);\n    v215 = __ROL4__(v190 ^ v185 ^ v214 ^ v238, 1);\n    v34 = __ROL4__(v124, 30);\n    v147 = v215 + v164 + __ROL4__(v252, 5) + (v85 ^ v124 ^ v107) + 18E5A65393;\n    v243 = __ROL4__(v200 ^ v195 ^ v242 ^ v25, 1);\n    v165 = v243 + v85 + __ROL4__(v147, 5) + (v252 ^ v34 ^ v107) + 18E5A65393;\n    v253 = __ROL4__(v252, 30);\n    v35 = __ROL4__(v224 ^ v219 ^ v215 ^ v25, 1);\n    v239 = __ROL4__(v210 ^ v205 ^ v238 ^ v27, 1);\n    v36 = v239 + v107 + __ROL4__(v165, 5) + (v147 ^ v253 ^ v34) + 18E5A65393;\n    v148 = __ROL4__(v147, 30);\n    v37 = v35 + v34 + __ROL4__(v36, 5) + (v165 ^ v148 ^ v253) + 18E5A65393;\n    v38 = __ROL4__(v165, 30);\n    v39 = __ROL4__(v234 ^ v229 ^ v243 ^ v27, 1);\n    v86 = __ROL4__(v36, 30);\n    v125 = v39 + v253 + __ROL4__(v37, 5) + (v36 ^ v38 ^ v148) + 18E5A65393;\n    v225 = __ROL4__(v224 ^ v180 ^ v185 ^ v239, 1);\n    v40 = v225 + v148 + __ROL4__(v125, 5) + (v86 ^ v38 ^ v37) + 18E5A65393;\n    v108 = __ROL4__(v37, 30);\n    v235 = __ROL4__(v234 ^ v190 ^ v195 ^ v35, 1);\n    v149 = v235 + v38 + __ROL4__(v40, 5) + (v86 ^ v125 ^ v108) + 18E5A65393;\n    v126 = __ROL4__(v125, 30);\n    v181 = __ROL4__(v180 ^ v200 ^ v205 ^ v39, 1);\n    v166 = v181 + v86 + __ROL4__(v149, 5) + (v40 ^ v126 ^ v108) + 18E5A65393;\n    v254 = __ROL4__(v40, 30);\n    v191 = __ROL4__(v225 ^ v190 ^ v210 ^ v215, 1);\n    v87 = v191 + v108 + __ROL4__(v166, 5) + (v149 ^ v254 ^ v126) + 18E5A65393;\n    v150 = __ROL4__(v149, 30);\n    v201 = __ROL4__(v235 ^ v200 ^ v219 ^ v243, 1);\n    v109 = v201 + v126 + __ROL4__(v87, 5) + (v166 ^ v150 ^ v254) + 18E5A65393;\n    v167 = __ROL4__(v166, 30);\n    v211 = __ROL4__(v181 ^ v210 ^ v229 ^ v239, 1);\n    v41 = v254 + __ROL4__(v109, 5) + (v87 ^ v167 ^ v150);\n    v88 = __ROL4__(v87, 30);\n    v127 = v211 + v41 + 18E5A65393;\n    v220 = __ROL4__(v191 ^ v219 ^ v185 ^ v35, 1);\n    v255 = v220 + v150 + __ROL4__(v127, 5) + (v88 ^ v167 ^ v109) + 18E5A65393;\n    v110 = __ROL4__(v109, 30);\n    v230 = __ROL4__(v201 ^ v229 ^ v195 ^ v39, 1);\n    v151 = v230 + v167 + __ROL4__(v255, 5) + (v88 ^ v127 ^ v110) + 18E5A65393;\n    v128 = __ROL4__(v127, 30);\n    v186 = __ROL4__(v225 ^ v211 ^ v185 ^ v205, 1);\n    v42 = __ROL4__(v151, 5) + v186 + v88 + (v255 & v128 | v110 & (v255 | v128)) - 18663E7588;\n    v256 = __ROL4__(v255, 30);\n    v196 = __ROL4__(v235 ^ v220 ^ v195 ^ v215, 1);\n    v43 = v196 + v110 + (v151 & v256 | v128 & (v151 | v256));\n    v152 = __ROL4__(v151, 30);\n    v206 = __ROL4__(v181 ^ v230 ^ v205 ^ v243, 1);\n    v89 = __ROL4__(v42, 5) + v43 - 18663E7588;\n    v168 = __ROL4__(v42, 30);\n    v216 = __ROL4__(v191 ^ v186 ^ v215 ^ v239, 1);\n    v111 = __ROL4__(v89, 5) + v206 + v128 + (v42 & v152 | v256 & (v42 | v152)) - 18663E7588;\n    v129 = __ROL4__(v111, 5) + v216 + v256 + (v89 & v168 | v152 & (v89 | v168)) - 18663E7588;\n    v90 = __ROL4__(v89, 30);\n    v244 = __ROL4__(v201 ^ v196 ^ v243 ^ v35, 1);\n    v44 = __ROL4__(v129, 5) + v244 + v152 + (v90 & v111 | v168 & (v90 | v111)) - 18663E7588;\n    v240 = __ROL4__(v211 ^ v206 ^ v239 ^ v39, 1);\n    v112 = __ROL4__(v111, 30);\n    v257 = v44;\n    v45 = __ROL4__(v44, 5) + v240 + v168 + (v129 & v112 | v90 & (v129 | v112)) - 18663E7588;\n    v130 = __ROL4__(v129, 30);\n    v46 = __ROL4__(v225 ^ v220 ^ v216 ^ v35, 1);\n    v47 = __ROL4__(v45, 5) + v46 + v90 + (v257 & v130 | v112 & (v257 | v130)) - 18663E7588;\n    v48 = __ROL4__(v235 ^ v230 ^ v244 ^ v39, 1);\n    v258 = __ROL4__(v257, 30);\n    v49 = v48 + v112 + (v45 & v258 | v130 & (v45 | v258));\n    v50 = __ROL4__(v45, 30);\n    v91 = __ROL4__(v47, 5) + v49 - 18663E7588;\n    v226 = __ROL4__(v225 ^ v181 ^ v186 ^ v240, 1);\n    v169 = __ROL4__(v47, 30);\n    v113 = __ROL4__(v91, 5) + v226 + v130 + (v47 & v50 | v258 & (v47 | v50)) - 18663E7588;\n    v236 = __ROL4__(v235 ^ v191 ^ v196 ^ v46, 1);\n    v131 = __ROL4__(v113, 5) + v236 + v258 + (v91 & v169 | v50 & (v91 | v169)) - 18663E7588;\n    v92 = __ROL4__(v91, 30);\n    v182 = __ROL4__(v181 ^ v201 ^ v206 ^ v48, 1);\n    v51 = v50 + (v92 & v113 | v169 & (v92 | v113));\n    v52 = __ROL4__(v113, 30);\n    v192 = __ROL4__(v226 ^ v191 ^ v211 ^ v216, 1);\n    v259 = __ROL4__(v131, 5) + v182 + v51 - 18663E7588;\n    v153 = __ROL4__(v259, 5) + v192 + v169 + (v131 & v52 | v92 & (v131 | v52)) - 18663E7588;\n    v132 = __ROL4__(v131, 30);\n    v202 = __ROL4__(v236 ^ v201 ^ v220 ^ v244, 1);\n    v53 = v202 + v92 + (v259 & v132 | v52 & (v259 | v132));\n    v260 = __ROL4__(v259, 30);\n    v212 = __ROL4__(v182 ^ v211 ^ v230 ^ v240, 1);\n    v170 = __ROL4__(v153, 5) + v53 - 18663E7588;\n    v54 = v212 + v52 + (v153 & v260 | v132 & (v153 | v260));\n    v154 = __ROL4__(v153, 30);\n    v93 = __ROL4__(v170, 5) + v54 - 18663E7588;\n    v221 = __ROL4__(v192 ^ v220 ^ v186 ^ v46, 1);\n    v55 = v221 + v132 + (v170 & v154 | v260 & (v170 | v154));\n    v171 = __ROL4__(v170, 30);\n    v231 = __ROL4__(v202 ^ v230 ^ v196 ^ v48, 1);\n    v114 = __ROL4__(v93, 5) + v55 - 18663E7588;\n    v133 = __ROL4__(v114, 5) + v231 + v260 + (v93 & v171 | v154 & (v93 | v171)) - 18663E7588;\n    v94 = __ROL4__(v93, 30);\n    v187 = __ROL4__(v226 ^ v212 ^ v186 ^ v206, 1);\n    v56 = __ROL4__(v114, 30);\n    v197 = __ROL4__(v236 ^ v221 ^ v196 ^ v216, 1);\n    v261 = __ROL4__(v133, 5) + v187 + v154 + (v94 & v114 | v171 & (v94 | v114)) - 18663E7588;\n    v57 = v197 + v171 + (v133 & v56 | v94 & (v133 | v56));\n    v134 = __ROL4__(v133, 30);\n    v207 = __ROL4__(v182 ^ v231 ^ v206 ^ v244, 1);\n    v155 = __ROL4__(v261, 5) + v57 - 18663E7588;\n    v58 = v207 + v94 + (v261 & v134 | v56 & (v261 | v134));\n    v262 = __ROL4__(v261, 30);\n    v217 = __ROL4__(v192 ^ v187 ^ v216 ^ v240, 1);\n    v172 = __ROL4__(v155, 5) + v58 - 18663E7588;\n    v95 = __ROL4__(v172, 5) + v217 + v56 + (v155 & v262 | v134 & (v155 | v262)) - 18663E7588;\n    v59 = __ROL4__(v155, 30);\n    v60 = v172 ^ v59 ^ v262;\n    v156 = v59;\n    v61 = __ROL4__(v202 ^ v197 ^ v244 ^ v46, 1);\n    v62 = v134 + __ROL4__(v95, 5) + v61 + v60 - 899060514;\n    v63 = __ROL4__(v172, 30);\n    v115 = v62;\n    v241 = __ROL4__(v212 ^ v207 ^ v240 ^ v48, 1);\n    v64 = v241 + (v95 ^ v63 ^ v156) + v262 + __ROL4__(v62, 5) - 899060514;\n    v96 = __ROL4__(v95, 30);\n    v135 = v64;\n    v65 = __ROL4__(v226 ^ v221 ^ v217 ^ v46, 1);\n    v66 = v65 + (v96 ^ v63 ^ v115) + v156 + __ROL4__(v64, 5) - 899060514;\n    v116 = __ROL4__(v115, 30);\n    v263 = v66;\n    v67 = __ROL4__(v236 ^ v231 ^ v61 ^ v48, 1);\n    v68 = v67 + (v96 ^ v135 ^ v116) + v63 + __ROL4__(v66, 5) - 899060514;\n    v136 = __ROL4__(v135, 30);\n    v227 = __ROL4__(v226 ^ v182 ^ v187 ^ v241, 1);\n    v173 = v227 + (v263 ^ v136 ^ v116) + v96 + __ROL4__(v68, 5) - 899060514;\n    v264 = __ROL4__(v263, 30);\n    v237 = __ROL4__(v236 ^ v192 ^ v197 ^ v65, 1);\n    v97 = v116 + (v68 ^ v264 ^ v136) + v237 + __ROL4__(v173, 5) - 899060514;\n    v157 = __ROL4__(v68, 30);\n    v183 = __ROL4__(v182 ^ v202 ^ v207 ^ v67, 1);\n    v117 = v183 + (v173 ^ v157 ^ v264) + v136 + __ROL4__(v97, 5) - 899060514;\n    v174 = __ROL4__(v173, 30);\n    v193 = __ROL4__(v227 ^ v192 ^ v212 ^ v217, 1);\n    v69 = v193 + (v97 ^ v174 ^ v157) + v264 + __ROL4__(v117, 5) - 899060514;\n    v98 = __ROL4__(v97, 30);\n    v137 = v69;\n    v203 = __ROL4__(v237 ^ v202 ^ v221 ^ v61, 1);\n    v70 = v203 + (v98 ^ v174 ^ v117) + v157 + __ROL4__(v69, 5) - 899060514;\n    v118 = __ROL4__(v117, 30);\n    v213 = __ROL4__(v183 ^ v212 ^ v231 ^ v241, 1);\n    v158 = v174 + __ROL4__(v70, 5) + v213 + (v98 ^ v137 ^ v118) - 899060514;\n    v138 = __ROL4__(v137, 30);\n    v222 = __ROL4__(v193 ^ v221 ^ v187 ^ v65, 1);\n    v175 = v222 + (v70 ^ v138 ^ v118) + v98 + __ROL4__(v158, 5) - 899060514;\n    v265 = __ROL4__(v70, 30);\n    v232 = __ROL4__(v203 ^ v231 ^ v197 ^ v67, 1);\n    v99 = v232 + (v158 ^ v265 ^ v138) + v118 + __ROL4__(v175, 5) - 899060514;\n    v159 = __ROL4__(v158, 30);\n    v188 = __ROL4__(v227 ^ v213 ^ v187 ^ v207, 1);\n    v119 = v188 + (v175 ^ v159 ^ v265) + v138 + __ROL4__(v99, 5) - 899060514;\n    v176 = __ROL4__(v175, 30);\n    v198 = __ROL4__(v237 ^ v222 ^ v197 ^ v217, 1);\n    v71 = v198 + (v99 ^ v176 ^ v159) + v265 + __ROL4__(v119, 5) - 899060514;\n    v100 = __ROL4__(v99, 30);\n    v208 = __ROL4__(v183 ^ v232 ^ v207 ^ v61, 1);\n    v266 = v208 + (v100 ^ v176 ^ v119) + v159 + __ROL4__(v71, 5) - 899060514;\n    v120 = __ROL4__(v119, 30);\n    v72 = __ROL4__(v193 ^ v188 ^ v217 ^ v241, 1);\n    v73 = v176 + __ROL4__(v266, 5) + v72 + (v100 ^ v71 ^ v120) - 899060514;\n    v139 = __ROL4__(v71, 30);\n    v245 = __ROL4__(v203 ^ v198 ^ v61 ^ v65, 1);\n    v177 = v245 + (v266 ^ v139 ^ v120) + v100 + __ROL4__(v73, 5) - 899060514;\n    v267 = __ROL4__(v266, 30);\n    v74 = (v73 ^ v267 ^ v139) + v120 + __ROL4__(v213 ^ v208 ^ v241 ^ v67, 1) + __ROL4__(v177, 5) - 899060514;\n    v160 = __ROL4__(v73, 30);\n    v75 = v139 + __ROL4__(v227 ^ v222 ^ v72 ^ v65, 1) + __ROL4__(v74, 5) + (v177 ^ v160 ^ v267) - 899060514;\n    v178 = __ROL4__(v177, 30);\n    *a1 += (v74 ^ v178 ^ v160) + v267 + __ROL4__(v237 ^ v232 ^ v245 ^ v67, 1) + __ROL4__(v75, 5) - 899060514;\n    v76 = v178 + a1[3];\n    a1[1] += v75;\n    v4 = *a1;\n    v5 = a1[1];\n    v77 = a1[2] + __ROL4__(v74, 30);\n    a1[3] = v76;\n    v78 = v160 + a1[4];\n    v79 = a3-- == 1;\n    a1[2] = v77;\n    a1[4] = v78;\n    if ( v79 )\n      break;\n    v140 = v77;\n    v6 = a1[3];\n    v7 = v140;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4143E5",
        "Total XOR and shift operations": 216,
        "XOR operations": 200,
        "Shift operations": 16,
        "Operation percentage": "56.40%",
        "Function Body": "\nunsigned int *__cdecl sub_4143E5(unsigned int *a1, int a2)\n{\n  _DWORD *v2; // ecx\n  unsigned int *result; // eax\n  int v4; // ebx\n  int v5; // esi\n  int v6; // edi\n  int v7; // edx\n  int v8; // edi\n  int v9; // ecx\n  int v10; // ebx\n  int v11; // ecx\n  int v12; // edi\n  int v13; // esi\n  int v14; // edi\n  int v15; // edx\n  int v16; // edi\n  int v17; // edi\n  int v18; // edx\n  int v19; // edx\n  int v20; // edx\n  int v21; // edi\n  int v22; // ebp\n  int v23; // ecx\n  int v24; // ecx\n  int v25; // edi\n  int v26; // esi\n  int v27; // edi\n  int v28; // edi\n  int v29; // esi\n  int v30; // edx\n  int v31; // esi\n  int v32; // ecx\n  int v33; // esi\n  int v34; // edi\n  char v35; // di\n  int v36; // edi\n  int v37; // edi\n  int v38; // edi\n  int v39; // edi\n  int v40; // edx\n  int v41; // edi\n  int v42; // edi\n  int v43; // ecx\n  int v44; // edi\n  int v45; // edi\n  int v46; // ebx\n  int v47; // edi\n  int v48; // edi\n  int v49; // esi\n  int v50; // edi\n  int v51; // esi\n  int v52; // edi\n  int v53; // edi\n  int v54; // ebx\n  int v55; // ebp\n  int v56; // [esp+0h] [ebp-A8h]\n  int v57; // [esp+0h] [ebp-A8h]\n  int v58; // [esp+0h] [ebp-A8h]\n  unsigned int v59; // [esp+0h] [ebp-A8h]\n  int v60; // [esp+0h] [ebp-A8h]\n  int v61; // [esp+4h] [ebp-A4h]\n  int v62; // [esp+4h] [ebp-A4h]\n  int v63; // [esp+4h] [ebp-A4h]\n  int v64; // [esp+4h] [ebp-A4h]\n  int v65; // [esp+4h] [ebp-A4h]\n  int v66; // [esp+8h] [ebp-A0h]\n  int v67; // [esp+8h] [ebp-A0h]\n  int v68; // [esp+8h] [ebp-A0h]\n  int v69; // [esp+Ch] [ebp-9Ch]\n  int v70; // [esp+Ch] [ebp-9Ch]\n  int v71; // [esp+Ch] [ebp-9Ch]\n  int v72; // [esp+Ch] [ebp-9Ch]\n  int v73; // [esp+10h] [ebp-98h]\n  int v74; // [esp+10h] [ebp-98h]\n  int v75; // [esp+10h] [ebp-98h]\n  int v76; // [esp+10h] [ebp-98h]\n  int v77; // [esp+14h] [ebp-94h]\n  int v78; // [esp+14h] [ebp-94h]\n  int v79; // [esp+14h] [ebp-94h]\n  int v80; // [esp+18h] [ebp-90h]\n  int v81; // [esp+18h] [ebp-90h]\n  int v82; // [esp+18h] [ebp-90h]\n  int v83; // [esp+18h] [ebp-90h]\n  int v84; // [esp+1Ch] [ebp-8Ch]\n  int v85; // [esp+1Ch] [ebp-8Ch]\n  _DWORD *v86; // [esp+1Ch] [ebp-8Ch]\n  int v87; // [esp+20h] [ebp-88h]\n  int v88; // [esp+20h] [ebp-88h]\n  int v89; // [esp+20h] [ebp-88h]\n  int v90; // [esp+20h] [ebp-88h]\n  int *v91; // [esp+24h] [ebp-84h]\n  int *v92; // [esp+24h] [ebp-84h]\n  int *v93; // [esp+28h] [ebp-80h]\n  int *v94; // [esp+2Ch] [ebp-7Ch]\n  int *v95; // [esp+30h] [ebp-78h]\n  int *v96; // [esp+30h] [ebp-78h]\n  int *v97; // [esp+34h] [ebp-74h]\n  int v98; // [esp+38h] [ebp-70h]\n  int v99; // [esp+3Ch] [ebp-6Ch]\n  int v100; // [esp+40h] [ebp-68h]\n  int v101; // [esp+44h] [ebp-64h]\n  int v102; // [esp+48h] [ebp-60h]\n  int *v103; // [esp+4Ch] [ebp-5Ch]\n  int *v104; // [esp+4Ch] [ebp-5Ch]\n  int v105; // [esp+50h] [ebp-58h]\n  int *v106; // [esp+54h] [ebp-54h]\n  int v107; // [esp+58h] [ebp-50h]\n  int v108; // [esp+5Ch] [ebp-4Ch]\n  _DWORD *v109; // [esp+60h] [ebp-48h]\n  unsigned int v110; // [esp+64h] [ebp-44h] BYREF\n  unsigned int v111; // [esp+68h] [ebp-40h]\n  unsigned int v112; // [esp+6Ch] [ebp-3Ch]\n  unsigned int v113; // [esp+70h] [ebp-38h]\n  unsigned int v114; // [esp+74h] [ebp-34h]\n  unsigned int v115; // [esp+78h] [ebp-30h]\n  unsigned int v116; // [esp+7Ch] [ebp-2Ch]\n  unsigned int v117; // [esp+80h] [ebp-28h]\n  unsigned int v118; // [esp+84h] [ebp-24h]\n  unsigned int v119; // [esp+88h] [ebp-20h]\n  unsigned int v120; // [esp+8Ch] [ebp-1Ch]\n  unsigned int v121; // [esp+90h] [ebp-18h]\n  unsigned int v122; // [esp+94h] [ebp-14h]\n  unsigned int v123; // [esp+98h] [ebp-10h]\n  unsigned int v124; // [esp+9Ch] [ebp-Ch]\n  unsigned int v125; // [esp+A0h] [ebp-8h]\n\n  result = a1;\n  v109 = v2;\n  if ( a2 )\n  {\n    v4 = v2[5];\n    v98 = *v2;\n    v99 = v2[1];\n    v5 = v2[4];\n    v6 = v2[6];\n    v101 = v2[2];\n    v108 = v2[3];\n    v102 = v5;\n    v100 = v4;\n    v107 = v6;\n    v105 = v2[7];\n    do\n    {\n      --a2;\n      v110 = _byteswap_ulong(*result);\n      v56 = v105 + v110 + (__ROL4__(v5, 7) ^ __ROL4__(v5, 21) ^ __ROL4__(v5, 26)) + (v4 & v5 ^ v6 & ~v5) + 11F68F2408;\n      v7 = v56 + (__ROL4__(v98, 10) ^ __ROL4__(v98, 19) ^ __ROL4__(v98, 30)) + (v98 & v99 ^ v101 & (v98 ^ v99));\n      v111 = _byteswap_ulong(result[1]);\n      v80 = v108 + v56;\n      v8 = v111\n         + (__ROL4__(v108 + v56, 7) ^ __ROL4__(v108 + v56, 21) ^ __ROL4__(v108 + v56, 26))\n         + (v80 & v5 ^ v100 & ~v80)\n         + v107\n         + 185B007441;\n      v61 = v8 + v101;\n      v77 = v8 + (__ROL4__(v7, 10) ^ __ROL4__(v7, 19) ^ __ROL4__(v7, 30)) + (v98 & v99 ^ v7 & (v98 ^ v99));\n      v112 = _byteswap_ulong(result[2]);\n      v57 = v100\n          + v112\n          + (__ROL4__(v8 + v101, 7) ^ __ROL4__(v8 + v101, 21) ^ __ROL4__(v8 + v101, 26))\n          + (v61 & (v108 + v56) ^ v5 & ~v61)\n          - 1223953825;\n      v84 = v57 + (__ROL4__(v77, 10) ^ __ROL4__(v77, 19) ^ __ROL4__(v77, 30)) + (v77 & v98 ^ v7 & (v77 ^ v98));\n      v113 = _byteswap_ulong(result[3]);\n      v9 = v113\n         + (__ROL4__(v57 + v99, 7) ^ __ROL4__(v57 + v99, 21) ^ __ROL4__(v57 + v99, 26))\n         + ((v57 + v99) & (v8 + v101) ^ v80 & ~(v57 + v99))\n         + v102\n         - 37DDC6723;\n      v10 = v9 + v98;\n      v11 = v9 + (__ROL4__(v84, 10) ^ __ROL4__(v84, 19) ^ __ROL4__(v84, 30)) + (v84 & v77 ^ v7 & (v84 ^ v77));\n      v114 = _byteswap_ulong(result[4]);\n      v12 = v114\n          + (__ROL4__(v10, 7) ^ __ROL4__(v10, 21) ^ __ROL4__(v10, 26))\n          + (v10 & (v57 + v99) ^ (v8 + v101) & ~v10)\n          + v80\n          + 96A19B163;\n      v73 = v12 + v7;\n      v115 = _byteswap_ulong(result[5]);\n      v13 = v12 + (__ROL4__(v11, 10) ^ __ROL4__(v11, 19) ^ __ROL4__(v11, 30)) + (v11 & v84 ^ v77 & (v11 ^ v84));\n      v14 = v115\n          + (__ROL4__(v73, 7) ^ __ROL4__(v12 + v7, 21) ^ __ROL4__(v12 + v7, 26))\n          + (v10 & v73 ^ (v57 + v99) & ~v73)\n          + v61\n          + 15B8D10993;\n      v15 = v14 + v77;\n      v62 = v14 + (__ROL4__(v13, 10) ^ __ROL4__(v13, 19) ^ __ROL4__(v13, 30)) + (v13 & v11 ^ v84 & (v13 ^ v11));\n      v116 = _byteswap_ulong(result[6]);\n      v16 = __ROL4__(v14 + v77, 21) ^ __ROL4__(v14 + v77, 26);\n      v78 = v15;\n      v17 = v116 + (__ROL4__(v15, 7) ^ v16) + (v15 & v73 ^ v10 & ~v15) + v57 + v99 - 18FC991548;\n      v85 = v17 + v84;\n      v66 = v17 + (__ROL4__(v62, 10) ^ __ROL4__(v62, 19) ^ __ROL4__(v62, 30)) + (v62 & v13 ^ v11 & (v62 ^ v13));\n      v117 = _byteswap_ulong(result[7]);\n      v18 = v10\n          + v117\n          + (__ROL4__(v85, 7) ^ __ROL4__(v85, 21) ^ __ROL4__(v85, 26))\n          + (v85 & v15 ^ v73 & ~v85)\n          - 148AE54075;\n      v87 = v18 + v11;\n      v69 = v18 + (__ROL4__(v66, 10) ^ __ROL4__(v66, 19) ^ __ROL4__(v66, 30)) + (v66 & v62 ^ v13 & (v66 ^ v62));\n      v118 = _byteswap_ulong(result[8]);\n      v19 = v118\n          + (__ROL4__(v87, 7) ^ __ROL4__(v87, 21) ^ __ROL4__(v87, 26))\n          + (v87 & v85 ^ v78 & ~v87)\n          + v73\n          - 67E71D216;\n      v119 = _byteswap_ulong(result[9]);\n      v81 = v19 + v13;\n      v74 = v19 + (__ROL4__(v69, 10) ^ __ROL4__(v69, 19) ^ __ROL4__(v69, 30)) + (v69 & v66 ^ v62 & (v69 ^ v66));\n      v58 = v119\n          + (__ROL4__(v81, 7) ^ __ROL4__(v81, 21) ^ __ROL4__(v81, 26))\n          + (v81 & v87 ^ v85 & ~v81)\n          + v78\n          + 3137BF401;\n      v20 = v58 + (__ROL4__(v74, 10) ^ __ROL4__(v74, 19) ^ __ROL4__(v74, 30)) + (v69 & v66 ^ v74 & (v69 ^ v66));\n      v120 = _byteswap_ulong(result[10]);\n      v21 = __ROL4__(v58 + v62, 21) ^ __ROL4__(v58 + v62, 26);\n      v22 = __ROL4__(v58 + v62, 7);\n      v63 = v58 + v62;\n      v23 = v85 + v120 + (v22 ^ v21) + (v63 & v81 ^ v87 & ~v63) + 608BD6278;\n      v67 = v23 + v66;\n      v24 = v23 + (__ROL4__(v20, 10) ^ __ROL4__(v20, 19) ^ __ROL4__(v20, 30)) + (v69 & v20 ^ v74 & (v69 ^ v20));\n      v121 = _byteswap_ulong(result[11]);\n      v25 = v87\n          + v121\n          + (__ROL4__(v67, 7) ^ __ROL4__(v67, 21) ^ __ROL4__(v67, 26))\n          + (v67 & v63 ^ v81 & ~v67)\n          + 148CD71987;\n      v26 = v25 + v69;\n      v88 = v25 + (__ROL4__(v24, 10) ^ __ROL4__(v24, 19) ^ __ROL4__(v24, 30)) + (v24 & v20 ^ v74 & (v24 ^ v20));\n      v122 = _byteswap_ulong(result[12]);\n      v27 = __ROL4__(v25 + v69, 21) ^ __ROL4__(v25 + v69, 26);\n      v70 = v26;\n      v28 = v122 + (__ROL4__(v26, 7) ^ v27) + (v26 & v67 ^ v63 & ~v26) + v81 + 1936598388;\n      v75 = v28 + v74;\n      v82 = v28 + (__ROL4__(v88, 10) ^ __ROL4__(v88, 19) ^ __ROL4__(v88, 30)) + (v88 & v24 ^ v20 & (v88 ^ v24));\n      v123 = _byteswap_ulong(result[13]);\n      v29 = v63\n          + v123\n          + (__ROL4__(v75, 7) ^ __ROL4__(v75, 21) ^ __ROL4__(v75, 26))\n          + (v26 & v75 ^ v67 & ~v75)\n          - 21BBE09090;\n      v30 = v29 + v20;\n      v124 = _byteswap_ulong(result[14]);\n      v64 = v29 + (__ROL4__(v82, 10) ^ __ROL4__(v82, 19) ^ __ROL4__(v82, 30)) + (v82 & v88 ^ v24 & (v82 ^ v88));\n      v31 = v124\n          + (__ROL4__(v30, 7) ^ __ROL4__(v30, 21) ^ __ROL4__(v30, 26))\n          + (v30 & v75 ^ v70 & ~v30)\n          + v67\n          - 168DCE9193;\n      v32 = v31 + v24;\n      v33 = v31 + (__ROL4__(v64, 10) ^ __ROL4__(v64, 19) ^ __ROL4__(v64, 30)) + (v64 & v82 ^ v88 & (v64 ^ v82));\n      v125 = _byteswap_ulong(result[15]);\n      result += 16;\n      v34 = v125\n          + (__ROL4__(v32, 7) ^ __ROL4__(v32, 21) ^ __ROL4__(v32, 26))\n          + (v32 & v30 ^ v75 & ~v32)\n          + v70\n          - 10C9654716;\n      v89 = v34 + v88;\n      v71 = v34 + (__ROL4__(v33, 10) ^ __ROL4__(v33, 19) ^ __ROL4__(v33, 30)) + (v33 & v64 ^ v82 & (v33 ^ v64));\n      v35 = 17;\n      v79 = 17;\n      v86 = &unk_428E4E;\n      do\n      {\n        v95 = (int *)(&v110 + (v35 & 0xF));\n        v103 = (int *)(&v110 + ((v35 - 3) & 0xF));\n        v97 = (int *)(&v110 + ((v35 - 1) & 0xF));\n        v36 = *v97\n            + *(&v110 + ((v35 - 8) & 0xF))\n            + (((unsigned int)*v95 >> 3) ^ __ROL4__(*v95, 14) ^ __ROL4__(*v95, 25))\n            + (((unsigned int)*v103 >> 10) ^ __ROL4__(*v103, 13) ^ __ROL4__(*v103, 15));\n        *v97 = v36;\n        v37 = v75\n            + v36\n            + *(v86 - 1)\n            + (v89 & v32 ^ v30 & ~v89)\n            + (__ROL4__(v89, 7) ^ __ROL4__(v89, 21) ^ __ROL4__(v89, 26));\n        v83 = v37 + v82;\n        v76 = v37 + (__ROL4__(v71, 10) ^ __ROL4__(v71, 19) ^ __ROL4__(v71, 30)) + (v71 & v33 ^ v64 & (v71 ^ v33));\n        v91 = (int *)(&v110 + (((_BYTE)v79 + 1) & 0xF));\n        v106 = (int *)(&v110 + (((_BYTE)v79 - 2) & 0xF));\n        v38 = *v95\n            + *(&v110 + (((_BYTE)v79 - 7) & 0xF))\n            + (((unsigned int)*v91 >> 3) ^ __ROL4__(*v91, 14) ^ __ROL4__(*v91, 25))\n            + (((unsigned int)*v106 >> 10) ^ __ROL4__(*v106, 13) ^ __ROL4__(*v106, 15));\n        *v95 = v38;\n        v39 = v30 + *v86 + v38 + (__ROL4__(v83, 7) ^ __ROL4__(v83, 21) ^ __ROL4__(v83, 26)) + (v83 & v89 ^ v32 & ~v83);\n        v65 = v39 + v64;\n        v40 = v39 + (__ROL4__(v76, 10) ^ __ROL4__(v76, 19) ^ __ROL4__(v76, 30)) + (v71 & v33 ^ v76 & (v71 ^ v33));\n        v94 = (int *)(&v110 + (((_BYTE)v79 + 2) & 0xF));\n        v41 = *v91\n            + *(&v110 + (((_BYTE)v79 - 6) & 0xF))\n            + (((unsigned int)*v94 >> 3) ^ __ROL4__(*v94, 14) ^ __ROL4__(*v94, 25))\n            + (((unsigned int)*v97 >> 10) ^ __ROL4__(*v97, 13) ^ __ROL4__(*v97, 15));\n        *v91 = v41;\n        v42 = v32 + v41 + v86[1] + (v65 & v83 ^ v89 & ~v65) + (__ROL4__(v65, 7) ^ __ROL4__(v65, 21) ^ __ROL4__(v65, 26));\n        v43 = v42 + (__ROL4__(v40, 10) ^ __ROL4__(v40, 19) ^ __ROL4__(v40, 30)) + (v76 & (v71 ^ v40) ^ v40 & v71);\n        v93 = (int *)(&v110 + (((_BYTE)v79 + 3) & 0xF));\n        v68 = v42 + v33;\n        v44 = *v94\n            + *(&v110 + (((_BYTE)v79 - 5) & 0xF))\n            + (((unsigned int)*v93 >> 3) ^ __ROL4__(*v93, 14) ^ __ROL4__(*v93, 25))\n            + (((unsigned int)*v95 >> 10) ^ __ROL4__(*v95, 13) ^ __ROL4__(*v95, 15));\n        *v94 = v44;\n        v45 = v89 + v44 + v86[2] + (v68 & v65 ^ v83 & ~v68) + (__ROL4__(v68, 7) ^ __ROL4__(v68, 21) ^ __ROL4__(v68, 26));\n        v72 = v45 + v71;\n        v96 = (int *)(&v110 + (((_BYTE)v79 + 4) & 0xF));\n        v90 = v45 + (__ROL4__(v43, 10) ^ __ROL4__(v43, 19) ^ __ROL4__(v43, 30)) + (v43 & v40 ^ v76 & (v43 ^ v40));\n        v46 = *v93\n            + *(&v110 + (((_BYTE)v79 - 4) & 0xF))\n            + (((unsigned int)*v96 >> 3) ^ __ROL4__(*v96, 14) ^ __ROL4__(*v96, 25))\n            + (((unsigned int)*v91 >> 10) ^ __ROL4__(*v91, 13) ^ __ROL4__(*v91, 15));\n        *v93 = v46;\n        v47 = v83 + v46 + v86[3] + (v72 & v68 ^ v65 & ~v72) + (__ROL4__(v72, 7) ^ __ROL4__(v72, 21) ^ __ROL4__(v72, 26));\n        v75 = v47 + v76;\n        v82 = v47 + (__ROL4__(v90, 10) ^ __ROL4__(v90, 19) ^ __ROL4__(v90, 30)) + (v90 & v43 ^ v40 & (v90 ^ v43));\n        v92 = (int *)(&v110 + (((_BYTE)v79 + 5) & 0xF));\n        v48 = *v96\n            + *v103\n            + (((unsigned int)*v92 >> 3) ^ __ROL4__(*v92, 14) ^ __ROL4__(*v92, 25))\n            + (((unsigned int)*v94 >> 10) ^ __ROL4__(*v94, 13) ^ __ROL4__(*v94, 15));\n        *v96 = v48;\n        v49 = v65 + v48 + v86[4] + (v72 & v75 ^ v68 & ~v75) + (__ROL4__(v75, 7) ^ __ROL4__(v75, 21) ^ __ROL4__(v75, 26));\n        v30 = v49 + v40;\n        v64 = v49 + (__ROL4__(v82, 10) ^ __ROL4__(v82, 19) ^ __ROL4__(v82, 30)) + (v82 & v90 ^ v43 & (v82 ^ v90));\n        v104 = (int *)(&v110 + (((_BYTE)v79 + 6) & 0xF));\n        v50 = *v92\n            + *v106\n            + (((unsigned int)*v104 >> 3) ^ __ROL4__(*v104, 14) ^ __ROL4__(*v104, 25))\n            + (((unsigned int)*v93 >> 10) ^ __ROL4__(*v93, 13) ^ __ROL4__(*v93, 15));\n        *v92 = v50;\n        v51 = v68 + v50 + v86[5] + (v30 & v75 ^ v72 & ~v30) + (__ROL4__(v30, 7) ^ __ROL4__(v30, 21) ^ __ROL4__(v30, 26));\n        v32 = v51 + v43;\n        v59 = *(&v110 + (((_BYTE)v79 + 7) & 0xF));\n        v33 = v51 + (__ROL4__(v64, 10) ^ __ROL4__(v64, 19) ^ __ROL4__(v64, 30)) + (v90 & (v64 ^ v82) ^ v82 & v64);\n        v52 = *v97\n            + *v104\n            + ((v59 >> 3) ^ __ROL4__(v59, 14) ^ __ROL4__(v59, 25))\n            + (((unsigned int)*v96 >> 10) ^ __ROL4__(*v96, 13) ^ __ROL4__(*v96, 15));\n        *v104 = v52;\n        v53 = v72 + v52 + v86[6] + (v32 & v30 ^ v75 & ~v32) + (__ROL4__(v32, 7) ^ __ROL4__(v32, 21) ^ __ROL4__(v32, 26));\n        v89 = v53 + v90;\n        v60 = v53;\n        v86 += 8;\n        v35 = v79 + 8;\n        v54 = (v33 & v64 ^ v82 & (v33 ^ v64)) + v60 + (__ROL4__(v33, 10) ^ __ROL4__(v33, 19) ^ __ROL4__(v33, 30));\n        v55 = v79 + 7;\n        v71 = v54;\n        v79 += 8;\n      }\n      while ( v55 < 64 );\n      v98 += v54;\n      *v109 = v98;\n      v4 = v32 + v100;\n      v101 += v64;\n      v109[2] = v101;\n      v99 += v33;\n      v108 += v82;\n      v109[3] = v108;\n      v5 = v89 + v102;\n      v109[1] = v99;\n      v6 = v30 + v107;\n      v102 = v5;\n      v109[4] = v5;\n      v100 = v4;\n      v109[5] = v4;\n      v107 = v6;\n      v109[6] = v6;\n      v105 += v75;\n      v109[7] = v105;\n    }\n    while ( a2 );\n  }\n  return result;\n}\n// 411C8D: variable 'v2' is possibly undefined\n\n"
    },
    {
        "Function": "sub_42B580",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "20.00%",
        "Function Body": "\nint __cdecl sub_42B580(int a1)\n{\n  unsigned int v1; // eax\n\n  v1 = sub_42559C(a1);\n  return 17851 * v1 + 7 * (v1 >> 14) + 251 * (v1 >> 4);\n}\n\n"
    },
    {
        "Function": "sub_404C1E",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "15.56%",
        "Function Body": "\nunsigned int __thiscall sub_404C1E(int this, unsigned int a2)\n{\n  unsigned int result; // eax\n  int v4; // [esp+30h] [ebp-84h]\n  int v5; // [esp+80h] [ebp-34h]\n  char *v6; // [esp+A4h] [ebp-10h]\n  char *v7; // [esp+A8h] [ebp-Ch]\n  unsigned int v8; // [esp+ACh] [ebp-8h]\n  unsigned int v9; // [esp+B0h] [ebp-4h]\n\n  if ( 0xFFD43EF - *(_DWORD *)(this + 8) < a2 )\n    std::_Xlength_error(\"deque<T> too long\");\n  v8 = *(_DWORD *)(this + 8) >> 1;\n  if ( v8 < 8 )\n    v8 = 8;\n  if ( a2 < v8 && *(_DWORD *)(this + 8) <= 0xFFD43EF - v8 )\n    a2 = v8;\n  v9 = *(_DWORD *)(this + 12) >> 3;\n  v6 = (char *)sub_40028F(a2 + *(_DWORD *)(this + 8));\n  v5 = (int)(*(_DWORD *)(this + 4) + 4 * *(_DWORD *)(this + 8) - (*(_DWORD *)(this + 4) + 4 * v9)) >> 2;\n  v7 = (char *)memcpy_0(&v6[4 * v9], (const void *)(*(_DWORD *)(this + 4) + 4 * v9), 4 * v5) + 4 * v5;\n  if ( v9 > a2 )\n  {\n    memcpy_0(v7, *(const void **)(this + 4), 4 * ((int)(4 * a2) >> 2));\n    v4 = (int)(*(_DWORD *)(this + 4) + 4 * v9 - (*(_DWORD *)(this + 4) + 4 * a2)) >> 2;\n    memset((char *)memcpy_0(v6, (const void *)(*(_DWORD *)(this + 4) + 4 * a2), 4 * v4) + 4 * v4, 0, 4 * a2);\n  }\n  else\n  {\n    memset(\n      (char *)memcpy_0(v7, *(const void **)(this + 4), 4 * ((int)(4 * v9) >> 2)) + 4 * ((int)(4 * v9) >> 2),\n      0,\n      4 * (a2 - v9));\n    memset(v6, 0, 4 * v9);\n  }\n  if ( *(_DWORD *)(this + 4) )\n    operator delete(*(void **)(this + 4));\n  *(_DWORD *)(this + 4) = v6;\n  result = a2 + *(_DWORD *)(this + 8);\n  *(_DWORD *)(this + 8) = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40990C",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "15.56%",
        "Function Body": "\nunsigned int __thiscall sub_40990C(int this, unsigned int a2)\n{\n  unsigned int result; // eax\n  int v4; // [esp+30h] [ebp-84h]\n  int v5; // [esp+80h] [ebp-34h]\n  char *v6; // [esp+A4h] [ebp-10h]\n  char *v7; // [esp+A8h] [ebp-Ch]\n  unsigned int v8; // [esp+ACh] [ebp-8h]\n  unsigned int v9; // [esp+B0h] [ebp-4h]\n\n  if ( 0xFFD43EF - *(_DWORD *)(this + 8) < a2 )\n    std::_Xlength_error(\"deque<T> too long\");\n  v8 = *(_DWORD *)(this + 8) >> 1;\n  if ( v8 < 8 )\n    v8 = 8;\n  if ( a2 < v8 && *(_DWORD *)(this + 8) <= 0xFFD43EF - v8 )\n    a2 = v8;\n  v9 = *(_DWORD *)(this + 12) >> 2;\n  v6 = (char *)sub_40028F(a2 + *(_DWORD *)(this + 8));\n  v5 = (int)(*(_DWORD *)(this + 4) + 4 * *(_DWORD *)(this + 8) - (*(_DWORD *)(this + 4) + 4 * v9)) >> 2;\n  v7 = (char *)memcpy_0(&v6[4 * v9], (const void *)(*(_DWORD *)(this + 4) + 4 * v9), 4 * v5) + 4 * v5;\n  if ( v9 > a2 )\n  {\n    memcpy_0(v7, *(const void **)(this + 4), 4 * ((int)(4 * a2) >> 2));\n    v4 = (int)(*(_DWORD *)(this + 4) + 4 * v9 - (*(_DWORD *)(this + 4) + 4 * a2)) >> 2;\n    memset((char *)memcpy_0(v6, (const void *)(*(_DWORD *)(this + 4) + 4 * a2), 4 * v4) + 4 * v4, 0, 4 * a2);\n  }\n  else\n  {\n    memset(\n      (char *)memcpy_0(v7, *(const void **)(this + 4), 4 * ((int)(4 * v9) >> 2)) + 4 * ((int)(4 * v9) >> 2),\n      0,\n      4 * (a2 - v9));\n    memset(v6, 0, 4 * v9);\n  }\n  if ( *(_DWORD *)(this + 4) )\n    operator delete(*(void **)(this + 4));\n  *(_DWORD *)(this + 4) = v6;\n  result = a2 + *(_DWORD *)(this + 8);\n  *(_DWORD *)(this + 8) = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40A925",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "13.64%",
        "Function Body": "\nint __thiscall sub_40A925(_DWORD *this, _WORD *a2)\n{\n  int result; // eax\n  unsigned int v4; // [esp+20h] [ebp-8h]\n  unsigned int v5; // [esp+24h] [ebp-4h]\n\n  if ( !((this[4] + this[3]) % 8u) && this[2] <= (unsigned int)(this[4] + 8) >> 3 )\n    sub_404C1E((int)this, 1u);\n  v5 = this[4] + this[3];\n  v4 = v5 >> 3;\n  if ( this[2] <= v5 >> 3 )\n    v4 -= this[2];\n  if ( !*(_DWORD *)(this[1] + 4 * v4) )\n    *(_DWORD *)(this[1] + 4 * v4) = sub_404AD3(8u);\n  sub_4019CB((int)(this + 5), (_WORD *)(*(_DWORD *)(this[1] + 4 * v4) + 2 * (v5 % 8)), a2);\n  result = this[4] + 1;\n  this[4] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40AF0E",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "13.64%",
        "Function Body": "\nint __thiscall sub_40AF0E(_DWORD *this, _WORD *a2)\n{\n  int result; // eax\n  unsigned int v4; // [esp+20h] [ebp-8h]\n  unsigned int v5; // [esp+24h] [ebp-4h]\n\n  if ( !((this[4] + this[3]) % 8u) && this[2] <= (unsigned int)(this[4] + 8) >> 3 )\n    sub_404C1E((int)this, 1u);\n  v5 = this[4] + this[3];\n  v4 = v5 >> 3;\n  if ( this[2] <= v5 >> 3 )\n    v4 -= this[2];\n  if ( !*(_DWORD *)(this[1] + 4 * v4) )\n    *(_DWORD *)(this[1] + 4 * v4) = sub_404AD3(8u);\n  sub_4036BD((int)(this + 5), (_WORD *)(*(_DWORD *)(this[1] + 4 * v4) + 2 * (v5 % 8)), a2);\n  result = this[4] + 1;\n  this[4] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40164B",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "13.64%",
        "Function Body": "\nint __thiscall sub_40164B(_DWORD *this, _DWORD *a2)\n{\n  int result; // eax\n  unsigned int v4; // [esp+20h] [ebp-8h]\n  unsigned int v5; // [esp+24h] [ebp-4h]\n\n  if ( !((this[4] + this[3]) % 4u) && this[2] <= (unsigned int)(this[4] + 4) >> 2 )\n    sub_40990C((int)this, 1u);\n  v5 = this[4] + this[3];\n  v4 = v5 >> 2;\n  if ( this[2] <= v5 >> 2 )\n    v4 -= this[2];\n  if ( !*(_DWORD *)(this[1] + 4 * v4) )\n    *(_DWORD *)(this[1] + 4 * v4) = sub_40028F(4u);\n  sub_40C5AC((int)(this + 5), (_DWORD *)(*(_DWORD *)(this[1] + 4 * v4) + 4 * (v5 % 4)), a2);\n  result = this[4] + 1;\n  this[4] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_405F3B",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "13.64%",
        "Function Body": "\nint __thiscall sub_405F3B(_DWORD *this, _DWORD *a2)\n{\n  int result; // eax\n  unsigned int v4; // [esp+20h] [ebp-8h]\n  unsigned int v5; // [esp+24h] [ebp-4h]\n\n  if ( !((this[4] + this[3]) % 4u) && this[2] <= (unsigned int)(this[4] + 4) >> 2 )\n    sub_40990C((int)this, 1u);\n  v5 = this[4] + this[3];\n  v4 = v5 >> 2;\n  if ( this[2] <= v5 >> 2 )\n    v4 -= this[2];\n  if ( !*(_DWORD *)(this[1] + 4 * v4) )\n    *(_DWORD *)(this[1] + 4 * v4) = sub_40028F(4u);\n  sub_406FA8((int)(this + 5), (_DWORD *)(*(_DWORD *)(this[1] + 4 * v4) + 4 * (v5 % 4)), a2);\n  result = this[4] + 1;\n  this[4] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_428916",
        "Total XOR and shift operations": 4,
        "XOR operations": 3,
        "Shift operations": 1,
        "Operation percentage": "13.33%",
        "Function Body": "\nint __cdecl sub_428916(char *a1)\n{\n  char *v1; // edx\n  unsigned int v2; // esi\n  char v3; // al\n  int v4; // edi\n  unsigned int v5; // eax\n\n  v1 = a1;\n  v2 = 0;\n  if ( !a1 )\n    return 0;\n  v3 = *a1;\n  if ( !*a1 )\n    return 0;\n  v4 = 256;\n  do\n  {\n    v5 = v4 | v3;\n    v4 += 256;\n    ++v1;\n    v2 = (v5 * v5) ^ __ROL4__(v2, (v5 ^ (v5 >> 2)) & 0xF);\n    v3 = *v1;\n  }\n  while ( *v1 );\n  return v2 ^ HIB532(v2);\n}\n\n"
    },
    {
        "Function": "sub_4127EB",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "8.77%",
        "Function Body": "\nint __cdecl sub_4127EB(_DWORD *a1, unsigned int *Src, size_t Size)\n{\n  size_t v3; // edi\n  unsigned int *v4; // ebp\n  size_t v5; // eax\n  size_t v6; // ecx\n  int v7; // eax\n  _DWORD *v8; // ebp\n  int v10; // ebx\n  size_t v11; // ebx\n\n  v3 = Size;\n  v4 = Src;\n  if ( Size )\n  {\n    v5 = a1[8];\n    v6 = v5 + 8 * Size;\n    if ( v6 < v5 )\n      ++a1[9];\n    a1[9] += Size >> 29;\n    v7 = a1[26];\n    a1[8] = v6;\n    if ( v7 )\n    {\n      v8 = a1 + 10;\n      if ( Size < 0x40 && v7 + Size < 0x40 )\n      {\n        memcpy((char *)v8 + v7, Src, Size);\n        a1[26] += Size;\n        return 1;\n      }\n      v10 = 64 - v7;\n      memcpy((char *)v8 + v7, Src, 64 - v7);\n      sub_4143E5(a1 + 10, 1);\n      v3 = Size - v10;\n      a1[26] = 0;\n      memset(a1 + 10, 0, 0x40u);\n      v4 = (unsigned int *)((char *)Src + v10);\n    }\n    if ( v3 >> 6 )\n    {\n      sub_4143E5(v4, v3 >> 6);\n      v11 = v3 >> 6 << 6;\n      v4 = (unsigned int *)((char *)v4 + v11);\n      v3 -= v11;\n    }\n    if ( v3 )\n    {\n      a1[26] = v3;\n      memcpy(a1 + 10, v4, v3);\n    }\n  }\n  return 1;\n}\n\n"
    },
    {
        "Function": "sub_417E68",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "8.77%",
        "Function Body": "\nint __cdecl sub_417E68(int *a1, unsigned int *Src, size_t Size)\n{\n  size_t v3; // edi\n  unsigned int *v4; // ebp\n  size_t v5; // eax\n  size_t v6; // ecx\n  int v7; // eax\n  _DWORD *v8; // ebp\n  int v10; // ebx\n  size_t v11; // ebx\n\n  v3 = Size;\n  v4 = Src;\n  if ( Size )\n  {\n    v5 = a1[5];\n    v6 = v5 + 8 * Size;\n    if ( v6 < v5 )\n      ++a1[6];\n    a1[6] += Size >> 29;\n    v7 = a1[23];\n    a1[5] = v6;\n    if ( v7 )\n    {\n      v8 = a1 + 7;\n      if ( Size < 0x40 && v7 + Size < 0x40 )\n      {\n        memcpy((char *)v8 + v7, Src, Size);\n        a1[23] += Size;\n        return 1;\n      }\n      v10 = 64 - v7;\n      memcpy((char *)v8 + v7, Src, 64 - v7);\n      sub_416C5C(a1, (unsigned int *)a1 + 7, 1);\n      v3 = Size - v10;\n      a1[23] = 0;\n      memset(a1 + 7, 0, 0x40u);\n      v4 = (unsigned int *)((char *)Src + v10);\n    }\n    if ( v3 >> 6 )\n    {\n      sub_416C5C(a1, v4, v3 >> 6);\n      v11 = v3 >> 6 << 6;\n      v4 = (unsigned int *)((char *)v4 + v11);\n      v3 -= v11;\n    }\n    if ( v3 )\n    {\n      a1[23] = v3;\n      memcpy(a1 + 7, v4, v3);\n    }\n  }\n  return 1;\n}\n\n"
    },
    {
        "Function": "sub_4146D1",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.59%",
        "Function Body": "\nint __cdecl sub_4146D1(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // edi\n  int *v9; // esi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // edi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  int v20; // edx\n  int *v21; // ecx\n  int v22; // esi\n  int v23; // eax\n  int *v24; // ebx\n  bool n; // zf\n  int v26; // eax\n  unsigned int v27; // edx\n  int *v28; // ecx\n  unsigned int v29; // edi\n  int ii; // ecx\n  int *v31; // ecx\n  unsigned int v32; // esi\n  int v33; // edi\n  int v34; // eax\n  int v35; // edx\n  int *v36; // ebx\n  int v37; // edx\n  int *v38; // ecx\n  int v39; // eax\n  int v40; // edx\n  int *v41; // ebx\n  int v42; // edx\n  int *v43; // ecx\n  int v44; // eax\n  int v45; // edx\n  int v46; // edx\n  int *v47; // ecx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // [esp+8h] [ebp-38h]\n  char v51; // [esp+10h] [ebp-30h]\n  int v52; // [esp+10h] [ebp-30h]\n  int v53; // [esp+14h] [ebp-2Ch]\n  int v54; // [esp+14h] [ebp-2Ch]\n  char v55; // [esp+14h] [ebp-2Ch]\n  int v56; // [esp+14h] [ebp-2Ch]\n  int v57; // [esp+14h] [ebp-2Ch]\n  int v58; // [esp+14h] [ebp-2Ch]\n  int v59; // [esp+18h] [ebp-28h]\n  int v60; // [esp+18h] [ebp-28h]\n  int v61; // [esp+18h] [ebp-28h]\n  int v62; // [esp+18h] [ebp-28h]\n  int v63; // [esp+18h] [ebp-28h]\n  int v64; // [esp+18h] [ebp-28h]\n  int v65; // [esp+1Ch] [ebp-24h]\n  unsigned int v66; // [esp+20h] [ebp-20h]\n  int m; // [esp+20h] [ebp-20h]\n  int jj; // [esp+20h] [ebp-20h]\n  int k; // [esp+20h] [ebp-20h]\n  int j; // [esp+20h] [ebp-20h]\n  int v71; // [esp+24h] [ebp-1Ch]\n  int v72; // [esp+28h] [ebp-18h]\n  int v73; // [esp+2Ch] [ebp-14h]\n  int v74; // [esp+30h] [ebp-10h] BYREF\n  int v75; // [esp+34h] [ebp-Ch]\n  int v76; // [esp+38h] [ebp-8h] BYREF\n\n  v2 = a1[5];\n  v50 = v2 & 0x8000;\n  v74 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v75 = *(_DWORD *)(a1 + 1);\n  v76 = v4;\n  if ( v3 != -16383 )\n  {\n    v65 = 0;\n    v71 = v74;\n    v72 = v75;\n    v73 = v76;\n    v8 = dword_4497B4 - 1;\n    v53 = v3;\n    v59 = dword_4497B4 / 32;\n    v9 = &v74 + dword_4497B4 / 32;\n    v51 = 31 - dword_4497B4 % 32;\n    if ( ((1 << v51) & *v9) != 0 )\n    {\n      v10 = dword_4497B4 / 32;\n      for ( i = (~(-1 << (31 - dword_4497B4 % 32)) & *(&v74 + v59)) == 0; i; i = *(&v74 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_21;\n      }\n      v12 = v8 / 32;\n      v65 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v74 + v8 / 32;\n      v66 = v13 + *v14;\n      if ( v66 >= *v14 )\n      {\n        v15 = v66 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v65 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v66;\n        if ( v12 < 0 || !v65 )\n          break;\n        v65 = 0;\n        v14 = &v74 + v12;\n        v16 = *v14 + 1;\n        v66 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n    }\nLABEL_21:\n    *v9 &= -1 << v51;\n    if ( v59 + 1 < 3 )\n      memset(&v74 + v59 + 1, 0, 4 * (3 - (v59 + 1)));\n    if ( v65 )\n      ++v3;\n    if ( v3 >= dword_448128 - dword_4497B4 )\n    {\n      if ( v3 > dword_448128 )\n      {\n        if ( v3 < dword_446506 )\n        {\n          v5 = dword_44DB3E + v3;\n          v74 &= ~0x804CBD00;\n          v44 = dword_44A85F / 32;\n          v45 = dword_44A85F % 32;\n          v64 = 0;\n          for ( j = 0; j < 3; ++j )\n          {\n            v58 = ~(-1 << v45) & *(&v74 + j);\n            *(&v74 + j) = v64 | ((unsigned int)*(&v74 + j) >> v45);\n            v64 = v58 << (32 - v45);\n          }\n          v46 = 2;\n          v47 = &v76 - v44;\n          do\n          {\n            if ( v46 < v44 )\n              *(&v74 + v46) = 0;\n            else\n              *(&v74 + v46) = *v47;\n            --v47;\n            --v46;\n          }\n          while ( v46 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v75 = 0;\n          v76 = 0;\n          v74 = 0x804CBD00;\n          v39 = dword_44A85F / 32;\n          v40 = dword_44A85F % 32;\n          v63 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v41 = &v74 + k;\n            v57 = ~(-1 << v40) & *v41;\n            *v41 = v63 | ((unsigned int)*v41 >> v40);\n            v63 = v57 << (32 - v40);\n          }\n          v42 = 2;\n          v43 = &v76 - v39;\n          do\n          {\n            if ( v42 < v39 )\n              *(&v74 + v42) = 0;\n            else\n              *(&v74 + v42) = *v43;\n            --v43;\n            --v42;\n          }\n          while ( v42 >= 0 );\n          v5 = dword_446506 + dword_44DB3E;\n          result = 1;\n        }\n        goto LABEL_78;\n      }\n      v74 = v71;\n      v75 = v72;\n      v17 = (dword_448128 - v53) / 32;\n      v76 = v73;\n      v18 = (dword_448128 - v53) % 32;\n      v60 = 0;\n      for ( m = 0; m < 3; ++m )\n      {\n        v19 = &v74 + m;\n        v54 = ~(-1 << v18) & *v19;\n        *v19 = v60 | ((unsigned int)*v19 >> v18);\n        v60 = v54 << (32 - v18);\n      }\n      v20 = 2;\n      v21 = &v76 - v17;\n      do\n      {\n        if ( v20 < v17 )\n          *(&v74 + v20) = 0;\n        else\n          *(&v74 + v20) = *v21;\n        --v21;\n        --v20;\n      }\n      while ( v20 >= 0 );\n      v22 = dword_4497B4 - 1;\n      v23 = dword_4497B4 / 32;\n      v52 = dword_4497B4 / 32;\n      v24 = &v74 + dword_4497B4 / 32;\n      v55 = 31 - dword_4497B4 % 32;\n      if ( ((1 << v55) & *v24) != 0 )\n      {\n        for ( n = (~(-1 << (31 - dword_4497B4 % 32)) & *(&v74 + v23)) == 0; n; n = *(&v74 + v23) == 0 )\n        {\n          if ( ++v23 >= 3 )\n            goto LABEL_51;\n        }\n        v26 = v22 / 32;\n        v61 = 0;\n        v27 = 1 << (31 - v22 % 32);\n        v28 = &v74 + v22 / 32;\n        v29 = *v28 + v27;\n        if ( v29 < *v28 || v29 < v27 )\n          v61 = 1;\n        *v28 = v29;\n        for ( ii = v61; --v26 >= 0 && ii; ii = v33 )\n        {\n          v31 = &v74 + v26;\n          v32 = *v31 + 1;\n          v33 = 0;\n          if ( v32 < *v31 || *v31 == -1 )\n            v33 = 1;\n          *v31 = v32;\n        }\n      }\nLABEL_51:\n      *v24 &= -1 << v55;\n      if ( v52 + 1 < 3 )\n        memset(&v74 + v52 + 1, 0, 4 * (3 - (v52 + 1)));\n      v34 = (dword_44A85F + 1) / 32;\n      v35 = (dword_44A85F + 1) % 32;\n      v62 = 0;\n      for ( jj = 0; jj < 3; ++jj )\n      {\n        v36 = &v74 + jj;\n        v56 = ~(-1 << v35) & *v36;\n        *v36 = v62 | ((unsigned int)*v36 >> v35);\n        v62 = v56 << (32 - v35);\n      }\n      v37 = 2;\n      v38 = &v76 - v34;\n      do\n      {\n        if ( v37 < v34 )\n          *(&v74 + v37) = 0;\n        else\n          *(&v74 + v37) = *v38;\n        --v38;\n        --v37;\n      }\n      while ( v37 >= 0 );\n    }\n    else\n    {\n      v74 = 0;\n      v75 = 0;\n      v76 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_78;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v74 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_78;\n    }\n  }\n  v74 = 0;\n  v75 = 0;\n  v76 = 0;\n  result = 2;\nLABEL_78:\n  v48 = v74 | (v50 != 0 ? 0x804CBD00 : 0) | (v5 << (31 - dword_44A85F));\n  if ( dword_4406A9 == 64 )\n  {\n    v49 = v75;\n    a2[1] = v48;\n    *a2 = v49;\n  }\n  else if ( dword_4406A9 == 32 )\n  {\n    *a2 = v48;\n  }\n  return result;\n}\n// 446506: using guessed type int dword_446506;\n// 448128: using guessed type int dword_448128;\n// 4497B4: using guessed type int dword_4497B4;\n// 44A85F: using guessed type int dword_44A85F;\n// 4406A9: using guessed type int dword_4406A9;\n// 44DB3E: using guessed type int dword_44DB3E;\n\n"
    },
    {
        "Function": "sub_41F60F",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.59%",
        "Function Body": "\nint __cdecl sub_41F60F(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // edi\n  int *v9; // esi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // edi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  int v20; // edx\n  int *v21; // ecx\n  int v22; // esi\n  int v23; // eax\n  int *v24; // ebx\n  bool n; // zf\n  int v26; // eax\n  unsigned int v27; // edx\n  int *v28; // ecx\n  unsigned int v29; // edi\n  int ii; // ecx\n  int *v31; // ecx\n  unsigned int v32; // esi\n  int v33; // edi\n  int v34; // eax\n  int v35; // edx\n  int *v36; // ebx\n  int v37; // edx\n  int *v38; // ecx\n  int v39; // eax\n  int v40; // edx\n  int *v41; // ebx\n  int v42; // edx\n  int *v43; // ecx\n  int v44; // eax\n  int v45; // edx\n  int v46; // edx\n  int *v47; // ecx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // [esp+8h] [ebp-38h]\n  char v51; // [esp+10h] [ebp-30h]\n  int v52; // [esp+10h] [ebp-30h]\n  int v53; // [esp+14h] [ebp-2Ch]\n  int v54; // [esp+14h] [ebp-2Ch]\n  char v55; // [esp+14h] [ebp-2Ch]\n  int v56; // [esp+14h] [ebp-2Ch]\n  int v57; // [esp+14h] [ebp-2Ch]\n  int v58; // [esp+14h] [ebp-2Ch]\n  int v59; // [esp+18h] [ebp-28h]\n  int v60; // [esp+18h] [ebp-28h]\n  int v61; // [esp+18h] [ebp-28h]\n  int v62; // [esp+18h] [ebp-28h]\n  int v63; // [esp+18h] [ebp-28h]\n  int v64; // [esp+18h] [ebp-28h]\n  int v65; // [esp+1Ch] [ebp-24h]\n  unsigned int v66; // [esp+20h] [ebp-20h]\n  int m; // [esp+20h] [ebp-20h]\n  int jj; // [esp+20h] [ebp-20h]\n  int k; // [esp+20h] [ebp-20h]\n  int j; // [esp+20h] [ebp-20h]\n  int v71; // [esp+24h] [ebp-1Ch]\n  int v72; // [esp+28h] [ebp-18h]\n  int v73; // [esp+2Ch] [ebp-14h]\n  int v74; // [esp+30h] [ebp-10h] BYREF\n  int v75; // [esp+34h] [ebp-Ch]\n  int v76; // [esp+38h] [ebp-8h] BYREF\n\n  v2 = a1[5];\n  v50 = v2 & 0x8000;\n  v74 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v75 = *(_DWORD *)(a1 + 1);\n  v76 = v4;\n  if ( v3 != -16383 )\n  {\n    v65 = 0;\n    v71 = v74;\n    v72 = v75;\n    v73 = v76;\n    v8 = dword_44C60C - 1;\n    v53 = v3;\n    v59 = dword_44C60C / 32;\n    v9 = &v74 + dword_44C60C / 32;\n    v51 = 31 - dword_44C60C % 32;\n    if ( ((1 << v51) & *v9) != 0 )\n    {\n      v10 = dword_44C60C / 32;\n      for ( i = (~(-1 << (31 - dword_44C60C % 32)) & *(&v74 + v59)) == 0; i; i = *(&v74 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_21;\n      }\n      v12 = v8 / 32;\n      v65 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v74 + v8 / 32;\n      v66 = v13 + *v14;\n      if ( v66 >= *v14 )\n      {\n        v15 = v66 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v65 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v66;\n        if ( v12 < 0 || !v65 )\n          break;\n        v65 = 0;\n        v14 = &v74 + v12;\n        v16 = *v14 + 1;\n        v66 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n    }\nLABEL_21:\n    *v9 &= -1 << v51;\n    if ( v59 + 1 < 3 )\n      memset(&v74 + v59 + 1, 0, 4 * (3 - (v59 + 1)));\n    if ( v65 )\n      ++v3;\n    if ( v3 >= dword_4407E2 - dword_44C60C )\n    {\n      if ( v3 > dword_4407E2 )\n      {\n        if ( v3 < dword_446D54 )\n        {\n          v5 = dword_447B61 + v3;\n          v74 &= ~0x804CBD00;\n          v44 = dword_44ADF4 / 32;\n          v45 = dword_44ADF4 % 32;\n          v64 = 0;\n          for ( j = 0; j < 3; ++j )\n          {\n            v58 = ~(-1 << v45) & *(&v74 + j);\n            *(&v74 + j) = v64 | ((unsigned int)*(&v74 + j) >> v45);\n            v64 = v58 << (32 - v45);\n          }\n          v46 = 2;\n          v47 = &v76 - v44;\n          do\n          {\n            if ( v46 < v44 )\n              *(&v74 + v46) = 0;\n            else\n              *(&v74 + v46) = *v47;\n            --v47;\n            --v46;\n          }\n          while ( v46 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v75 = 0;\n          v76 = 0;\n          v74 = 0x804CBD00;\n          v39 = dword_44ADF4 / 32;\n          v40 = dword_44ADF4 % 32;\n          v63 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v41 = &v74 + k;\n            v57 = ~(-1 << v40) & *v41;\n            *v41 = v63 | ((unsigned int)*v41 >> v40);\n            v63 = v57 << (32 - v40);\n          }\n          v42 = 2;\n          v43 = &v76 - v39;\n          do\n          {\n            if ( v42 < v39 )\n              *(&v74 + v42) = 0;\n            else\n              *(&v74 + v42) = *v43;\n            --v43;\n            --v42;\n          }\n          while ( v42 >= 0 );\n          v5 = dword_446D54 + dword_447B61;\n          result = 1;\n        }\n        goto LABEL_78;\n      }\n      v74 = v71;\n      v75 = v72;\n      v17 = (dword_4407E2 - v53) / 32;\n      v76 = v73;\n      v18 = (dword_4407E2 - v53) % 32;\n      v60 = 0;\n      for ( m = 0; m < 3; ++m )\n      {\n        v19 = &v74 + m;\n        v54 = ~(-1 << v18) & *v19;\n        *v19 = v60 | ((unsigned int)*v19 >> v18);\n        v60 = v54 << (32 - v18);\n      }\n      v20 = 2;\n      v21 = &v76 - v17;\n      do\n      {\n        if ( v20 < v17 )\n          *(&v74 + v20) = 0;\n        else\n          *(&v74 + v20) = *v21;\n        --v21;\n        --v20;\n      }\n      while ( v20 >= 0 );\n      v22 = dword_44C60C - 1;\n      v23 = dword_44C60C / 32;\n      v52 = dword_44C60C / 32;\n      v24 = &v74 + dword_44C60C / 32;\n      v55 = 31 - dword_44C60C % 32;\n      if ( ((1 << v55) & *v24) != 0 )\n      {\n        for ( n = (~(-1 << (31 - dword_44C60C % 32)) & *(&v74 + v23)) == 0; n; n = *(&v74 + v23) == 0 )\n        {\n          if ( ++v23 >= 3 )\n            goto LABEL_51;\n        }\n        v26 = v22 / 32;\n        v61 = 0;\n        v27 = 1 << (31 - v22 % 32);\n        v28 = &v74 + v22 / 32;\n        v29 = *v28 + v27;\n        if ( v29 < *v28 || v29 < v27 )\n          v61 = 1;\n        *v28 = v29;\n        for ( ii = v61; --v26 >= 0 && ii; ii = v33 )\n        {\n          v31 = &v74 + v26;\n          v32 = *v31 + 1;\n          v33 = 0;\n          if ( v32 < *v31 || *v31 == -1 )\n            v33 = 1;\n          *v31 = v32;\n        }\n      }\nLABEL_51:\n      *v24 &= -1 << v55;\n      if ( v52 + 1 < 3 )\n        memset(&v74 + v52 + 1, 0, 4 * (3 - (v52 + 1)));\n      v34 = (dword_44ADF4 + 1) / 32;\n      v35 = (dword_44ADF4 + 1) % 32;\n      v62 = 0;\n      for ( jj = 0; jj < 3; ++jj )\n      {\n        v36 = &v74 + jj;\n        v56 = ~(-1 << v35) & *v36;\n        *v36 = v62 | ((unsigned int)*v36 >> v35);\n        v62 = v56 << (32 - v35);\n      }\n      v37 = 2;\n      v38 = &v76 - v34;\n      do\n      {\n        if ( v37 < v34 )\n          *(&v74 + v37) = 0;\n        else\n          *(&v74 + v37) = *v38;\n        --v38;\n        --v37;\n      }\n      while ( v37 >= 0 );\n    }\n    else\n    {\n      v74 = 0;\n      v75 = 0;\n      v76 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_78;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v74 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_78;\n    }\n  }\n  v74 = 0;\n  v75 = 0;\n  v76 = 0;\n  result = 2;\nLABEL_78:\n  v48 = v74 | (v50 != 0 ? 0x804CBD00 : 0) | (v5 << (31 - dword_44ADF4));\n  if ( dword_44B1F4 == 64 )\n  {\n    v49 = v75;\n    a2[1] = v48;\n    *a2 = v49;\n  }\n  else if ( dword_44B1F4 == 32 )\n  {\n    *a2 = v48;\n  }\n  return result;\n}\n// 446D54: using guessed type int dword_446D54;\n// 4407E2: using guessed type int dword_4407E2;\n// 44C60C: using guessed type int dword_44C60C;\n// 44ADF4: using guessed type int dword_44ADF4;\n// 44B1F4: using guessed type int dword_44B1F4;\n// 447B61: using guessed type int dword_447B61;\n\n"
    },
    {
        "Function": "sub_408B4A",
        "Total XOR and shift operations": 20,
        "XOR operations": 0,
        "Shift operations": 20,
        "Operation percentage": "5.60%",
        "Function Body": "\nint __cdecl sub_408B4A(int a1)\n{\n  const WCHAR *CommandLineW; // eax\n  BOOL v2; // eax\n  struct tagPOINT Point; // [esp+4h] [ebp-8ACh] BYREF\n  int v5; // [esp+Ch] [ebp-8A4h]\n  int v6; // [esp+10h] [ebp-8A0h]\n  int v7; // [esp+14h] [ebp-89Ch]\n  int v8; // [esp+18h] [ebp-898h]\n  HWND v9; // [esp+1Ch] [ebp-894h]\n  HWND hWnd; // [esp+20h] [ebp-890h]\n  int v11; // [esp+24h] [ebp-88Ch]\n  WP20B9 wParam; // [esp+28h] [ebp-888h]\n  HDC v13; // [esp+2Ch] [ebp-884h]\n  int v14; // [esp+30h] [ebp-880h]\n  HMENU hMenu; // [esp+34h] [ebp-87Ch]\n  int v16; // [esp+38h] [ebp-878h]\n  HWND v17; // [esp+3Ch] [ebp-874h]\n  int v18; // [esp+40h] [ebp-870h]\n  DWORD v19; // [esp+44h] [ebp-86Ch]\n  struct _NO1B7EICE7F1TAA v20; // [esp+48h] [ebp-868h] BYREF\n  LPABFA lParam; // [esp+248h] [ebp-668h]\n  DWORD dwPermanentProviderID; // [esp+250h] [ebp-660h]\n  int v23; // [esp+254h] [ebp-65Ch]\n  int j; // [esp+258h] [ebp-658h]\n  int i; // [esp+25Ch] [ebp-654h]\n  __int16 v26; // [esp+260h] [ebp-650h]\n  char v27[510]; // [esp+262h] [ebp-64Eh] BYREF\n  DWORD v28; // [esp+464h] [ebp-44Ch]\n  BOOL FileVersionInfoW; // [esp+468h] [ebp-448h]\n  int v30; // [esp+488h] [ebp-428h]\n  char *v31; // [esp+490h] [ebp-420h]\n  DWORD dwMilliseconds; // [esp+4ACh] [ebp-404h]\n  BOOL v33; // [esp+4B8h] [ebp-3F8h]\n  HA4C47 hFile; // [esp+4BCh] [ebp-3F4h]\n  RPC_CSTR StringUuid; // [esp+4C0h] [ebp-3F0h] BYREF\n  unsigned int v36; // [esp+4C4h] [ebp-3ECh]\n  DWORD v37; // [esp+4C8h] [ebp-3E8h]\n  int v38; // [esp+4CCh] [ebp-3E4h]\n  CHAR MultiByteStr[108]; // [esp+4F8h] [ebp-3B8h] BYREF\n  int cbMultiByte; // [esp+564h] [ebp-34Ch]\n  struct _OV512CPPED Overlapped; // [esp+56Ch] [ebp-344h] BYREF\n  char Data[264]; // [esp+580h] [ebp-330h] BYREF\n  UUID Uuid; // [esp+688h] [ebp-228h] BYREF\n  WCHAR WideCharStr[260]; // [esp+698h] [ebp-218h] BYREF\n  int pNumArgs; // [esp+8A0h] [ebp-10h] BYREF\n  LP9B15R *v46; // [esp+8A4h] [ebp-Ch]\n  DWORD dwLen; // [esp+8ACh] [ebp-4h]\n\n  dwLen = 0;\n  dwMilliseconds = (DWORD)hdc;\n  hFile = (HA4C47)dword_453507;\n  memset(&Overlapped, 0, sizeof(Overlapped));\n  memset(WideCharStr, 0, 512);\n  v26 = 0;\n  memset(v27, 0, sizeof(v27));\n  dword_45F4DC = 198 - (unsigned __int16)cpt - byte_450944 - 21;\n  if ( dword_4548ED > dword_45B40B )\n  {\n    dword_459CBD += (unsigned __int16)dword_454FD3 * HIB532(dword_451272);\n    c *= 177 - 170 * (unsigned __int8)dword_4548ED;\n    dword_45E14C -= (int)cpt + dword_45995A;\n    dword_45F4DC *= (unsigned int)dword_454FD3 & (dword_45B40B + 11);\n  }\n  if ( dword_453338 == dword_45F888 )\n  {\n    dword_45B40B -= dword_453507 * BYTE1(dword_4535E2) - c + dword_45D5E3 + 220;\n    dword_45AC13 -= dword_454663 * ((_DWORD)(cpt + 61) << 24);\n  }\n  else if ( (_UNFFF3N *)y == &unk_450AAC )\n  {\n    nIDDlgItem <<= (_BYTE)dword_454FD3 - 5 * dword_459CBD;\n    dword_45AC13 -= dword_452B9A;\n    dword_45DB52 *= 3 - dword_458D85;\n    dword_45995A = BYTE1(dword_452B9A) << dword_457F82;\n  }\n  v36 = 0;\n  if ( (int)::hWnd >= dword_45F710 )\n  {\n    dword_452B9A = 247 * nIDDlgItem;\n    dword_451180 = dword_453507\n                 + (unsigned __int16)hdc * (unsigned __int16)word_454C26\n                 - 16\n                 - (unsigned __int16)dword_451180 * byte_4542A1;\n    dword_45F4DC = dword_45EDC0 - 129 - (_DWORD)hdc;\n    dword_45B40B -= HIB532(dword_453338)\n                  + BYTE1(::hWnd) * (unsigned __int16)(247 * nIDDlgItem)\n                  + 251 * (_DWORD)cpt\n                  - 131\n                  - dword_45B40B;\n  }\n  if ( dword_4535E2 > dword_451180 )\n  {\n    dword_457F82 <<= dword_45B40B * dword_45F710 * dword_45995A;\n    Y = c - 59;\n    dword_45995A <<= dword_451180 + y;\n  }\n  dword_45FC58 += (int)BYTE1(dword_45D5E3) >> dword_452B9A;\n  v30 = a1;\n  for ( i = 0; i < 185; ++i )\n  {\n    dword_459CBD -= (dword_45F710 + dword_453338) & (65 - (_DWORD)::hWnd);\n    if ( dword_45F710 < (int)dword_45FD3E )\n    {\n      dword_45E14C *= byte_45D695 - (_DWORD)dword_45FD3E - (unsigned __int16)dword_453507;\n      dword_452B9A = dword_45B254;\n      dword_45E14C -= HI32A2(word_450748) + 13566 * Y + 2;\n    }\n    if ( dword_45F710 >= (int)::hWnd )\n    {\n      if ( (int)dword_45FD3E >= dword_458D85 )\n      {\n        dword_45F4DC *= (212 * (unsigned __int16)word_452241) & ((dword_45995A + 105 - dword_45AC13)\n                                                               * dword_45FC58\n                                                               * dword_458D85);\n        nIDDlgItem *= dword_453338 * dword_45B254 + dword_4535E2 - 95 * dword_45B254;\n      }\n    }\n    else\n    {\n      dword_45FC58 = dword_453507 >> (dword_45DB52 * BYTE2(dword_45F468) - 118 * dword_45F4DC) << (nIDDlgItem + Y);\n    }\n  }\n  v31 = Data;\n  dword_454663 += 238 - dword_456FC2 * (_DWORD)cpt;\n  if ( dword_45F888 > dword_45FC58 )\n    nIDDlgItem = byte_45C468\n               - (dword_45E334 & ((unsigned int)::hWnd\n                                + (unsigned __int8)dword_4535E2\n                                - nIDDlgItem\n                                + dword_458D85\n                                + dword_459CBD));\n  if ( dword_453507 < (int)hdc )\n    dword_45DB52 = (int)::hWnd + (_DWORD)dword_45FD3E + 132;\n  dword_45DB52 = HIB532(cpt) + (unsigned __int8)(byte_454EEE >> 7) + dword_45F710 + 88;\n  Overlapped.hEvent = CreateEventW(0, 1, 0, 0);\n  if ( (CHAR *)dword_456FC2 == FileName )\n  {\n    dword_457F82 *= ((int)dword_454FD3 + BYTE1(dword_45995A) - 154) << 23;\n    dword_458D85 *= byte_45B853 + (unsigned __int8)dword_452B9A - dword_457F82 + 129;\n    dword_4535E2 = dword_453338 + 242;\n  }\n  if ( dword_458D85 >= dword_4535E2 )\n  {\n    dword_4548ED *= (y - dword_45E334) >> (dword_45F888 * (dword_456FC2 + dword_4535E2) - 117);\n    y = 13359;\n  }\n  if ( dword_451272 > dword_45995A )\n  {\n    dword_458D85 = dword_45E14C * dword_451272 * HIB532(dword_45B254);\n    y = 72 - HIB532(dword_454663);\n    dword_45DB52 = 138;\n    dword_45F710 <<= 33 * c;\n  }\n  v37 = dwLen;\n  dword_45E14C &= dword_458D85 - dword_45F888 * nIDDlgItem;\n  v28 = dwLen + 1;\n  c = 246 - dword_45F468 - 253;\n  y = (unsigned __int16)word_454B0B + 5490 * dword_45F888;\n  v33 = WriteFile(dword_454FD3, FileName, (DWORD)cpt + (_DWORD)hdc, 0, &Overlapped);\n  dword_45E14C = (unsigned __int8)dword_45F888 << (dword_451272 * (_BYTE)hdc);\n  if ( (int)hdc >= (int)&unk_45F000 )\n  {\n    if ( (_UNFFF3N *)dword_459CBD == &unk_450AAC )\n    {\n      dword_45F710 += (_DWORD)cpt * 222 * dword_456FC2 + 129;\n      dword_45FC58 = 0;\n    }\n  }\n  else\n  {\n    c = (unsigned __int16)::hWnd - (HIB532(dword_4535E2) + 6755 - dword_45D5E3);\n  }\n  if ( dword_45D5E3 >= dword_455E77 )\n    dword_45B254 = Y + dword_45F4DC;\n  if ( dword_454663 < dword_45F468 )\n  {\n    dword_457F82 = (24 * (174 - (int)dword_454FD3 - 132 * dword_454663 - dword_45B40B)) >> dword_45B254;\n    c = (dword_45B40B + 47 * byte_450B9B - 134) << dword_45FC58;\n    dword_45995A = 0;\n  }\n  if ( dword_453338 != dword_45995A )\n  {\n    dword_458D85 = dword_4535E2 * BYTE1(dword_455E77);\n    dword_45AC13 = dword_45E14C + 92 - dword_45D5E3 + 145 * dword_45EDC0;\n    dword_45EDC0 += BYTE1(dword_454663) * ((unsigned int)dword_454FD3 & ((unsigned int)cpt + dword_453338))\n                  + (_DWORD)hDlg * (unsigned __int16)dword_453507;\n  }\n  dword_45EDC0 += (nIDDlgItem + dword_4548ED) >> (dword_456FC2 + dword_452B9A - dword_45AC13);\n  if ( WaitForSingleObject(Overlapped.hEvent, dwMilliseconds) )\n  {\n    v33 = CancelIoEx(hFile, &Overlapped);\n    if ( (int)&unk_45F000 <= (int)&unk_4532FC )\n    {\n      dword_459CBD = c + dword_452B9A * byte_45AFFB - 123 - dword_45D5E3;\n      y = nIDDlgItem * 29610 * dword_454663 - dword_45F888;\n      dword_45EDC0 = Y << (byte_4571C2 * y * dword_45EDC0 + 25);\n      dword_45E14C &= dword_45F4DC + dword_45995A - dword_45AC13 + 233 * (unsigned __int16)dword_45B254;\n    }\n  }\n  if ( FileVersionInfoW )\n    y = 0;\n  dword_45F4DC = dword_45995A;\n  for ( j = 0; j < 44; ++j )\n  {\n    if ( dword_4535E2 > (int)hDlg )\n    {\n      nIDDlgItem >>= dword_45E334;\n      dword_459CBD &= 241 - dword_451180;\n      dword_45FC58 >>= -2 * (_BYTE)hdc * -28 * dword_455E77;\n    }\n    if ( (_UNFFF3N *)dword_45EDC0 == &unk_4532FC )\n    {\n      dword_45FC58 = y * (unsigned __int8)dword_45FD3E + dword_45F710 + 54;\n      dword_452B9A = 184 * (_DWORD)dword_45FD3E;\n      dword_4535E2 += (unsigned __int16)nIDDlgItem\n                    + dword_4535E2\n                    * (unsigned __int8)((unsigned __int16)(y * (unsigned __int8)dword_45FD3E + dword_45F710 + 54) >> 8);\n      dword_4535E2 &= nIDDlgItem + BYTE1(dword_45F4DC);\n    }\n    if ( dword_453507 < dword_459CBD )\n      dword_457F82 *= dword_45F888 - (unsigned __int16)word_45AD0A;\n    if ( (HDC)dword_453338 == hdc )\n    {\n      c = (int)dword_45FD3E + ((dword_45D5E3 - 225) & (c - dword_4548ED));\n    }\n    else if ( dword_45B40B <= dword_452B9A )\n    {\n      dword_45F710 -= dword_45F888 - dword_45B254;\n    }\n  }\n  UuidCreate(&Uuid);\n  dword_45FC58 &= 0x1D2u;\n  v46 = 0;\n  dword_457F82 = (unsigned __int16)dword_451180 + 335;\n  CommandLineW = GetCommandLineW();\n  v46 = (LP9B15R *)CommandLineToArgvW(CommandLineW, &pNumArgs);\n  dword_456FC2 = (int)cpt + dword_45EDC0 - HIB532(dword_451180) - 30;\n  FileVersionInfoW = GetFileVersionInfoW(*v46, 0, dwLen, Data);\n  v38 = y;\n  cbMultiByte = WideCharToMultiByte(0xFDE9u, 0, WideCharStr, -1, 0, 0, 0, 0);\n  if ( (int)hdc >= 0 )\n  {\n    y += 570;\n    v37 = (DWORD)hdc + dwLen;\n  }\n  else\n  {\n    nIDDlgItem += 587;\n    UuidToStringA(&Uuid, &StringUuid);\n    if ( !cbMultiByte )\n      c = 0;\n    hdc = 0;\n  }\n  WideCharToMultiByte(0xFDE9u, 0, WideCharStr, -1, MultiByteStr, cbMultiByte, 0, 0);\n  dword_45D5E3 += 100 * ((_DWORD)hdc + 18);\n  v36 /= dwLen + 1;\n  cpt = hdc;\n  dwPermanentProviderID = 0;\n  v8 = 1;\n  v16 = a1;\n  v19 = dwLen;\n  v17 = hDlg;\n  v6 = 150;\n  v14 = 6;\n  v7 = 0;\n  v23 = 0;\n  v11 = 0;\n  v18 = 1;\n  v9 = ::hWnd;\n  v13 = hdc;\n  wParam = nIDDlgItem;\n  dword_454FD3 = (HA4C47)GetLastError();\n  lParam = y;\n  hWnd = GetDlgItem(hDlg, nIDDlgItem);\n  Y = 150;\n  if ( v13 == (HDC)2 )\n    IsWindowVisible(hDlg);\n  Y = (v7 + 1) * ((_DWORD)v17 + 2);\n  dword_451272 = lineConfigProvider(hDlg, dwPermanentProviderID);\n  if ( hDlg )\n    ShowWindow(hWnd, 0);\n  nIDDlgItem += y - v23;\n  if ( hdc )\n    ShowWindow(hWnd, 0);\n  hMenu = CreatePopupMenu();\n  nIDDlgItem = dword_453338 * ((_DWORD)hDlg + v6);\n  y = (v16 - (v14 + 1)) * (v7 + Y);\n  AppendMenuA(hMenu, 0, Y, \"Exit!\");\n  if ( hdc )\n    SetForegroundWindow(hWnd);\n  y *= v14 + c - v23 + 2 * (_DWORD)dword_454FD3 - (_DWORD)v17 + 10;\n  GetCursorPos(&Point);\n  dwPermanentProviderID *= dword_458D85 * ((_DWORD)cpt + 25) + v16 - Y;\n  v2 = TrackPopupMenu(hMenu, 0x180u, Point.x, Point.y, 0, v9, 0);\n  dword_45E334 = v2 + 8 * v16 + 78;\n  SendMessageA(v9, 0, 0, 0);\n  dword_454FD3 = (char *)dword_454FD3 + dword_45D5E3 + dwPermanentProviderID * v16;\n  if ( v5 == nIDDlgItem )\n  {\n    v19 += v6 + dword_458D85 + 4 * v7 + 10 - (_DWORD)v17;\n    if ( v11 )\n      Shell_NotifyIconA(2u, &v20);\n  }\n  dword_453507 = (int)dword_454FD3;\n  v8 *= v14 + 4 - y * v7;\n  DefWindowProcA(v9, 0x84u, wParam, lParam);\n  return 0;\n}\n// 404C68: conditional instruction was optimized away because %var_8A0.4==96\n// 407B75: conditional instruction was optimized away because %var_870.4==1\n// 403D3A: conditional instruction was optimized away because %var_870.4==1\n// 457F82: using guessed type int dword_457F82;\n// 459CBD: using guessed type int dword_459CBD;\n// 45C468: using guessed type char byte_45C468;\n// 45DB52: using guessed type int dword_45DB52;\n// 45AD0A: using guessed type __int16 word_45AD0A;\n// 454B0B: using guessed type __int16 word_454B0B;\n// 454C26: using guessed type __int16 word_454C26;\n// 452241: using guessed type __int16 word_452241;\n// 450944: using guessed type char byte_450944;\n// 4542A1: using guessed type char byte_4542A1;\n// 45FC58: using guessed type int dword_45FC58;\n// 454663: using guessed type int dword_454663;\n// 452B9A: using guessed type int dword_452B9A;\n// 45E14C: using guessed type int dword_45E14C;\n// 45AC13: using guessed type int dword_45AC13;\n// 450748: using guessed type __int16 word_450748;\n// 45B853: using guessed type char byte_45B853;\n// 45AFFB: using guessed type char byte_45AFFB;\n// 454EEE: using guessed type char byte_454EEE;\n// 45B40B: using guessed type int dword_45B40B;\n// 451272: using guessed type int dword_451272;\n// 45F4DC: using guessed type int dword_45F4DC;\n// 456FC2: using guessed type int dword_456FC2;\n// 4548ED: using guessed type int dword_4548ED;\n// 45F888: using guessed type int dword_45F888;\n// 45B254: using guessed type int dword_45B254;\n// 45F710: using guessed type int dword_45F710;\n// 45EDC0: using guessed type int dword_45EDC0;\n// 451180: using guessed type int dword_451180;\n// 45995A: using guessed type int dword_45995A;\n// 455E77: using guessed type int dword_455E77;\n// 45F468: using guessed type int dword_45F468;\n// 4571C2: using guessed type char byte_4571C2;\n// 450B9B: using guessed type char byte_450B9B;\n// 45D695: using guessed type char byte_45D695;\n// 453507: using guessed type int dword_453507;\n// 45E334: using guessed type int dword_45E334;\n// 458D85: using guessed type int dword_458D85;\n// 45D5E3: using guessed type int dword_45D5E3;\n// 4535E2: using guessed type int dword_4535E2;\n// 453338: using guessed type int dword_453338;\n// 408B4A: using guessed type CHAR MultiByteStr[108];\n\n"
    },
    {
        "Function": "sub_40E109",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "0.51%",
        "Function Body": "\nint __cdecl sub_40E109(HI938DNCE hInstance)\n{\n  void *v1; // esp\n  double v4; // st7\n  LP8227 v5; // edx\n  double v7; // st7\n  double v8; // st7\n  float v9; // [esp+88h] [ebp-2704h]\n  float v10; // [esp+98h] [ebp-26F4h]\n  float v11; // [esp+9Ch] [ebp-26F0h]\n  double v12; // [esp+B8h] [ebp-26D4h]\n  double v13; // [esp+E8h] [ebp-26A4h]\n  int v14; // [esp+F0h] [ebp-269Ch]\n  float v15; // [esp+108h] [ebp-2684h]\n  float v16; // [esp+114h] [ebp-2678h]\n  float v17; // [esp+120h] [ebp-266Ch]\n  float v18; // [esp+160h] [ebp-262Ch]\n  float v19; // [esp+168h] [ebp-2624h]\n  int **v20; // [esp+170h] [ebp-261Ch]\n  int v21[3]; // [esp+174h] [ebp-2618h] BYREF\n  unsigned __int16 *v22; // [esp+180h] [ebp-260Ch]\n  void *v23; // [esp+18Ch] [ebp-2600h]\n  int v24[18]; // [esp+190h] [ebp-25FCh] BYREF\n  char v25; // [esp+1DBh] [ebp-25B1h] BYREF\n  char *v26; // [esp+1DCh] [ebp-25B0h]\n  float v27; // [esp+1E4h] [ebp-25A8h]\n  float v28; // [esp+1E8h] [ebp-25A4h]\n  float v29; // [esp+1ECh] [ebp-25A0h]\n  int **v30; // [esp+1F8h] [ebp-2594h]\n  int v31[3]; // [esp+1FCh] [ebp-2590h] BYREF\n  unsigned __int16 *v32; // [esp+208h] [ebp-2584h]\n  float v33; // [esp+214h] [ebp-2578h]\n  float v34; // [esp+218h] [ebp-2574h]\n  HWND v35; // [esp+21Ch] [ebp-2570h] BYREF\n  int v36; // [esp+220h] [ebp-256Ch] BYREF\n  int v37; // [esp+224h] [ebp-2568h] BYREF\n  __int16 v38; // [esp+22Ah] [ebp-2562h] BYREF\n  __int16 v39; // [esp+22Ch] [ebp-2560h] BYREF\n  __int16 v40; // [esp+22Eh] [ebp-255Eh] BYREF\n  char v41[28]; // [esp+230h] [ebp-255Ch] BYREF\n  int v42; // [esp+254h] [ebp-2538h]\n  int v43; // [esp+258h] [ebp-2534h]\n  char v44[28]; // [esp+25Ch] [ebp-2530h] BYREF\n  HWND v45; // [esp+278h] [ebp-2514h]\n  LONG v46; // [esp+27Ch] [ebp-2510h]\n  LONG bottom; // [esp+280h] [ebp-250Ch]\n  int v48; // [esp+284h] [ebp-2508h]\n  _DWORD v49[6]; // [esp+28Ch] [ebp-2500h] BYREF\n  char v50; // [esp+2A7h] [ebp-24E5h] BYREF\n  char v51; // [esp+2A8h] [ebp-24E4h] BYREF\n  char v52; // [esp+2A9h] [ebp-24E3h] BYREF\n  __int16 v53; // [esp+2AAh] [ebp-24E2h] BYREF\n  __int16 v54; // [esp+2ACh] [ebp-24E0h] BYREF\n  __int16 v55; // [esp+2AEh] [ebp-24DEh] BYREF\n  OL88C4R sz[42]; // [esp+2B0h] [ebp-24DCh] BYREF\n  GUID rguid; // [esp+304h] [ebp-2488h] BYREF\n  int v58; // [esp+314h] [ebp-2478h]\n  char OutBuffer[64]; // [esp+318h] [ebp-2474h] BYREF\n  int v60; // [esp+358h] [ebp-2434h]\n  GEO_ENA42DOC lpGeoEnumProc; // [esp+35Ch] [ebp-2430h]\n  DWORD BytesReturned; // [esp+360h] [ebp-242Ch] BYREF\n  int v63; // [esp+364h] [ebp-2428h]\n  HA4C47 hDevice; // [esp+368h] [ebp-2424h]\n  HDC v65; // [esp+36Ch] [ebp-2420h]\n  HG957FJ CompatibleBitmap; // [esp+370h] [ebp-241Ch]\n  HDC v67; // [esp+374h] [ebp-2418h]\n  HDC v68; // [esp+378h] [ebp-2414h]\n  char pv[4]; // [esp+37Ch] [ebp-2410h] BYREF\n  int v70; // [esp+380h] [ebp-240Ch]\n  int v71; // [esp+384h] [ebp-2408h]\n  LPCDAE lpvObj; // [esp+394h] [ebp-23F8h] BYREF\n  HR3494T v73; // [esp+398h] [ebp-23F4h]\n  HA4C47 v74; // [esp+39Ch] [ebp-23F0h] BYREF\n  HGF3FCL hResData; // [esp+3A0h] [ebp-23ECh]\n  __int64 v76; // [esp+3A4h] [ebp-23E8h]\n  HGF3FCL hGlobal; // [esp+3ACh] [ebp-23E0h]\n  LPFE83AM ppstm; // [esp+3B0h] [ebp-23DCh] BYREF\n  HRSRC hResInfo; // [esp+3B4h] [ebp-23D8h]\n  CHAR Type[264]; // [esp+3B8h] [ebp-23D4h] BYREF\n  CHAR Name[264]; // [esp+4C0h] [ebp-22CCh] BYREF\n  HDC v82; // [esp+5C8h] [ebp-21C4h]\n  HMD02DE v83; // [esp+5CCh] [ebp-21C0h]\n  LPD4E0 lpWideCharStr; // [esp+5D0h] [ebp-21BCh]\n  HDC v85; // [esp+5D4h] [ebp-21B8h]\n  int cchWideChar; // [esp+5D8h] [ebp-21B4h]\n  CHAR MultiByteStr[380]; // [esp+5E0h] [ebp-21ACh] BYREF\n  SIZE_T dwBytes; // [esp+75Ch] [ebp-2030h]\n  void *v89; // [esp+760h] [ebp-202Ch]\n  HGF3FCL hMem; // [esp+764h] [ebp-2028h]\n  LR9617T v91; // [esp+768h] [ebp-2024h]\n  unsigned int n; // [esp+76Ch] [ebp-2020h]\n  HWND hDlg; // [esp+770h] [ebp-201Ch]\n  LPABFA v94; // [esp+774h] [ebp-2018h]\n  void *Src; // [esp+778h] [ebp-2014h]\n  LPABFA v96; // [esp+77Ch] [ebp-2010h]\n  unsigned int v97; // [esp+780h] [ebp-200Ch]\n  unsigned int v98; // [esp+784h] [ebp-2008h]\n  WP20B9 v99; // [esp+788h] [ebp-2004h]\n  int nIDDlgItem; // [esp+78Ch] [ebp-2000h]\n  HDC v101; // [esp+790h] [ebp-1FFCh]\n  HMD02DE LibraryA; // [esp+794h] [ebp-1FF8h]\n  CHAR String[268]; // [esp+798h] [ebp-1FF4h] BYREF\n  HI938DNCE v104; // [esp+8A4h] [ebp-1EE8h]\n  struct tagPADB0DTRUCT Paint; // [esp+8A8h] [ebp-1EE4h] BYREF\n  struct tagRECT v106; // [esp+8E8h] [ebp-1EA4h] BYREF\n  HWND hWndParent; // [esp+8F8h] [ebp-1E94h]\n  WP20B9 wParam; // [esp+8FCh] [ebp-1E90h]\n  UINT Msg; // [esp+900h] [ebp-1E8Ch]\n  LPABFA v110; // [esp+904h] [ebp-1E88h]\n  UINT_PTR v111; // [esp+958h] [ebp-1E34h]\n  UINT_PTR v112; // [esp+ACCh] [ebp-1CC0h]\n  int v113; // [esp+AD8h] [ebp-1CB4h]\n  int v114; // [esp+D54h] [ebp-1A38h]\n  CHAR chText[180]; // [esp+D68h] [ebp-1A24h] BYREF\n  HDC v116; // [esp+E1Ch] [ebp-1970h]\n  int v117; // [esp+E88h] [ebp-1904h]\n  int v118; // [esp+E8Ch] [ebp-1900h]\n  int v119; // [esp+E94h] [ebp-18F8h]\n  HWND v120; // [esp+EB8h] [ebp-18D4h]\n  unsigned __int8 *v121; // [esp+EE0h] [ebp-18ACh]\n  unsigned __int8 v122; // [esp+EE6h] [ebp-18A6h]\n  unsigned __int8 v123; // [esp+EE7h] [ebp-18A5h]\n  unsigned __int8 *v124; // [esp+EE8h] [ebp-18A4h]\n  BI40A5INFO pbmi; // [esp+EECh] [ebp-18A0h] BYREF\n  void *v126; // [esp+F18h] [ebp-1874h] BYREF\n  HG957FJ v127; // [esp+F1Ch] [ebp-1870h]\n  void *ppvBits; // [esp+F20h] [ebp-186Ch] BYREF\n  HG957FJ ho; // [esp+F24h] [ebp-1868h]\n  HG957FJ v130; // [esp+F28h] [ebp-1864h]\n  int m; // [esp+F2Ch] [ebp-1860h]\n  HDC CompatibleDC; // [esp+F30h] [ebp-185Ch]\n  int hDest; // [esp+F34h] [ebp-1858h]\n  HDC v134; // [esp+F38h] [ebp-1854h]\n  HDC v135; // [esp+F3Ch] [ebp-1850h]\n  int hSrc; // [esp+F40h] [ebp-184Ch]\n  int wSrc; // [esp+F44h] [ebp-1848h]\n  int wDest; // [esp+F48h] [ebp-1844h]\n  int x; // [esp+F4Ch] [ebp-1840h]\n  int y; // [esp+F50h] [ebp-183Ch]\n  int xSrc; // [esp+F54h] [ebp-1838h]\n  int v142; // [esp+F58h] [ebp-1834h]\n  int ySrc; // [esp+F5Ch] [ebp-1830h]\n  HDC hDC; // [esp+F60h] [ebp-182Ch]\n  int hDC_4; // [esp+F64h] [ebp-1828h]\n  int cWidth; // [esp+F68h] [ebp-1824h]\n  HG957FJ v147; // [esp+F6Ch] [ebp-1820h]\n  HG957FJ Pen; // [esp+F70h] [ebp-181Ch]\n  char v149; // [esp+F74h] [ebp-1818h] BYREF\n  HWND DlgItem; // [esp+F84h] [ebp-1808h]\n  int v151; // [esp+F88h] [ebp-1804h]\n  int *v152; // [esp+F8Ch] [ebp-1800h]\n  char v153[1064]; // [esp+F90h] [ebp-17FCh] BYREF\n  BLF56CUN0B4FN ftn; // [esp+13BCh] [ebp-13D0h]\n  HBI40A5 hbm; // [esp+13C0h] [ebp-13CCh]\n  HG957FJ h; // [esp+13C4h] [ebp-13C8h]\n  HDC hdcSrc; // [esp+13C8h] [ebp-13C4h]\n  HDC hdcDest; // [esp+13CCh] [ebp-13C0h]\n  HG957FJ v159; // [esp+13D0h] [ebp-13BCh]\n  LPBI40A5INFO lpbmi; // [esp+13D4h] [ebp-13B8h]\n  UINT_PTR v161; // [esp+1428h] [ebp-1364h]\n  UINT_PTR v162; // [esp+1594h] [ebp-11F8h]\n  int v163; // [esp+15A0h] [ebp-11ECh]\n  int v164; // [esp+181Ch] [ebp-F70h]\n  HDC v165; // [esp+18E4h] [ebp-EA8h]\n  int v166; // [esp+1950h] [ebp-E3Ch]\n  int v167; // [esp+1954h] [ebp-E38h]\n  int v168; // [esp+195Ch] [ebp-E30h]\n  HWND v169; // [esp+1980h] [ebp-E0Ch]\n  IStorage *v170[2]; // [esp+19A8h] [ebp-DE4h] BYREF\n  LPABFA lParam[5]; // [esp+19B0h] [ebp-DDCh] BYREF\n  void *v172[7]; // [esp+19C4h] [ebp-DC8h] BYREF\n  int k; // [esp+19E0h] [ebp-DACh]\n  WCHAR pwcsName; // [esp+19E4h] [ebp-DA8h] BYREF\n  IStorage *ppstgOpen; // [esp+19E8h] [ebp-DA4h] BYREF\n  struct tagRECT v176; // [esp+19ECh] [ebp-DA0h] BYREF\n  int *v177; // [esp+19FCh] [ebp-D90h]\n  int v178; // [esp+1A00h] [ebp-D8Ch] BYREF\n  unsigned int j; // [esp+1A04h] [ebp-D88h]\n  unsigned int v180; // [esp+1A08h] [ebp-D84h]\n  unsigned int v181; // [esp+1A0Ch] [ebp-D80h]\n  int v182; // [esp+1A10h] [ebp-D7Ch]\n  int v183; // [esp+1A14h] [ebp-D78h]\n  int v184; // [esp+1A18h] [ebp-D74h]\n  int v185; // [esp+1A1Ch] [ebp-D70h]\n  struct tagPOINT Point; // [esp+1A20h] [ebp-D6Ch] BYREF\n  void *v187[6]; // [esp+1A28h] [ebp-D64h] BYREF\n  unsigned int v188; // [esp+1A40h] [ebp-D4Ch]\n  HI938DNCE v189; // [esp+1A44h] [ebp-D48h]\n  int v190; // [esp+1A48h] [ebp-D44h]\n  int v191; // [esp+1A4Ch] [ebp-D40h]\n  unsigned int v192; // [esp+1A50h] [ebp-D3Ch]\n  HA4C47 hHandle; // [esp+1A54h] [ebp-D38h]\n  unsigned int v194; // [esp+1A58h] [ebp-D34h]\n  unsigned int v195; // [esp+1A5Ch] [ebp-D30h]\n  int v196; // [esp+1A60h] [ebp-D2Ch]\n  int v197; // [esp+1A64h] [ebp-D28h]\n  int v198; // [esp+1A68h] [ebp-D24h]\n  int v199; // [esp+1A6Ch] [ebp-D20h]\n  char v200; // [esp+1A70h] [ebp-D1Ch]\n  char v201[255]; // [esp+1A71h] [ebp-D1Bh] BYREF\n  int v202; // [esp+1B74h] [ebp-C18h]\n  int v203; // [esp+1B78h] [ebp-C14h]\n  int v204; // [esp+1B7Ch] [ebp-C10h]\n  int v205; // [esp+1B80h] [ebp-C0Ch]\n  struct tagPOINT v206; // [esp+1B84h] [ebp-C08h] BYREF\n  int v207; // [esp+1B8Ch] [ebp-C00h]\n  int X; // [esp+1D9Ch] [ebp-9F0h]\n  int Y; // [esp+1DA0h] [ebp-9ECh]\n  int Y_4; // [esp+1DA4h] [ebp-9E8h]\n  int cy; // [esp+1DA8h] [ebp-9E4h]\n  LONG WindowLongA; // [esp+1DACh] [ebp-9E0h]\n  struct tagRECT rcDst; // [esp+1DB0h] [ebp-9DCh] BYREF\n  char VersionInformation[156]; // [esp+1DC0h] [ebp-9CCh] BYREF\n  int v215; // [esp+1E60h] [ebp-92Ch]\n  int v216; // [esp+1E68h] [ebp-924h]\n  int v217; // [esp+1E6Ch] [ebp-920h]\n  size_t Size; // [esp+1E70h] [ebp-91Ch]\n  int v219; // [esp+1E74h] [ebp-918h]\n  __int64 v220; // [esp+1E78h] [ebp-914h]\n  FAE517C ProcAddress; // [esp+1E84h] [ebp-908h]\n  unsigned __int64 v222; // [esp+1E88h] [ebp-904h]\n  __int64 v223; // [esp+1E90h] [ebp-8FCh]\n  __int64 v224; // [esp+1E98h] [ebp-8F4h]\n  __int64 v225; // [esp+1EA0h] [ebp-8ECh]\n  LP8227 lpLibFileName; // [esp+1EACh] [ebp-8E0h]\n  void *Factory; // [esp+1EB4h] [ebp-8D8h]\n  LP8227 lpProcName; // [esp+1EB8h] [ebp-8D4h]\n  int v229[4]; // [esp+1EBCh] [ebp-8D0h] BYREF\n  char v230[4]; // [esp+1ECCh] [ebp-8C0h] BYREF\n  unsigned __int64 v231; // [esp+1ED0h] [ebp-8BCh]\n  int v232; // [esp+1EDCh] [ebp-8B0h] BYREF\n  _DWORD v233[4]; // [esp+1EE0h] [ebp-8ACh] BYREF\n  __int64 v234; // [esp+1EF0h] [ebp-89Ch]\n  void *ppIFactory[2]; // [esp+1EF8h] [ebp-894h] BYREF\n  unsigned __int64 v236; // [esp+1F00h] [ebp-88Ch]\n  float v237; // [esp+1F0Ch] [ebp-880h]\n  __int64 v238; // [esp+1F10h] [ebp-87Ch]\n  int v239; // [esp+1F18h] [ebp-874h]\n  int v240; // [esp+1F1Ch] [ebp-870h]\n  unsigned __int64 v241; // [esp+1F20h] [ebp-86Ch]\n  int v242; // [esp+1F2Ch] [ebp-860h]\n  struct tagRECT Rect; // [esp+1F30h] [ebp-85Ch] BYREF\n  HMD02DE hModule; // [esp+1F40h] [ebp-84Ch]\n  LONG dwNewLong; // [esp+1F44h] [ebp-848h]\n  HWND ForegroundWindow; // [esp+1F48h] [ebp-844h]\n  int MinPos; // [esp+1F4Ch] [ebp-840h] BYREF\n  int nBar; // [esp+1F50h] [ebp-83Ch]\n  HWND hWnd; // [esp+1F54h] [ebp-838h]\n  int MaxPos[4]; // [esp+1F58h] [ebp-834h] BYREF\n  HGLRC Context; // [esp+1F68h] [ebp-824h]\n  HDC DC; // [esp+1F6Ch] [ebp-820h]\n  HMENU uIDNewItem; // [esp+1F70h] [ebp-81Ch]\n  LP8227 uIDNewItem_4; // [esp+1F74h] [ebp-818h]\n  HMENU hMenu; // [esp+1F78h] [ebp-814h]\n  int v256[4]; // [esp+1F7Ch] [ebp-810h] BYREF\n  unsigned int v257; // [esp+1F8Ch] [ebp-800h]\n  int v258; // [esp+1F90h] [ebp-7FCh]\n  unsigned int v259; // [esp+1F94h] [ebp-7F8h]\n  int v260; // [esp+1F98h] [ebp-7F4h]\n  int v261; // [esp+1F9Ch] [ebp-7F0h]\n  int v262; // [esp+1FA0h] [ebp-7ECh]\n  int v263; // [esp+1FA4h] [ebp-7E8h]\n  int v264; // [esp+1FA8h] [ebp-7E4h]\n  HI938DNCE v265; // [esp+1FACh] [ebp-7E0h]\n  unsigned int v266; // [esp+1FB0h] [ebp-7DCh]\n  unsigned int v267; // [esp+1FB4h] [ebp-7D8h]\n  unsigned int v268; // [esp+1FBCh] [ebp-7D0h]\n  int v269; // [esp+1FC0h] [ebp-7CCh]\n  int v270; // [esp+1FC4h] [ebp-7C8h]\n  int v271; // [esp+1FC8h] [ebp-7C4h]\n  int v272; // [esp+1FCCh] [ebp-7C0h]\n  int v273; // [esp+20D4h] [ebp-6B8h]\n  int v274; // [esp+20D8h] [ebp-6B4h]\n  unsigned int v275; // [esp+20DCh] [ebp-6B0h]\n  unsigned int v276; // [esp+20E0h] [ebp-6ACh]\n  int v277; // [esp+20E4h] [ebp-6A8h]\n  __int16 v278; // [esp+20E8h] [ebp-6A4h]\n  char v279[518]; // [esp+20EAh] [ebp-6A2h] BYREF\n  BOOL v280; // [esp+22F0h] [ebp-49Ch]\n  struct tagCHE208CO92C9 v281; // [esp+22F4h] [ebp-498h] BYREF\n  char v282; // [esp+2318h] [ebp-474h] BYREF\n  POINT pt; // [esp+235Ch] [ebp-430h]\n  RECT rc; // [esp+2364h] [ebp-428h] BYREF\n  int i; // [esp+2374h] [ebp-418h]\n  struct tagOFNW v286; // [esp+2378h] [ebp-414h] BYREF\n  int left; // [esp+23D0h] [ebp-3BCh]\n  int top; // [esp+23D4h] [ebp-3B8h]\n  __int64 right; // [esp+23D8h] [ebp-3B4h]\n  HDC hdc; // [esp+23E0h] [ebp-3ACh]\n  int v291; // [esp+23E4h] [ebp-3A8h]\n  int v292; // [esp+23E8h] [ebp-3A4h]\n  int v293; // [esp+23ECh] [ebp-3A0h]\n  int v294; // [esp+23F0h] [ebp-39Ch]\n  int v295; // [esp+23F4h] [ebp-398h]\n  int v296; // [esp+23F8h] [ebp-394h]\n  int v297; // [esp+23FCh] [ebp-390h]\n  int v298; // [esp+2400h] [ebp-38Ch]\n  int v299; // [esp+2404h] [ebp-388h]\n  HI938DNCE v300; // [esp+2408h] [ebp-384h]\n  int v301; // [esp+240Ch] [ebp-380h]\n  int v302; // [esp+2410h] [ebp-37Ch]\n  int *v303; // [esp+2414h] [ebp-378h]\n  unsigned int v304; // [esp+2418h] [ebp-374h]\n  int v305; // [esp+241Ch] [ebp-370h] BYREF\n  int v306; // [esp+2420h] [ebp-36Ch]\n  bool v307[4]; // [esp+2424h] [ebp-368h] BYREF\n  HWND v308; // [esp+2428h] [ebp-364h]\n  int v309; // [esp+242Ch] [ebp-360h]\n  int v310; // [esp+2430h] [ebp-35Ch]\n  int v311; // [esp+2434h] [ebp-358h]\n  int v312; // [esp+2438h] [ebp-354h]\n  void *v313[6]; // [esp+243Ch] [ebp-350h] BYREF\n  int v314; // [esp+2454h] [ebp-338h]\n  char v315; // [esp+2458h] [ebp-334h]\n  char v316[255]; // [esp+2459h] [ebp-333h] BYREF\n  int v317; // [esp+255Ch] [ebp-230h]\n  int v318; // [esp+2560h] [ebp-22Ch]\n  int v319; // [esp+2564h] [ebp-228h]\n  int v320; // [esp+2568h] [ebp-224h]\n  int v321; // [esp+256Ch] [ebp-220h]\n  __int16 v322[260]; // [esp+2570h] [ebp-21Ch] BYREF\n  int v323; // [esp+2778h] [ebp-14h]\n  unsigned int v324; // [esp+277Ch] [ebp-10h]\n  int v325; // [esp+2788h] [ebp-4h]\n  int savedregs; // [esp+278Ch] [ebp+0h] BYREF\n\n  v1 = alloca(10000);\n  v324 = 0;\n  v308 = 0;\n  v291 = 1;\n  v304 = 0;\n  v300 = hInstance;\n  v292 = 0;\n  v301 = 1;\n  v314 = 0;\n  v297 = 2;\n  v298 = 2;\n  v306 = 2;\n  v321 = 0;\n  v302 = 10;\n  v315 = 0;\n  memset(v316, 0, sizeof(v316));\n  v309 = 0;\n  v310 = 0;\n  v311 = 0;\n  v312 = 0;\n  v293 = 0;\n  v294 = 0;\n  v295 = 0;\n  v296 = 0;\n  v317 = 0;\n  v318 = 0;\n  v319 = 0;\n  v320 = 0;\n  memset(v322, 0, sizeof(v322));\n  left = 0;\n  top = 0;\n  right = 0i64;\n  hdc = 0;\n  ExcludeClipRect(0, 0, 0, 0, 0);\n  v323 = 43;\n  sub_4018D5(v307);\n  v325 = 0;\n  while ( v323-- )\n  {\n    GetWindowLongA(::hWnd, -21);\n    if ( v322 )\n      dword_4535E2 -= dword_45D5E3 + v293 / 42 - dword_45E334;\n  }\n  c = ::nIDDlgItem + dword_458D85 - v291;\n  memset(&v286, 0, sizeof(v286));\n  if ( ::hdc && GetSaveFileNameW(&v286) )\n    ::nIDDlgItem = 0;\n  SetCapture(::hWnd);\n  for ( i = 0; i < (int)dword_454FD3 * ((int)::hdc + 9); ++i )\n  {\n    v300 = (HI938DNCE)((unsigned __int16)v300 - dword_453507 - (_DWORD)::hDlg);\n    c = ::nIDDlgItem + dword_458D85 - v291;\n    if ( dword_45F468 )\n    {\n      ::y = v304 / 0x27 - (unsigned __int16)FileName - dword_45F468;\n    }\n    else\n    {\n      v34 = (float)(int)cpt;\n      v17 = log10(v34);\n      v33 = v17;\n      v300 = (HI938DNCE)(unsigned __int64)(v17 - (double)(unsigned __int16)dword_454FD3 + (double)::y);\n    }\n    v298 = (unsigned __int8)sub_403A72(v307, v292);\n    memset(&rc, 0, sizeof(rc));\n    pt = 0i64;\n    if ( PtInRect(&rc, 0i64) )\n      ::y += c;\n    c += (int)cpt + dword_453507 + dword_45D5E3 / 14;\n    v306 = sub_408A94(0);\n    v301 += v301 + dword_453507 - (_DWORD)::hWnd;\n    v291 += (int)cpt / 28 + (unsigned __int16)dword_458D85 - (_DWORD)v300;\n    v297 = sub_4025A6(v307, v308);\n    v304 = v292 * (_DWORD)dword_454FD3 * (_DWORD)::hdc;\n    if ( c - dword_453338 > ::y )\n      c = (int)::hDlg / 32 + c * dword_453338 / (dword_453507 + 58) - (_DWORD)cpt;\n    else\n      ::y -= ::nIDDlgItem;\n    if ( ::hDlg == (HWND)v297 && (HDC)v298 == cpt && (HWND)v306 == ::hWnd )\n    {\n      v300 = (HI938DNCE)((char *)::hWnd + v292);\n      v314 = dword_45E334;\n    }\n    else\n    {\n      ::nIDDlgItem = dword_4535E2 + (unsigned __int16)c - dword_453338;\n      v314 = 0;\n    }\n    v300 = (HI938DNCE)(::y - dword_458D85 - (unsigned __int8)v292 - v304);\n    if ( v314 )\n    {\n      if ( v310 + (unsigned __int16)v320 )\n        dword_4535E2 -= v304;\n      else\n        v291 -= dword_45D5E3 + (unsigned __int8)cpt;\n      if ( (_WORD)c )\n        v319 -= (unsigned __int8)cpt + (unsigned __int16)((unsigned __int16)&savedregs - 540);\n      v314 = 0;\n    }\n    else\n    {\n      memset(&v281, 0, sizeof(v281));\n      v281.lStructSize = 36;\n      v281.lpCustColors = (CO1F61EF *)&v282;\n      v281.hwndOwner = (HWND)((char *)::hDlg + (_DWORD)dword_454FD3);\n      v281.hInstance = (HWND)((char *)::hDlg + (_DWORD)dword_454FD3);\n      v280 = ChooseColorA(&v281);\n    }\n  }\n  v299 = 4;\n  while ( v299-- )\n  {\n    ::nIDDlgItem += ::y + v294 * (unsigned __int16)dword_454FD3;\n    RedrawWindow(::hDlg, 0, 0, 0x101u);\n  }\n  sub_40C3DE(v313);\n  LOD70C(v325) = 1;\n  v55 = (__int16)dword_454FD3;\n  sub_40AF0E(v313, &v55);\n  v54 = ::nIDDlgItem;\n  sub_40AF0E(v313, &v54);\n  v53 = v292;\n  sub_40AF0E(v313, &v53);\n  dword_453338 = (_DWORD)cpt * c * (_DWORD)dword_454FD3 * dword_45D5E3 + 2;\n  v30 = (int **)sub_402965(v313, v31);\n  LOD70C(v325) = 2;\n  v32 = (unsigned __int16 *)sub_407133(v30);\n  LOD70C(v325) = 1;\n  v305 = *v32;\n  v303 = &v305;\n  sub_40DD4A(v313);\n  LOD70C(v325) = 3;\n  sub_409608((int)v313);\n  LOD70C(v325) = 0;\n  sub_40F2FF(v313);\n  v325 = -1;\n  sub_40A511();\n  v268 = 0;\n  v257 = 1;\n  v267 = v324;\n  v265 = hInstance;\n  v259 = 0;\n  v266 = 1;\n  v277 = 1;\n  v264 = 0;\n  v269 = 0;\n  v270 = 0;\n  v271 = 0;\n  v272 = 0;\n  v260 = 0;\n  v261 = 0;\n  v262 = 0;\n  v263 = 0;\n  v273 = 0;\n  v274 = 0;\n  v275 = 0;\n  v276 = 0;\n  v278 = 0;\n  memset(v279, 0, sizeof(v279));\n  uIDNewItem_4 = 0;\n  hMenu = CreateMenu();\n  uIDNewItem = LoadMenuA(hInstance, \"Menu\");\n  LoadBitmapA(hInstance, \"Bitmap\");\n  AppendMenuA(hMenu, 0x14u, (UINT_PTR)uIDNewItem, uIDNewItem_4);\n  uIDNewItem = LoadMenuA(hInstance, \"Edit\");\n  v258 = (int)::hWnd + 77;\n  do\n  {\n    if ( (_BYTE)dword_451272 )\n      v259 *= (unsigned __int16)dword_451272;\n    else\n      v257 -= (unsigned int)::hWnd;\n    DC = GetDC(::hDlg);\n    Context = wglCreateContext(DC);\n    ::hDlg = (HWND)wglMakeCurrent(DC, Context);\n    SetBrushOrgEx(::hdc, 1, 0, 0);\n    --v258;\n  }\n  while ( v258 );\n  if ( v261 < dword_45F468 )\n    v272 += dword_453507 + ::y;\n  else\n    dword_458D85 = v270;\n  v29 = (float)dword_4535E2;\n  v16 = cos(v29);\n  v28 = v16;\n  v15 = cos((double)v267);\n  v27 = v15;\n  ::Y = (int)((double)v266 + v16 + (double)dword_45F468 - v15);\n  c += v261 / 8 + (unsigned __int8)v272 * (unsigned __int8)dword_45D5E3;\n  MaxPos[1] = (int)::hdc;\n  MaxPos[3] = 0;\n  MaxPos[2] = ::nIDDlgItem;\n  ::hWnd = (HWND)AttachThreadInput(0, ::nIDDlgItem, 1);\n  hWnd = ::hDlg;\n  nBar = 22;\n  MinPos = 18;\n  MaxPos[0] = 25;\n  GetScrollPos(::hDlg, 22);\n  GetScrollRange(hWnd, nBar, &MinPos, MaxPos);\n  c = dword_4535E2\n    + v268 / 6\n    + (unsigned __int8)::hDlg\n    + (unsigned __int8)::Y\n    + (int)::hWnd / (int)(::hDlg + 18)\n    - (unsigned __int16)v259;\n  WinHttpOpen(&pszAgentW, 0, 0, 0, 0);\n  ForegroundWindow = GetForegroundWindow();\n  dwNewLong = GetWindowLongA(ForegroundWindow, -4);\n  SetActiveWindow(ForegroundWindow);\n  SetWindowLongA(ForegroundWindow, -4, dwNewLong);\n  v26 = &v25;\n  memset(v256, 0, 12);\n  v325 = 4;\n  v52 = (char)cpt;\n  sub_40309C((int)v256, &v52);\n  if ( (int)::hDlg <= dword_453338 )\n    v265 = (HI938DNCE)(v269 + dword_453338 * (unsigned __int16)v272 + c / 23 - dword_45E334 * v270);\n  else\n    v272 -= (int)::hdc + v259;\n  v51 = v257;\n  sub_40309C((int)v256, &v51);\n  v50 = v266;\n  sub_40309C((int)v256, &v50);\n  if ( ::y )\n  {\n    *(float *)&v14 = exp((double)v257);\n    v24[17] = v14;\n    v13 = (double)::y;\n    v4 = asin((double)c);\n    dword_458D85 = (unsigned __int64)(v13\n                                    - v4 * *(float *)&v14 / 10.0\n                                    + (double)(unsigned __int8)v267\n                                    - (double)(unsigned __int16)dword_453507\n                                    + (double)(unsigned int)dword_458D85);\n  }\n  else\n  {\n    v265 = (HI938DNCE)((char *)v265 - (unsigned __int16)c - v257 / (dword_453507 + 57));\n  }\n  ::y = (int)::hDlg + ::y - v259 * dword_45D5E3 - (unsigned __int8)dword_45E334 - (_DWORD)dword_454FD3;\n  v259 = v266 / 0x1C + (unsigned __int16)c - (unsigned __int8)dword_458D85 - (unsigned __int8)::Y - dword_4535E2 * v257;\n  sub_404E1B(v256);\n  v275 = v257 + v266 + v275 * v268;\n  if ( v268 == v262 )\n    v276 = v275 - v266;\n  else\n    dword_4535E2 += v273 + ::Y + dword_45E334 * (unsigned __int16)::hDlg - (_DWORD)::hWnd;\n  v325 = 5;\n  sub_40D3FB((int)v256);\n  v325 = -1;\n  Factory = (void *)sub_4072E6(D2D1_FA744CY_TYPE_SI4698_TH2B17ED, ppIFactory);\n  ppIFactory[1] = Factory;\n  v220 = (__int64)Factory + 0x2FAE94A5F17DC107i64;\n  v224 = 0x4E3B4B8175AD1B3Ei64 - (int)Factory;\n  v233[0] = *(_DWORD *)L\"Verdana\";\n  v233[1] = *(_DWORD *)L\"rdana\";\n  v233[2] = *(_DWORD *)L\"ana\";\n  v233[3] = *(_DWORD *)L\"a\";\n  v222 = 0xE13B1BE13D7EE8B9ui64 * ((int)Factory + 1);\n  v236 = 0xF0885BF1F517ECA4ui64 / (1 - (int)Factory);\n  v238 = 51i64;\n  v237 = 50.0;\n  v223 = 324D9218i64;\n  v225 = 18i64;\n  v234 = (int)Factory + 13;\n  v239 = 201C7E;\n  v240 = 0;\n  if ( (int)Factory >= 0 )\n  {\n    Factory = (void *)DWriteCreateFactory(0, &unk_427D9A, v229);\n    v241 = v222 + v220 * v224;\n    v231 = v236 + v220 * v224;\n    v242 = v225 + v238 * v223;\n  }\n  if ( (int)Factory >= 0 )\n  {\n    lpLibFileName = (LP8227)GlobalAlloc(0x40u, 0x20u);\n    Factory = (void *)(*(int (__stdcall **)(int, _DWORD *, _DWORD, int, _DWORD, int, float, __int16 *, int *))(*(_DWORD *)v229[0] + 60))(\n                        v229[0],\n                        v233,\n                        0,\n                        400,\n                        0,\n                        5,\n                        CO033E_FLOAT(LO72B9D(v237)),\n                        &word_422831,\n                        &v232);\n    *(_QWORD *)lpLibFileName = v241;\n  }\n  if ( (int)Factory >= 0 )\n  {\n    hModule = LoadLibraryA(lpLibFileName);\n    Factory = (void *)(*(int (__stdcall **)(int, int))(*(_DWORD *)v232 + 12))(v232, 2);\n    lpProcName = (LP8227)GlobalAlloc(0x40u, 0x20u);\n  }\n  if ( (int)Factory >= 0 )\n  {\n    *(_QWORD *)lpProcName = v231;\n    v5 = lpProcName;\n    *((_DWORD *)lpProcName + 2) = v242;\n    *((_DWORD *)v5 + 3) = 0;\n    Factory = (void *)(*(int (__stdcall **)(int, int))(*(_DWORD *)v232 + 16))(v232, 2);\n  }\n  if ( (int)Factory < 0 )\n    return -1;\n  GetClientRect(::hWnd, &Rect);\n  v24[13] = Rect.right;\n  v24[14] = Rect.bottom;\n  v24[15] = Rect.right;\n  v24[16] = Rect.bottom;\n  v49[4] = Rect.right;\n  v49[5] = Rect.bottom;\n  v229[2] = Rect.right;\n  v229[3] = Rect.bottom;\n  v24[9] = (int)::hWnd;\n  v24[10] = Rect.right;\n  v24[11] = Rect.bottom;\n  v24[12] = 0;\n  v45 = ::hWnd;\n  v46 = Rect.right;\n  bottom = Rect.bottom;\n  v48 = 0;\n  v49[0] = ::hWnd;\n  v49[1] = Rect.right;\n  v49[2] = Rect.bottom;\n  v49[3] = 0;\n  v42 = 0;\n  v43 = 0;\n  memset(v24, 0, 12);\n  *(float *)&v24[3] = 0.0;\n  *(float *)&v24[4] = 0.0;\n  memset(&v24[5], 0, 16);\n  qmemcpy(v41, v24, sizeof(v41));\n  qmemcpy(v44, v41, sizeof(v44));\n  v23 = ppIFactory[0];\n  Factory = (void *)(*(int (__stdcall **)(void *, char *, _DWORD *, char *))(*(_DWORD *)ppIFactory[0] + 56))(\n                      ppIFactory[0],\n                      v44,\n                      v49,\n                      v230);\n  ProcAddress = GetProcAddress(hModule, lpProcName);\n  if ( (int)Factory < 0 )\n  {\n    dword_45F468 = ((int (__thiscall *)(_DWORD, _DWORD, int, int, _DWORD))ProcAddress)(\n                     (unsigned __int64)(v238 + v234) >> 32,\n                     0,\n                     v239,\n                     12288,\n                     v238 + v234);\n    v219 = 0;\n  }\n  memset(VersionInformation, 0, sizeof(VersionInformation));\n  *(_DWORD *)VersionInformation = 156;\n  GetVersionExA((LPD291RSE994NFOA)VersionInformation);\n  v217 = 0;\n  if ( (unsigned int)dword_454FD3 >= *(_DWORD *)&VersionInformation[8] + *(_DWORD *)&VersionInformation[4] )\n  {\n    if ( (unsigned int)::hDlg <= *(_DWORD *)&VersionInformation[4] )\n      dword_45FD3E = (char *)::hdc + dword_45F468;\n    else\n      dword_45FD3E = (void *)::nIDDlgItem;\n  }\n  else\n  {\n    dword_45FD3E = (void *)dword_45E334;\n  }\n  CopyRect(&rcDst, &rcDst);\n  WindowLongA = GetWindowLongA(::hDlg, -16);\n  v215 = 2 * (_DWORD)::hdc + 3;\n  Size = dword_453338 + v215 * ((_DWORD)::hWnd + (_BYTE *)dword_454FD3 - (_BYTE *)::hDlg);\n  if ( *(_DWORD *)&VersionInformation[4] <= (unsigned int)::hdc )\n    memcpy(dword_45FD3E, FileName, c + ::y + ::nIDDlgItem);\n  else\n    memcpy(dword_45FD3E, (char *)dword_40EBD5 + (_DWORD)::hdc + (_DWORD)::hDlg + (unsigned int)::hWnd, Size);\n  v216 = 168;\n  if ( ::hdc == (HDC)((char *)::hDlg + (_DWORD)::hWnd) )\n    sub_405ED4((int)dword_45FD3E, Size, v216 + dword_453338);\n  X = GetDlgItemInt(::hDlg, ::y, 0, 1);\n  SetWindowPos(::hWnd, 0, X, Y, Y_4, cy, 0x14u);\n  if ( !::hDlg )\n    *(_DWORD *)((char *)dword_45FD3E + 1) = &hInstance;\n  v195 = 0;\n  v180 = 1;\n  v192 = v324;\n  v189 = hInstance;\n  v181 = 0;\n  v190 = 1;\n  v207 = 1;\n  v191 = 0;\n  v200 = 0;\n  memset(v201, 0, sizeof(v201));\n  v196 = 0;\n  v197 = 0;\n  v198 = 0;\n  v199 = 0;\n  v182 = 0;\n  v183 = 0;\n  v184 = 0;\n  v185 = 0;\n  v202 = 0;\n  v203 = 0;\n  v204 = 0;\n  v205 = 0;\n  ::nIDDlgItem = (unsigned __int8)::y;\n  v188 = 0;\n  v194 = 0;\n  Point.x = 0;\n  Point.y = 0;\n  v206.x = 0;\n  v206.y = 0;\n  sub_40C3DE(v187);\n  v325 = 6;\n  v40 = dword_451272;\n  sub_40A925(v187, &v40);\n  GetCursorPos(&Point);\n  hHandle = CreateEventA(0, 0, 0, 0);\n  for ( j = 0; j < v190 + v180 + 8; ++j )\n  {\n    v7 = sin((double)(int)cpt);\n    v181 = (unsigned __int64)(v7 / (double)(int)(::hdc + 19) * (double)v184\n                            - (double)(dword_45E334 / 16)\n                            + (double)(unsigned int)dword_458D85);\n    GetCursorPos(&v206);\n    v39 = dword_453507;\n    sub_40AF0E(v187, &v39);\n    v20 = (int **)sub_402965(v187, v21);\n    LOD70C(v325) = 7;\n    v22 = (unsigned __int16 *)sub_407133(v20);\n    LOD70C(v325) = 6;\n    v178 = *v22;\n    v177 = &v178;\n    v38 = (__int16)dword_454FD3;\n    sub_40AF0E(v187, &v38);\n    sub_40DD4A(v187);\n    if ( Point.x != v206.x || Point.y != v206.y )\n    {\n      v12 = (double)((unsigned __int16)dword_451272 - dword_453507 / 34);\n      v8 = sin((double)dword_453338);\n      ::nIDDlgItem = (int)(v12 - v8 * (double)(unsigned int)dword_45DA72 * (double)v195 - (double)v184);\n      Point = v206;\n      ++v188;\n    }\n    if ( dword_453338 * (unsigned __int8)((unsigned __int8)&savedregs + 4) > ::nIDDlgItem )\n      v181 += dword_453338;\n    else\n      v192 -= (unsigned __int16)((unsigned __int16)&savedregs - 3068);\n    if ( v188 == v180 )\n    {\n      v11 = ceil((double)v181);\n      v19 = (float)c;\n      v10 = cos(v19);\n      v184 = (int)((double)v184\n                 - ((double)(v180 + (unsigned __int8)::hdc - ::Y)\n                  - v11\n                  + (double)(unsigned __int16)::nIDDlgItem * v10\n                  - (double)dword_45F468));\n      ++v194;\n    }\n    if ( ::y * c )\n    {\n      v18 = (float)(int)::hdc;\n      v9 = cos(v18);\n      v181 = (unsigned __int64)((double)v181 - (v9 - (double)v192 - (double)dword_453507));\n    }\n    if ( v188 > v180 )\n      break;\n    memset(&v176, 0, sizeof(v176));\n    GetClientRect(::hDlg, &v176);\n    ClientToScreen(::hWnd, (LPF74FT)&v176);\n    if ( v194 >= v190 + 4 )\n    {\n      pwcsName = 0;\n      StgOpenStorage(&pwcsName, 0, 0x10002u, 0, 0, &ppstgOpen);\n      break;\n    }\n    WaitForSingleObject(hHandle, (DWORD)(::hdc + 750));\n  }\n  for ( k = 0; k < (int)::hdc + 57; ++k )\n  {\n    v170[1] = (IStorage *)::hDlg;\n    SendMessageA(::hDlg, 0x143u, 0, (LPABFA)lParam);\n    sub_40C3DE(v172);\n    LOD70C(v325) = 8;\n    v37 = dword_45E334;\n    sub_40164B(v172, &v37);\n    if ( v172[4] )\n      ::y = c + dword_451272;\n    else\n      v180 -= ::Y * (v202 / (dword_453507 + 78)) + (unsigned __int8)dword_453507;\n    v172[6] = (void *)sub_40275C(v172);\n    v36 = dword_451272;\n    sub_40164B(v172, &v36);\n    sub_405F3B(v172, &dword_45D5E3);\n    v35 = ::hDlg;\n    sub_40164B(v172, &v35);\n    if ( !dword_4535E2 )\n      v192 -= c;\n    LOD70C(v325) = 9;\n    sub_40C222((int)v172);\n    LOD70C(v325) = 6;\n    sub_40F2FF(v172);\n  }\n  v170[0] = 0;\n  if ( cpt && ::hDlg )\n    StgCreateDocfile(0, 0x10002u, 0, v170);\n  v325 = 10;\n  sub_409608((int)v187);\n  v325 = -1;\n  sub_40F2FF(v187);\n  if ( ::hdc )\n  {\n    v169 = ::hDlg;\n    v162 = ::Y;\n    v168 = 0;\n    v163 = 60;\n    v166 = 0;\n    v165 = ::hdc;\n    v164 = dword_45752E + 1;\n    v167 = ::y + ::nIDDlgItem;\n    v161 = c - ::Y;\n    hbm = (HBI40A5)LoadImageA(0, FileName, 0, 0, 0, 0x2010u);\n    hdcDest = CreateDCA(\"DI8658Y\", 0, 0, 0);\n    memset(v153, 0, sizeof(v153));\n    lpbmi = (LPBI40A5INFO)v153;\n    *(_DWORD *)v153 = 1064;\n    GetDIBits(hdcDest, hbm, 0, 0, 0, (LPBI40A5INFO)v153, 0);\n    hdcSrc = CreateCompatibleDC(hdcDest);\n    h = CreateCompatibleBitmap(hdcDest, lpbmi->bmiHeader.biWidth, lpbmi->bmiHeader.biHeight);\n    v159 = SelectObject(hdcSrc, h);\n    DrawStateA(hdcSrc, 0, 0, (LPABFA)hbm, 0, 0, 0, lpbmi->bmiHeader.biWidth, lpbmi->bmiHeader.biHeight, 4u);\n    ftn.BlendOp = 0;\n    ftn.BlendFlags = 0;\n    ftn.SourceConstantAlpha = 0x80;\n    ftn.AlphaFormat = 1;\n    AlphaBlend(\n      hdcDest,\n      100,\n      100,\n      lpbmi->bmiHeader.biWidth,\n      lpbmi->bmiHeader.biHeight,\n      hdcSrc,\n      0,\n      0,\n      lpbmi->bmiHeader.biWidth,\n      lpbmi->bmiHeader.biHeight,\n      ftn);\n    SelectObject(hdcSrc, v159);\n    DeleteObject(h);\n    DeleteDC(hdcSrc);\n    DeleteDC(hdcDest);\n    DeleteObject(hbm);\n    DlgItem = GetDlgItem(::hDlg, ::nIDDlgItem);\n    v152 = (int *)&v149;\n    v151 = ::nIDDlgItem;\n    cWidth = 4;\n    if ( ::nIDDlgItem )\n      hDC = GetDC(0);\n    else\n      hDC = GetDC(DlgItem);\n    if ( !::hDlg )\n      hDC = (HDC)(dword_45752E + 1);\n    Pen = CreatePen(0, cWidth, 0);\n    v147 = SelectObject(hDC, Pen);\n    hDC_4 = SetROP2(hDC, 6);\n    if ( ::hdc )\n    {\n      v152[1] = v152[1] + cWidth - 2;\n      v152[3] = v152[3] - cWidth + 2;\n      *v152 = *v152 + cWidth - 2;\n      v152[2] = v152[2] - cWidth + 2;\n      MoveToEx(hDC, *v152, v152[1], 0);\n      LineTo(hDC, v152[2] - cWidth, v152[1]);\n      MoveToEx(hDC, v152[2], v152[1], 0);\n      LineTo(hDC, v152[2], v152[3] - cWidth);\n      MoveToEx(hDC, v152[2], v152[3], 0);\n      LineTo(hDC, cWidth + *v152, v152[3]);\n      MoveToEx(hDC, *v152, v152[3], 0);\n      LineTo(hDC, *v152, cWidth + v152[1]);\n    }\n    else\n    {\n      Rectangle(hDC, *v152, v152[1], v152[2], v152[3]);\n    }\n    SelectObject(hDC, v147);\n    SetROP2(hDC, hDC_4);\n    ReleaseDC(DlgItem, hDC);\n    if ( ::hdc )\n    {\n      v134 = (HDC)(dword_45752E + 1);\n      v135 = (HDC)(dword_45752E + 2);\n      pbmi.bmiHeader.biSize = 40;\n      pbmi.bmiHeader.biWidth = wDest;\n      pbmi.bmiHeader.biHeight = hDest;\n      pbmi.bmiHeader.biPlanes = 1;\n      pbmi.bmiHeader.biBitCount = 32;\n      memset(&pbmi.bmiHeader.biCompression, 0, 24);\n      ho = CreateDIBSection((HDC)(dword_45752E + 2), &pbmi, 0, &ppvBits, 0, 0);\n      v127 = CreateDIBSection(v134, &pbmi, 0, &v126, 0, 0);\n      CompatibleDC = CreateCompatibleDC(0);\n      v130 = SelectObject(CompatibleDC, ho);\n      if ( !StretchBlt(CompatibleDC, 0, 0, wDest, hDest, v135, xSrc, ySrc, wSrc, hSrc, 0xCC7205u) )\n        ::nIDDlgItem = 0;\n      SelectObject(CompatibleDC, v127);\n      if ( !StretchBlt(CompatibleDC, 0, 0, wDest, hDest, v134, x, y, wDest, hDest, 0xCC7205u) )\n        ::y = 0;\n      SelectObject(CompatibleDC, v130);\n      DeleteDC(CompatibleDC);\n      pbmi.bmiColors[0] = 0;\n      while ( *(_DWORD *)pbmi.bmiColors < hDest )\n      {\n        v121 = (unsigned __int8 *)v126 + 4 * wDest * *(_DWORD *)pbmi.bmiColors;\n        v124 = (unsigned __int8 *)ppvBits + 4 * wDest * *(_DWORD *)pbmi.bmiColors;\n        for ( m = 0; m < wDest; ++m )\n        {\n          v123 = v124[3];\n          if ( v123 )\n          {\n            v123 = v142 * (100 * v123 / 255) / 100;\n            v122 = -1 - v123;\n            *v124 = (unsigned __int16)(v123 * *v124 + (unsigned __int8)(-1 - v123) * *v121) >> 8;\n            v124[1] = (unsigned __int16)(v123 * v124[1] + v122 * v121[1]) >> 8;\n            v124[2] = (unsigned __int16)(v123 * v124[2] + v122 * v121[2]) >> 8;\n          }\n          else\n          {\n            *v124 = *v121;\n            v124[1] = v121[1];\n            v124[2] = v121[2];\n          }\n          v124 += 4;\n          v121 += 4;\n        }\n        ++*(_DWORD *)pbmi.bmiColors;\n      }\n      CompatibleDC = CreateCompatibleDC(0);\n      v130 = SelectObject(CompatibleDC, ho);\n      if ( !BitBlt(v134, x, y, wDest, hDest, CompatibleDC, 0, 0, 0xCC7205u) )\n        ::nIDDlgItem = 0;\n      DeleteDC(CompatibleDC);\n      DeleteObject(ho);\n      DeleteObject(v127);\n    }\n  }\n  v120 = ::hDlg;\n  v112 = ::Y;\n  v119 = 0;\n  v113 = 60;\n  v117 = 0;\n  v116 = ::hdc;\n  v114 = dword_45752E + 1;\n  v118 = ::y + ::nIDDlgItem;\n  v111 = c - ::Y;\n  hWndParent = ::hDlg;\n  Msg = (UINT)::hdc;\n  wParam = ::nIDDlgItem;\n  v110 = ::y;\n  v104 = hInstance;\n  if ( ::hdc == (HDC)1 )\n  {\n    dword_45818A = CreateWindowExA(0, \"edit\", 0, 0x50804CBDu, c, ::Y, ::nIDDlgItem, ::y, hWndParent, 0, v104, 0);\n    dword_4561EA = (int)CreateWindowExA(\n                          0,\n                          \"button\",\n                          \"Load\",\n                          0x500AB700u,\n                          c,\n                          ::Y,\n                          ::nIDDlgItem,\n                          ::y,\n                          hWndParent,\n                          0,\n                          v104,\n                          0);\n    return 0;\n  }\n  if ( ::hdc == (HDC)2 )\n  {\n    PostQuitMessage(0);\n    return 0;\n  }\n  if ( ::hdc == (HDC)15 )\n  {\n    v101 = BeginPaint(hWndParent, &Paint);\n    GetClientRect(hWndParent, &v106);\n    DrawTextA(v101, FileName, -1, &v106, 1u);\n    DrawTextA(v101, chText, 60, &v106, 0x24u);\n    TextOutA(v101, ::nIDDlgItem, ::y, ::String, c);\n    EndPaint(hWndParent, &Paint);\n    return 0;\n  }\n  if ( ::hdc == (HDC)273 )\n  {\n    if ( wParam == 111 )\n    {\n      GetWindowTextA(dword_45818A, String, 60);\n      LibraryA = LoadLibraryA(String);\n      GetClientRect(hWndParent, &v106);\n      SendMessageA(hWndParent, 0xFu, 0, 0);\n    }\n    return 0;\n  }\n  else\n  {\n    DefWindowProcA(hWndParent, Msg, wParam, v110);\n    hDlg = GetDlgItem(::hDlg, ::nIDDlgItem);\n    v99 = SendDlgItemMessageA(::hDlg, c, 0x190u, 0, 0);\n    nIDDlgItem = (int)::hdc;\n    v94 = (LPABFA)malloc(4 * dword_453338 + 64);\n    v97 = SendDlgItemMessageA(hDlg, nIDDlgItem, 0x191u, v99, v94);\n    v98 = v97 << 8;\n    Src = malloc((v97 << 8) + 64);\n    memset(Src, 0, v98 + 64);\n    v96 = (LPABFA)Src;\n    for ( n = 0; n < v97; ++n )\n    {\n      v91 = SendDlgItemMessageA(hDlg, nIDDlgItem, 0x18Au, *(_DWORD *)(v94 + 4 * n), 0);\n      if ( v91 + 2 < v98 )\n      {\n        v91 = SendDlgItemMessageA(hDlg, nIDDlgItem, 0x189u, *(_DWORD *)(v94 + 4 * n), v96);\n        if ( v91 == -1 )\n          break;\n        *(_BYTE *)(v91 + v96) = 13;\n        *(_BYTE *)(v91 + v96 + 1) = 10;\n        v96 += v91 + 2;\n        v98 -= v91 + 2;\n      }\n    }\n    *(_BYTE *)v96++ = 0;\n    if ( ::hdc )\n    {\n      dwBytes = v96 - (_DWORD)Src;\n      hMem = GlobalAlloc(0x42u, v96 - (_DWORD)Src);\n      v89 = GlobalLock(hMem);\n      memcpy(v89, Src, dwBytes);\n      GlobalUnlock(hMem);\n      OpenClipboard(hDlg);\n      EmptyClipboard();\n      SetClipboardData(0xDu, hMem);\n      SetClipboardData(1u, hMem);\n      CloseClipboard();\n      free((void *)v94);\n      free(Src);\n    }\n    cchWideChar = MultiByteToWideChar(0, 0, MultiByteStr, -1, 0, 0);\n    lpWideCharStr = SysAllocStringLen(0, cchWideChar - 1);\n    MultiByteToWideChar(0, 0, MultiByteStr, -1, lpWideCharStr, cchWideChar);\n    if ( (int)v85 >= 0 )\n      v85 = (HDC)::nIDDlgItem;\n    SysFreeString(lpWideCharStr);\n    if ( (int)v85 < 0 )\n      v85 = ::hdc;\n    v82 = ::hdc;\n    v83 = hInstance;\n    hResInfo = 0;\n    v76 = 0i64;\n    hResData = 0;\n    hGlobal = 0;\n    if ( ::hdc )\n    {\n      hResInfo = FindResourceA(v83, Name, Type);\n      HI35BBD(v76) = SizeofResource(v83, hResInfo);\n      hResData = LoadResource(v83, hResInfo);\n      LO72B9D(v76) = LockResource(hResData);\n      hGlobal = GlobalAlloc(0, HI35BBD(v76));\n      memcpy(hGlobal, (const void *)v76, HI35BBD(v76));\n      v73 = CreateStreamOnHGlobal(hGlobal, 1, &ppstm);\n      FreeResource(hResData);\n    }\n    else\n    {\n      v73 = SHCreateStreamOnFileA(Name, 0x10u, &ppstm);\n    }\n    v73 = OleLoadPicture(ppstm, 0, 1, &riid, &lpvObj);\n    v74 = 0;\n    if ( ::hdc )\n    {\n      (*(void (__stdcall **)(LPCDAE, HA4C47 *))(*(_DWORD *)lpvObj + 12))(lpvObj, &v74);\n      if ( !GetObjectA(v74, 24, pv) )\n        return 0;\n      v67 = GetDC(0);\n      v65 = CreateCompatibleDC(v67);\n      v74 = SelectObject(v65, v74);\n      v68 = CreateCompatibleDC(v67);\n      CompatibleBitmap = CreateCompatibleBitmap(v67, v70, v71);\n      CompatibleBitmap = SelectObject(v68, CompatibleBitmap);\n      BitBlt(v68, 0, 0, v70, v71, v65, 0, 0, 0xCC7205u);\n      SelectObject(v65, v74);\n      CompatibleBitmap = SelectObject(v68, CompatibleBitmap);\n      DeleteDC(v65);\n      DeleteDC(v68);\n      ReleaseDC(0, v67);\n      if ( hGlobal )\n        GlobalFree(hGlobal);\n      (*(void (__stdcall **)(LPCDAE))(*(_DWORD *)lpvObj + 8))(lpvObj);\n    }\n    v60 = 0;\n    v63 = 1;\n    v58 = 1;\n    lpGeoEnumProc = 0;\n    hDevice = CreateFileA(FileName, 0, 5u, 0, 3u, 0, 0);\n    if ( hDevice == (HA4C47)-1 )\n      v60 = v63 + dword_453338 * (_DWORD)lpGeoEnumProc;\n    else\n      v60 = (int)::hWnd + v58 + ::Y;\n    if ( DeviceIoControl(hDevice, 0x900C0u, 0, 0, OutBuffer, 0x40u, &BytesReturned, 0) || !lpGeoEnumProc )\n    {\n      if ( v60 )\n        lpGeoEnumProc = (GEO_ENA42DOC)dword_45FD3E;\n      else\n        memcpy(&rguid, OutBuffer, sizeof(rguid));\n      StringFromGUID2(&rguid, sz, 39);\n      EnumSystemGeoID(0x10u, 0, lpGeoEnumProc);\n      printf(\"\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440: %ws\\n\", sz);\n    }\n    CloseHandle(hDevice);\n    return 0;\n  }\n}\n// 40EBD5: using guessed type int dword_40EBD5[512];\n// 42A951: using guessed type int __stdcall DWriteCreateFactory(_DWORD, _DWORD, _DWORD);\n// 422831: using guessed type __int16 word_422831;\n// 428725: using guessed type wchar_t aVerdana[8];\n// 45DA72: using guessed type int dword_45DA72;\n// 451272: using guessed type int dword_451272;\n// 45F468: using guessed type int dword_45F468;\n// 453507: using guessed type int dword_453507;\n// 45E334: using guessed type int dword_45E334;\n// 458D85: using guessed type int dword_458D85;\n// 45D5E3: using guessed type int dword_45D5E3;\n// 4535E2: using guessed type int dword_4535E2;\n// 45752E: using guessed type int dword_45752E;\n// 453338: using guessed type int dword_453338;\n// 4561EA: using guessed type int dword_4561EA;\n// 40E109: using guessed type bool var_368[4];\n// 40E109: using guessed type int var_2590[3];\n// 40E109: using guessed type _DWORD var_8AC[4];\n// 40E109: using guessed type char var_8C0[4];\n// 40E109: using guessed type int var_2618[3];\n// 40E109: using guessed type LPABFA lParam[5];\n// 40E109: using guessed type int var_2568;\n// 40E109: using guessed type CHAR chText[180];\n// 40E109: using guessed type CHAR Type[264];\n// 40E109: using guessed type char pv[4];\n\n"
    }
]