[
    {
        "Function": "sub_40D1C8",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "57.14%",
        "Function Body": "\nunsigned int __stdcall sub_40D1C8(int a1, int a2, char a3)\n{\n  return (0xFFF29CFF >> (32 - a3)) & ((unsigned int)((*(unsigned __int8 *)(a2 / 8 + 1 + a1) << 8) | *(unsigned __int8 *)(a2 / 8 + a1) | (*(unsigned __int16 *)(a2 / 8 + 1 + a1 + 1) << 16)) >> (a2 & 7));\n}\n\n"
    },
    {
        "Function": "sub_41AB0F",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "50.00%",
        "Function Body": "\nint __thiscall sub_41AB0F(_DWORD *this)\n{\n  unsigned __int8 *v1; // edx\n\n  v1 = (unsigned __int8 *)(this[3] + *this);\n  return (v1[4] >> (8 - this[1])) | ((v1[3] | ((v1[2] | ((v1[1] | (*v1 << 8)) << 8)) << 8)) << this[1]);\n}\n\n"
    },
    {
        "Function": "sub_402717",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "42.86%",
        "Function Body": "\nint __thiscall sub_402717(_DWORD *this)\n{\n  return (unsigned __int16)((unsigned int)(*(unsigned __int8 *)(this[3] + *this + 2) | ((*(unsigned __int8 *)(this[3] + *this + 1) | (*(unsigned __int8 *)(this[3] + *this) << 8)) << 8)) >> (8 - *((_BYTE *)this + 4)));\n}\n\n"
    },
    {
        "Function": "sub_4063A0",
        "Total XOR and shift operations": 15,
        "XOR operations": 12,
        "Shift operations": 3,
        "Operation percentage": "31.25%",
        "Function Body": "\nunsigned int __stdcall sub_4063A0(unsigned int a1, _DWORD *a2, unsigned int a3)\n{\n  unsigned int result; // eax\n  unsigned int v6; // eax\n  int v7; // edi\n  bool v8; // zf\n  unsigned int v9; // [esp+10h] [ebp+8h]\n\n  result = a1;\n  while ( a3 && ((unsigned __int8)a2 & 7) != 0 )\n  {\n    result = dword_43D766[(unsigned __int8)result ^ *(unsigned __int8 *)a2] ^ (result >> 8);\n    --a3;\n    a2 = (_DWORD *)((char *)a2 + 1);\n  }\n  if ( a3 >= 8 )\n  {\n    v9 = a3 >> 3;\n    do\n    {\n      v6 = *a2 ^ result;\n      v7 = dword_4326FD[(unsigned __int8)v6] ^ dword_435ED8[(unsigned __int8)a2[1]] ^ dword_437891[BYTE1(v6)] ^ dword_4348D2[BYTE2(v6)] ^ dword_43185A[HIE67E(v6)] ^ dword_43886D[(unsigned __int8)BYTE1(a2[1])] ^ dword_43D766[HIE67E(a2[1])] ^ dword_432FA1[(unsigned __int8)BYTE2(a2[1])];\n      a3 -= 8;\n      a2 += 2;\n      v8 = v9-- == 1;\n      result = v7;\n    }\n    while ( !v8 );\n  }\n  while ( a3 )\n  {\n    result = dword_43D766[(unsigned __int8)result ^ *(unsigned __int8 *)a2] ^ (result >> 8);\n    --a3;\n    a2 = (_DWORD *)((char *)a2 + 1);\n  }\n  return result;\n}\n// 43D766: using guessed type int dword_43D766[256];\n// 432FA1: using guessed type int dword_432FA1[256];\n// 43886D: using guessed type int dword_43886D[256];\n// 435ED8: using guessed type int dword_435ED8[256];\n// 43185A: using guessed type int dword_43185A[256];\n// 4348D2: using guessed type int dword_4348D2[256];\n// 437891: using guessed type int dword_437891[256];\n// 4326FD: using guessed type int dword_4326FD[256];\n\n"
    },
    {
        "Function": "sub_40138D",
        "Total XOR and shift operations": 4,
        "XOR operations": 4,
        "Shift operations": 0,
        "Operation percentage": "28.57%",
        "Function Body": "\nint __stdcall sub_40138D(int *a1, _DWORD *a2, _DWORD *a3)\n{\n  int result; // eax\n\n  *a1 = *a3 ^ *a2;\n  a1[1] = a3[1] ^ a2[1];\n  a1[2] = a3[2] ^ a2[2];\n  result = a3[3] ^ a2[3];\n  a1[3] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_41741C",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "25.00%",
        "Function Body": "\nint __thiscall sub_41741C(_DWORD *this, unsigned int a2)\n{\n  int v3[9]; // [esp+0h] [ebp-24h] BYREF\n\n  v3[5] = 2 * (a2 & 0x1F);\n  v3[4] = (a2 >> 5) & 0x3F;\n  v3[6] = 0;\n  v3[3] = (unsigned __int16)a2 >> 11;\n  v3[2] = HI8EA5(a2) & 0x1F;\n  v3[0] = (a2 >> 25) + 1980;\n  v3[1] = (a2 >> 21) & 0xF;\n  return sub_41484D(this, (int)v3);\n}\n\n"
    },
    {
        "Function": "sub_40DE04",
        "Total XOR and shift operations": 27,
        "XOR operations": 24,
        "Shift operations": 3,
        "Operation percentage": "22.88%",
        "Function Body": "\n__m128i *__thiscall sub_40DE04(_DWORD *this, const __m128i *a2, __m128i *a3, __m128i *a4)\n{\n  __m128i *result; // eax\n  unsigned int v6; // edi\n  __int32 *v7; // edi\n  __int32 *v8; // ebx\n  int v9; // eax\n  bool v10; // zf\n  int Src[4]; // [esp+4h] [ebp-34h] BYREF\n  int v12; // [esp+14h] [ebp-24h] BYREF\n  int v13; // [esp+18h] [ebp-20h]\n  int v14; // [esp+1Ch] [ebp-1Ch]\n  int v15; // [esp+20h] [ebp-18h]\n  int v16; // [esp+24h] [ebp-14h] BYREF\n  unsigned __int8 v17; // [esp+28h] [ebp-10h]\n  unsigned __int8 v18; // [esp+29h] [ebp-Fh]\n  unsigned __int8 v19; // [esp+2Ah] [ebp-Eh]\n  unsigned __int8 v20; // [esp+2Bh] [ebp-Dh]\n  unsigned __int8 v21; // [esp+2Ch] [ebp-Ch]\n  unsigned __int8 v22; // [esp+2Dh] [ebp-Bh]\n  unsigned __int8 v23; // [esp+2Eh] [ebp-Ah]\n  unsigned __int8 v24; // [esp+2Fh] [ebp-9h]\n  unsigned __int8 v25; // [esp+30h] [ebp-8h]\n  unsigned __int8 v26; // [esp+31h] [ebp-7h]\n  unsigned __int8 v27; // [esp+32h] [ebp-6h]\n  unsigned __int8 v28; // [esp+33h] [ebp-5h]\n  void *v29; // [esp+34h] [ebp-4h]\n  int v30; // [esp+40h] [ebp+8h]\n  unsigned int v31; // [esp+44h] [ebp+Ch]\n  _DWORD *v32; // [esp+48h] [ebp+10h]\n\n  result = a3;\n  if ( a3 )\n  {\n    v6 = (unsigned int)a3 >> 4;\n    if ( *(_BYTE *)this )\n    {\n      return sub_405A13((int)this, a2, (unsigned int)a3 >> 4, a4);\n    }\n    else\n    {\n      v29 = this + 2;\n      memcpy(Src, this + 2, sizeof(Src));\n      v31 = (unsigned int)a3 >> 4;\n      if ( v6 )\n      {\n        v7 = (__int32 *)a2;\n        v8 = (__int32 *)a4;\n        do\n        {\n          sub_40138D(&v16, v7, &this[4 * this[1] + 6]);\n          v12 = dword_4317F4[v20] ^ dword_43CB14[v23] ^ dword_436832[v26] ^ dword_430D32[(unsigned __int8)v16];\n          v13 = dword_4317F4[v24] ^ dword_43CB14[v27] ^ dword_436832[BYTE1(v16)] ^ dword_430D32[v17];\n          v14 = dword_4317F4[v28] ^ dword_43CB14[BYTE2(v16)] ^ dword_436832[v18] ^ dword_430D32[v21];\n          v15 = dword_4317F4[HIE67E(v16)] ^ dword_43CB14[v19] ^ dword_436832[v22] ^ dword_430D32[v25];\n          v9 = this[1] - 1;\n          if ( v9 > 1 )\n          {\n            v32 = &this[4 * v9 + 6];\n            v30 = this[1] - 2;\n            do\n            {\n              sub_40138D(&v16, &v12, v32);\n              v12 = dword_4317F4[v20] ^ dword_43CB14[v23] ^ dword_436832[v26] ^ dword_430D32[(unsigned __int8)v16];\n              v13 = dword_4317F4[v24] ^ dword_43CB14[v27] ^ dword_436832[BYTE1(v16)] ^ dword_430D32[v17];\n              v32 -= 4;\n              v14 = dword_4317F4[v28] ^ dword_43CB14[BYTE2(v16)] ^ dword_436832[v18] ^ dword_430D32[v21];\n              v10 = v30-- == 1;\n              v15 = dword_4317F4[HIE67E(v16)] ^ dword_43CB14[v19] ^ dword_436832[v22] ^ dword_430D32[v25];\n            }\n            while ( !v10 );\n          }\n          sub_40138D(&v16, &v12, this + 10);\n          LOD693(v12) = byte_43F7D3[(unsigned __int8)v16];\n          BYTE1(v12) = byte_43F7D3[v26];\n          BYTE2(v12) = byte_43F7D3[v23];\n          HIE67E(v12) = byte_43F7D3[v20];\n          LOD693(v13) = byte_43F7D3[v17];\n          BYTE1(v13) = byte_43F7D3[BYTE1(v16)];\n          BYTE2(v13) = byte_43F7D3[v27];\n          HIE67E(v13) = byte_43F7D3[v24];\n          LOD693(v14) = byte_43F7D3[v21];\n          BYTE1(v14) = byte_43F7D3[v18];\n          BYTE2(v14) = byte_43F7D3[BYTE2(v16)];\n          HIE67E(v14) = byte_43F7D3[v28];\n          LOD693(v15) = byte_43F7D3[v25];\n          BYTE1(v15) = byte_43F7D3[v22];\n          BYTE2(v15) = byte_43F7D3[v19];\n          HIE67E(v15) = byte_43F7D3[HIE67E(v16)];\n          sub_40138D(&v12, &v12, this + 6);\n          if ( *((_BYTE *)this + 1) )\n            sub_40138D(&v12, &v12, Src);\n          Src[0] = *v7;\n          Src[1] = v7[1];\n          Src[2] = v7[2];\n          Src[3] = v7[3];\n          *v8 = v12;\n          v8[1] = v13;\n          v8[2] = v14;\n          v8[3] = v15;\n          v7 += 4;\n          v8 += 4;\n          --v31;\n        }\n        while ( v31 );\n      }\n      return (__m128i *)memcpy(v29, Src, 0x10u);\n    }\n  }\n  return result;\n}\n// 4317F4: using guessed type int dword_4317F4[];\n// 43CB14: using guessed type int dword_43CB14[];\n// 436832: using guessed type int dword_436832[];\n// 430D32: using guessed type int dword_430D32[];\n\n"
    },
    {
        "Function": "sub_40D621",
        "Total XOR and shift operations": 38,
        "XOR operations": 38,
        "Shift operations": 0,
        "Operation percentage": "22.09%",
        "Function Body": "\nint *__userpurge sub_40D621@<eax>(const void *a1@<eax>, int a2)\n{\n  int *v3; // eax\n  int v4; // ecx\n  int v5; // esi\n  _DWORD *v6; // eax\n  int v7; // edx\n  int v8; // ecx\n  unsigned int v9; // esi\n  unsigned int v10; // eax\n  int v11; // ebx\n  int v12; // edi\n  int v13; // edx\n  int v14; // ecx\n  int v15; // ebx\n  int v16; // edx\n  int v17; // esi\n  int v18; // ecx\n  int v19; // edx\n  int v20; // edx\n  int v21; // esi\n  int v22; // edx\n  int v23; // esi\n  int v24; // edx\n  int v25; // edx\n  int v26; // edi\n  int v27; // edx\n  int v28; // esi\n  int v29; // edx\n  int v30; // edx\n  int v31; // edi\n  int v32; // esi\n  int v33; // edx\n  int v34; // esi\n  int v35; // edi\n  int v36; // edx\n  int v37; // esi\n  int v38; // edx\n  int v39; // edi\n  int v40; // edx\n  int v41; // ecx\n  int v42; // edx\n  unsigned int i; // ecx\n  int *result; // eax\n  int v45; // edx\n  int v46[16]; // [esp+Ch] [ebp-80h] BYREF\n  int v47[8]; // [esp+4Ch] [ebp-40h] BYREF\n  int v48; // [esp+6Ch] [ebp-20h]\n  int v49; // [esp+70h] [ebp-1Ch]\n  int v50; // [esp+74h] [ebp-18h]\n  int v51; // [esp+78h] [ebp-14h]\n  int v52; // [esp+7Ch] [ebp-10h]\n  unsigned int v53; // [esp+80h] [ebp-Ch]\n  int v54; // [esp+84h] [ebp-8h]\n  int v55; // [esp+88h] [ebp-4h]\n\n  v3 = *(int **)(a2 + 248);\n  qmemcpy(v46, a1, sizeof(v46));\n  qmemcpy(v47, *(const void **)(a2 + 244), sizeof(v47));\n  v4 = *v3;\n  v5 = v3[1];\n  v6 = *(_DWORD **)(a2 + 252);\n  v7 = *v6 ^ 0x1F9D5FAB;\n  v8 = v4 ^ 0x5143CF7F;\n  v9 = v5 ^ 0x9B52DF8C;\n  v55 = v6[1] ^ 0x5BAEC619;\n  v48 = 1779163703;\n  v49 = -11B1E73019;\n  v50 = 10BD6F4242;\n  v51 = -155AB26534;\n  v54 = v7;\n  v10 = 0;\n  while ( 1 )\n  {\n    v11 = v47[4] + v46[(unsigned __int8)byte_42F81F[v10]] + v47[0];\n    v12 = v46[(unsigned __int8)byte_42DD5D[v10]];\n    v13 = __ROR4__(v8 ^ v11, 16);\n    v48 += v13;\n    v14 = __ROR4__(v48 ^ v47[4], 12);\n    v47[0] = v14 + v12 + v11;\n    v15 = __ROR4__(v13 ^ v47[0], 8);\n    v47[1] += v47[5] + v46[(unsigned __int8)byte_42D55F[v10]];\n    v48 += v15;\n    v16 = v9 ^ v47[1];\n    v17 = v46[(unsigned __int8)byte_42A130[v10]];\n    v18 = __ROR4__(v48 ^ v14, 7);\n    v19 = __ROR4__(v16, 16);\n    v49 += v19;\n    v53 = v19;\n    v20 = __ROR4__(v49 ^ v47[5], 12);\n    v47[1] += v20 + v17;\n    v21 = __ROR4__(v53 ^ v47[1], 8);\n    v49 += v21;\n    v53 = v21;\n    v47[5] = __ROR4__(v49 ^ v20, 7);\n    v47[2] += v47[6] + v46[(unsigned __int8)byte_42C70F[v10]];\n    v22 = __ROR4__(v54 ^ v47[2], 16);\n    v50 += v22;\n    v54 = v22;\n    v23 = __ROR4__(v50 ^ v47[6], 12);\n    v47[2] += v23 + v46[(unsigned __int8)byte_42B115[v10]];\n    v24 = __ROR4__(v22 ^ v47[2], 8);\n    v50 += v24;\n    v54 = v24;\n    v47[3] += v47[7] + v46[(unsigned __int8)byte_4246D8[v10]];\n    v25 = __ROR4__(v55 ^ v47[3], 16);\n    v51 += v25;\n    v47[6] = __ROR4__(v50 ^ v23, 7);\n    v55 = v25;\n    v26 = __ROR4__(v51 ^ v47[7], 12);\n    v47[3] += v26 + v46[(unsigned __int8)byte_42BCE4[v10]];\n    v27 = __ROR4__(v25 ^ v47[3], 8);\n    v51 += v27;\n    v55 = v27;\n    v47[0] += v47[5] + v46[(unsigned __int8)byte_42E0F9[v10]];\n    v28 = __ROR4__(v27 ^ v47[0], 16);\n    v50 += v28;\n    v47[7] = __ROR4__(v51 ^ v26, 7);\n    v29 = __ROR4__(v50 ^ v47[5], 12);\n    v47[0] += v29 + v46[(unsigned __int8)byte_426B6D[v10]];\n    v47[5] = v29;\n    v30 = __ROR4__(v28 ^ v47[0], 8);\n    v50 += v30;\n    v55 = v30;\n    v31 = v46[(unsigned __int8)byte_42DF21[v10]];\n    v47[5] = __ROR4__(v50 ^ v47[5], 7);\n    v47[1] += v47[6] + v46[(unsigned __int8)byte_424700[v10]];\n    v32 = __ROR4__(v15 ^ v47[1], 16);\n    v51 += v32;\n    v33 = __ROR4__(v51 ^ v47[6], 12);\n    v47[1] += v33 + v31;\n    v34 = __ROR4__(v32 ^ v47[1], 8);\n    v51 += v34;\n    v35 = v46[(unsigned __int8)byte_42DE2F[v10]];\n    v47[6] = __ROR4__(v51 ^ v33, 7);\n    v36 = (unsigned __int8)byte_421EB8[v10];\n    v52 = v34;\n    v47[2] += v47[7] + v46[v36];\n    v37 = __ROR4__(v53 ^ v47[2], 16);\n    v48 += v37;\n    v38 = __ROR4__(v48 ^ v47[7], 12);\n    v47[2] += v38 + v35;\n    v9 = __ROR4__(v37 ^ v47[2], 8);\n    v48 += v9;\n    v39 = v46[(unsigned __int8)byte_4204C1[v10]];\n    v47[7] = __ROR4__(v48 ^ v38, 7);\n    v47[3] += v18 + v46[(unsigned __int8)byte_428634[v10]];\n    v10 += 16;\n    v40 = __ROR4__(v54 ^ v47[3], 16);\n    v49 += v40;\n    v53 = v9;\n    v41 = __ROR4__(v49 ^ v18, 12);\n    v47[3] += v41 + v39;\n    v42 = __ROR4__(v40 ^ v47[3], 8);\n    v49 += v42;\n    v54 = v42;\n    v47[4] = __ROR4__(v49 ^ v41, 7);\n    if ( v10 > 0x90 )\n      break;\n    v8 = v52;\n  }\n  for ( i = 0; i < 8; *result = v46[i + 15] ^ v45 )\n  {\n    result = (int *)(i * 4 + *(_DWORD *)(a2 + 244));\n    v45 = *result ^ *(int *)((char *)&v48 + i * 4);\n    ++i;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40E6E9",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "19.23%",
        "Function Body": "\nint __stdcall sub_40E6E9(int a1, int a2, int a3, char a4)\n{\n  int result; // eax\n  unsigned int v5; // edi\n  int v6; // esi\n  unsigned int v7; // edx\n  unsigned int v8; // [esp+14h] [ebp+Ch]\n\n  result = a1;\n  v8 = a2 << (a3 & 7);\n  v5 = 0;\n  v6 = a1 + a3 / 8;\n  v7 = ~(0xFFF29CFF >> (32 - a4) << (a3 & 7));\n  do\n  {\n    LOD693(result) = v8 | v7 & *(_BYTE *)(v6 + v5);\n    v8 >>= 8;\n    v7 = (v7 >> 8) | 0xFFC1C000;\n    *(_BYTE *)(v6 + v5++) = result;\n  }\n  while ( v5 < 4 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_401924",
        "Total XOR and shift operations": 4,
        "XOR operations": 3,
        "Shift operations": 1,
        "Operation percentage": "19.05%",
        "Function Body": "\nint __userpurge sub_401924@<eax>(void *a1@<ecx>, int a2@<eax>, int a3)\n{\n  int i; // eax\n  int result; // eax\n\n  if ( dword_44C701 >= 2 )\n    sub_40C86A();\n  sub_40139A(a1);\n  for ( i = 0; i < 8; ++i )\n    *(_DWORD *)(i * 4 + *((_DWORD *)a1 + 61)) = SHC3C1_Constants_42C0C9[i];\n  **((_DWORD **)a1 + 61) ^= 0x20FE7B0u;\n  result = *((_DWORD *)a1 + 61);\n  *(_DWORD *)(result + 8) ^= a3;\n  *(_DWORD *)(*((_DWORD *)a1 + 61) + 12) ^= (a2 | 0x2000) << 16;\n  return result;\n}\n// 42C0C9: using guessed type int SHC3C1_Constants_42C0C9[];\n// 44C701: using guessed type int dword_44C701;\n\n"
    },
    {
        "Function": "sub_4085C6",
        "Total XOR and shift operations": 23,
        "XOR operations": 21,
        "Shift operations": 2,
        "Operation percentage": "18.85%",
        "Function Body": "\nint sub_4085C6()\n{\n  int v0; // ecx\n  int v1; // eax\n  unsigned int i; // ecx\n  int v3; // ebx\n  __int16 v4; // ax\n  __int16 v5; // ax\n  unsigned __int8 v6; // cl\n  int result; // eax\n  unsigned __int8 *v8; // edx\n  char v9; // dl\n  char v10; // cl\n  unsigned __int8 v11; // bl\n  char v12; // dl\n  int v13; // ecx\n  char v14; // dl\n  char v15; // dl\n  char v16; // dl\n  bool v17; // cc\n  char v18[255]; // [esp+Ch] [ebp-304h]\n  char v19[513]; // [esp+10Bh] [ebp-205h]\n  int j; // [esp+30Ch] [ebp-4h]\n\n  v0 = 0;\n  v1 = 1;\n  do\n  {\n    v18[v0] = v1;\n    v19[v0] = v1;\n    v19[v1 + 257] = v0++;\n    v1 ^= (2 * v1) ^ ((char)(v1 & 0x80) != 0 ? 0x11B : 0);\n  }\n  while ( v1 != 1 );\n  for ( i = 0; i < 0x1E; ++i )\n  {\n    byte_4363DC[i] = v1;\n    v1 = ((char)(v1 & 0x80) != 0 ? 0x11B : 0) ^ (2 * v1);\n  }\n  v3 = 0;\n  for ( j = 0; ; v3 = j )\n  {\n    v4 = (_BYTE)v3 ? (unsigned __int8)v19[-(unsigned __int8)v19[(unsigned __int8)v3 + 257]] : 0;\n    v5 = (2 * (v4 ^ (2 * (v4 ^ (2 * (v4 ^ (2 * v4))))))) ^ v4;\n    v6 = v5 ^ HIE67E(v5) ^ 0x63;\n    result = v3;\n    v8 = (unsigned __int8 *)&unk_43E24B + 4 * v3;\n    byte_4307C6[v3] = v6;\n    v8[1] = v6;\n    *v8 = v6;\n    byte_43D5DB[result * 4] = v6;\n    byte_430911[result * 4] = v6;\n    byte_43B578[result * 4] = v6;\n    byte_43647F[result * 4] = v6;\n    byte_43EAEC[result * 4] = v6;\n    byte_43E11C[result * 4] = v6;\n    v9 = v6 ? v18[(unsigned __int8)v19[v6 + 257] + 25] : 0;\n    byte_431ACF[4 * v3] = v9;\n    byte_43A0D7[4 * v3] = v9;\n    byte_43B168[4 * v3] = v9;\n    byte_435A87[4 * v3] = v9;\n    v10 = v6 ? v18[(unsigned __int8)v19[v6 + 257] + 1] : 0;\n    byte_43BC48[4 * v3] = v10;\n    byte_43C57C[4 * v3] = v10;\n    byte_43AE59[4 * v3] = v10;\n    byte_436775[4 * v3] = v10;\n    v11 = (unsigned __int8)((2 * (v3 ^ (4 * (v3 ^ (8 * v3))))) ^ (((unsigned __int8)v3 ^ (4\n                                                                                        * ((unsigned __int8)v3 ^ (8 * (unsigned __int8)v3)))) >> 7)) ^ 5\n        ? v19[-(unsigned __int8)v19[((unsigned __int8)(2 * (v3 ^ (4 * (v3 ^ (8 * v3))))) ^ (unsigned __int8)(((unsigned __int8)v3 ^ (4 * ((unsigned __int8)v3 ^ (8 * (unsigned __int8)v3)))) >> 7) ^ 5)\n                                  + 257]]\n        : 0;\n    byte_43F7D3[j] = v11;\n    v12 = v11 ? v18[(unsigned __int8)v19[v11 + 257] + 104] : 0;\n    v13 = 4 * v11;\n    BYTE2(dword_4317F4[result]) = v12;\n    BYTE1(dword_43CB14[result]) = v12;\n    LOD693(dword_436832[result]) = v12;\n    HIE67E(dword_430D32[result]) = v12;\n    byte_434C28[v13] = v12;\n    byte_4331CA[v13] = v12;\n    byte_43F86B[v13] = v12;\n    byte_43CDEB[v13] = v12;\n    v14 = v11 ? v18[(unsigned __int8)v19[v11 + 257] + 199] : 0;\n    LOD693(dword_4317F4[result]) = v14;\n    HIE67E(dword_43CB14[result]) = v14;\n    BYTE2(dword_436832[result]) = v14;\n    BYTE1(dword_430D32[result]) = v14;\n    byte_43E226[4 * v11] = v14;\n    byte_4349E7[4 * v11] = v14;\n    byte_43F636[4 * v11] = v14;\n    byte_434FB7[4 * v11] = v14;\n    v15 = v11 ? v18[(unsigned __int8)v19[v11 + 257] + 238] : 0;\n    BYTE1(dword_4317F4[result]) = v15;\n    LOD693(dword_43CB14[result]) = v15;\n    HIE67E(dword_436832[result]) = v15;\n    BYTE2(dword_430D32[result]) = v15;\n    byte_43D292[4 * v11] = v15;\n    byte_433084[4 * v11] = v15;\n    byte_43C336[4 * v11] = v15;\n    byte_43502F[4 * v11] = v15;\n    v16 = v11 ? v18[(unsigned __int8)v19[v11 + 257] + 223] : 0;\n    v17 = ++j < 256;\n    HIE67E(dword_4317F4[result]) = v16;\n    BYTE2(dword_43CB14[result]) = v16;\n    BYTE1(dword_436832[result]) = v16;\n    LOD693(dword_430D32[result]) = v16;\n    byte_432C25[4 * v11] = v16;\n    byte_43AB7E[4 * v11] = v16;\n    byte_439638[4 * v11] = v16;\n    byte_43702E[4 * v11] = v16;\n    if ( !v17 )\n      break;\n  }\n  return result * 4;\n}\n// 4317F4: using guessed type int dword_4317F4[];\n// 43CB14: using guessed type int dword_43CB14[];\n// 436832: using guessed type int dword_436832[];\n// 430D32: using guessed type int dword_430D32[];\n\n"
    },
    {
        "Function": "sub_407793",
        "Total XOR and shift operations": 20,
        "XOR operations": 20,
        "Shift operations": 0,
        "Operation percentage": "11.11%",
        "Function Body": "\n_DWORD *__stdcall sub_407793(const void *a1, unsigned int *a2, void *Src, char a4)\n{\n  unsigned int *v4; // ebx\n  int v5; // ecx\n  int *v6; // esi\n  _DWORD *v7; // eax\n  unsigned int v8; // ecx\n  int v9; // edx\n  int v10; // edi\n  _DWORD *v11; // edx\n  unsigned int *v12; // esi\n  unsigned int v13; // eax\n  int v14; // ecx\n  int v15; // edi\n  int *v16; // edx\n  unsigned int *v17; // esi\n  unsigned int v18; // eax\n  int v19; // edi\n  char *v20; // ecx\n  unsigned int *v21; // esi\n  unsigned int v22; // eax\n  int v23; // esi\n  int *v24; // edi\n  int v25; // edx\n  int *v26; // edx\n  unsigned int *v27; // esi\n  unsigned int v28; // eax\n  int v29; // edi\n  _DWORD *result; // eax\n  int v31; // edx\n  int v32[5]; // [esp+Ch] [ebp-20h] BYREF\n  int *v33; // [esp+20h] [ebp-Ch]\n  int *v34; // [esp+24h] [ebp-8h]\n  int *v35; // [esp+28h] [ebp-4h]\n  int *Srcb; // [esp+3Ch] [ebp+10h]\n  int *Srcc; // [esp+3Ch] [ebp+10h]\n  int *Srcd; // [esp+3Ch] [ebp+10h]\n  char *Srca; // [esp+3Ch] [ebp+10h]\n  int *Srce; // [esp+3Ch] [ebp+10h]\n  unsigned int *v41; // [esp+40h] [ebp+14h]\n  char v42; // [esp+40h] [ebp+14h]\n  char v43; // [esp+40h] [ebp+14h]\n  char v44; // [esp+40h] [ebp+14h]\n  int v45; // [esp+40h] [ebp+14h]\n\n  if ( a4 )\n  {\n    v4 = a2;\n    memcpy(a2, Src, 0x40u);\n  }\n  else\n  {\n    v4 = (unsigned int *)Src;\n  }\n  if ( !byte_44A83D )\n  {\n    v5 = 0;\n    v6 = (int *)&unk_442013;\n    do\n    {\n      *(v6 - 1) = v5;\n      *v6 = (v5 + 1) % 5;\n      v6 += 5;\n      *(v6 - 4) = (v5 + 2) % 5;\n      *(v6 - 3) = (v5 + 3) % 5;\n      *(v6 - 2) = (v5 + 4) % 5;\n      if ( v5 )\n        --v5;\n      else\n        v5 = 4;\n    }\n    while ( (int)v6 < (int)&unk_440B0C );\n    byte_44A83D = 1;\n  }\n  qmemcpy(v32, a1, sizeof(v32));\n  v7 = &unk_440778;\n  v41 = v4;\n  do\n  {\n    v8 = __ROL4__(*v41, 8) & 0xFF78BD | __ROR4__(*v41, 8) & 0xFF78BD00;\n    *v41 = v8;\n    v9 = v32[*v7];\n    v10 = v32[*(v7 - 1)];\n    ++v41;\n    Srcb = &v32[*(v7 - 2)];\n    v35 = &v32[v7[1]];\n    *v35 += (v9 ^ *Srcb & (v9 ^ v10)) + v8 + __ROL4__(v32[*(v7 - 3)], 5) + 1562F70249;\n    *Srcb = __ROR4__(*Srcb, 2);\n    v7 += 5;\n    v11 = &unk_440C27;\n  }\n  while ( (int)v7 < (int)&unk_440C27 );\n  v42 = 16;\n  do\n  {\n    v12 = &v4[v42 & 0xF];\n    v13 = __ROL4__(*v12 ^ v4[(v42 - 3) & 0xF] ^ v4[(v42 - 3 + 5) & 0xF] ^ v4[(v42 - 8) & 0xF], 1);\n    *v12 = v13;\n    v14 = v32[*v11];\n    v15 = v32[*(v11 - 1)];\n    Srcc = &v32[*(v11 - 2)];\n    v35 = &v32[v11[1]];\n    *v35 += (v14 ^ *Srcc & (v14 ^ v15)) + v13 + __ROL4__(v32[*(v11 - 3)], 5) + 1562F70249;\n    *Srcc = __ROR4__(*Srcc, 2);\n    ++v42;\n    v11 += 5;\n  }\n  while ( (int)v11 < (int)&unk_44DA08 );\n  v43 = 20;\n  v16 = (int *)&unk_44DA08;\n  do\n  {\n    v17 = &v4[v43 & 0xF];\n    v18 = __ROL4__(*v17 ^ v4[(v43 - 3) & 0xF] ^ v4[(v43 - 3 + 5) & 0xF] ^ v4[(v43 - 8) & 0xF], 1);\n    *v17 = v18;\n    v19 = *v16;\n    Srcd = &v32[*(v16 - 2)];\n    v35 = &v32[v16[1]];\n    *v35 += (*Srcd ^ v32[v19] ^ v32[*(v16 - 1)]) + v18 + __ROL4__(v32[*(v16 - 3)], 5) + 18063E5393;\n    *Srcd = __ROR4__(*Srcd, 2);\n    ++v43;\n    v16 += 5;\n  }\n  while ( (int)v16 < (int)&unk_44DA46 );\n  v20 = (char *)&unk_44C877;\n  v44 = 40;\n  Srca = (char *)&unk_44C877;\n  do\n  {\n    v21 = &v4[v44 & 0xF];\n    v22 = __ROL4__(*v21 ^ v4[(v44 - 3) & 0xF] ^ v4[(v44 - 3 + 5) & 0xF] ^ v4[(v44 - 8) & 0xF], 1);\n    *v21 = v22;\n    v23 = v32[*(_DWORD *)v20];\n    v24 = &v32[*((_DWORD *)v20 + 2)];\n    v33 = &v32[*((_DWORD *)v20 - 1)];\n    v25 = *v33;\n    v34 = v24;\n    *v24 += (v23 & v25 | (v23 | v25) & v32[*((_DWORD *)v20 + 1)])\n          + v22\n          + __ROL4__(v32[*((_DWORD *)v20 - 2)], 5)\n          - 18A84A7588;\n    *v33 = __ROR4__(*v33, 2);\n    ++v44;\n    v20 = Srca + 20;\n    Srca = v20;\n  }\n  while ( (int)v20 < (int)&unk_44A522 );\n  v45 = 60;\n  v26 = (int *)&unk_444E18;\n  do\n  {\n    v27 = &v4[v45 & 0xF];\n    v28 = __ROL4__(*v27 ^ v4[(v45 - 3) & 0xF] ^ v4[((_BYTE)v45 - 3 + 5) & 0xF] ^ v4[((_BYTE)v45 - 8) & 0xF], 1);\n    *v27 = v28;\n    v29 = *v26;\n    Srce = &v32[*(v26 - 2)];\n    v33 = &v32[v26[1]];\n    *v33 += (*Srce ^ v32[v29] ^ v32[*(v26 - 1)]) + v28 + __ROL4__(v32[*(v26 - 3)], 5) - 89419D514;\n    *Srce = __ROR4__(*Srce, 2);\n    ++v45;\n    v26 += 5;\n  }\n  while ( (int)v26 < (int)&dword_44851C );\n  result = a1;\n  v31 = 5;\n  do\n  {\n    *result += *(_DWORD *)((char *)result + (char *)v32 - (_BYTE *)a1);\n    ++result;\n    --v31;\n  }\n  while ( v31 );\n  return result;\n}\n// 44A83D: using guessed type char byte_44A83D;\n// 44851C: using guessed type int dword_44851C;\n// 407793: using guessed type int var_20[5];\n\n"
    },
    {
        "Function": "sub_418718",
        "Total XOR and shift operations": 32,
        "XOR operations": 0,
        "Shift operations": 32,
        "Operation percentage": "7.69%",
        "Function Body": "\nchar __thiscall sub_418718(_DWORD *this, int a2)\n{\n  bool v3; // zf\n  int v4; // eax\n  int *v5; // esi\n  int v6; // ecx\n  int v7; // eax\n  int v8; // ecx\n  int v9; // eax\n  int v10; // eax\n  void *v11; // eax\n  _DWORD *v12; // ebx\n  int v13; // eax\n  __int16 v14; // ax\n  int v15; // edx\n  unsigned int v16; // eax\n  unsigned int v17; // eax\n  unsigned int v18; // ecx\n  unsigned int v19; // eax\n  unsigned int v20; // edx\n  unsigned int *v21; // ecx\n  unsigned int v22; // ecx\n  unsigned int v23; // eax\n  unsigned __int16 v24; // cx\n  unsigned __int16 v25; // cx\n  unsigned int v26; // eax\n  int v27; // ebx\n  unsigned int v28; // eax\n  unsigned int v29; // eax\n  __int16 v30; // ax\n  int v31; // edx\n  unsigned int v32; // eax\n  unsigned int v33; // eax\n  unsigned int v34; // ecx\n  unsigned int v35; // eax\n  int v36; // ebx\n  unsigned int v37; // ecx\n  unsigned int *v38; // edx\n  unsigned int v39; // edx\n  unsigned int v40; // eax\n  unsigned int v41; // ebx\n  unsigned int v42; // ebx\n  __int16 v43; // ax\n  int v44; // ebx\n  unsigned int v45; // eax\n  unsigned int v46; // eax\n  unsigned int v47; // ecx\n  int v48; // eax\n  int v49; // edx\n  unsigned int v50; // ecx\n  unsigned int *v51; // ebx\n  unsigned int v52; // ebx\n  unsigned int v53; // eax\n  unsigned int v54; // eax\n  __int16 v55; // cx\n  _DWORD *v56; // eax\n  int v57; // eax\n  __int16 v58; // ax\n  int v59; // edx\n  unsigned int v60; // eax\n  unsigned int v61; // eax\n  unsigned int v62; // ecx\n  unsigned int v63; // edx\n  unsigned int *v64; // ecx\n  unsigned int v65; // ecx\n  unsigned int v66; // eax\n  unsigned int v67; // eax\n  char v69[4]; // [esp+4h] [ebp-2Ch] BYREF\n  int v70; // [esp+8h] [ebp-28h]\n  int v71; // [esp+Ch] [ebp-24h]\n  unsigned __int8 v72; // [esp+10h] [ebp-20h]\n  _DWORD *v73; // [esp+14h] [ebp-1Ch]\n  _DWORD *v74; // [esp+18h] [ebp-18h]\n  unsigned int v75; // [esp+1Ch] [ebp-14h]\n  int v76; // [esp+20h] [ebp-10h]\n  int v77; // [esp+24h] [ebp-Ch]\n  int v78; // [esp+28h] [ebp-8h]\n  unsigned int v79; // [esp+2Ch] [ebp-4h]\n  int v80; // [esp+38h] [ebp+8h]\n  unsigned int v81; // [esp+38h] [ebp+8h]\n  int v82; // [esp+38h] [ebp+8h]\n  unsigned int v83; // [esp+38h] [ebp+8h]\n  unsigned int v84; // [esp+38h] [ebp+8h]\n\n  v3 = *(_BYTE *)(a2 + 44) == 0;\n  v73 = this;\n  if ( !v3\n    || (*(_BYTE *)(a2 + 44) = 1, LOD693(v4) = sub_411657(this, a2 + 4, a2 + 24, (unsigned int *)(a2 + 48)), (_BYTE)v4) )\n  {\n    v4 = *(_DWORD *)(a2 + 24);\n    v5 = (int *)(a2 + 4);\n    if ( *(_DWORD *)(a2 + 4) > v4 + *(_DWORD *)(a2 + 36) )\n    {\n      *(_BYTE *)(a2 + 19152) = 1;\n      return v4;\n    }\n    v6 = *(_DWORD *)(a2 + 32);\n    *(_DWORD *)(a2 + 19160) = 0;\n    v7 = v6 + v4 - 1;\n    v8 = *(_DWORD *)(a2 + 19148) - 16;\n    v77 = v7;\n    v76 = v8;\n    v78 = v7;\n    if ( v7 >= v8 )\n      v78 = v8;\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v4 = *v5;\n        if ( *v5 >= v78 )\n        {\n          if ( v4 > v77 || v4 == v77 && *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a2 + 28) )\n            return v4;\n          if ( v4 >= v76 && !*(_BYTE *)(a2 + 19154) || v4 >= *(_DWORD *)(a2 + 19148) )\n          {\n            *(_BYTE *)(a2 + 19155) = 1;\n            return v4;\n          }\n        }\n        v9 = *(_DWORD *)(a2 + 19164);\n        if ( *(_DWORD *)(a2 + 19160) > (unsigned int)(v9 - 8) )\n        {\n          v10 = 2 * v9;\n          *(_DWORD *)(a2 + 19164) = v10;\n          v11 = realloc(*(void **)(a2 + 19156), 12 * v10);\n          *(_DWORD *)(a2 + 19156) = v11;\n          if ( !v11 )\n            sub_409087(&dword_43211A);\n        }\n        v12 = (_DWORD *)(*(_DWORD *)(a2 + 19156) + 12 * *(_DWORD *)(a2 + 19160));\n        v13 = *(_DWORD *)(a2 + 19160) + 1;\n        v74 = v12;\n        *(_DWORD *)(a2 + 19160) = v13;\n        v14 = sub_402717((_DWORD *)(a2 + 4));\n        v15 = *(_DWORD *)(a2 + 180);\n        v16 = v14 & 0xFFFE;\n        if ( v16 >= *(_DWORD *)(a2 + 4 * v15 + 52) )\n        {\n          v20 = v15 + 1;\n          v80 = 15;\n          if ( v20 < 0xF )\n          {\n            v21 = (unsigned int *)(a2 + 4 * v20 + 52);\n            while ( v16 >= *v21 )\n            {\n              ++v20;\n              ++v21;\n              if ( v20 >= 0xF )\n                goto LABEL_26;\n            }\n            v80 = v20;\n          }\nLABEL_26:\n          v22 = v80 + *(_DWORD *)(a2 + 8);\n          *(_DWORD *)(a2 + 4) += v22 >> 3;\n          *(_DWORD *)(a2 + 8) = v22 & 7;\n          v23 = *(_DWORD *)(a2 + 4 * v80 + 116) + ((v16 - *(_DWORD *)(a2 + 4 * v80 + 48)) >> (16 - v80));\n          if ( v23 >= *(_DWORD *)(a2 + 48) )\n            v23 = 0;\n          v19 = *(unsigned __int16 *)(a2 + 2 * v23 + 3256);\n        }\n        else\n        {\n          v17 = v16 >> (16 - v15);\n          v18 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v17 + a2 + 184);\n          *v5 += v18 >> 3;\n          *(_DWORD *)(a2 + 8) = v18 & 7;\n          v19 = *(unsigned __int16 *)(a2 + 2 * v17 + 1208);\n        }\n        if ( v19 < 0x100 )\n          break;\n        if ( v19 < 0x106 )\n        {\n          if ( v19 == 256 )\n          {\n            sub_417FAA(v73, a2 + 4, (int)v69);\n            *((_WORD *)v12 + 2) = (unsigned __int8)v69[0];\n            v12[2] = v70;\n            *v12 = 4;\n            v57 = *(_DWORD *)(a2 + 19156) + 12 * (*(_DWORD *)(a2 + 19160))++;\n            *(_DWORD *)v57 = 4;\n            *(_WORD *)(v57 + 4) = v72;\n            *(_DWORD *)(v57 + 8) = v71;\n          }\n          else if ( v19 == 257 )\n          {\n            *v12 = 2;\n          }\n          else\n          {\n            *v12 = 3;\n            v12[2] = v19 - 258;\n            v58 = sub_402717((_DWORD *)(a2 + 4));\n            v59 = *(_DWORD *)(a2 + 11640);\n            v60 = v58 & 0xFFFE;\n            if ( v60 >= *(_DWORD *)(a2 + 4 * v59 + 11512) )\n            {\n              v63 = v59 + 1;\n              v82 = 15;\n              if ( v63 < 0xF )\n              {\n                v64 = (unsigned int *)(a2 + 4 * v63 + 11512);\n                while ( v60 >= *v64 )\n                {\n                  ++v63;\n                  ++v64;\n                  if ( v63 >= 0xF )\n                    goto LABEL_88;\n                }\n                v82 = v63;\n              }\nLABEL_88:\n              v65 = v82 + *(_DWORD *)(a2 + 8);\n              *(_DWORD *)(a2 + 4) += v65 >> 3;\n              *(_DWORD *)(a2 + 8) = v65 & 7;\n              v66 = *(_DWORD *)(a2 + 4 * v82 + 11576) + ((v60 - *(_DWORD *)(a2 + 4 * v82 + 11508)) >> (16 - v82));\n              if ( v66 >= *(_DWORD *)(a2 + 11508) )\n                v66 = 0;\n              v19 = *(unsigned __int16 *)(a2 + 2 * v66 + 14716);\n            }\n            else\n            {\n              v61 = v60 >> (16 - v59);\n              v62 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v61 + a2 + 11644);\n              *v5 += v62 >> 3;\n              *(_DWORD *)(a2 + 8) = v62 & 7;\n              v19 = *(unsigned __int16 *)(a2 + 2 * v61 + 12668);\n            }\n            if ( v19 >= 8 )\n            {\n              v79 = (v19 >> 2) - 1;\n              v19 = ((v19 & 3 | 4) << v79) + 2;\n              v83 = v19;\n              if ( v79 )\n              {\n                v67 = sub_402717((_DWORD *)(a2 + 4));\n                v84 = (v67 >> (16 - v79)) + v83;\n                v19 = v79 + *(_DWORD *)(a2 + 8);\n                *v5 += v19 >> 3;\n                *(_DWORD *)(a2 + 8) = v19 & 7;\n                LO31C6(v19) = v84;\n              }\n            }\n            else\n            {\n              LO31C6(v19) = v19 + 2;\n            }\nLABEL_95:\n            *((_WORD *)v12 + 2) = v19;\n          }\n        }\n        else\n        {\n          v26 = v19 - 262;\n          if ( v26 >= 8 )\n          {\n            v27 = (v26 >> 2) - 1;\n            v79 = ((v26 & 3 | 4) << v27) + 2;\n            if ( v26 >> 2 != 1 )\n            {\n              v28 = sub_402717((_DWORD *)(a2 + 4));\n              v79 += v28 >> (16 - v27);\n              v29 = v27 + *(_DWORD *)(a2 + 8);\n              *v5 += v29 >> 3;\n              *(_DWORD *)(a2 + 8) = v29 & 7;\n            }\n          }\n          else\n          {\n            v79 = v26 + 2;\n          }\n          v75 = v79;\n          v30 = sub_402717((_DWORD *)(a2 + 4));\n          v31 = *(_DWORD *)(a2 + 4000);\n          v32 = v30 & 0xFFFE;\n          if ( v32 >= *(_DWORD *)(a2 + 4 * v31 + 3872) )\n          {\n            v36 = 15;\n            v37 = v31 + 1;\n            if ( (unsigned int)(v31 + 1) < 0xF )\n            {\n              v38 = (unsigned int *)(a2 + 4 * v37 + 3872);\n              while ( v32 >= *v38 )\n              {\n                ++v37;\n                ++v38;\n                if ( v37 >= 0xF )\n                  goto LABEL_48;\n              }\n              v36 = v37;\n            }\nLABEL_48:\n            v39 = v36 + *(_DWORD *)(a2 + 8);\n            *(_DWORD *)(a2 + 8) = v39 & 7;\n            *v5 += v39 >> 3;\n            v40 = *(_DWORD *)(a2 + 4 * v36 + 3936) + ((v32 - *(_DWORD *)(a2 + 4 * v36 + 3868)) >> (16 - v36));\n            if ( v40 >= *(_DWORD *)(a2 + 3868) )\n              v40 = 0;\n            v35 = *(unsigned __int16 *)(a2 + 2 * v40 + 7076);\n          }\n          else\n          {\n            v33 = v32 >> (16 - v31);\n            v34 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v33 + a2 + 4004);\n            *v5 += v34 >> 3;\n            *(_DWORD *)(a2 + 8) = v34 & 7;\n            v35 = *(unsigned __int16 *)(a2 + 2 * v33 + 5028);\n          }\n          if ( v35 >= 4 )\n          {\n            v41 = (v35 >> 1) - 1;\n            v81 = ((v35 & 1 | 2) << v41) + 1;\n            if ( v35 >> 1 != 1 )\n            {\n              if ( v41 < 4 )\n              {\n                v81 += (unsigned int)sub_41AB0F((_DWORD *)(a2 + 4)) >> (32 - v41);\n                v54 = v41 + *(_DWORD *)(a2 + 8);\n                *v5 += v54 >> 3;\n                *(_DWORD *)(a2 + 8) = v54 & 7;\n              }\n              else\n              {\n                if ( v41 > 4 )\n                {\n                  v81 += 16 * ((unsigned int)sub_41AB0F((_DWORD *)(a2 + 4)) >> (36 - v41));\n                  v42 = *(_DWORD *)(a2 + 8) + v41 - 4;\n                  *v5 += v42 >> 3;\n                  *(_DWORD *)(a2 + 8) = v42 & 7;\n                }\n                v43 = sub_402717((_DWORD *)(a2 + 4));\n                v44 = *(_DWORD *)(a2 + 7820);\n                v45 = v43 & 0xFFFE;\n                if ( v45 >= *(_DWORD *)(a2 + 4 * v44 + 7692) )\n                {\n                  v49 = 15;\n                  v50 = v44 + 1;\n                  if ( (unsigned int)(v44 + 1) < 0xF )\n                  {\n                    v51 = (unsigned int *)(a2 + 4 * v50 + 7692);\n                    while ( v45 >= *v51 )\n                    {\n                      ++v50;\n                      ++v51;\n                      if ( v50 >= 0xF )\n                        goto LABEL_65;\n                    }\n                    v49 = v50;\n                  }\nLABEL_65:\n                  v52 = v49 + *(_DWORD *)(a2 + 8);\n                  *(_DWORD *)(a2 + 8) = v52 & 7;\n                  *v5 += v52 >> 3;\n                  v53 = *(_DWORD *)(a2 + 4 * v49 + 7756) + ((v45 - *(_DWORD *)(a2 + 4 * v49 + 7688)) >> (16 - v49));\n                  if ( v53 >= *(_DWORD *)(a2 + 7688) )\n                    v53 = 0;\n                  v48 = *(unsigned __int16 *)(a2 + 2 * v53 + 10896);\n                }\n                else\n                {\n                  v46 = v45 >> (16 - v44);\n                  v47 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v46 + a2 + 7824);\n                  *v5 += v47 >> 3;\n                  *(_DWORD *)(a2 + 8) = v47 & 7;\n                  v48 = *(unsigned __int16 *)(a2 + 2 * v46 + 8848);\n                }\n                v81 += v48;\n              }\n            }\n          }\n          else\n          {\n            v81 = v35 + 1;\n          }\n          if ( v81 <= 0x100 )\n          {\n            v55 = v75;\n          }\n          else\n          {\n            v55 = v79 + 1;\n            if ( v81 > 0x2000 )\n            {\n              v55 = v79 + 2;\n              if ( v81 > 0x40000 )\n                v55 = v79 + 3;\n            }\n          }\n          v56 = v74;\n          *v74 = 1;\n          *((_WORD *)v56 + 2) = v55;\n          v56[2] = v81;\n        }\n      }\n      if ( *(_DWORD *)(a2 + 19160) <= 1u || *(v12 - 3) || (v24 = *((_WORD *)v12 - 4), v24 >= 3u) )\n      {\n        *v12 = 0;\n        *((_BYTE *)v12 + 8) = v19;\n        LO31C6(v19) = 0;\n        goto LABEL_95;\n      }\n      v25 = v24 + 1;\n      *((_WORD *)v12 - 4) = v25;\n      *((_BYTE *)v12 + v25 - 4) = v19;\n      --*(_DWORD *)(a2 + 19160);\n    }\n  }\n  *(_BYTE *)(a2 + 19152) = 1;\n  return v4;\n}\n// 43211A: using guessed type int dword_43211A;\n// 418718: using guessed type char var_2C[4];\n\n"
    },
    {
        "Function": "sub_4256C7",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.20%",
        "Function Body": "\nint __cdecl sub_4256C7(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // esi\n  int *v9; // edi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // esi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  unsigned int v20; // esi\n  char v21; // cl\n  int v22; // edx\n  int *v23; // ecx\n  int v24; // esi\n  int v25; // eax\n  int *v26; // ebx\n  bool j; // zf\n  int v28; // eax\n  unsigned int v29; // edx\n  int *v30; // ecx\n  unsigned int v31; // edi\n  int k; // ecx\n  int *v33; // ecx\n  unsigned int v34; // esi\n  int v35; // edi\n  int v36; // eax\n  int v37; // edx\n  int *v38; // ebx\n  unsigned int v39; // esi\n  char v40; // cl\n  int v41; // edx\n  int *v42; // ecx\n  int v43; // eax\n  int v44; // edx\n  int *v45; // ebx\n  unsigned int v46; // esi\n  char v47; // cl\n  int v48; // edx\n  int *v49; // ecx\n  int v50; // eax\n  int v51; // edx\n  unsigned int v52; // edi\n  int v53; // edx\n  int *v54; // ecx\n  unsigned int v55; // ebx\n  int v56; // edx\n  int v57; // [esp+8h] [ebp-2Ch]\n  int v58; // [esp+Ch] [ebp-28h]\n  int v59; // [esp+10h] [ebp-24h]\n  int v60; // [esp+14h] [ebp-20h] BYREF\n  int v61; // [esp+18h] [ebp-1Ch]\n  int v62; // [esp+1Ch] [ebp-18h] BYREF\n  int v63; // [esp+20h] [ebp-14h]\n  int v64; // [esp+24h] [ebp-10h]\n  int v65; // [esp+28h] [ebp-Ch]\n  int v66; // [esp+2Ch] [ebp-8h]\n  int v67; // [esp+30h] [ebp-4h]\n  int v68; // [esp+3Ch] [ebp+8h]\n  unsigned int v69; // [esp+3Ch] [ebp+8h]\n  int v70; // [esp+3Ch] [ebp+8h]\n  int v71; // [esp+3Ch] [ebp+8h]\n  int v72; // [esp+3Ch] [ebp+8h]\n  int v73; // [esp+3Ch] [ebp+8h]\n  int v74; // [esp+3Ch] [ebp+8h]\n\n  v2 = a1[5];\n  v63 = v2 & 0x8000;\n  v60 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v61 = *(_DWORD *)(a1 + 1);\n  v62 = v4;\n  if ( v3 != -16383 )\n  {\n    v68 = 0;\n    v57 = v60;\n    v58 = v61;\n    v59 = v62;\n    v8 = dword_43D09B - 1;\n    v64 = v3;\n    v65 = dword_43D09B / 32;\n    v9 = &v60 + dword_43D09B / 32;\n    v66 = 31 - dword_43D09B % 32;\n    if ( ((1 << (31 - dword_43D09B % 32)) & *v9) != 0 )\n    {\n      v10 = v65;\n      for ( i = (~(-1 << (31 - dword_43D09B % 32)) & *(&v60 + v65)) == 0; i; i = *(&v60 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_22;\n      }\n      v12 = v8 / 32;\n      v67 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v60 + v8 / 32;\n      v69 = v13 + *v14;\n      if ( v69 >= *v14 )\n      {\n        v15 = v69 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v67 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v69;\n        if ( v12 < 0 || !v67 )\n          break;\n        v67 = 0;\n        v14 = &v60 + v12;\n        v16 = *v14 + 1;\n        v69 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n      v68 = v67;\n    }\nLABEL_22:\n    *v9 &= -1 << v66;\n    if ( v65 + 1 < 3 )\n      memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));\n    if ( v68 )\n      ++v3;\n    if ( v3 >= dword_4373FA - dword_43D09B )\n    {\n      if ( v3 > dword_4373FA )\n      {\n        if ( v3 < dword_43F504 )\n        {\n          v60 &= ~0x806FE000;\n          v5 = dword_430179 + v3;\n          v50 = dword_43748F / 32;\n          v51 = dword_43748F % 32;\n          v65 = 0;\n          v74 = 0;\n          v67 = 32 - dword_43748F % 32;\n          do\n          {\n            v52 = *(&v60 + v74);\n            v64 = ~(-1 << v51) & v52;\n            *(&v60 + v74++) = v65 | (v52 >> v51);\n            v65 = v64 << v67;\n          }\n          while ( v74 < 3 );\n          v53 = 2;\n          v54 = &v62 - v50;\n          do\n          {\n            if ( v53 < v50 )\n              *(&v60 + v53) = 0;\n            else\n              *(&v60 + v53) = *v54;\n            --v53;\n            --v54;\n          }\n          while ( v53 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v61 = 0;\n          v62 = 0;\n          v60 = 0x806FE000;\n          v43 = dword_43748F / 32;\n          v44 = dword_43748F % 32;\n          v65 = 0;\n          v73 = 0;\n          v67 = 32 - dword_43748F % 32;\n          do\n          {\n            v45 = &v60 + v73;\n            v46 = *v45;\n            v64 = ~(-1 << v44) & *v45;\n            v47 = v67;\n            *v45 = v65 | (v46 >> v44);\n            ++v73;\n            v65 = v64 << v47;\n          }\n          while ( v73 < 3 );\n          v48 = 2;\n          v49 = &v62 - v43;\n          do\n          {\n            if ( v48 < v43 )\n              *(&v60 + v48) = 0;\n            else\n              *(&v60 + v48) = *v49;\n            --v48;\n            --v49;\n          }\n          while ( v48 >= 0 );\n          v5 = dword_430179 + dword_43F504;\n          result = 1;\n        }\n        goto LABEL_79;\n      }\n      v60 = v57;\n      v61 = v58;\n      v17 = (dword_4373FA - v64) / 32;\n      v62 = v59;\n      v18 = (dword_4373FA - v64) % 32;\n      v65 = 0;\n      v70 = 0;\n      v67 = 32 - v18;\n      do\n      {\n        v19 = &v60 + v70;\n        v20 = *v19;\n        v64 = ~(-1 << v18) & *v19;\n        v21 = v67;\n        *v19 = v65 | (v20 >> v18);\n        ++v70;\n        v65 = v64 << v21;\n      }\n      while ( v70 < 3 );\n      v22 = 2;\n      v23 = &v62 - v17;\n      do\n      {\n        if ( v22 < v17 )\n          *(&v60 + v22) = 0;\n        else\n          *(&v60 + v22) = *v23;\n        --v22;\n        --v23;\n      }\n      while ( v22 >= 0 );\n      v24 = dword_43D09B - 1;\n      v25 = dword_43D09B / 32;\n      v65 = dword_43D09B / 32;\n      v26 = &v60 + dword_43D09B / 32;\n      v64 = 31 - dword_43D09B % 32;\n      if ( ((1 << (31 - dword_43D09B % 32)) & *v26) != 0 )\n      {\n        for ( j = (~(-1 << (31 - dword_43D09B % 32)) & *(&v60 + v25)) == 0; j; j = *(&v60 + v25) == 0 )\n        {\n          if ( ++v25 >= 3 )\n            goto LABEL_52;\n        }\n        v28 = v24 / 32;\n        v71 = 0;\n        v29 = 1 << (31 - v24 % 32);\n        v30 = &v60 + v24 / 32;\n        v31 = *v30 + v29;\n        if ( v31 < *v30 || v31 < v29 )\n          v71 = 1;\n        *v30 = v31;\n        for ( k = v71; --v28 >= 0 && k; k = v35 )\n        {\n          v33 = &v60 + v28;\n          v34 = *v33 + 1;\n          v35 = 0;\n          if ( v34 < *v33 || *v33 == -1 )\n            v35 = 1;\n          *v33 = v34;\n        }\n      }\nLABEL_52:\n      *v26 &= -1 << v64;\n      if ( v65 + 1 < 3 )\n        memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));\n      v36 = (dword_43748F + 1) / 32;\n      v37 = (dword_43748F + 1) % 32;\n      v65 = 0;\n      v72 = 0;\n      v67 = 32 - v37;\n      do\n      {\n        v38 = &v60 + v72;\n        v39 = *v38;\n        v64 = ~(-1 << v37) & *v38;\n        v40 = v67;\n        *v38 = v65 | (v39 >> v37);\n        ++v72;\n        v65 = v64 << v40;\n      }\n      while ( v72 < 3 );\n      v41 = 2;\n      v42 = &v62 - v36;\n      do\n      {\n        if ( v41 < v36 )\n          *(&v60 + v41) = 0;\n        else\n          *(&v60 + v41) = *v42;\n        --v41;\n        --v42;\n      }\n      while ( v41 >= 0 );\n    }\n    else\n    {\n      v60 = 0;\n      v61 = 0;\n      v62 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_79;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v60 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_79;\n    }\n  }\n  v60 = 0;\n  v61 = 0;\n  v62 = 0;\n  result = 2;\nLABEL_79:\n  v55 = v60 | (v63 != 0 ? 0x806FE000 : 0) | (v5 << (31 - dword_43748F));\n  if ( dword_4363C8 == 64 )\n  {\n    v56 = v61;\n    a2[1] = v55;\n    *a2 = v56;\n  }\n  else if ( dword_4363C8 == 32 )\n  {\n    *a2 = v55;\n  }\n  return result;\n}\n// 43F504: using guessed type int dword_43F504;\n// 4373FA: using guessed type int dword_4373FA;\n// 43D09B: using guessed type int dword_43D09B;\n// 43748F: using guessed type int dword_43748F;\n// 4363C8: using guessed type int dword_4363C8;\n// 430179: using guessed type int dword_430179;\n\n"
    },
    {
        "Function": "sub_425D93",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.20%",
        "Function Body": "\nint __cdecl sub_425D93(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // esi\n  int *v9; // edi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // esi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  unsigned int v20; // esi\n  char v21; // cl\n  int v22; // edx\n  int *v23; // ecx\n  int v24; // esi\n  int v25; // eax\n  int *v26; // ebx\n  bool j; // zf\n  int v28; // eax\n  unsigned int v29; // edx\n  int *v30; // ecx\n  unsigned int v31; // edi\n  int k; // ecx\n  int *v33; // ecx\n  unsigned int v34; // esi\n  int v35; // edi\n  int v36; // eax\n  int v37; // edx\n  int *v38; // ebx\n  unsigned int v39; // esi\n  char v40; // cl\n  int v41; // edx\n  int *v42; // ecx\n  int v43; // eax\n  int v44; // edx\n  int *v45; // ebx\n  unsigned int v46; // esi\n  char v47; // cl\n  int v48; // edx\n  int *v49; // ecx\n  int v50; // eax\n  int v51; // edx\n  unsigned int v52; // edi\n  int v53; // edx\n  int *v54; // ecx\n  unsigned int v55; // ebx\n  int v56; // edx\n  int v57; // [esp+8h] [ebp-2Ch]\n  int v58; // [esp+Ch] [ebp-28h]\n  int v59; // [esp+10h] [ebp-24h]\n  int v60; // [esp+14h] [ebp-20h] BYREF\n  int v61; // [esp+18h] [ebp-1Ch]\n  int v62; // [esp+1Ch] [ebp-18h] BYREF\n  int v63; // [esp+20h] [ebp-14h]\n  int v64; // [esp+24h] [ebp-10h]\n  int v65; // [esp+28h] [ebp-Ch]\n  int v66; // [esp+2Ch] [ebp-8h]\n  int v67; // [esp+30h] [ebp-4h]\n  int v68; // [esp+3Ch] [ebp+8h]\n  unsigned int v69; // [esp+3Ch] [ebp+8h]\n  int v70; // [esp+3Ch] [ebp+8h]\n  int v71; // [esp+3Ch] [ebp+8h]\n  int v72; // [esp+3Ch] [ebp+8h]\n  int v73; // [esp+3Ch] [ebp+8h]\n  int v74; // [esp+3Ch] [ebp+8h]\n\n  v2 = a1[5];\n  v63 = v2 & 0x8000;\n  v60 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v61 = *(_DWORD *)(a1 + 1);\n  v62 = v4;\n  if ( v3 != -16383 )\n  {\n    v68 = 0;\n    v57 = v60;\n    v58 = v61;\n    v59 = v62;\n    v8 = dword_43DA74 - 1;\n    v64 = v3;\n    v65 = dword_43DA74 / 32;\n    v9 = &v60 + dword_43DA74 / 32;\n    v66 = 31 - dword_43DA74 % 32;\n    if ( ((1 << (31 - dword_43DA74 % 32)) & *v9) != 0 )\n    {\n      v10 = v65;\n      for ( i = (~(-1 << (31 - dword_43DA74 % 32)) & *(&v60 + v65)) == 0; i; i = *(&v60 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_22;\n      }\n      v12 = v8 / 32;\n      v67 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v60 + v8 / 32;\n      v69 = v13 + *v14;\n      if ( v69 >= *v14 )\n      {\n        v15 = v69 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v67 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v69;\n        if ( v12 < 0 || !v67 )\n          break;\n        v67 = 0;\n        v14 = &v60 + v12;\n        v16 = *v14 + 1;\n        v69 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n      v68 = v67;\n    }\nLABEL_22:\n    *v9 &= -1 << v66;\n    if ( v65 + 1 < 3 )\n      memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));\n    if ( v68 )\n      ++v3;\n    if ( v3 >= dword_43C705 - dword_43DA74 )\n    {\n      if ( v3 > dword_43C705 )\n      {\n        if ( v3 < dword_43583D )\n        {\n          v60 &= ~0x806FE000;\n          v5 = dword_43944D + v3;\n          v50 = dword_43AD7A / 32;\n          v51 = dword_43AD7A % 32;\n          v65 = 0;\n          v74 = 0;\n          v67 = 32 - dword_43AD7A % 32;\n          do\n          {\n            v52 = *(&v60 + v74);\n            v64 = ~(-1 << v51) & v52;\n            *(&v60 + v74++) = v65 | (v52 >> v51);\n            v65 = v64 << v67;\n          }\n          while ( v74 < 3 );\n          v53 = 2;\n          v54 = &v62 - v50;\n          do\n          {\n            if ( v53 < v50 )\n              *(&v60 + v53) = 0;\n            else\n              *(&v60 + v53) = *v54;\n            --v53;\n            --v54;\n          }\n          while ( v53 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v61 = 0;\n          v62 = 0;\n          v60 = 0x806FE000;\n          v43 = dword_43AD7A / 32;\n          v44 = dword_43AD7A % 32;\n          v65 = 0;\n          v73 = 0;\n          v67 = 32 - dword_43AD7A % 32;\n          do\n          {\n            v45 = &v60 + v73;\n            v46 = *v45;\n            v64 = ~(-1 << v44) & *v45;\n            v47 = v67;\n            *v45 = v65 | (v46 >> v44);\n            ++v73;\n            v65 = v64 << v47;\n          }\n          while ( v73 < 3 );\n          v48 = 2;\n          v49 = &v62 - v43;\n          do\n          {\n            if ( v48 < v43 )\n              *(&v60 + v48) = 0;\n            else\n              *(&v60 + v48) = *v49;\n            --v48;\n            --v49;\n          }\n          while ( v48 >= 0 );\n          v5 = dword_43944D + dword_43583D;\n          result = 1;\n        }\n        goto LABEL_79;\n      }\n      v60 = v57;\n      v61 = v58;\n      v17 = (dword_43C705 - v64) / 32;\n      v62 = v59;\n      v18 = (dword_43C705 - v64) % 32;\n      v65 = 0;\n      v70 = 0;\n      v67 = 32 - v18;\n      do\n      {\n        v19 = &v60 + v70;\n        v20 = *v19;\n        v64 = ~(-1 << v18) & *v19;\n        v21 = v67;\n        *v19 = v65 | (v20 >> v18);\n        ++v70;\n        v65 = v64 << v21;\n      }\n      while ( v70 < 3 );\n      v22 = 2;\n      v23 = &v62 - v17;\n      do\n      {\n        if ( v22 < v17 )\n          *(&v60 + v22) = 0;\n        else\n          *(&v60 + v22) = *v23;\n        --v22;\n        --v23;\n      }\n      while ( v22 >= 0 );\n      v24 = dword_43DA74 - 1;\n      v25 = dword_43DA74 / 32;\n      v65 = dword_43DA74 / 32;\n      v26 = &v60 + dword_43DA74 / 32;\n      v64 = 31 - dword_43DA74 % 32;\n      if ( ((1 << (31 - dword_43DA74 % 32)) & *v26) != 0 )\n      {\n        for ( j = (~(-1 << (31 - dword_43DA74 % 32)) & *(&v60 + v25)) == 0; j; j = *(&v60 + v25) == 0 )\n        {\n          if ( ++v25 >= 3 )\n            goto LABEL_52;\n        }\n        v28 = v24 / 32;\n        v71 = 0;\n        v29 = 1 << (31 - v24 % 32);\n        v30 = &v60 + v24 / 32;\n        v31 = *v30 + v29;\n        if ( v31 < *v30 || v31 < v29 )\n          v71 = 1;\n        *v30 = v31;\n        for ( k = v71; --v28 >= 0 && k; k = v35 )\n        {\n          v33 = &v60 + v28;\n          v34 = *v33 + 1;\n          v35 = 0;\n          if ( v34 < *v33 || *v33 == -1 )\n            v35 = 1;\n          *v33 = v34;\n        }\n      }\nLABEL_52:\n      *v26 &= -1 << v64;\n      if ( v65 + 1 < 3 )\n        memset(&v60 + v65 + 1, 0, 4 * (3 - (v65 + 1)));\n      v36 = (dword_43AD7A + 1) / 32;\n      v37 = (dword_43AD7A + 1) % 32;\n      v65 = 0;\n      v72 = 0;\n      v67 = 32 - v37;\n      do\n      {\n        v38 = &v60 + v72;\n        v39 = *v38;\n        v64 = ~(-1 << v37) & *v38;\n        v40 = v67;\n        *v38 = v65 | (v39 >> v37);\n        ++v72;\n        v65 = v64 << v40;\n      }\n      while ( v72 < 3 );\n      v41 = 2;\n      v42 = &v62 - v36;\n      do\n      {\n        if ( v41 < v36 )\n          *(&v60 + v41) = 0;\n        else\n          *(&v60 + v41) = *v42;\n        --v41;\n        --v42;\n      }\n      while ( v41 >= 0 );\n    }\n    else\n    {\n      v60 = 0;\n      v61 = 0;\n      v62 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_79;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v60 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_79;\n    }\n  }\n  v60 = 0;\n  v61 = 0;\n  v62 = 0;\n  result = 2;\nLABEL_79:\n  v55 = v60 | (v63 != 0 ? 0x806FE000 : 0) | (v5 << (31 - dword_43AD7A));\n  if ( dword_435D86 == 64 )\n  {\n    v56 = v61;\n    a2[1] = v55;\n    *a2 = v56;\n  }\n  else if ( dword_435D86 == 32 )\n  {\n    *a2 = v55;\n  }\n  return result;\n}\n// 43583D: using guessed type int dword_43583D;\n// 43C705: using guessed type int dword_43C705;\n// 43DA74: using guessed type int dword_43DA74;\n// 43AD7A: using guessed type int dword_43AD7A;\n// 435D86: using guessed type int dword_435D86;\n// 43944D: using guessed type int dword_43944D;\n\n"
    },
    {
        "Function": "sub_419C23",
        "Total XOR and shift operations": 38,
        "XOR operations": 0,
        "Shift operations": 38,
        "Operation percentage": "5.29%",
        "Function Body": "\nbool __thiscall sub_419C23(int this, int a2)\n{\n  bool result; // al\n  int v5; // eax\n  int *v6; // esi\n  int v7; // ecx\n  int v8; // eax\n  int v9; // ecx\n  int v10; // eax\n  int v11; // eax\n  __int16 v12; // ax\n  int v13; // edx\n  unsigned int v14; // eax\n  unsigned int v15; // eax\n  unsigned int v16; // ecx\n  unsigned int v17; // eax\n  unsigned int v18; // edx\n  unsigned int *v19; // ecx\n  unsigned int v20; // ecx\n  unsigned int v21; // eax\n  unsigned int v22; // eax\n  unsigned int v23; // eax\n  unsigned int v24; // eax\n  __int16 v25; // ax\n  int v26; // edx\n  unsigned int v27; // eax\n  unsigned int v28; // eax\n  unsigned int v29; // ecx\n  unsigned int v30; // eax\n  unsigned int v31; // edx\n  unsigned int *v32; // ecx\n  unsigned int v33; // ecx\n  unsigned int v34; // eax\n  unsigned int v35; // ecx\n  unsigned int v36; // edx\n  unsigned int v37; // eax\n  __int16 v38; // ax\n  int v39; // edx\n  unsigned int v40; // eax\n  unsigned int v41; // eax\n  unsigned int v42; // ecx\n  int v43; // eax\n  unsigned int v44; // edx\n  unsigned int *v45; // ecx\n  unsigned int v46; // ecx\n  unsigned int v47; // eax\n  unsigned int v48; // eax\n  unsigned int v49; // eax\n  unsigned int v50; // edx\n  unsigned int v51; // eax\n  unsigned int v52; // eax\n  unsigned int v53; // ecx\n  unsigned int v54; // edx\n  int v55; // edx\n  unsigned int v56; // ecx\n  void *v57; // edx\n  _BYTE *v58; // eax\n  _BYTE *v59; // ecx\n  _BYTE *v60; // ecx\n  _BYTE *v61; // eax\n  int v62; // edx\n  int v63; // eax\n  unsigned int v64; // ecx\n  unsigned int v65; // eax\n  unsigned int v66; // edx\n  int v67; // edx\n  void *v68; // edx\n  _BYTE *v69; // eax\n  _BYTE *v70; // ecx\n  int v71; // edx\n  int v72; // ecx\n  bool v73; // zf\n  unsigned int v74; // eax\n  int *v75; // ecx\n  __int16 v76; // ax\n  int v77; // edx\n  unsigned int v78; // eax\n  unsigned int v79; // eax\n  unsigned int v80; // ecx\n  unsigned int v81; // eax\n  unsigned int v82; // edx\n  unsigned int *v83; // ecx\n  unsigned int v84; // ecx\n  unsigned int v85; // eax\n  unsigned int v86; // eax\n  unsigned int v87; // eax\n  unsigned int v88; // eax\n  unsigned int v89; // edx\n  unsigned int v90; // ecx\n  int v91; // ecx\n  int v92; // edx\n  int v93; // ecx\n  int v94; // eax\n  char v95; // dl\n  int v96; // ecx\n  char v97[16]; // [esp+8h] [ebp-30h] BYREF\n  int v98; // [esp+18h] [ebp-20h]\n  int v99; // [esp+1Ch] [ebp-1Ch]\n  int v100; // [esp+20h] [ebp-18h]\n  unsigned int v101; // [esp+24h] [ebp-14h]\n  unsigned int v102; // [esp+28h] [ebp-10h]\n  unsigned int v103; // [esp+2Ch] [ebp-Ch]\n  void *v104; // [esp+30h] [ebp-8h]\n  void *Src; // [esp+34h] [ebp-4h]\n  int v106; // [esp+40h] [ebp+8h]\n  int v107; // [esp+40h] [ebp+8h]\n  int v108; // [esp+40h] [ebp+8h]\n  unsigned int v109; // [esp+40h] [ebp+8h]\n  int v110; // [esp+40h] [ebp+8h]\n  unsigned int v111; // [esp+40h] [ebp+8h]\n  unsigned int v112; // [esp+40h] [ebp+8h]\n  int v113; // [esp+40h] [ebp+8h]\n  int v114; // [esp+40h] [ebp+8h]\n\n  if ( !*(_BYTE *)(a2 + 44) )\n  {\n    *(_BYTE *)(a2 + 44) = 1;\n    result = sub_411657((_DWORD *)this, a2 + 4, a2 + 24, (unsigned int *)(a2 + 48));\n    if ( !result )\n    {\n      *(_BYTE *)(a2 + 19152) = 1;\n      return result;\n    }\n  }\n  v5 = *(_DWORD *)(a2 + 24);\n  v6 = (int *)(a2 + 4);\n  if ( *(_DWORD *)(a2 + 4) > v5 + *(_DWORD *)(a2 + 36) )\n  {\n    *(_BYTE *)(a2 + 19152) = 1;\n    return 0;\n  }\n  v7 = *(_DWORD *)(a2 + 32) + v5 - 1;\n  v8 = *(_DWORD *)(a2 + 19148) - 16;\n  v99 = v7;\n  v98 = v8;\n  v100 = v7;\n  if ( v7 >= v8 )\n    v100 = v8;\n  while ( 1 )\n  {\n    v9 = *(_DWORD *)(this + 59128);\n    *(_DWORD *)(this + 112) &= v9;\n    v10 = *v6;\n    if ( *v6 >= v100 )\n    {\n      if ( v10 > v99 || v10 == v99 && *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a2 + 28) )\n        return 1;\n      if ( v10 >= v98 && !*(_BYTE *)(a2 + 19154) || v10 >= *(_DWORD *)(a2 + 19148) )\n        break;\n    }\n    v11 = *(_DWORD *)(this + 112);\n    if ( (v9 & (unsigned int)(*(_DWORD *)(this + 19248) - v11)) < 0x1004 && *(_DWORD *)(this + 19248) != v11 )\n    {\n      sub_41F0F6(this);\n      if ( *(_QWORD *)(this + 19536) > *(_QWORD *)(this + 19520) )\n        return 0;\n    }\n    v12 = sub_402717((_DWORD *)(a2 + 4));\n    v13 = *(_DWORD *)(a2 + 180);\n    v14 = v12 & 0xFFFE;\n    if ( v14 >= *(_DWORD *)(a2 + 4 * v13 + 52) )\n    {\n      v18 = v13 + 1;\n      v106 = 15;\n      if ( v18 < 0xF )\n      {\n        v19 = (unsigned int *)(a2 + 4 * v18 + 52);\n        while ( v14 >= *v19 )\n        {\n          ++v18;\n          ++v19;\n          if ( v18 >= 0xF )\n            goto LABEL_27;\n        }\n        v106 = v18;\n      }\nLABEL_27:\n      v20 = v106 + *(_DWORD *)(a2 + 8);\n      *(_DWORD *)(a2 + 4) += v20 >> 3;\n      *(_DWORD *)(a2 + 8) = v20 & 7;\n      v21 = *(_DWORD *)(a2 + 4 * v106 + 116) + ((v14 - *(_DWORD *)(a2 + 4 * v106 + 48)) >> (16 - v106));\n      if ( v21 >= *(_DWORD *)(a2 + 48) )\n        v21 = 0;\n      v17 = *(unsigned __int16 *)(a2 + 2 * v21 + 3256);\n    }\n    else\n    {\n      v15 = v14 >> (16 - v13);\n      v16 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v15 + a2 + 184);\n      *v6 += v16 >> 3;\n      *(_DWORD *)(a2 + 8) = v16 & 7;\n      v17 = *(unsigned __int16 *)(a2 + 2 * v15 + 1208);\n    }\n    if ( v17 >= 0x100 )\n    {\n      if ( v17 < 0x106 )\n      {\n        if ( v17 == 256 )\n        {\n          if ( !sub_417FAA((_DWORD *)this, a2 + 4, (int)v97) || !sub_41C4B0((_DWORD *)this, (int)v97) )\n            return 1;\n        }\n        else if ( v17 == 257 )\n        {\n          if ( *(_DWORD *)(this + 104) )\n          {\n            v64 = *(_DWORD *)(this + 112);\n            v112 = *(_DWORD *)(this + 104);\n            v65 = v64 - *(_DWORD *)(this + 84);\n            v66 = *(_DWORD *)(this + 59124) - 4097;\n            v101 = v65;\n            if ( v65 < v66 && v64 < v66 )\n            {\n              v67 = *(_DWORD *)(this + 19252);\n              v104 = (void *)(v67 + v65);\n              v68 = (void *)(v64 + v67);\n              Src = v68;\n              *(_DWORD *)(this + 112) = v112 + v64;\n              if ( *(_DWORD *)(this + 84) >= v112 )\n              {\n                if ( v112 >= 8 )\n                {\n                  v101 = v112 >> 3;\n                  do\n                  {\n                    memcpy(Src, v104, 8u);\n                    v104 = (char *)v104 + 8;\n                    Src = (char *)Src + 8;\n                    v112 -= 8;\n                    --v101;\n                  }\n                  while ( v101 );\n                }\n                goto LABEL_110;\n              }\n              if ( v112 >= 8 )\n              {\n                v101 = v112 >> 3;\n                v69 = v104;\n                v70 = v68;\n                do\n                {\n                  v112 -= 8;\n                  *v70 = *v69;\n                  v70[1] = v69[1];\n                  v70[2] = v69[2];\n                  v70[3] = v69[3];\n                  v70[4] = v69[4];\n                  v70[5] = v69[5];\n                  v70[6] = v69[6];\n                  v70[7] = v69[7];\n                  v69 += 8;\n                  v70 += 8;\n                  --v101;\n                }\n                while ( v101 );\nLABEL_106:\n                Src = v70;\n                v104 = v69;\n                goto LABEL_110;\n              }\n              goto LABEL_110;\n            }\n            if ( v112 )\n            {\n              v71 = *(_DWORD *)(this + 59128);\n              do\n              {\n                --v112;\n                *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = *(_BYTE *)((v71 & v65)\n                                                                                           + *(_DWORD *)(this + 19252));\n                v71 = *(_DWORD *)(this + 59128);\n                v65 = v101 + 1;\n                v72 = v71 & (*(_DWORD *)(this + 112) + 1);\n                ++v101;\n                *(_DWORD *)(this + 112) = v72;\n              }\n              while ( v112 );\n            }\n          }\n        }\n        else\n        {\n          v73 = v17 == 258;\n          v74 = v17 - 258;\n          v75 = (int *)(this + 4 * v74 + 84);\n          v101 = *v75;\n          if ( !v73 )\n          {\n            do\n            {\n              *v75 = *(v75 - 1);\n              --v74;\n              --v75;\n            }\n            while ( v74 );\n          }\n          *(_DWORD *)(this + 84) = v101;\n          v76 = sub_402717((_DWORD *)(a2 + 4));\n          v77 = *(_DWORD *)(a2 + 11640);\n          v78 = v76 & 0xFFFE;\n          if ( v78 >= *(_DWORD *)(a2 + 4 * v77 + 11512) )\n          {\n            v82 = v77 + 1;\n            v113 = 15;\n            if ( v82 < 0xF )\n            {\n              v83 = (unsigned int *)(a2 + 4 * v82 + 11512);\n              while ( v78 >= *v83 )\n              {\n                ++v82;\n                ++v83;\n                if ( v82 >= 0xF )\n                  goto LABEL_132;\n              }\n              v113 = v82;\n            }\nLABEL_132:\n            v84 = v113 + *(_DWORD *)(a2 + 8);\n            *(_DWORD *)(a2 + 4) += v84 >> 3;\n            *(_DWORD *)(a2 + 8) = v84 & 7;\n            v85 = *(_DWORD *)(a2 + 4 * v113 + 11576) + ((v78 - *(_DWORD *)(a2 + 4 * v113 + 11508)) >> (16 - v113));\n            if ( v85 >= *(_DWORD *)(a2 + 11508) )\n              v85 = 0;\n            v81 = *(unsigned __int16 *)(a2 + 2 * v85 + 14716);\n          }\n          else\n          {\n            v79 = v78 >> (16 - v77);\n            v80 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v79 + a2 + 11644);\n            *v6 += v80 >> 3;\n            *(_DWORD *)(a2 + 8) = v80 & 7;\n            v81 = *(unsigned __int16 *)(a2 + 2 * v79 + 12668);\n          }\n          if ( v81 >= 8 )\n          {\n            v114 = (v81 >> 2) - 1;\n            v86 = ((v81 & 3 | 4) << v114) + 2;\n            v102 = v86;\n            if ( v114 )\n            {\n              v87 = sub_402717((_DWORD *)(a2 + 4));\n              v102 += v87 >> (16 - v114);\n              v88 = v114 + *(_DWORD *)(a2 + 8);\n              *v6 += v88 >> 3;\n              *(_DWORD *)(a2 + 8) = v88 & 7;\n              v86 = v102;\n            }\n          }\n          else\n          {\n            v86 = v81 + 2;\n            v102 = v86;\n          }\n          v89 = *(_DWORD *)(this + 112) - v101;\n          v90 = *(_DWORD *)(this + 59124) - 4097;\n          *(_DWORD *)(this + 104) = v86;\n          v112 = v86;\n          v103 = v89;\n          if ( v89 >= v90 || *(_DWORD *)(this + 112) >= v90 )\n          {\n            if ( v86 )\n            {\n              v93 = *(_DWORD *)(this + 59128);\n              do\n              {\n                v94 = *(_DWORD *)(this + 19252);\n                --v112;\n                v95 = *(_BYTE *)((v93 & v103) + v94);\n                v96 = *(_DWORD *)(this + 112);\n                ++v103;\n                *(_BYTE *)(v94 + v96) = v95;\n                v93 = *(_DWORD *)(this + 59128);\n                *(_DWORD *)(this + 112) = v93 & (*(_DWORD *)(this + 112) + 1);\n              }\n              while ( v112 );\n            }\n          }\n          else\n          {\n            v91 = *(_DWORD *)(this + 19252);\n            v104 = (void *)(v91 + v89);\n            v92 = *(_DWORD *)(this + 112);\n            Src = (void *)(v92 + v91);\n            *(_DWORD *)(this + 112) = v86 + v92;\n            if ( v101 >= v86 )\n            {\n              if ( v86 >= 8 )\n              {\n                v101 = v102 >> 3;\n                do\n                {\n                  memcpy(Src, v104, 8u);\n                  v104 = (char *)v104 + 8;\n                  Src = (char *)Src + 8;\n                  v112 -= 8;\n                  --v101;\n                }\n                while ( v101 );\n              }\n              goto LABEL_110;\n            }\n            if ( v86 >= 8 )\n            {\n              v70 = Src;\n              v101 = v102 >> 3;\n              v69 = v104;\n              do\n              {\n                v112 -= 8;\n                *v70 = *v69;\n                v70[1] = v69[1];\n                v70[2] = v69[2];\n                v70[3] = v69[3];\n                v70[4] = v69[4];\n                v70[5] = v69[5];\n                v70[6] = v69[6];\n                v70[7] = v69[7];\n                v69 += 8;\n                v70 += 8;\n                --v101;\n              }\n              while ( v101 );\n              goto LABEL_106;\n            }\nLABEL_110:\n            if ( v112 )\n            {\n              v60 = Src;\n              *(_BYTE *)Src = *(_BYTE *)v104;\n              if ( v112 != 1 )\n              {\n                v60[1] = *((_BYTE *)v104 + 1);\n                if ( v112 > 2 )\n                {\n                  v60[2] = *((_BYTE *)v104 + 2);\n                  if ( v112 > 3 )\n                  {\n                    v60[3] = *((_BYTE *)v104 + 3);\n                    if ( v112 > 4 )\n                    {\n                      v60[4] = *((_BYTE *)v104 + 4);\n                      if ( v112 > 5 )\n                      {\n                        v60[5] = *((_BYTE *)v104 + 5);\n                        if ( v112 > 6 )\n                        {\n                          v61 = v104;\nLABEL_89:\n                          v60[6] = v61[6];\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      else\n      {\n        v22 = v17 - 262;\n        if ( v22 >= 8 )\n        {\n          v107 = (v22 >> 2) - 1;\n          v104 = (void *)(((v22 & 3 | 4) << v107) + 2);\n          if ( v22 >> 2 != 1 )\n          {\n            v23 = sub_402717((_DWORD *)(a2 + 4));\n            v104 = (char *)v104 + (v23 >> (16 - v107));\n            v24 = v107 + *(_DWORD *)(a2 + 8);\n            *v6 += v24 >> 3;\n            *(_DWORD *)(a2 + 8) = v24 & 7;\n          }\n        }\n        else\n        {\n          v104 = (void *)(v22 + 2);\n        }\n        v103 = (unsigned int)v104;\n        v25 = sub_402717((_DWORD *)(a2 + 4));\n        v26 = *(_DWORD *)(a2 + 4000);\n        v27 = v25 & 0xFFFE;\n        if ( v27 >= *(_DWORD *)(a2 + 4 * v26 + 3872) )\n        {\n          v31 = v26 + 1;\n          v108 = 15;\n          if ( v31 < 0xF )\n          {\n            v32 = (unsigned int *)(a2 + 4 * v31 + 3872);\n            while ( v27 >= *v32 )\n            {\n              ++v31;\n              ++v32;\n              if ( v31 >= 0xF )\n                goto LABEL_45;\n            }\n            v108 = v31;\n          }\nLABEL_45:\n          v33 = v108 + *(_DWORD *)(a2 + 8);\n          *(_DWORD *)(a2 + 4) += v33 >> 3;\n          *(_DWORD *)(a2 + 8) = v33 & 7;\n          v34 = *(_DWORD *)(a2 + 4 * v108 + 3936) + ((v27 - *(_DWORD *)(a2 + 4 * v108 + 3868)) >> (16 - v108));\n          if ( v34 >= *(_DWORD *)(a2 + 3868) )\n            v34 = 0;\n          v30 = *(unsigned __int16 *)(a2 + 2 * v34 + 7076);\n        }\n        else\n        {\n          v28 = v27 >> (16 - v26);\n          v29 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v28 + a2 + 4004);\n          *v6 += v29 >> 3;\n          *(_DWORD *)(a2 + 8) = v29 & 7;\n          v30 = *(unsigned __int16 *)(a2 + 2 * v28 + 5028);\n        }\n        if ( v30 >= 4 )\n        {\n          v35 = (v30 >> 1) - 1;\n          v109 = v35;\n          v102 = ((v30 & 1 | 2) << v35) + 1;\n          if ( v30 >> 1 != 1 )\n          {\n            if ( v35 < 4 )\n            {\n              v48 = sub_41AB0F((_DWORD *)(a2 + 4));\n              v102 += v48 >> (32 - v109);\n              v49 = v109 + *(_DWORD *)(a2 + 8);\n              *v6 += v49 >> 3;\n              *(_DWORD *)(a2 + 8) = v49 & 7;\n            }\n            else\n            {\n              if ( v35 > 4 )\n              {\n                v36 = sub_41AB0F((_DWORD *)(a2 + 4));\n                v37 = v109 + *(_DWORD *)(a2 + 8) - 4;\n                v102 += 16 * (v36 >> (36 - v109));\n                *v6 += v37 >> 3;\n                *(_DWORD *)(a2 + 8) = v37 & 7;\n              }\n              v38 = sub_402717((_DWORD *)(a2 + 4));\n              v39 = *(_DWORD *)(a2 + 7820);\n              v40 = v38 & 0xFFFE;\n              if ( v40 >= *(_DWORD *)(a2 + 4 * v39 + 7692) )\n              {\n                v44 = v39 + 1;\n                v110 = 15;\n                if ( v44 < 0xF )\n                {\n                  v45 = (unsigned int *)(a2 + 4 * v44 + 7692);\n                  while ( v40 >= *v45 )\n                  {\n                    ++v44;\n                    ++v45;\n                    if ( v44 >= 0xF )\n                      goto LABEL_62;\n                  }\n                  v110 = v44;\n                }\nLABEL_62:\n                v46 = v110 + *(_DWORD *)(a2 + 8);\n                *(_DWORD *)(a2 + 4) += v46 >> 3;\n                *(_DWORD *)(a2 + 8) = v46 & 7;\n                v47 = *(_DWORD *)(a2 + 4 * v110 + 7756) + ((v40 - *(_DWORD *)(a2 + 4 * v110 + 7688)) >> (16 - v110));\n                if ( v47 >= *(_DWORD *)(a2 + 7688) )\n                  v47 = 0;\n                v43 = *(unsigned __int16 *)(a2 + 2 * v47 + 10896);\n              }\n              else\n              {\n                v41 = v40 >> (16 - v39);\n                v42 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v41 + a2 + 7824);\n                *v6 += v42 >> 3;\n                *(_DWORD *)(a2 + 8) = v42 & 7;\n                v43 = *(unsigned __int16 *)(a2 + 2 * v41 + 8848);\n              }\n              v102 += v43;\n            }\n          }\n        }\n        else\n        {\n          v102 = v30 + 1;\n        }\n        v50 = v102;\n        if ( v102 > 0x100 )\n        {\n          v103 = (unsigned int)v104 + 1;\n          if ( v102 > 0x2000 )\n          {\n            ++v103;\n            if ( v102 > 0x40000 )\n              ++v103;\n          }\n        }\n        *(_DWORD *)(this + 96) = *(_DWORD *)(this + 92);\n        *(_DWORD *)(this + 92) = *(_DWORD *)(this + 88);\n        *(_DWORD *)(this + 88) = *(_DWORD *)(this + 84);\n        v51 = v103;\n        *(_DWORD *)(this + 104) = v103;\n        v111 = v51;\n        v52 = *(_DWORD *)(this + 112);\n        v53 = v52 - v50;\n        *(_DWORD *)(this + 84) = v50;\n        v54 = *(_DWORD *)(this + 59124) - 4097;\n        v101 = v53;\n        if ( v53 >= v54 || v52 >= v54 )\n        {\n          if ( v103 )\n          {\n            v62 = *(_DWORD *)(this + 59128);\n            do\n            {\n              --v111;\n              *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = *(_BYTE *)((v62 & v53)\n                                                                                         + *(_DWORD *)(this + 19252));\n              v62 = *(_DWORD *)(this + 59128);\n              v53 = v101 + 1;\n              v63 = v62 & (*(_DWORD *)(this + 112) + 1);\n              ++v101;\n              *(_DWORD *)(this + 112) = v63;\n            }\n            while ( v111 );\n          }\n        }\n        else\n        {\n          v55 = *(_DWORD *)(this + 19252);\n          Src = (void *)(v55 + v53);\n          v56 = v103;\n          v57 = (void *)(v52 + v55);\n          v104 = v57;\n          *(_DWORD *)(this + 112) = v103 + v52;\n          if ( v102 >= v56 )\n          {\n            if ( v56 >= 8 )\n            {\n              v101 = v103 >> 3;\n              do\n              {\n                memcpy(v104, Src, 8u);\n                Src = (char *)Src + 8;\n                v104 = (char *)v104 + 8;\n                v111 -= 8;\n                --v101;\n              }\n              while ( v101 );\n            }\n          }\n          else if ( v56 >= 8 )\n          {\n            v101 = v56 >> 3;\n            v58 = Src;\n            v59 = v57;\n            do\n            {\n              v111 -= 8;\n              *v59 = *v58;\n              v59[1] = v58[1];\n              v59[2] = v58[2];\n              v59[3] = v58[3];\n              v59[4] = v58[4];\n              v59[5] = v58[5];\n              v59[6] = v58[6];\n              v59[7] = v58[7];\n              v58 += 8;\n              v59 += 8;\n              --v101;\n            }\n            while ( v101 );\n            v104 = v59;\n            Src = v58;\n          }\n          if ( v111 )\n          {\n            v60 = v104;\n            *(_BYTE *)v104 = *(_BYTE *)Src;\n            if ( v111 != 1 )\n            {\n              v60[1] = *((_BYTE *)Src + 1);\n              if ( v111 > 2 )\n              {\n                v60[2] = *((_BYTE *)Src + 2);\n                if ( v111 > 3 )\n                {\n                  v60[3] = *((_BYTE *)Src + 3);\n                  if ( v111 > 4 )\n                  {\n                    v60[4] = *((_BYTE *)Src + 4);\n                    if ( v111 > 5 )\n                    {\n                      v60[5] = *((_BYTE *)Src + 5);\n                      if ( v111 > 6 )\n                      {\n                        v61 = Src;\n                        goto LABEL_89;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    else\n    {\n      *(_BYTE *)(*(_DWORD *)(this + 19252) + (*(_DWORD *)(this + 112))++) = v17;\n    }\n  }\n  *(_BYTE *)(a2 + 19155) = 1;\n  return 1;\n}\n\n"
    },
    {
        "Function": "sub_41E3B5",
        "Total XOR and shift operations": 39,
        "XOR operations": 0,
        "Shift operations": 39,
        "Operation percentage": "5.23%",
        "Function Body": "\nchar __thiscall sub_41E3B5(int this, char a2)\n{\n  bool v3; // zf\n  signed int v4; // eax\n  int *v5; // edi\n  int v6; // eax\n  int v7; // ecx\n  __int16 v8; // ax\n  int v9; // ebx\n  unsigned int v10; // eax\n  unsigned int v11; // eax\n  unsigned int v12; // ecx\n  unsigned int v13; // ebx\n  int v14; // edx\n  unsigned int v15; // ecx\n  unsigned int *v16; // ebx\n  unsigned int v17; // ebx\n  unsigned int v18; // eax\n  unsigned int v19; // eax\n  unsigned int v20; // eax\n  int v21; // ebx\n  unsigned int v22; // eax\n  unsigned int v23; // eax\n  __int16 v24; // ax\n  int v25; // edx\n  unsigned int v26; // eax\n  unsigned int v27; // eax\n  unsigned int v28; // ecx\n  unsigned int v29; // eax\n  int v30; // ebx\n  unsigned int v31; // ecx\n  unsigned int *v32; // edx\n  unsigned int v33; // edx\n  unsigned int v34; // eax\n  unsigned int v35; // ebx\n  unsigned int v36; // eax\n  unsigned int v37; // ebx\n  __int16 v38; // ax\n  int v39; // ebx\n  unsigned int v40; // eax\n  unsigned int v41; // eax\n  unsigned int v42; // ecx\n  int v43; // eax\n  int v44; // edx\n  unsigned int v45; // ecx\n  unsigned int *v46; // ebx\n  unsigned int v47; // ebx\n  unsigned int v48; // eax\n  unsigned int v49; // eax\n  unsigned int v50; // eax\n  int v51; // ebx\n  int *v52; // eax\n  unsigned int v53; // edx\n  unsigned int v54; // ecx\n  unsigned int v55; // ebx\n  char *v56; // ebx\n  unsigned int v57; // ecx\n  _BYTE *v58; // eax\n  char v59; // dl\n  void *v60; // ecx\n  _BYTE *v61; // eax\n  int v62; // ebx\n  int v63; // edx\n  int v64; // edx\n  int v65; // eax\n  int *v66; // eax\n  unsigned int v67; // edx\n  unsigned int v68; // ecx\n  unsigned int v69; // ebx\n  _BYTE *v70; // eax\n  unsigned int v71; // ecx\n  int v72; // ebx\n  int v73; // edx\n  unsigned int v74; // ebx\n  void **v75; // eax\n  unsigned int v76; // ecx\n  __int16 v77; // ax\n  int v78; // ebx\n  unsigned int v79; // eax\n  unsigned int v80; // eax\n  unsigned int v81; // ecx\n  unsigned int v82; // eax\n  int v83; // edx\n  unsigned int v84; // ecx\n  unsigned int *v85; // ebx\n  unsigned int v86; // ebx\n  unsigned int v87; // eax\n  int v88; // ebx\n  unsigned int v89; // eax\n  unsigned int v90; // eax\n  int *v91; // eax\n  unsigned int v92; // edx\n  unsigned int v93; // ecx\n  unsigned int v94; // ebx\n  int v95; // eax\n  char *v96; // ebx\n  unsigned int v97; // eax\n  unsigned int v98; // ecx\n  _BYTE *v99; // eax\n  _BYTE *v100; // ecx\n  int v101; // ebx\n  int v102; // edx\n  char v104[16]; // [esp+Ch] [ebp-1Ch] BYREF\n  void *v105; // [esp+1Ch] [ebp-Ch]\n  unsigned int v106; // [esp+20h] [ebp-8h]\n  void *v107; // [esp+24h] [ebp-4h]\n  unsigned int v108; // [esp+30h] [ebp+8h]\n  unsigned int v109; // [esp+30h] [ebp+8h]\n  unsigned int v110; // [esp+30h] [ebp+8h]\n  unsigned int v111; // [esp+30h] [ebp+8h]\n\n  v3 = *(_BYTE *)(this + 19528) == 0;\n  *(_BYTE *)(this + 19544) = 1;\n  if ( !v3\n    || (sub_4149CC(this, a2), LOD693(v4) = sub_41B7F1(this), (_BYTE)v4)\n    && (LOD693(v4) = sub_413AC7((_DWORD *)this, (int *)(this + 4), this + 128), (_BYTE)v4)\n    && (LOD693(v4) = sub_411657((_DWORD *)this, this + 4, this + 128, (unsigned int *)(this + 148)), (_BYTE)v4) )\n  {\n    v5 = (int *)(this + 4);\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          *(_DWORD *)(this + 112) &= *(_DWORD *)(this + 59128);\n          if ( *v5 >= *(_DWORD *)(this + 124) )\n          {\n            while ( 1 )\n            {\n              v6 = *(_DWORD *)(this + 128) + *(_DWORD *)(this + 136) - 1;\n              if ( *v5 <= v6 && (*v5 != v6 || *(_DWORD *)(this + 8) < *(_DWORD *)(this + 132)) )\n                break;\n              if ( *(_BYTE *)(this + 144) )\n                goto LABEL_103;\n              LOD693(v4) = sub_413AC7((_DWORD *)this, (int *)(this + 4), this + 128);\n              if ( (_BYTE)v4 )\n              {\n                LOD693(v4) = sub_411657((_DWORD *)this, this + 4, this + 128, (unsigned int *)(this + 148));\n                if ( (_BYTE)v4 )\n                  continue;\n              }\n              return v4;\n            }\n            if ( !sub_41B7F1(this) )\n            {\nLABEL_103:\n              LOD693(v4) = sub_41F0F6(this);\n              return v4;\n            }\n          }\n          v7 = *(_DWORD *)(this + 112);\n          if ( (*(_DWORD *)(this + 59128) & (unsigned int)(*(_DWORD *)(this + 19248) - v7)) < 0x1004\n            && *(_DWORD *)(this + 19248) != v7 )\n          {\n            sub_41F0F6(this);\n            v4 = *(_DWORD *)(this + 19540);\n            if ( v4 > *(_DWORD *)(this + 19524) )\n              return v4;\n            if ( v4 >= *(_DWORD *)(this + 19524) )\n            {\n              v4 = *(_DWORD *)(this + 19536);\n              if ( (unsigned int)v4 > *(_DWORD *)(this + 19520) )\n                return v4;\n            }\n            if ( *(_BYTE *)(this + 19528) )\n            {\n              *(_BYTE *)(this + 19544) = 0;\n              return v4;\n            }\n          }\n          v8 = sub_402717((_DWORD *)(this + 4));\n          v9 = *(_DWORD *)(this + 280);\n          v10 = v8 & 0xFFFE;\n          if ( v10 >= *(_DWORD *)(this + 4 * v9 + 152) )\n          {\n            v14 = 15;\n            v15 = v9 + 1;\n            if ( (unsigned int)(v9 + 1) < 0xF )\n            {\n              v16 = (unsigned int *)(this + 4 * v15 + 152);\n              while ( v10 >= *v16 )\n              {\n                ++v15;\n                ++v16;\n                if ( v15 >= 0xF )\n                  goto LABEL_29;\n              }\n              v14 = v15;\n            }\nLABEL_29:\n            v17 = v14 + *(_DWORD *)(this + 8);\n            *(_DWORD *)(this + 8) = v17 & 7;\n            *v5 += v17 >> 3;\n            v18 = *(_DWORD *)(this + 4 * v14 + 216) + ((v10 - *(_DWORD *)(this + 4 * v14 + 148)) >> (16 - v14));\n            if ( v18 >= *(_DWORD *)(this + 148) )\n              v18 = 0;\n            v13 = *(unsigned __int16 *)(this + 2 * v18 + 3356);\n          }\n          else\n          {\n            v11 = v10 >> (16 - v9);\n            v12 = *(_DWORD *)(this + 8) + *(unsigned __int8 *)(v11 + this + 284);\n            *v5 += v12 >> 3;\n            *(_DWORD *)(this + 8) = v12 & 7;\n            v13 = *(unsigned __int16 *)(this + 2 * v11 + 1308);\n          }\n          if ( v13 >= 0x100 )\n            break;\n          if ( *(_BYTE *)(this + 19512) )\n          {\n            v19 = *(_DWORD *)(this + 112);\n            *(_DWORD *)(this + 112) = v19 + 1;\n            *(_BYTE *)sub_41CEEF((int *)(this + 19256), v19) = v13;\n          }\n          else\n          {\n            *(_BYTE *)(*(_DWORD *)(this + 19252) + (*(_DWORD *)(this + 112))++) = v13;\n          }\n        }\n        if ( v13 < 0x106 )\n          break;\n        v20 = v13 - 262;\n        if ( v13 - 262 >= 8 )\n        {\n          v21 = (v20 >> 2) - 1;\n          v105 = (void *)(((v20 & 3 | 4) << v21) + 2);\n          if ( v20 >> 2 != 1 )\n          {\n            v22 = sub_402717((_DWORD *)(this + 4));\n            v105 = (char *)v105 + (v22 >> (16 - v21));\n            v23 = v21 + *(_DWORD *)(this + 8);\n            *v5 += v23 >> 3;\n            *(_DWORD *)(this + 8) = v23 & 7;\n          }\n        }\n        else\n        {\n          v105 = (void *)(v20 + 2);\n        }\n        v108 = (unsigned int)v105;\n        v24 = sub_402717((_DWORD *)(this + 4));\n        v25 = *(_DWORD *)(this + 4100);\n        v26 = v24 & 0xFFFE;\n        if ( v26 >= *(_DWORD *)(this + 4 * v25 + 3972) )\n        {\n          v30 = 15;\n          v31 = v25 + 1;\n          if ( (unsigned int)(v25 + 1) < 0xF )\n          {\n            v32 = (unsigned int *)(this + 4 * v31 + 3972);\n            while ( v26 >= *v32 )\n            {\n              ++v31;\n              ++v32;\n              if ( v31 >= 0xF )\n                goto LABEL_49;\n            }\n            v30 = v31;\n          }\nLABEL_49:\n          v33 = v30 + *(_DWORD *)(this + 8);\n          *(_DWORD *)(this + 8) = v33 & 7;\n          *v5 += v33 >> 3;\n          v34 = *(_DWORD *)(this + 4 * v30 + 4036) + ((v26 - *(_DWORD *)(this + 4 * v30 + 3968)) >> (16 - v30));\n          if ( v34 >= *(_DWORD *)(this + 3968) )\n            v34 = 0;\n          v29 = *(unsigned __int16 *)(this + 2 * v34 + 7176);\n        }\n        else\n        {\n          v27 = v26 >> (16 - v25);\n          v28 = *(_DWORD *)(this + 8) + *(unsigned __int8 *)(v27 + this + 4104);\n          *v5 += v28 >> 3;\n          *(_DWORD *)(this + 8) = v28 & 7;\n          v29 = *(unsigned __int16 *)(this + 2 * v27 + 5128);\n        }\n        if ( v29 >= 4 )\n        {\n          v35 = (v29 >> 1) - 1;\n          v106 = ((v29 & 1 | 2) << v35) + 1;\n          if ( v29 >> 1 != 1 )\n          {\n            if ( v35 < 4 )\n            {\n              v49 = sub_41AB0F((_DWORD *)(this + 4));\n              v106 += v49 >> (32 - v35);\n              v50 = v35 + *(_DWORD *)(this + 8);\n              *v5 += v50 >> 3;\n              *(_DWORD *)(this + 8) = v50 & 7;\n            }\n            else\n            {\n              if ( v35 > 4 )\n              {\n                v36 = sub_41AB0F((_DWORD *)(this + 4));\n                v106 += 16 * (v36 >> (36 - v35));\n                v37 = *(_DWORD *)(this + 8) + v35 - 4;\n                *v5 += v37 >> 3;\n                *(_DWORD *)(this + 8) = v37 & 7;\n              }\n              v38 = sub_402717((_DWORD *)(this + 4));\n              v39 = *(_DWORD *)(this + 7920);\n              v40 = v38 & 0xFFFE;\n              if ( v40 >= *(_DWORD *)(this + 4 * v39 + 7792) )\n              {\n                v44 = 15;\n                v45 = v39 + 1;\n                if ( (unsigned int)(v39 + 1) < 0xF )\n                {\n                  v46 = (unsigned int *)(this + 4 * v45 + 7792);\n                  while ( v40 >= *v46 )\n                  {\n                    ++v45;\n                    ++v46;\n                    if ( v45 >= 0xF )\n                      goto LABEL_66;\n                  }\n                  v44 = v45;\n                }\nLABEL_66:\n                v47 = v44 + *(_DWORD *)(this + 8);\n                *(_DWORD *)(this + 8) = v47 & 7;\n                *v5 += v47 >> 3;\n                v48 = *(_DWORD *)(this + 4 * v44 + 7856) + ((v40 - *(_DWORD *)(this + 4 * v44 + 7788)) >> (16 - v44));\n                if ( v48 >= *(_DWORD *)(this + 7788) )\n                  v48 = 0;\n                v43 = *(unsigned __int16 *)(this + 2 * v48 + 10996);\n              }\n              else\n              {\n                v41 = v40 >> (16 - v39);\n                v42 = *(_DWORD *)(this + 8) + *(unsigned __int8 *)(v41 + this + 7924);\n                *v5 += v42 >> 3;\n                *(_DWORD *)(this + 8) = v42 & 7;\n                v43 = *(unsigned __int16 *)(this + 2 * v41 + 8948);\n              }\n              v106 += v43;\n            }\n          }\n        }\n        else\n        {\n          v106 = v29 + 1;\n        }\n        v51 = v106;\n        if ( v106 > 0x100 )\n        {\n          v108 = (unsigned int)v105 + 1;\n          if ( v106 > 0x2000 )\n          {\n            v108 = (unsigned int)v105 + 2;\n            if ( v106 > 0x40000 )\n              v108 = (unsigned int)v105 + 3;\n          }\n        }\n        v3 = *(_BYTE *)(this + 19512) == 0;\n        *(_DWORD *)(this + 96) = *(_DWORD *)(this + 92);\n        *(_DWORD *)(this + 92) = *(_DWORD *)(this + 88);\n        *(_DWORD *)(this + 88) = *(_DWORD *)(this + 84);\n        *(_DWORD *)(this + 84) = v51;\n        *(_DWORD *)(this + 104) = v108;\n        v52 = (int *)(this + 112);\n        if ( v3 )\n        {\n          v53 = *v52;\n          v107 = (void *)v108;\n          v54 = v53 - v51;\n          v55 = *(_DWORD *)(this + 59124) - 4097;\n          v105 = (void *)v54;\n          if ( v54 < v55 && v53 < v55 )\n          {\n            v56 = (char *)(v54 + *(_DWORD *)(this + 19252));\n            v105 = (void *)(v53 + *(_DWORD *)(this + 19252));\n            *v52 = v108 + v53;\n            if ( v106 >= v108 )\n            {\n              if ( v108 >= 8 )\n              {\n                v109 = v108 >> 3;\n                do\n                {\n                  memcpy(v105, v56, 8u);\n                  v105 = (char *)v105 + 8;\n                  v107 = (char *)v107 - 8;\n                  v56 += 8;\n                  --v109;\n                }\n                while ( v109 );\n              }\n            }\n            else if ( v108 >= 8 )\n            {\n              v57 = v108 >> 3;\n              v58 = v105;\n              do\n              {\n                v59 = *v56;\n                v107 = (char *)v107 - 8;\n                *v58 = v59;\n                v58[1] = v56[1];\n                v58[2] = v56[2];\n                v58[3] = v56[3];\n                v58[4] = v56[4];\n                v58[5] = v56[5];\n                v58[6] = v56[6];\n                v58[7] = v56[7];\n                v56 += 8;\n                v58 += 8;\n                --v57;\n              }\n              while ( v57 );\n              v105 = v58;\n            }\n            v60 = v107;\n            goto LABEL_88;\n          }\n          if ( v108 )\n          {\n            v62 = *(_DWORD *)(this + 59128);\n            do\n            {\n              v63 = *(_DWORD *)(this + 19252);\n              v107 = (char *)v107 - 1;\n              *(_BYTE *)(v63 + *v52) = *(_BYTE *)((v62 & v54) + v63);\n              v62 = *(_DWORD *)(this + 59128);\n              v54 = (unsigned int)v105 + 1;\n              v64 = v62 & (*v52 + 1);\n              v3 = v107 == 0;\n              v105 = (char *)v105 + 1;\n              *v52 = v64;\n            }\n            while ( !v3 );\n          }\n        }\n        else\n        {\n          sub_41444F((int *)(this + 19256), v108, v51, (unsigned int *)(this + 112), *(_DWORD *)(this + 59128));\n        }\n      }\n      if ( v13 == 256 )\n      {\n        if ( !sub_417FAA((_DWORD *)this, this + 4, (int)v104) || !sub_41C4B0((_DWORD *)this, (int)v104) )\n          goto LABEL_103;\n      }\n      else if ( v13 == 257 )\n      {\n        v65 = *(_DWORD *)(this + 104);\n        if ( v65 )\n        {\n          if ( *(_BYTE *)(this + 19512) )\n          {\n            sub_41444F(\n              (int *)(this + 19256),\n              v65,\n              *(_DWORD *)(this + 84),\n              (unsigned int *)(this + 112),\n              *(_DWORD *)(this + 59128));\n          }\n          else\n          {\n            v110 = *(_DWORD *)(this + 104);\n            v66 = (int *)(this + 112);\n            v67 = *(_DWORD *)(this + 112);\n            v68 = v67 - *(_DWORD *)(this + 84);\n            v69 = *(_DWORD *)(this + 59124) - 4097;\n            v105 = (void *)v68;\n            if ( v68 >= v69 || v67 >= v69 )\n            {\n              if ( v110 )\n              {\n                v72 = *(_DWORD *)(this + 59128);\n                do\n                {\n                  --v110;\n                  *(_BYTE *)(*(_DWORD *)(this + 19252) + *v66) = *(_BYTE *)((v72 & v68) + *(_DWORD *)(this + 19252));\n                  v72 = *(_DWORD *)(this + 59128);\n                  v68 = (unsigned int)v105 + 1;\n                  v73 = v72 & (*v66 + 1);\n                  v105 = (char *)v105 + 1;\n                  *v66 = v73;\n                }\n                while ( v110 );\n              }\n            }\n            else\n            {\n              v56 = (char *)(v68 + *(_DWORD *)(this + 19252));\n              v105 = (void *)(v67 + *(_DWORD *)(this + 19252));\n              *v66 = v110 + v67;\n              if ( *(_DWORD *)(this + 84) >= v110 )\n              {\n                if ( v110 >= 8 )\n                {\n                  v106 = v110 >> 3;\n                  do\n                  {\n                    memcpy(v105, v56, 8u);\n                    v105 = (char *)v105 + 8;\n                    v110 -= 8;\n                    v56 += 8;\n                    --v106;\n                  }\n                  while ( v106 );\n                }\n              }\n              else if ( v110 >= 8 )\n              {\n                v70 = v105;\n                v71 = v110 >> 3;\n                do\n                {\n                  v110 -= 8;\n                  *v70 = *v56;\n                  v70[1] = v56[1];\n                  v70[2] = v56[2];\n                  v70[3] = v56[3];\n                  v70[4] = v56[4];\n                  v70[5] = v56[5];\n                  v70[6] = v56[6];\n                  v70[7] = v56[7];\n                  v56 += 8;\n                  v70 += 8;\n                  --v71;\n                }\n                while ( v71 );\n                v105 = v70;\n              }\n              v60 = (void *)v110;\nLABEL_88:\n              if ( v60 )\n              {\n                v61 = v105;\n                *(_BYTE *)v105 = *v56;\n                if ( (unsigned int)v60 > 1 )\n                {\n                  v61[1] = v56[1];\n                  if ( (unsigned int)v60 > 2 )\n                  {\n                    v61[2] = v56[2];\n                    if ( (unsigned int)v60 > 3 )\n                    {\n                      v61[3] = v56[3];\n                      if ( (unsigned int)v60 > 4 )\n                      {\n                        v61[4] = v56[4];\n                        if ( (unsigned int)v60 > 5 )\n                        {\n                          v61[5] = v56[5];\n                          if ( (unsigned int)v60 > 6 )\n                            v61[6] = v56[6];\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      else\n      {\n        v3 = v13 == 258;\n        v74 = v13 - 258;\n        v75 = (void **)(this + 4 * v74 + 84);\n        v105 = *v75;\n        v76 = v74;\n        if ( !v3 )\n        {\n          do\n          {\n            *v75 = *(v75 - 1);\n            --v76;\n            --v75;\n          }\n          while ( v76 );\n        }\n        *(_DWORD *)(this + 84) = v105;\n        v77 = sub_402717((_DWORD *)(this + 4));\n        v78 = *(_DWORD *)(this + 11740);\n        v79 = v77 & 0xFFFE;\n        if ( v79 >= *(_DWORD *)(this + 4 * v78 + 11612) )\n        {\n          v83 = 15;\n          v84 = v78 + 1;\n          if ( (unsigned int)(v78 + 1) < 0xF )\n          {\n            v85 = (unsigned int *)(this + 4 * v84 + 11612);\n            while ( v79 >= *v85 )\n            {\n              ++v84;\n              ++v85;\n              if ( v84 >= 0xF )\n                goto LABEL_134;\n            }\n            v83 = v84;\n          }\nLABEL_134:\n          v86 = v83 + *(_DWORD *)(this + 8);\n          *(_DWORD *)(this + 8) = v86 & 7;\n          *v5 += v86 >> 3;\n          v87 = *(_DWORD *)(this + 4 * v83 + 11676) + ((v79 - *(_DWORD *)(this + 4 * v83 + 11608)) >> (16 - v83));\n          if ( v87 >= *(_DWORD *)(this + 11608) )\n            v87 = 0;\n          v82 = *(unsigned __int16 *)(this + 2 * v87 + 14816);\n        }\n        else\n        {\n          v80 = v79 >> (16 - v78);\n          v81 = *(_DWORD *)(this + 8) + *(unsigned __int8 *)(v80 + this + 11744);\n          *v5 += v81 >> 3;\n          *(_DWORD *)(this + 8) = v81 & 7;\n          v82 = *(unsigned __int16 *)(this + 2 * v80 + 12768);\n        }\n        if ( v82 >= 8 )\n        {\n          v88 = (v82 >> 2) - 1;\n          v106 = ((v82 & 3 | 4) << v88) + 2;\n          if ( v82 >> 2 != 1 )\n          {\n            v89 = sub_402717((_DWORD *)(this + 4));\n            v106 += v89 >> (16 - v88);\n            v90 = v88 + *(_DWORD *)(this + 8);\n            *v5 += v90 >> 3;\n            *(_DWORD *)(this + 8) = v90 & 7;\n          }\n        }\n        else\n        {\n          v106 = v82 + 2;\n        }\n        v3 = *(_BYTE *)(this + 19512) == 0;\n        *(_DWORD *)(this + 104) = v106;\n        if ( v3 )\n        {\n          v111 = v106;\n          v91 = (int *)(this + 112);\n          v92 = *(_DWORD *)(this + 112);\n          v93 = v92 - (_DWORD)v105;\n          v94 = *(_DWORD *)(this + 59124) - 4097;\n          v107 = (void *)(v92 - (_DWORD)v105);\n          if ( v92 - (unsigned int)v105 >= v94 || v92 >= v94 )\n          {\n            if ( v106 )\n            {\n              v101 = *(_DWORD *)(this + 59128);\n              do\n              {\n                --v111;\n                *(_BYTE *)(*(_DWORD *)(this + 19252) + *v91) = *(_BYTE *)((v101 & v93) + *(_DWORD *)(this + 19252));\n                v101 = *(_DWORD *)(this + 59128);\n                v93 = (unsigned int)v107 + 1;\n                v102 = v101 & (*v91 + 1);\n                v107 = (char *)v107 + 1;\n                *v91 = v102;\n              }\n              while ( v111 );\n            }\n          }\n          else\n          {\n            v95 = *(_DWORD *)(this + 19252);\n            v96 = (char *)(v95 + v93);\n            v107 = (void *)(v92 + v95);\n            v97 = v106;\n            *(_DWORD *)(this + 112) = v106 + v92;\n            if ( (unsigned int)v105 >= v97 )\n            {\n              if ( v97 >= 8 )\n              {\n                v105 = (void *)(v106 >> 3);\n                do\n                {\n                  memcpy(v107, v96, 8u);\n                  v107 = (char *)v107 + 8;\n                  v111 -= 8;\n                  v96 += 8;\n                  v105 = (char *)v105 - 1;\n                }\n                while ( v105 );\n              }\n            }\n            else if ( v97 >= 8 )\n            {\n              v98 = v97 >> 3;\n              v99 = v107;\n              do\n              {\n                v111 -= 8;\n                *v99 = *v96;\n                v99[1] = v96[1];\n                v99[2] = v96[2];\n                v99[3] = v96[3];\n                v99[4] = v96[4];\n                v99[5] = v96[5];\n                v99[6] = v96[6];\n                v99[7] = v96[7];\n                v96 += 8;\n                v99 += 8;\n                --v98;\n              }\n              while ( v98 );\n              v107 = v99;\n            }\n            if ( v111 )\n            {\n              v100 = v107;\n              *(_BYTE *)v107 = *v96;\n              if ( v111 != 1 )\n              {\n                v100[1] = v96[1];\n                if ( v111 > 2 )\n                {\n                  v100[2] = v96[2];\n                  if ( v111 > 3 )\n                  {\n                    v100[3] = v96[3];\n                    if ( v111 > 4 )\n                    {\n                      v100[4] = v96[4];\n                      if ( v111 > 5 )\n                      {\n                        v100[5] = v96[5];\n                        if ( v111 > 6 )\n                          v100[6] = v96[6];\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else\n        {\n          sub_41444F((int *)(this + 19256), v106, (int)v105, (unsigned int *)(this + 112), *(_DWORD *)(this + 59128));\n        }\n      }\n    }\n  }\n  return v4;\n}\n\n"
    },
    {
        "Function": "sub_4103A6",
        "Total XOR and shift operations": 37,
        "XOR operations": 0,
        "Shift operations": 37,
        "Operation percentage": "3.76%",
        "Function Body": "\nchar __thiscall sub_4103A6(int this, char a2)\n{\n  unsigned int v2; // ebx\n  int v4; // edi\n  bool v5; // zf\n  signed int v6; // eax\n  _DWORD *v7; // edi\n  int v8; // ecx\n  int v9; // eax\n  char v10; // bl\n  int v11; // eax\n  char v12; // al\n  int v13; // ebx\n  int v14; // eax\n  unsigned int v15; // ecx\n  unsigned int v16; // eax\n  unsigned int v17; // edx\n  int v18; // edx\n  _BYTE *v19; // ebx\n  char *v20; // edx\n  unsigned int v21; // ecx\n  char *v22; // eax\n  unsigned int v23; // ecx\n  _BYTE *v24; // eax\n  int v25; // edx\n  int v26; // eax\n  unsigned int v27; // eax\n  unsigned int v28; // edx\n  unsigned int v29; // ecx\n  int v30; // ecx\n  unsigned int v31; // ecx\n  int v32; // ecx\n  __int16 v33; // ax\n  int v34; // ebx\n  unsigned int v35; // eax\n  unsigned int v36; // eax\n  unsigned int v37; // ecx\n  int v38; // eax\n  int v39; // edx\n  unsigned int v40; // ecx\n  unsigned int *v41; // ebx\n  unsigned int v42; // ebx\n  unsigned int v43; // eax\n  int v44; // ebx\n  unsigned int v45; // ebx\n  unsigned int v46; // eax\n  __int16 v47; // ax\n  int v48; // ebx\n  unsigned int v49; // eax\n  unsigned int v50; // eax\n  unsigned int v51; // ecx\n  int v52; // eax\n  int v53; // edx\n  unsigned int v54; // ecx\n  unsigned int *v55; // ebx\n  unsigned int v56; // ebx\n  unsigned int v57; // eax\n  unsigned int v58; // ebx\n  unsigned int v59; // edx\n  unsigned int v60; // eax\n  int v61; // eax\n  __int16 v62; // ax\n  int v63; // edx\n  unsigned int v64; // eax\n  unsigned int v65; // eax\n  unsigned int v66; // ecx\n  int v67; // eax\n  unsigned int v68; // edx\n  unsigned int *v69; // ecx\n  unsigned int v70; // ecx\n  unsigned int v71; // eax\n  unsigned int v72; // eax\n  unsigned int v73; // ecx\n  int v74; // edx\n  int v75; // eax\n  unsigned int v76; // edx\n  int v77; // edx\n  char *v78; // edx\n  char *v79; // eax\n  int v80; // edx\n  unsigned int v81; // ecx\n  unsigned int v82; // eax\n  unsigned int v83; // edx\n  int v84; // edx\n  char *v85; // edx\n  unsigned int v86; // ecx\n  int v87; // edx\n  int v88; // eax\n  void **v89; // ecx\n  void *v90; // edx\n  __int16 v91; // ax\n  int v92; // ebx\n  unsigned int v93; // eax\n  unsigned int v94; // eax\n  unsigned int v95; // ecx\n  int v96; // eax\n  int v97; // edx\n  unsigned int v98; // ebx\n  unsigned int *v99; // ecx\n  unsigned int v100; // ebx\n  unsigned int v101; // eax\n  int v102; // ebx\n  unsigned int v103; // eax\n  unsigned int v104; // ecx\n  unsigned int v105; // eax\n  unsigned int v106; // edx\n  int v107; // edx\n  _BYTE *v108; // ebx\n  _BYTE *v109; // edx\n  unsigned int v110; // ecx\n  _BYTE *v111; // eax\n  int v112; // edx\n  int v113; // ebx\n  unsigned int v114; // eax\n  unsigned int v115; // ecx\n  int v116; // edx\n  unsigned int v117; // eax\n  unsigned int v118; // edx\n  int v119; // edx\n  _BYTE *v120; // eax\n  _BYTE *v121; // edx\n  int v122; // edx\n  int v124; // [esp+Ch] [ebp-10h]\n  int v125; // [esp+10h] [ebp-Ch]\n  unsigned int v126; // [esp+10h] [ebp-Ch]\n  unsigned int v127; // [esp+10h] [ebp-Ch]\n  unsigned int v128; // [esp+10h] [ebp-Ch]\n  unsigned int v129; // [esp+10h] [ebp-Ch]\n  unsigned int v130; // [esp+10h] [ebp-Ch]\n  unsigned int v131; // [esp+10h] [ebp-Ch]\n  unsigned int v132; // [esp+10h] [ebp-Ch]\n  unsigned int v133; // [esp+10h] [ebp-Ch]\n  char *v134; // [esp+14h] [ebp-8h]\n  char *v135; // [esp+14h] [ebp-8h]\n  void *v136; // [esp+14h] [ebp-8h]\n  char *v137; // [esp+18h] [ebp-4h]\n  char *v138; // [esp+18h] [ebp-4h]\n  unsigned int v139; // [esp+18h] [ebp-4h]\n  _BYTE *v140; // [esp+18h] [ebp-4h]\n  unsigned int v141; // [esp+24h] [ebp+8h]\n  int v142; // [esp+24h] [ebp+8h]\n  int v143; // [esp+24h] [ebp+8h]\n  int v144; // [esp+24h] [ebp+8h]\n  unsigned int v145; // [esp+24h] [ebp+8h]\n  int v146; // [esp+24h] [ebp+8h]\n  unsigned int v147; // [esp+24h] [ebp+8h]\n  int v148; // [esp+24h] [ebp+8h]\n  int v149; // [esp+24h] [ebp+8h]\n  char v150; // [esp+27h] [ebp+Bh]\n\n  v2 = 0;\n  if ( !dword_446FA2 )\n  {\n    v134 = 0;\n    v4 = 0;\n    do\n    {\n      if ( (int)Size[v2] > 0 )\n      {\n        v137 = (char *)Size[v2];\n        memset(&byte_448A28[v4], v2, (size_t)v137);\n        do\n        {\n          dword_444BA4[v4++] = (int)v134;\n          v5 = v137-- == (char *)1;\n          v134 += 1 << v2;\n        }\n        while ( !v5 );\n      }\n      ++v2;\n    }\n    while ( v2 < 0x13 );\n  }\n  v5 = *(_BYTE *)(this + 19528) == 0;\n  *(_BYTE *)(this + 19544) = 1;\n  if ( !v5\n    || (sub_4149CC(this, a2), LOD693(v6) = sub_411D23(this), (_BYTE)v6)\n    && (a2 && *(_BYTE *)(this + 58996) || (LOD693(v6) = sub_41F77B(this), (_BYTE)v6)) )\n  {\n    v7 = (_DWORD *)(this + 4);\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\nLABEL_13:\n            *(_DWORD *)(this + 112) &= *(_DWORD *)(this + 59128);\n            if ( *v7 > *(_DWORD *)(this + 124) && !sub_411D23(this) )\n            {\nLABEL_219:\n              LOD693(v6) = sub_419D1D(this);\n              return v6;\n            }\n            v8 = *(_DWORD *)(this + 112);\n            if ( (*(_DWORD *)(this + 59128) & (unsigned int)(*(_DWORD *)(this + 116) - v8)) < 0x104\n              && *(_DWORD *)(this + 116) != v8 )\n            {\n              sub_419D1D(this);\n              v6 = *(_DWORD *)(this + 19540);\n              if ( v6 > *(_DWORD *)(this + 19524) )\n                return v6;\n              if ( v6 >= *(_DWORD *)(this + 19524) )\n              {\n                v6 = *(_DWORD *)(this + 19536);\n                if ( (unsigned int)v6 > *(_DWORD *)(this + 19520) )\n                  return v6;\n              }\n              if ( *(_BYTE *)(this + 19528) )\n              {\n                *(_BYTE *)(this + 19544) = 0;\n                return v6;\n              }\n            }\n            if ( *(_DWORD *)(this + 58992) != 1 )\n              break;\n            v9 = sub_41D5A1(this + 39120);\n            v10 = v9;\n            if ( v9 == -1 )\n            {\n              sub_419597((unsigned int *)(this + 39120));\n              *(_DWORD *)(this + 58992) = 0;\n              goto LABEL_219;\n            }\n            if ( v9 != *(_DWORD *)(this + 58556) )\n              goto LABEL_78;\n            v11 = sub_41FE31((unsigned int *)this);\n            if ( v11 )\n            {\n              switch ( v11 )\n              {\n                case -1:\n                case 2:\n                  goto LABEL_219;\n                case 3:\n                  v12 = sub_41ECE7((unsigned int *)this);\n                  goto LABEL_26;\n                case 4:\n                  v13 = 0;\n                  v150 = 0;\n                  v125 = 0;\n                  while ( !v150 )\n                  {\n                    v14 = sub_41FE31((unsigned int *)this);\n                    if ( v14 == -1 )\n                    {\n                      v150 = 1;\n                    }\n                    else if ( v125 == 3 )\n                    {\n                      v124 = (unsigned __int8)v14;\n                    }\n                    else\n                    {\n                      v13 = (unsigned __int8)v14 + (v13 << 8);\n                    }\n                    if ( ++v125 >= 4 )\n                    {\n                      if ( v150 )\n                        goto LABEL_219;\n                      v15 = *(_DWORD *)(this + 112);\n                      v141 = v124 + 32;\n                      v16 = v15 - (v13 + 2);\n                      v126 = v13 + 2;\n                      v17 = *(_DWORD *)(this + 59124) - 4097;\n                      if ( v16 >= v17 || v15 >= v17 )\n                      {\n                        if ( v124 != -32 )\n                        {\n                          v25 = *(_DWORD *)(this + 59128);\n                          do\n                          {\n                            --v141;\n                            *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = *(_BYTE *)((v16 & v25) + *(_DWORD *)(this + 19252));\n                            v25 = *(_DWORD *)(this + 59128);\n                            ++v16;\n                            *(_DWORD *)(this + 112) = v25 & (*(_DWORD *)(this + 112) + 1);\n                          }\n                          while ( v141 );\n                        }\n                        goto LABEL_13;\n                      }\n                      v18 = *(_DWORD *)(this + 19252);\n                      v19 = (_BYTE *)(v18 + v16);\n                      v20 = (char *)(v15 + v18);\n                      v138 = v20;\n                      *(_DWORD *)(this + 112) = v141 + v15;\n                      if ( v126 >= v141 )\n                      {\n                        if ( v141 >= 8 )\n                        {\n                          v127 = v141 >> 3;\n                          do\n                          {\n                            memcpy(v138, v19, 8u);\n                            v138 += 8;\n                            v141 -= 8;\n                            v19 += 8;\n                            --v127;\n                          }\n                          while ( v127 );\n                        }\n                        goto LABEL_52;\n                      }\n                      if ( v141 < 8 )\n                        goto LABEL_52;\n                      v21 = v141 >> 3;\n                      v22 = v20;\n                      do\n                      {\n                        v141 -= 8;\n                        *v22 = *v19;\n                        v22[1] = v19[1];\n                        v22[2] = v19[2];\n                        v22[3] = v19[3];\n                        v22[4] = v19[4];\n                        v22[5] = v19[5];\n                        v22[6] = v19[6];\n                        v22[7] = v19[7];\n                        v19 += 8;\n                        v22 += 8;\n                        --v21;\n                      }\n                      while ( v21 );\n                      goto LABEL_48;\n                    }\n                  }\n                  goto LABEL_219;\n              }\n              if ( v11 != 5 )\n              {\nLABEL_78:\n                *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = v10;\n                goto LABEL_92;\n              }\n              v26 = sub_41FE31((unsigned int *)this);\n              if ( v26 == -1 )\n                goto LABEL_219;\n              v141 = v26 + 4;\n              v27 = *(_DWORD *)(this + 112);\n              v28 = v27 - 1;\n              v29 = *(_DWORD *)(this + 59124) - 4097;\n              if ( v27 - 1 >= v29 || v27 >= v29 )\n              {\n                if ( v141 )\n                {\n                  v32 = *(_DWORD *)(this + 59128);\n                  do\n                  {\n                    --v141;\n                    *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = *(_BYTE *)((v28 & v32)\n                                                                                               + *(_DWORD *)(this + 19252));\n                    v32 = *(_DWORD *)(this + 59128);\n                    ++v28;\n                    *(_DWORD *)(this + 112) = v32 & (*(_DWORD *)(this + 112) + 1);\n                  }\n                  while ( v141 );\n                }\n              }\n              else\n              {\n                v30 = *(_DWORD *)(this + 19252);\n                v19 = (_BYTE *)(v30 + v28);\n                v138 = (char *)(v27 + v30);\n                *(_DWORD *)(this + 112) = v141 + v27;\n                if ( v141 >= 8 )\n                {\n                  v22 = (char *)(v27 + v30);\n                  v31 = v141 >> 3;\n                  do\n                  {\n                    v141 -= 8;\n                    *v22 = *v19;\n                    v22[1] = v19[1];\n                    v22[2] = v19[2];\n                    v22[3] = v19[3];\n                    v22[4] = v19[4];\n                    v22[5] = v19[5];\n                    v22[6] = v19[6];\n                    v22[7] = v19[7];\n                    v19 += 8;\n                    v22 += 8;\n                    --v31;\n                  }\n                  while ( v31 );\nLABEL_48:\n                  v138 = v22;\n                }\nLABEL_52:\n                v23 = v141;\n                if ( v141 )\n                {\n                  v24 = v138;\n                  goto LABEL_54;\n                }\n              }\n            }\n            else\n            {\n              v12 = sub_41F77B(this);\nLABEL_26:\n              if ( !v12 )\n                goto LABEL_219;\n            }\n          }\n          v33 = sub_402717((_DWORD *)(this + 4));\n          v34 = *(_DWORD *)(this + 280);\n          v35 = v33 & 0xFFFE;\n          if ( v35 >= *(_DWORD *)(this + 4 * v34 + 152) )\n          {\n            v39 = 15;\n            v40 = v34 + 1;\n            if ( (unsigned int)(v34 + 1) < 0xF )\n            {\n              v41 = (unsigned int *)(this + 4 * v40 + 152);\n              while ( v35 >= *v41 )\n              {\n                ++v40;\n                ++v41;\n                if ( v40 >= 0xF )\n                  goto LABEL_87;\n              }\n              v39 = v40;\n            }\nLABEL_87:\n            v42 = v39 + *(_DWORD *)(this + 8);\n            *(_DWORD *)(this + 8) = v42 & 7;\n            *v7 += v42 >> 3;\n            v43 = *(_DWORD *)(this + 4 * v39 + 216) + ((v35 - *(_DWORD *)(this + 4 * v39 + 148)) >> (16 - v39));\n            if ( v43 >= *(_DWORD *)(this + 148) )\n              v43 = 0;\n            v38 = *(unsigned __int16 *)(this + 2 * v43 + 3356);\n          }\n          else\n          {\n            v36 = v35 >> (16 - v34);\n            v37 = *(_DWORD *)(this + 8) + *(unsigned __int8 *)(v36 + this + 284);\n            *v7 += v37 >> 3;\n            *(_DWORD *)(this + 8) = v37 & 7;\n            v38 = *(unsigned __int16 *)(this + 2 * v36 + 1308);\n          }\n          if ( v38 >= 256 )\n            break;\n          *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = v38;\nLABEL_92:\n          ++*(_DWORD *)(this + 112);\n        }\n        if ( v38 >= 271 )\n          break;\n        switch ( v38 )\n        {\n          case 256:\n            v12 = sub_417DFC(this);\n            goto LABEL_26;\n          case 257:\n            v12 = sub_41E690((_DWORD *)this);\n            goto LABEL_26;\n          case 258:\n            if ( *(_DWORD *)(this + 104) )\n            {\n              v81 = *(_DWORD *)(this + 112);\n              v145 = *(_DWORD *)(this + 104);\n              v82 = v81 - *(_DWORD *)(this + 84);\n              v83 = *(_DWORD *)(this + 59124) - 4097;\n              if ( v82 >= v83 || v81 >= v83 )\n              {\n                if ( v145 )\n                {\n                  v87 = *(_DWORD *)(this + 59128);\n                  do\n                  {\n                    --v145;\n                    *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = *(_BYTE *)((v82 & v87)\n                                                                                               + *(_DWORD *)(this + 19252));\n                    v87 = *(_DWORD *)(this + 59128);\n                    ++v82;\n                    *(_DWORD *)(this + 112) = v87 & (*(_DWORD *)(this + 112) + 1);\n                  }\n                  while ( v145 );\n                }\n              }\n              else\n              {\n                v84 = *(_DWORD *)(this + 19252);\n                v19 = (_BYTE *)(v84 + v82);\n                v85 = (char *)(v81 + v84);\n                v135 = v85;\n                *(_DWORD *)(this + 112) = v145 + v81;\n                if ( *(_DWORD *)(this + 84) >= v145 )\n                {\n                  if ( v145 >= 8 )\n                  {\n                    v131 = v145 >> 3;\n                    do\n                    {\n                      memcpy(v135, v19, 8u);\n                      v135 += 8;\n                      v145 -= 8;\n                      v19 += 8;\n                      --v131;\n                    }\n                    while ( v131 );\n                  }\n                  goto LABEL_143;\n                }\n                if ( v145 >= 8 )\n                {\n                  v86 = v145 >> 3;\n                  v79 = v85;\n                  do\n                  {\n                    v145 -= 8;\n                    *v79 = *v19;\n                    v79[1] = v19[1];\n                    v79[2] = v19[2];\n                    v79[3] = v19[3];\n                    v79[4] = v19[4];\n                    v79[5] = v19[5];\n                    v79[6] = v19[6];\n                    v79[7] = v19[7];\n                    v19 += 8;\n                    v79 += 8;\n                    --v86;\n                  }\n                  while ( v86 );\n                  goto LABEL_139;\n                }\nLABEL_143:\n                v23 = v145;\n                if ( v145 )\n                {\n                  v24 = v135;\nLABEL_54:\n                  *v24 = *v19;\n                  if ( v23 > 1 )\n                  {\n                    v24[1] = v19[1];\n                    if ( v23 > 2 )\n                    {\n                      v24[2] = v19[2];\n                      if ( v23 > 3 )\n                      {\n                        v24[3] = v19[3];\n                        if ( v23 > 4 )\n                        {\n                          v24[4] = v19[4];\n                          if ( v23 > 5 )\n                          {\n                            v24[5] = v19[5];\n                            if ( v23 > 6 )\n                              v24[6] = v19[6];\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            break;\n          default:\n            if ( v38 >= 263 )\n            {\n              v113 = (unsigned __int8)byte_42AF9A[v38] + 1;\n              v148 = (unsigned __int8)byte_42EB87[v38 - 263];\n              if ( byte_42EB87[v38 - 263] )\n              {\n                v113 += (unsigned int)sub_402717((_DWORD *)(this + 4)) >> (16 - v148);\n                v114 = v148 + *(_DWORD *)(this + 8);\n                *v7 += v114 >> 3;\n                *(_DWORD *)(this + 8) = v114 & 7;\n              }\n              v115 = *(_DWORD *)(this + 112);\n              v116 = *(_DWORD *)(this + 59124);\n              *(_DWORD *)(this + 96) = *(_DWORD *)(this + 92);\n              *(_DWORD *)(this + 92) = *(_DWORD *)(this + 88);\n              *(_DWORD *)(this + 88) = *(_DWORD *)(this + 84);\n              *(_DWORD *)(this + 104) = 2;\n              v149 = 2;\n              v117 = v115 - v113;\n              v118 = v116 - 4097;\n              *(_DWORD *)(this + 84) = v113;\n              if ( v115 - v113 >= v118 || v115 >= v118 )\n              {\n                v122 = *(_DWORD *)(this + 59128);\n                do\n                {\n                  --v149;\n                  *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = *(_BYTE *)((v117 & v122)\n                                                                                             + *(_DWORD *)(this + 19252));\n                  v122 = *(_DWORD *)(this + 59128);\n                  ++v117;\n                  *(_DWORD *)(this + 112) = v122 & (*(_DWORD *)(this + 112) + 1);\n                }\n                while ( v149 );\n              }\n              else\n              {\n                v119 = *(_DWORD *)(this + 19252);\n                v120 = (_BYTE *)(v119 + v117);\n                v121 = (_BYTE *)(v115 + v119);\n                *(_DWORD *)(this + 112) = v115 + 2;\n                *v121 = *v120;\n                v121[1] = v120[1];\n              }\n            }\n            else\n            {\n              v88 = v38 - 259;\n              v89 = (void **)(this + 4 * v88 + 84);\n              v90 = *v89;\n              v136 = *v89;\n              while ( v88 > 0 )\n              {\n                *v89 = *(v89 - 1);\n                --v88;\n                --v89;\n              }\n              *(_DWORD *)(this + 84) = v90;\n              v91 = sub_402717((_DWORD *)(this + 4));\n              v92 = *(_DWORD *)(this + 11740);\n              v93 = v91 & 0xFFFE;\n              if ( v93 >= *(_DWORD *)(this + 4 * v92 + 11612) )\n              {\n                v97 = 15;\n                v98 = v92 + 1;\n                if ( v98 < 0xF )\n                {\n                  v99 = (unsigned int *)(this + 4 * v98 + 11612);\n                  while ( v93 >= *v99 )\n                  {\n                    ++v98;\n                    ++v99;\n                    if ( v98 >= 0xF )\n                      goto LABEL_182;\n                  }\n                  v97 = v98;\n                }\nLABEL_182:\n                v100 = v97 + *(_DWORD *)(this + 8);\n                *(_DWORD *)(this + 8) = v100 & 7;\n                *v7 += v100 >> 3;\n                v101 = *(_DWORD *)(this + 4 * v97 + 11676) + ((v93 - *(_DWORD *)(this + 4 * v97 + 11608)) >> (16 - v97));\n                if ( v101 >= *(_DWORD *)(this + 11608) )\n                  v101 = 0;\n                v96 = *(unsigned __int16 *)(this + 2 * v101 + 14816);\n              }\n              else\n              {\n                v94 = v93 >> (16 - v92);\n                v95 = *(_DWORD *)(this + 8) + *(unsigned __int8 *)(v94 + this + 11744);\n                *v7 += v95 >> 3;\n                *(_DWORD *)(this + 8) = v95 & 7;\n                v96 = *(unsigned __int16 *)(this + 2 * v94 + 12768);\n              }\n              v102 = (unsigned __int8)byte_42400C[v96] + 2;\n              v132 = v102;\n              v146 = (unsigned __int8)byte_425D3E[v96];\n              if ( byte_425D3E[v96] )\n              {\n                v102 += (unsigned int)sub_402717((_DWORD *)(this + 4)) >> (16 - v146);\n                v103 = v146 + *(_DWORD *)(this + 8);\n                v132 = v102;\n                *v7 += v103 >> 3;\n                *(_DWORD *)(this + 8) = v103 & 7;\n              }\n              v104 = *(_DWORD *)(this + 112);\n              v105 = v104 - (_DWORD)v136;\n              v106 = *(_DWORD *)(this + 59124) - 4097;\n              *(_DWORD *)(this + 104) = v102;\n              v147 = v102;\n              if ( v104 - (unsigned int)v136 >= v106 || v104 >= v106 )\n              {\n                if ( v102 )\n                {\n                  v112 = *(_DWORD *)(this + 59128);\n                  do\n                  {\n                    --v147;\n                    *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = *(_BYTE *)((v105 & v112)\n                                                                                               + *(_DWORD *)(this + 19252));\n                    v112 = *(_DWORD *)(this + 59128);\n                    ++v105;\n                    *(_DWORD *)(this + 112) = v112 & (*(_DWORD *)(this + 112) + 1);\n                  }\n                  while ( v147 );\n                }\n              }\n              else\n              {\n                v107 = *(_DWORD *)(this + 19252);\n                v108 = (_BYTE *)(v107 + v105);\n                v109 = (_BYTE *)(v104 + v107);\n                v140 = v109;\n                *(_DWORD *)(this + 112) = v132 + v104;\n                if ( (unsigned int)v136 >= v132 )\n                {\n                  if ( v132 >= 8 )\n                  {\n                    v133 = v132 >> 3;\n                    do\n                    {\n                      memcpy(v140, v108, 8u);\n                      v140 += 8;\n                      v147 -= 8;\n                      v108 += 8;\n                      --v133;\n                    }\n                    while ( v133 );\n                  }\n                }\n                else if ( v132 >= 8 )\n                {\n                  v110 = v132 >> 3;\n                  v111 = v109;\n                  do\n                  {\n                    v147 -= 8;\n                    *v111 = *v108;\n                    v111[1] = v108[1];\n                    v111[2] = v108[2];\n                    v111[3] = v108[3];\n                    v111[4] = v108[4];\n                    v111[5] = v108[5];\n                    v111[6] = v108[6];\n                    v111[7] = v108[7];\n                    v108 += 8;\n                    v111 += 8;\n                    --v110;\n                  }\n                  while ( v110 );\n                  v140 = v111;\n                }\n                if ( v147 )\n                {\n                  *v140 = *v108;\n                  if ( v147 != 1 )\n                  {\n                    v140[1] = v108[1];\n                    if ( v147 > 2 )\n                    {\n                      v140[2] = v108[2];\n                      if ( v147 > 3 )\n                      {\n                        v140[3] = v108[3];\n                        if ( v147 > 4 )\n                        {\n                          v140[4] = v108[4];\n                          if ( v147 > 5 )\n                          {\n                            v140[5] = v108[5];\n                            if ( v147 > 6 )\n                              v140[6] = v108[6];\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            break;\n        }\n      }\n      v139 = (unsigned __int8)byte_427E0B[v38] + 3;\n      v142 = (unsigned __int8)byte_425D3E[v38 - 271];\n      if ( byte_425D3E[v38 - 271] )\n      {\n        v44 = (unsigned __int8)byte_427E0B[v38] + 3;\n        v45 = ((unsigned int)sub_402717((_DWORD *)(this + 4)) >> (16 - v142)) + v44;\n        v46 = v142 + *(_DWORD *)(this + 8);\n        v139 = v45;\n        *v7 += v46 >> 3;\n        *(_DWORD *)(this + 8) = v46 & 7;\n      }\n      v47 = sub_402717((_DWORD *)(this + 4));\n      v48 = *(_DWORD *)(this + 4100);\n      v49 = v47 & 0xFFFE;\n      if ( v49 >= *(_DWORD *)(this + 4 * v48 + 3972) )\n      {\n        v53 = 15;\n        v54 = v48 + 1;\n        if ( (unsigned int)(v48 + 1) < 0xF )\n        {\n          v55 = (unsigned int *)(this + 4 * v54 + 3972);\n          while ( v49 >= *v55 )\n          {\n            ++v54;\n            ++v55;\n            if ( v54 >= 0xF )\n              goto LABEL_104;\n          }\n          v53 = v54;\n        }\nLABEL_104:\n        v56 = v53 + *(_DWORD *)(this + 8);\n        *(_DWORD *)(this + 8) = v56 & 7;\n        *v7 += v56 >> 3;\n        v57 = *(_DWORD *)(this + 4 * v53 + 4036) + ((v49 - *(_DWORD *)(this + 4 * v53 + 3968)) >> (16 - v53));\n        if ( v57 >= *(_DWORD *)(this + 3968) )\n          v57 = 0;\n        v52 = *(unsigned __int16 *)(this + 2 * v57 + 7176);\n      }\n      else\n      {\n        v50 = v49 >> (16 - v48);\n        v51 = *(_DWORD *)(this + 8) + *(unsigned __int8 *)(v50 + this + 4104);\n        *v7 += v51 >> 3;\n        *(_DWORD *)(this + 8) = v51 & 7;\n        v52 = *(unsigned __int16 *)(this + 2 * v50 + 5128);\n      }\n      v58 = dword_444BA4[v52] + 1;\n      v128 = v58;\n      v143 = (unsigned __int8)byte_448A28[v52];\n      if ( byte_448A28[v52] )\n        break;\nLABEL_130:\n      if ( v58 >= 0x2000 )\n      {\n        ++v139;\n        if ( v58 >= 0x40000 )\n          ++v139;\n      }\n      v73 = *(_DWORD *)(this + 112);\n      v74 = *(_DWORD *)(this + 59124);\n      *(_DWORD *)(this + 96) = *(_DWORD *)(this + 92);\n      *(_DWORD *)(this + 92) = *(_DWORD *)(this + 88);\n      *(_DWORD *)(this + 88) = *(_DWORD *)(this + 84);\n      *(_DWORD *)(this + 104) = v139;\n      v145 = v139;\n      v75 = v73 - v58;\n      v76 = v74 - 4097;\n      *(_DWORD *)(this + 84) = v58;\n      if ( v73 - v58 < v76 && v73 < v76 )\n      {\n        v77 = *(_DWORD *)(this + 19252);\n        v19 = (_BYTE *)(v77 + v75);\n        v78 = (char *)(v73 + v77);\n        v135 = v78;\n        *(_DWORD *)(this + 112) = v139 + v73;\n        if ( v128 >= v139 )\n        {\n          if ( v139 >= 8 )\n          {\n            v130 = v139 >> 3;\n            do\n            {\n              memcpy(v135, v19, 8u);\n              v135 += 8;\n              v145 -= 8;\n              v19 += 8;\n              --v130;\n            }\n            while ( v130 );\n          }\n          goto LABEL_143;\n        }\n        if ( v139 >= 8 )\n        {\n          v129 = v139 >> 3;\n          v79 = v78;\n          do\n          {\n            v145 -= 8;\n            *v79 = *v19;\n            v79[1] = v19[1];\n            v79[2] = v19[2];\n            v79[3] = v19[3];\n            v79[4] = v19[4];\n            v79[5] = v19[5];\n            v79[6] = v19[6];\n            v79[7] = v19[7];\n            v19 += 8;\n            v79 += 8;\n            --v129;\n          }\n          while ( v129 );\nLABEL_139:\n          v135 = v79;\n          goto LABEL_143;\n        }\n        goto LABEL_143;\n      }\n      if ( v139 )\n      {\n        v80 = *(_DWORD *)(this + 59128);\n        do\n        {\n          --v145;\n          *(_BYTE *)(*(_DWORD *)(this + 19252) + *(_DWORD *)(this + 112)) = *(_BYTE *)((v75 & v80)\n                                                                                     + *(_DWORD *)(this + 19252));\n          v80 = *(_DWORD *)(this + 59128);\n          ++v75;\n          *(_DWORD *)(this + 112) = v80 & (*(_DWORD *)(this + 112) + 1);\n        }\n        while ( v145 );\n      }\n    }\n    if ( v52 <= 9 )\n    {\n      v58 += (unsigned int)sub_402717((_DWORD *)(this + 4)) >> (16 - v143);\n      v72 = v143 + *(_DWORD *)(this + 8);\n      *v7 += v72 >> 3;\n      *(_DWORD *)(this + 8) = v72 & 7;\n      goto LABEL_129;\n    }\n    if ( (unsigned __int8)byte_448A28[v52] > 4u )\n    {\n      v59 = sub_402717((_DWORD *)(this + 4));\n      v60 = *(_DWORD *)(this + 8) + v143 - 4;\n      *v7 += v60 >> 3;\n      v58 += 16 * (v59 >> (20 - v143));\n      *(_DWORD *)(this + 8) = v60 & 7;\n    }\n    v61 = *(_DWORD *)(this + 39116);\n    if ( v61 <= 0 )\n    {\n      v62 = sub_402717((_DWORD *)(this + 4));\n      v63 = *(_DWORD *)(this + 7920);\n      v64 = v62 & 0xFFFE;\n      if ( v64 >= *(_DWORD *)(this + 4 * v63 + 7792) )\n      {\n        v68 = v63 + 1;\n        v144 = 15;\n        if ( v68 < 0xF )\n        {\n          v69 = (unsigned int *)(this + 4 * v68 + 7792);\n          while ( v64 >= *v69 )\n          {\n            ++v68;\n            ++v69;\n            if ( v68 >= 0xF )\n              goto LABEL_122;\n          }\n          v144 = v68;\n        }\nLABEL_122:\n        v70 = v144 + *(_DWORD *)(this + 8);\n        *(_DWORD *)(this + 4) += v70 >> 3;\n        *(_DWORD *)(this + 8) = v70 & 7;\n        v71 = *(_DWORD *)(this + 4 * v144 + 7856) + ((v64 - *(_DWORD *)(this + 4 * v144 + 7788)) >> (16 - v144));\n        if ( v71 >= *(_DWORD *)(this + 7788) )\n          v71 = 0;\n        v67 = *(unsigned __int16 *)(this + 2 * v71 + 10996);\n      }\n      else\n      {\n        v65 = v64 >> (16 - v63);\n        v66 = *(_DWORD *)(this + 8) + *(unsigned __int8 *)(v65 + this + 7924);\n        *v7 += v66 >> 3;\n        *(_DWORD *)(this + 8) = v66 & 7;\n        v67 = *(unsigned __int16 *)(this + 2 * v65 + 8948);\n      }\n      if ( v67 != 16 )\n      {\n        v58 += v67;\n        *(_DWORD *)(this + 39112) = v67;\n        goto LABEL_129;\n      }\n      *(_DWORD *)(this + 39116) = 15;\n    }\n    else\n    {\n      *(_DWORD *)(this + 39116) = v61 - 1;\n    }\n    v58 += *(_DWORD *)(this + 39112);\nLABEL_129:\n    v128 = v58;\n    goto LABEL_130;\n  }\n  return v6;\n}\n// 41FFA7: conditional instruction was optimized away because eax.4 is in (107..10E)\n// 41FCA3: conditional instruction was optimized away because %arg_0.4<2u\n// 411EDF: variable 'v124' is possibly undefined\n// 422C0D: using guessed type size_t Size[27];\n// 444BA4: using guessed type int dword_444BA4[];\n// 446FA2: using guessed type int dword_446FA2;\n\n"
    }
]