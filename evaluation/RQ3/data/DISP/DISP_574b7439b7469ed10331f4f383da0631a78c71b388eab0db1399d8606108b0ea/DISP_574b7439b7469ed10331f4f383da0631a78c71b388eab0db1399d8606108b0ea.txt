[
    {
        "Function": "sub_401C27",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "15.79%",
        "Function Body": "\n__int16 __usercall sub_401C27@<ax>(char *a1@<eax>, int a2@<edx>, int a3@<ecx>)\n{\n  int v4; // eax\n  int v5; // ecx\n\n  BYTE1(a3) = a3;\n  v4 = a3 << 16;\n  LOD2B8(v4) = a3;\n  v5 = a2 >> 2;\n  if ( a2 >> 2 >= 0 )\n  {\n    memset32(a1, v4, v5);\n    memset(&a1[4 * v5], v4, a2 & 3);\n  }\n  return v4;\n}\n\n"
    },
    {
        "Function": "sub_410B3A",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "14.29%",
        "Function Body": "\nint __usercall sub_410B3A@<eax>(int a1@<eax>, int a2@<edx>)\n{\n  return (*(int (__thiscall **)(int, int, int))(*(_DWORD *)a1 + 4))(a1, a2, a2 >> 31);\n}\n\n"
    },
    {
        "Function": "sub_407560",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "11.11%",
        "Function Body": "\nint __usercall sub_407560@<eax>(int result@<eax>)\n{\n  if ( result )\n    return *(_DWORD *)(result - 4) >> 1;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_403216",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "10.53%",
        "Function Body": "\nint __usercall sub_403216@<eax>(unsigned __int64 a1@<edx:eax>, char a2@<cl>)\n{\n  if ( a2 < 32 )\n  {\n    a1 >>= a2 & 0x1F;\n  }\n  else if ( a2 < 64 )\n  {\n    LO251ED(a1) = HI8BA3D(a1) >> a2;\n  }\n  else\n  {\n    LO251ED(a1) = 0;\n  }\n  return a1;\n}\n\n"
    },
    {
        "Function": "sub_401D2D",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "10.00%",
        "Function Body": "\nchar sub_401D2D()\n{\n  __int16 CurrentThreadId_0; // [esp+0h] [ebp-2h]\n\n  CurrentThreadId_0 = GetCurrentThreadId_0();\n  return (HID61D(CurrentThreadId_0) ^ CurrentThreadId_0) & 0xF;\n}\n\n"
    },
    {
        "Function": "sub_4217A5",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "10.00%",
        "Function Body": "\nint __usercall sub_4217A5@<eax>(__int16 a1@<ax>)\n{\n  if ( a1 == 1 || a1 == 4 || a1 == 8 )\n    return 1 << a1;\n  else\n    return 0;\n}\n\n"
    },
    {
        "Function": "sub_4244ED",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "9.09%",
        "Function Body": "\nchar __cdecl sub_4244ED(int a1)\n{\n  if ( !*(_DWORD *)(*(_DWORD *)(a1 - 4) + 32) )\n    return (*(int (**)(void))(**(_DWORD **)(a1 - 8) + 28))() ^ 1;\n  return !sub_40CE2C(*(int **)(*(_DWORD *)(a1 - 4) + 32), (int)off_427691)\n      || !(*(unsigned __int8 (**)(void))(**(_DWORD **)(a1 - 8) + 24))();\n}\n// 427691: using guessed type int (*off_427691[3])();\n\n"
    },
    {
        "Function": "sub_400028",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "8.33%",
        "Function Body": "\nchar *__usercall sub_400028@<eax>(char *result@<eax>, _BYTE *a2@<edx>, int a3@<ecx>)\n{\n  _BYTE *v3; // edi\n  int v4; // ebx\n  bool v5; // zf\n  unsigned int v6; // ebx\n  char *v7; // edi\n  int v8; // ecx\n\n  v3 = a2;\n  v4 = a3;\n  v5 = a3 == 0;\n  if ( a3 )\n  {\n    do\n    {\n      if ( !a3 )\n        break;\n      v5 = *v3++ == 0;\n      --a3;\n    }\n    while ( !v5 );\n    if ( v5 )\n      ++a3;\n  }\n  v6 = v4 - a3;\n  qmemcpy(result, a2, 4 * (v6 >> 2));\n  v7 = &result[4 * (v6 >> 2)];\n  v8 = v6 & 3;\n  qmemcpy(v7, &a2[4 * (v6 >> 2)], v8);\n  v7[v8] = 0;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_401661",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "8.33%",
        "Function Body": "\nint __usercall sub_401661@<eax>(char *a1@<eax>, char a2@<dl>)\n{\n  int result; // eax\n  unsigned int v4; // esi\n  char *v5; // eax\n  DWORD v6; // [esp-18h] [ebp-24h]\n  DWORD v7; // [esp-14h] [ebp-20h]\n\n  result = -1;\n  v4 = a2 & 3;\n  if ( v4 <= 2 && (unsigned __int8)(a2 & 0xF0) >> 4 <= 0x40u )\n  {\n    v7 = dwShareMode[(unsigned __int8)(a2 & 0xF0) >> 4];\n    v6 = dwDesiredAccess[v4];\n    v5 = sub_406083(a1);\n    return (int)CreateFileA_0(v5, v6, v7, 0, 3u, 0x80u, 0);\n  }\n  return result;\n}\n// 423E67: using guessed type DWORD dwDesiredAccess[3];\n// 42A581: using guessed type DWORD dwShareMode[5];\n\n"
    },
    {
        "Function": "sub_40BAF3",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "8.33%",
        "Function Body": "\nint __usercall sub_40BAF3@<eax>(char *a1@<eax>, char a2@<dl>)\n{\n  int result; // eax\n  unsigned int v4; // esi\n  char *v5; // eax\n  DWORD v6; // [esp-18h] [ebp-24h]\n  DWORD v7; // [esp-14h] [ebp-20h]\n\n  result = -1;\n  v4 = a2 & 3;\n  if ( v4 <= 2 && (unsigned __int8)(a2 & 0xF0) >> 4 <= 0x40u )\n  {\n    v7 = dword_429D56[(unsigned __int8)(a2 & 0xF0) >> 4];\n    v6 = dword_42877A[v4];\n    v5 = sub_406083(a1);\n    return (int)CreateFileA_0(v5, v6, v7, 0, 3u, 0x80u, 0);\n  }\n  return result;\n}\n// 42877A: using guessed type DWORD dword_42877A[3];\n// 429D56: using guessed type DWORD dword_429D56[5];\n\n"
    },
    {
        "Function": "sub_41849B",
        "Total XOR and shift operations": 4,
        "XOR operations": 1,
        "Shift operations": 3,
        "Operation percentage": "6.45%",
        "Function Body": "\nint __usercall sub_41849B@<eax>(VA5F48TARG *a1@<eax>, VA5F48TARG *a2@<edx>, int a3@<ecx>)\n{\n  int v6; // ecx\n  bool v8; // [esp+Fh] [ebp-9h]\n  int v9; // [esp+10h] [ebp-8h]\n  int v10; // [esp+14h] [ebp-4h]\n\n  v8 = 0;\n  v10 = sub_41AD13(a1);\n  v9 = sub_41AD13(a2);\n  switch ( a3 )\n  {\n    case 0:\n      v8 = __OFADD__(v9, v10);\n      v10 += v9;\n      break;\n    case 1:\n      v8 = __OFSUB__(v10, v9);\n      v10 -= v9;\n      break;\n    case 2:\n      v8 = (unsigned __int64)(v9 * (__int64)v10) >> 32 != 0;\n      v10 *= v9;\n      break;\n    case 4:\n      v10 /= v9;\n      break;\n    case 5:\n      v10 %= v9;\n      break;\n    case 6:\n      v6 = v9;\n      v10 <<= v9;\n      break;\n    case 7:\n      v6 = v9;\n      v10 = (unsigned int)v10 >> v9;\n      break;\n    case 8:\n      v10 &= v9;\n      break;\n    case 9:\n      v10 |= v9;\n      break;\n    case 10:\n      v10 ^= v9;\n      break;\n    default:\n      nullsub_6();\n      break;\n  }\n  if ( v8 )\n    return sub_41C80B(a1, a2, a3);\n  LO92D7(v6) = -4;\n  return sub_4017AD(v6, v10);\n}\n// 4180C7: variable 'v6' is possibly undefined\n// 4017AD: using guessed type int __fastcall sub_4017AD(_DWORD, _DWORD);\n// 414A57: using guessed type int nullsub_6(void);\n\n"
    },
    {
        "Function": "sub_40E1B4",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "4.76%",
        "Function Body": "\nchar __usercall sub_40E1B4@<al>(int a1@<eax>, volatile __int32 *a2@<edx>)\n{\n  int v2; // edx\n  unsigned int v3; // edi\n  int v4; // esi\n  HA9775 v5; // eax\n  void *v6; // ebx\n  unsigned int v8[2]; // [esp-Ch] [ebp-38h] BYREF\n  int *v9; // [esp-4h] [ebp-30h]\n  unsigned int v10; // [esp+Ch] [ebp-20h] BYREF\n  int v11; // [esp+10h] [ebp-1Ch] BYREF\n  int v12; // [esp+14h] [ebp-18h]\n  int v13; // [esp+18h] [ebp-14h]\n  char v14; // [esp+23h] [ebp-9h]\n  volatile __int32 *v15; // [esp+24h] [ebp-8h]\n  int v16; // [esp+28h] [ebp-4h] BYREF\n  int savedregs; // [esp+2Ch] [ebp+0h] BYREF\n\n  v11 = 0;\n  v15 = a2;\n  v16 = a1;\n  sub_40493E(a1);\n  v9 = &savedregs;\n  v8[1] = (unsigned int)&loc_4092BD;\n  v8[0] = (unsigned int)NtCurrentTeb()->NtTib.ExceptionList;\n  __writefsdword(0, (unsigned int)v8);\n  v14 = 0;\n  sub_40494C(1u);\n  v12 = sub_407956();\n  v13 = v2;\n  sub_40F54A(&v11, (int)dword_40882F, (void *)1, v12);\n  sub_406C28(v11, 4 * v12, (int)&v10);\n  v12 = v10 >> 2;\n  v13 = 0;\n  if ( (int)((v10 >> 2) - 1) >= 2 )\n  {\n    v3 = (v10 >> 2) - 3 + 1;\n    v4 = 2;\n    do\n    {\n      v5 = OpenProcess(0x1FFFB2u, 0, *(_DWORD *)(v11 + 4 * v4));\n      v6 = v5;\n      if ( v5 )\n        v14 = sub_4049FB((int)v5, v16, v15);\n      CloseHandle_0(v6);\n      if ( v14 )\n        break;\n      ++v4;\n      --v3;\n    }\n    while ( v3 );\n  }\n  __writefsdword(0, v8[0]);\n  v9 = (int *)&loc_40B04D;\n  sub_4053A4(&v11, (int)dword_40882F);\n  sub_408F4F(&v16);\n  return v14;\n}\n// 406764: variable 'v2' is possibly undefined\n// 40882F: using guessed type int dword_40882F[3];\n\n"
    },
    {
        "Function": "sub_4074BC",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "4.71%",
        "Function Body": "\n_DWORD *__usercall sub_4074BC@<eax>(int a1@<eax>)\n{\n  int v2; // ebx\n  int *v3; // edx\n  int *v4; // esi\n  int *v5; // eax\n  int *v6; // eax\n  struct _EX03B4ION_RECC90RACA58_REA33E *ExceptionList; // [esp-Ch] [ebp-20h] BYREF\n  void *v9; // [esp-8h] [ebp-1Ch]\n  int *v10; // [esp-4h] [ebp-18h]\n  int v11; // [esp+Ch] [ebp-8h]\n  _DWORD *v12; // [esp+10h] [ebp-4h]\n  int savedregs; // [esp+14h] [ebp+0h] BYREF\n\n  if ( !byte_42E529 && !sub_40FF11() || a1 > 2197733640 )\n    return 0;\n  v10 = &savedregs;\n  v9 = &loc_40660C;\n  ExceptionList = NtCurrentTeb()->NtTib.ExceptionList;\n  __writefsdword(0, (unsigned int)&ExceptionList);\n  if ( byte_425345 )\n    EnterCriticalSection(&CriticalSection);\n  v2 = (a1 + 7) & 0xFF9131FC;\n  if ( v2 < 12 )\n    v2 = 12;\n  if ( v2 <= 4096 && (v3 = (int *)*((_DWORD *)hMem + (v2 >> 2) - 3)) != 0 )\n  {\n    v4 = (int *)*((_DWORD *)hMem + (v2 >> 2) - 3);\n    *(int *)((char *)v3 + v2) &= ~1u;\n    v5 = (int *)v3[1];\n    if ( v3 == v5 )\n    {\n      *((_DWORD *)hMem + (v2 >> 2) - 3) = 0;\n    }\n    else\n    {\n      *((_DWORD *)hMem + (v2 >> 2) - 3) = v5;\n      v11 = *v3;\n      *(_DWORD *)(v11 + 4) = v5;\n      *v5 = v11;\n    }\n    *v4 = v3[2] | 2;\n    v12 = v4 + 1;\n    ++dword_42CB38;\n    dword_4255C5 += v2 - 4;\n    sub_40BE2B((unsigned int)ExceptionList, (int)v9, (int)v10);\n  }\n  else if ( v2 > dword_428E58 )\n  {\n    v12 = sub_40AA44(v2);\n    __writefsdword(0, (unsigned int)ExceptionList);\n    v10 = (int *)&loc_40C345;\n    if ( byte_425345 )\n      LeaveCriticalSection(&CriticalSection);\n  }\n  else\n  {\n    dword_428E58 -= v2;\n    if ( dword_428E58 < 12 )\n    {\n      v2 += dword_428E58;\n      dword_428E58 = 0;\n    }\n    v6 = (int *)dword_42B9EF;\n    dword_42B9EF += v2;\n    *v6 = v2 | 2;\n    v12 = v6 + 1;\n    ++dword_42CB38;\n    dword_4255C5 += v2 - 4;\n    sub_40BE2B((unsigned int)ExceptionList, (int)v9, (int)v10);\n  }\n  return v12;\n}\n// 40DF51: conditional instruction was optimized away because ebx.4 is in (C..1000)\n// 40390F: conditional instruction was optimized away because ebx.4 is in (C..1000)\n// 401F38: conditional instruction was optimized away because ebx.4 is in (C..1000)\n// 425345: using guessed type char byte_425345;\n// 42CB38: using guessed type int dword_42CB38;\n// 4255C5: using guessed type int dword_4255C5;\n// 42E529: using guessed type char byte_42E529;\n// 428E58: using guessed type int dword_428E58;\n// 42B9EF: using guessed type int dword_42B9EF;\n\n"
    },
    {
        "Function": "sub_407F1F",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "4.55%",
        "Function Body": "\nint __usercall sub_407F1F@<eax>(int result@<eax>)\n{\n  _EBX = 0;\n  if ( result < 0 )\n  {\n    result = -result;\n    if ( result >= 5120 )\n    {\n      __asm { fldz }\n    }\n    else\n    {\n      _EDX = 5 * (result & 0x1F);\n      __asm\n      {\n        fld     tbyte_40B6CF[ebx+edx*2]\n        fdivp   st(1), st\n      }\n      result = (unsigned int)result >> 5;\n      if ( result )\n      {\n        if ( (result & 0xF) != 0 )\n        {\n          _EDX = 5 * (result & 0xF);\n          __asm\n          {\n            fld     tbyte_405307[ebx+edx*2]\n            fdivp   st(1), st\n          }\n        }\n        result = (unsigned int)result >> 4;\n        if ( result )\n        {\n          result *= 5;\n          __asm\n          {\n            fld     tbyte_407F0B[ebx+eax*2]\n            fdivp   st(1), st\n          }\n        }\n      }\n    }\n  }\n  else if ( result )\n  {\n    if ( result >= 5120 )\n    {\n      __asm { fld     tbyte_40FAC4[ebx] }\n    }\n    else\n    {\n      _EDX = 5 * (result & 0x1F);\n      __asm\n      {\n        fld     tbyte_40B6CF[ebx+edx*2]\n        fmulp   st(1), st\n      }\n      result = (unsigned int)result >> 5;\n      if ( result )\n      {\n        if ( (result & 0xF) != 0 )\n        {\n          _EDX = 5 * (result & 0xF);\n          __asm\n          {\n            fld     tbyte_405307[ebx+edx*2]\n            fmulp   st(1), st\n          }\n        }\n        result = (unsigned int)result >> 4;\n        if ( result )\n        {\n          result *= 5;\n          __asm\n          {\n            fld     tbyte_407F0B[ebx+eax*2]\n            fmulp   st(1), st\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n// 409B52: inconsistent fpu stack\n\n"
    },
    {
        "Function": "sub_424406",
        "Total XOR and shift operations": 8,
        "XOR operations": 0,
        "Shift operations": 8,
        "Operation percentage": "4.37%",
        "Function Body": "\nchar __usercall sub_424406@<al>(int a1@<eax>)\n{\n  char v2; // zf\n  int v3; // esi\n  char **v4; // ebx\n  char *v5; // eax\n  char *v6; // eax\n  char *v7; // eax\n  int v8; // eax\n  int v9; // eax\n  int v10; // eax\n  int v11; // eax\n  int v12; // eax\n  char *v13; // eax\n  int v14; // eax\n  int v15; // eax\n  char *v16; // eax\n  unsigned int v18[2]; // [esp-Ch] [ebp-40h] BYREF\n  int *v19; // [esp-4h] [ebp-38h]\n  char *v20; // [esp+Ch] [ebp-28h] BYREF\n  char *v21; // [esp+10h] [ebp-24h] BYREF\n  char *v22; // [esp+14h] [ebp-20h] BYREF\n  char *v23; // [esp+18h] [ebp-1Ch] BYREF\n  char *v24; // [esp+1Ch] [ebp-18h] BYREF\n  char *v25; // [esp+20h] [ebp-14h] BYREF\n  char *v26; // [esp+24h] [ebp-10h] BYREF\n  int *v27; // [esp+28h] [ebp-Ch] BYREF\n  int v28; // [esp+2Ch] [ebp-8h] BYREF\n  char v29; // [esp+33h] [ebp-1h]\n  int savedregs; // [esp+34h] [ebp+0h] BYREF\n\n  v19 = &savedregs;\n  v18[1] = (unsigned int)&loc_425409;\n  v18[0] = (unsigned int)NtCurrentTeb()->NtTib.ExceptionList;\n  __writefsdword(0, (unsigned int)v18);\n  v29 = 0;\n  sub_40AF0C(HKEY_CL6D17S_ROOT, \"legend of mir2\", \"WinX\", &v25);\n  Delphi_CompareCall_40E576((int)v25, &dword_4206C6);\n  if ( v2 )\n  {\n    sub_40AF0C(HKEY_CL6D17S_ROOT, \"legend of mir2\", (const CHAR *)dword_428DB7, &v24);\n    if ( v24 )\n    {\n      if ( dword_42E6AE )\n      {\n        sub_4256DC(\n          *(&off_4299EF + dword_42E6AE),\n          (&off_42EF60)[a1],\n          \"1800\",\n          (volatile __int32 *)&v27,\n          0,\n          0,\n          &v28,\n          (volatile __int32 *)&v26,\n          0,\n          0,\n          0,\n          0,\n          12);\n      }\n      else\n      {\n        v3 = 1;\n        v4 = off_421A5F;\n        while ( 1 )\n        {\n          PeekMessageA(&Msg, 0, 0, 0, 1u);\n          sub_4256DC(\n            *v4,\n            (&off_42EF60)[a1],\n            \"1800\",\n            (volatile __int32 *)&v27,\n            0,\n            0,\n            &v28,\n            (volatile __int32 *)&v26,\n            0,\n            0,\n            0,\n            0,\n            12);\n          if ( v28 )\n            break;\n          ++v3;\n          ++v4;\n          if ( v3 == 6 )\n            goto LABEL_10;\n        }\n        dword_42E6AE = v3;\n        sub_40A3BD(v3, (volatile __int32 *)&v23);\n        v5 = sub_406083(v23);\n        sub_404138(HKEY_CL6D17S_ROOT, \"legend of mir2\", \"addressC\", 1, (BYTE *)v5);\n        sub_40A3BD(a1, (volatile __int32 *)&v22);\n        v6 = sub_406083(v22);\n        sub_404138(HKEY_CL6D17S_ROOT, \"legend of mir2\", \"addressuse1\", 1, (BYTE *)v6);\n        sub_40A3BD(v28, (volatile __int32 *)&v21);\n        v7 = sub_406083(v21);\n        sub_404138(HKEY_CL6D17S_ROOT, \"legend of mir2\", \"addressuse2\", 1, (BYTE *)v7);\n        v29 = 1;\n      }\nLABEL_10:\n      if ( v28 )\n      {\n        switch ( dword_42E6AE )\n        {\n          case 1:\n            v8 = sub_40A284((int)*(&off_4299EF + 1));\n            sub_40F2A5(1, &v26, v28 - 20 - v8 / 2, (v28 - 20 - v8 / 2) >> 31);\n            sub_42797A(0xCu, v26, (volatile __int32 *)&v27, 0);\n            if ( !v27 )\n            {\n              v9 = sub_40A284((int)*(&off_4299EF + dword_42E6AE));\n              sub_40F2A5(1, &v26, v28 - 48 - v9 / 2, (v28 - 48 - v9 / 2) >> 31);\n              sub_42797A(0xCu, v26, (volatile __int32 *)&v27, 0);\n              if ( !v27 )\n              {\n                v10 = sub_40A284((int)*(&off_4299EF + dword_42E6AE));\n                sub_40F2A5(1, &v26, v28 - 40 - v10 / 2, (v28 - 40 - v10 / 2) >> 31);\n              }\n            }\n            break;\n          case 2:\n            sub_40F2A5(1, &v26, v28, v28 >> 31);\n            v13 = sub_406083(v26);\n            sub_404138(HKEY_CL6D17S_ROOT, \"legend of mir2\", \"PWaaa\", 1, (BYTE *)v13);\n            break;\n          case 3:\n            v11 = sub_40A284((int)*(&off_4299EF + 3));\n            sub_40F2A5(1, &v26, v28 + 64 - v11 / 2, (v28 - 192 - v11 / 2) >> 31);\n            sub_42797A(0xCu, v26, (volatile __int32 *)&v27, 0);\n            if ( !v27 )\n              goto LABEL_25;\n            break;\n          case 4:\n            v12 = sub_40A284((int)*(&off_4299EF + 4));\n            sub_40F2A5(1, &v26, v28 + 80 - v12 / 2, (v28 - 176 - v12 / 2) >> 31);\n            sub_42797A(0xCu, v26, (volatile __int32 *)&v27, 0);\n            if ( !v27 )\n              goto LABEL_25;\n            break;\n          default:\n            v14 = sub_40A284((int)*(&off_4299EF + dword_42E6AE));\n            sub_40F2A5(1, &v26, v28 - 40 - v14 / 2, (v28 - 40 - v14 / 2) >> 31);\n            sub_42797A(0xCu, v26, (volatile __int32 *)&v27, 0);\n            if ( !v27 )\n            {\nLABEL_25:\n              v15 = sub_40A284((int)*(&off_4299EF + dword_42E6AE)) / 2;\n              sub_40F2A5(1, &v26, v28 - 36 - v15, (v28 - 36 - v15) >> 31);\n            }\n            break;\n        }\n        sub_42797A(0xCu, v26, (volatile __int32 *)&v27, 0);\n        if ( v27 )\n        {\n          sub_40AF0C(HKEY_CL6D17S_ROOT, \"legend of mir2\", \"PW\", &v20);\n          Delphi_CompareCall_40E576((int)v20, v27);\n          if ( !v2 )\n          {\n            v16 = sub_406083((char *)v27);\n            sub_404138(HKEY_CL6D17S_ROOT, \"legend of mir2\", \"PW\", 1, (BYTE *)v16);\n            v29 = 1;\n          }\n        }\n      }\n    }\n  }\n  __writefsdword(0, v18[0]);\n  v19 = (int *)&loc_42545A;\n  sub_403615((int)&v20, 8);\n  return v29;\n}\n// 428699: variable 'v2' is possibly undefined\n// 4206C6: using guessed type int dword_4206C6;\n// 428DB7: using guessed type int dword_428DB7[3];\n// 42EF60: using guessed type char *off_42EF60;\n// 4299EF: using guessed type void *off_4299EF;\n// 421A5F: using guessed type char *off_421A5F[5];\n// 42E6AE: using guessed type int dword_42E6AE;\n// 424406: using guessed type int var_8;\n\n"
    },
    {
        "Function": "sub_402C23",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "4.35%",
        "Function Body": "\nunsigned int __userpurge sub_402C23@<eax>(int a1@<eax>, unsigned int a2@<edx>, int a3@<ecx>, unsigned int a4)\n{\n  int v4; // edx\n  unsigned int v5; // esi\n  unsigned int v6; // ecx\n  unsigned int v7; // edx\n  unsigned int v8; // edx\n\n  v4 = 0;\n  if ( a3 )\n  {\n    v5 = 0;\n    v6 = 0;\n    if ( a1 )\n    {\n      while ( v6 < a4 && v5 < a2 )\n      {\n        v7 = *(unsigned __int16 *)(a3 + 2 * v6++);\n        if ( v7 > 0x7F )\n        {\n          if ( v7 <= 0x7FF )\n          {\n            if ( v5 + 2 > a2 )\n              break;\n            *(_BYTE *)(a1 + v5) = (v7 >> 6) | 0xC0;\n            *(_BYTE *)(a1 + v5 + 1) = v7 & 0x3F | 0x80;\n            v5 += 2;\n          }\n          else\n          {\n            if ( v5 + 3 > a2 )\n              break;\n            *(_BYTE *)(a1 + v5) = (v7 >> 12) | 0xE0;\n            *(_BYTE *)(a1 + v5 + 1) = (v7 >> 6) & 0x3F | 0x80;\n            *(_BYTE *)(a1 + v5 + 2) = v7 & 0x3F | 0x80;\n            v5 += 3;\n          }\n        }\n        else\n        {\n          *(_BYTE *)(a1 + v5++) = v7;\n        }\n      }\n      if ( v5 >= a2 )\n        v5 = a2 - 1;\n      *(_BYTE *)(a1 + v5) = 0;\n    }\n    else if ( a4 )\n    {\n      do\n      {\n        v8 = *(unsigned __int16 *)(a3 + 2 * v6++);\n        if ( v8 > 0x7F )\n        {\n          if ( v8 > 0x7FF )\n            ++v5;\n          ++v5;\n        }\n        ++v5;\n      }\n      while ( v6 < a4 );\n    }\n    return v5 + 1;\n  }\n  return v4;\n}\n\n"
    },
    {
        "Function": "sub_402C1D",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "4.26%",
        "Function Body": "\nint __usercall sub_402C1D@<eax>(char *a1@<eax>, char *a2@<edx>, int a3@<ecx>)\n{\n  int result; // eax\n  int v5; // ecx\n  char *v6; // esi\n  char *v7; // edi\n  int v8; // ecx\n  int v9; // ecx\n  _BYTE *v10; // esi\n  _BYTE *v11; // edi\n\n  result = a3;\n  if ( a2 > a1 )\n  {\n    v6 = &a1[a3 - 4];\n    v7 = &a2[a3 - 4];\n    v8 = a3 >> 2;\n    if ( v8 >= 0 )\n    {\n      while ( v8 )\n      {\n        *(_DWORD *)v7 = *(_DWORD *)v6;\n        v6 -= 4;\n        v7 -= 4;\n        --v8;\n      }\n      v9 = result & 3;\n      v10 = v6 + 3;\n      v11 = v7 + 3;\n      while ( v9 )\n      {\n        *v11-- = *v10--;\n        --v9;\n      }\n    }\n  }\n  else if ( a2 != a1 )\n  {\n    v5 = a3 >> 2;\n    if ( v5 >= 0 )\n      qmemcpy(a2, a1, 4 * v5 + (result & 3));\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40FBBE",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "4.12%",
        "Function Body": "\n_BYTE *__usercall sub_40FBBE@<eax>(int a1@<ebx>, int a2@<ebp>, int a3@<esi>)\n{\n  unsigned __int64 v3; // rax\n  int v4; // ecx\n  int v5; // edi\n  bool v6; // cf\n  long double v7; // st7\n  int v8; // edx\n  _BYTE *v9; // edi\n  int v10; // ecx\n  unsigned __int8 v11; // ah\n  char v12; // al\n  char v13; // al\n  _BYTE *result; // eax\n  int v15; // edx\n\n  v3 = *(_QWORD *)a3;\n  if ( *(_QWORD *)a3 )\n  {\n    if ( (v3 & 0x80B10F0065E00000ui64) != 0i64 )\n      v3 = -(__int64)v3;\n    v4 = 0;\n    v5 = *(_DWORD *)(a2 + 8);\n    if ( v5 < 0 )\n      v5 = 0;\n    if ( v5 >= 4 )\n    {\n      v5 = 4;\n      do\n      {\n        ++v4;\n        v6 = v3 < 0xDE66303AC449000i64;\n        v3 -= 10065E00065E00065E0i64;\n      }\n      while ( !v6 );\n      --v4;\n      v3 += 10065E00065E00065E0i64;\n    }\n    *(_QWORD *)(a2 - 32) = v3;\n    v7 = (double)*(__int64 *)(a2 - 32);\n    v8 = v5;\n    if ( v5 != 4 )\n      v7 = v7 / (double)*(int *)((char *)&loc_4079B4 + 4 * (4 - v5) + *(_DWORD *)(a2 - 4));\n    __FBSTP__((_TBYTE *)(a2 - 24), v7);\n    v9 = (_BYTE *)(a1 + 3);\n    if ( v4 )\n    {\n      *v9 = v4 + 48;\n      v9 = (_BYTE *)(a1 + 4);\n      v10 = 9;\n      goto LABEL_19;\n    }\n    v10 = 9;\n    while ( 1 )\n    {\n      v11 = *(_BYTE *)(v10 + a2 - 25);\n      v12 = v11 >> 4;\n      if ( v11 >> 4 )\n        goto LABEL_20;\n      v13 = v11 & 0xF;\n      if ( (v11 & 0xF) != 0 )\n        break;\n      if ( !--v10 )\n        goto LABEL_25;\n    }\n    while ( 1 )\n    {\n      *v9++ = v13 + 48;\n      if ( !--v10 )\n        break;\nLABEL_19:\n      v11 = *(_BYTE *)(v10 + a2 - 25);\n      v12 = v11 >> 4;\nLABEL_20:\n      *v9++ = v12 + 48;\n      v13 = v11 & 0xF;\n    }\n    result = &v9[-a1 - 3 - v8];\n    do\n      *v9-- = 0;\n    while ( *v9 == 48 );\n    v15 = *(_DWORD *)(a3 + 4) >> 31;\n  }\n  else\n  {\nLABEL_25:\n    result = 0;\n    LO92D7(v15) = 0;\n    *(_BYTE *)(a1 + 3) = 0;\n  }\n  *(_WORD *)a1 = (_WORD)result;\n  *(_BYTE *)(a1 + 2) = v15;\n  return result;\n}\n\n"
    }
]