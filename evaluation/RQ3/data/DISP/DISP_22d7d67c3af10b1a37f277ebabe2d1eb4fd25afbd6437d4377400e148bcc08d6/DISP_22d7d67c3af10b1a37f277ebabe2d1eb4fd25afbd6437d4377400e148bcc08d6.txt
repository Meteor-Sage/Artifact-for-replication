[
    {
        "Function": "sub_405679",
        "Total XOR and shift operations": 50,
        "XOR operations": 43,
        "Shift operations": 7,
        "Operation percentage": "72.46%",
        "Function Body": "\nint __cdecl sub_405679(int a1, _BYTE *a2, unsigned int a3)\n{\n  unsigned int v3; // esi\n  unsigned int i; // eax\n  unsigned int v5; // edi\n  unsigned int v6; // edx\n  unsigned int v7; // eax\n  unsigned int v8; // edx\n  unsigned int v9; // eax\n  unsigned int v10; // edx\n  unsigned int v11; // eax\n  unsigned int v12; // edx\n  unsigned int v13; // edx\n  unsigned int v14; // eax\n  _BYTE *v15; // ecx\n\n  v15 = a2;\n  if ( !a2 )\n    return 0;\n  v3 = a3;\n  for ( i = ~a1; v3; --v3 )\n  {\n    if ( ((unsigned __int8)v15 & 3) == 0 )\n      break;\n    i = dword_42D002[(unsigned __int8)(i ^ *v15++)] ^ (i >> 8);\n  }\n  if ( v3 >= 0x20 )\n  {\n    v5 = v3 >> 5;\n    do\n    {\n      v6 = *((_DWORD *)v15 + 1) ^ dword_43E84A[(unsigned __int8)(*v15 ^ i)] ^ dword_42D002[(*(_DWORD *)v15 ^ i) >> 24] ^ dword_431633[(unsigned __int8)((unsigned __int16)(*(_WORD *)v15 ^ i) >> 8)] ^ dword_43858B[(unsigned __int8)((*(_DWORD *)v15 ^ i) >> 16)];\n      v7 = *((_DWORD *)v15 + 2) ^ dword_43E84A[(unsigned __int8)v6] ^ dword_42D002[HI7613(v6)] ^ dword_431633[BYTE1(v6)] ^ dword_43858B[BYTE2(v6)];\n      v8 = *((_DWORD *)v15 + 3) ^ dword_43E84A[(unsigned __int8)v7] ^ dword_42D002[HI7613(v7)] ^ dword_431633[BYTE1(v7)] ^ dword_43858B[BYTE2(v7)];\n      v9 = *((_DWORD *)v15 + 4) ^ dword_43E84A[(unsigned __int8)v8] ^ dword_42D002[HI7613(v8)] ^ dword_431633[BYTE1(v8)] ^ dword_43858B[BYTE2(v8)];\n      v10 = *((_DWORD *)v15 + 5) ^ dword_43E84A[(unsigned __int8)v9] ^ dword_42D002[HI7613(v9)] ^ dword_431633[BYTE1(v9)] ^ dword_43858B[BYTE2(v9)];\n      v15 += 32;\n      v11 = *((_DWORD *)v15 - 2) ^ dword_43E84A[(unsigned __int8)v10] ^ dword_42D002[HI7613(v10)] ^ dword_431633[BYTE1(v10)] ^ dword_43858B[BYTE2(v10)];\n      v3 -= 32;\n      v12 = *((_DWORD *)v15 - 1) ^ dword_43E84A[(unsigned __int8)v11] ^ dword_42D002[HI7613(v11)] ^ dword_431633[BYTE1(v11)] ^ dword_43858B[BYTE2(v11)];\n      i = dword_43E84A[(unsigned __int8)v12] ^ dword_42D002[HI7613(v12)] ^ dword_431633[BYTE1(v12)] ^ dword_43858B[BYTE2(v12)];\n      --v5;\n    }\n    while ( v5 );\n  }\n  if ( v3 >= 4 )\n  {\n    v13 = v3 >> 2;\n    do\n    {\n      v14 = *(_DWORD *)v15 ^ i;\n      v15 += 4;\n      v3 -= 4;\n      --v13;\n      i = dword_43E84A[(unsigned __int8)v14] ^ dword_42D002[HI7613(v14)] ^ dword_431633[BYTE1(v14)] ^ dword_43858B[BYTE2(v14)];\n    }\n    while ( v13 );\n  }\n  for ( ; v3; --v3 )\n    i = dword_42D002[(unsigned __int8)(i ^ *v15++)] ^ (i >> 8);\n  return ~i;\n}\n// 42D002: using guessed type int dword_42D002[128];\n// 43858B: using guessed type int dword_43858B[256];\n// 431633: using guessed type int dword_431633[256];\n// 43E84A: using guessed type int dword_43E84A[256];\n\n"
    },
    {
        "Function": "sub_405FFA",
        "Total XOR and shift operations": 30,
        "XOR operations": 21,
        "Shift operations": 9,
        "Operation percentage": "41.67%",
        "Function Body": "\nint __thiscall sub_405FFA(unsigned int *this)\n{\n  unsigned int *v1; // edi\n  unsigned int v2; // eax\n  _DWORD *v3; // edx\n  int v4; // esi\n  int v5; // ecx\n  unsigned int v6; // ecx\n  unsigned int v7; // eax\n  _DWORD *v8; // ebx\n  int v9; // edi\n  int v10; // edi\n  _DWORD *v11; // ebx\n  unsigned int v12; // eax\n  unsigned int v13; // edx\n  int v14; // edx\n  unsigned int v15; // edx\n\n  v1 = this;\n  v2 = *this;\n  if ( *this == 624 )\n  {\n    v3 = this + 2;\n    v4 = 624;\n    do\n    {\n      v5 = *(v3++ - 1);\n      v6 = *(v3 - 2) ^ (*(v3 - 1) ^ v5) & 0x7F88EEFF;\n      v3[622] = (v6 >> 1) ^ v3[395] ^ ((v6 & 1) != 0 ? 0x990D90DF : 0);\n      --v4;\n    }\n    while ( v4 );\n    v2 = *v1;\n  }\n  else if ( v2 >= 0x4E0 )\n  {\n    v7 = this[625];\n    v8 = this + 625;\n    v9 = 227;\n    do\n    {\n      *(v8 - 624) = ((v7 ^ (v7 ^ v8[1]) & 0x7F88EEFF) >> 1) ^ v8[397] ^ ((v8[1] & 1) != 0 ? 0x990D90DF : 0);\n      v7 = *++v8;\n      --v9;\n    }\n    while ( v9 );\n    v10 = 396;\n    v11 = this + 852;\n    v12 = this[852];\n    do\n    {\n      *(v11 - 624) = ((v12 ^ (v11[1] ^ v12) & 0x7F88EEFF) >> 1) ^ *(v11 - 851) ^ ((v11[1] & 1) != 0 ? 0x990D90DF : 0);\n      v12 = *++v11;\n      --v10;\n    }\n    while ( v10 );\n    v1 = this;\n    this[624] = ((this[1248] ^ (this[1] ^ this[1248]) & 0x7F88EEFF) >> 1) ^ this[397] ^ ((this[1] & 1) != 0\n                                                                                       ? 0x990D90DF\n                                                                                       : 0);\n    v2 = 0;\n    *this = 0;\n  }\n  v13 = v1[v2 + 1];\n  *v1 = v2 + 1;\n  v14 = (v13 >> 11) & v1[1249] ^ v13;\n  v15 = (((((v14 & 0xFFFCFDAD) << 7) ^ v14) & 0xFFA0BD8C) << 15) ^ ((v14 & 0xFFFCFDAD) << 7) ^ v14;\n  return v15 ^ (v15 >> 18);\n}\n\n"
    },
    {
        "Function": "sub_40FDEB",
        "Total XOR and shift operations": 30,
        "XOR operations": 21,
        "Shift operations": 9,
        "Operation percentage": "37.04%",
        "Function Body": "\nunsigned int __fastcall sub_40FDEB(unsigned int **a1)\n{\n  unsigned int *v1; // edi\n  unsigned int v2; // eax\n  _DWORD *v3; // eax\n  int v4; // esi\n  int v5; // edx\n  unsigned int v6; // edx\n  unsigned int v7; // eax\n  _DWORD *v8; // ebx\n  int v9; // edi\n  int v10; // edi\n  _DWORD *v11; // ebx\n  unsigned int v12; // eax\n  unsigned int v13; // edx\n  int v14; // edx\n  unsigned int v15; // edx\n  unsigned int result; // eax\n  unsigned int **v17; // [esp+Ch] [ebp-8h]\n  unsigned int *v18; // [esp+10h] [ebp-4h]\n\n  v17 = a1;\n  do\n  {\n    v1 = *a1;\n    v18 = *a1;\n    v2 = **a1;\n    if ( v2 == 624 )\n    {\n      v3 = v1 + 2;\n      v4 = 624;\n      do\n      {\n        v5 = *(v3++ - 1);\n        v6 = *(v3 - 2) ^ (*(v3 - 1) ^ v5) & 0x7F88EEFF;\n        v3[622] = (v6 >> 1) ^ v3[395] ^ ((v6 & 1) != 0 ? 0x990D90DF : 0);\n        --v4;\n      }\n      while ( v4 );\n      v2 = *v1;\n    }\n    else if ( v2 >= 0x4E0 )\n    {\n      v7 = v1[625];\n      v8 = v1 + 625;\n      v9 = 227;\n      do\n      {\n        *(v8 - 624) = ((v7 ^ (v7 ^ v8[1]) & 0x7F88EEFF) >> 1) ^ v8[397] ^ ((v8[1] & 1) != 0 ? 0x990D90DF : 0);\n        v7 = *++v8;\n        --v9;\n      }\n      while ( v9 );\n      v10 = 396;\n      v11 = v18 + 852;\n      v12 = v18[852];\n      do\n      {\n        *(v11 - 624) = ((v12 ^ (v11[1] ^ v12) & 0x7F88EEFF) >> 1) ^ *(v11 - 851) ^ ((v11[1] & 1) != 0 ? 0x990D90DF : 0);\n        v12 = *++v11;\n        --v10;\n      }\n      while ( v10 );\n      v1 = v18;\n      v18[624] = ((v18[1248] ^ (v18[1] ^ v18[1248]) & 0x7F88EEFF) >> 1) ^ v18[397] ^ ((v18[1] & 1) != 0 ? 0x990D90DF : 0);\n      v2 = 0;\n      *v18 = 0;\n    }\n    v13 = v1[v2 + 1];\n    *v1 = v2 + 1;\n    a1 = v17;\n    v14 = (v13 >> 11) & v1[1249] ^ v13;\n    v15 = (((((v14 & 0xFFFCFDAD) << 7) ^ v14) & 0xFFA0BD8C) << 15) ^ ((v14 & 0xFFFCFDAD) << 7) ^ v14;\n    result = v15 ^ (v15 >> 18);\n  }\n  while ( result > (unsigned int)v17[2] );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_405AC2",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "25.00%",
        "Function Body": "\nint __usercall sub_405AC2@<eax>(_DWORD *a1@<edx>, unsigned __int64 a2)\n{\n  int result; // eax\n\n  a1[3] = BYTE2(a2) & 0x1F;\n  a1[4] = ((a2 >> 21) & 0xF) - 1;\n  a1[5] = ((a2 >> 25) & 0x7F) + 1980;\n  a1[2] = (a2 >> 11) & 0x1F;\n  result = (a2 >> 5) & 0x3F;\n  a1[1] = result;\n  *a1 = 2 * (a2 & 0x1F);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_405386",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "15.79%",
        "Function Body": "\nint __usercall sub_405386@<eax>(int a1@<eax>, int a2@<ecx>, int *a3)\n{\n  int v5; // ecx\n  __int64 v6; // kr00_8\n  int v7; // ebx\n  int v8; // ebx\n  int v9; // ebx\n  int v10; // edx\n  int v12; // [esp+10h] [ebp-8h]\n  int v13; // [esp+10h] [ebp-8h]\n  int v14; // [esp+10h] [ebp-8h]\n  int v15; // [esp+10h] [ebp-8h]\n  int v16; // [esp+10h] [ebp-8h]\n  int v17; // [esp+10h] [ebp-8h]\n  int v18; // [esp+14h] [ebp-4h] BYREF\n\n  v18 = 0;\n  v5 = sub_40D628(a2, a1, a2, &v18);\n  v6 = v18;\n  if ( !v5 )\n    v5 = sub_40D628((int)&v18, a1, a2, &v18);\n  v12 = ((unsigned __int64)v18 >> 24) | HI3FE2D(v6);\n  v7 = (v18 << 8) | v6;\n  if ( !v5 )\n    v5 = sub_40D628(0, a1, a2, &v18);\n  v13 = ((unsigned __int64)v18 >> 16) | v12;\n  v8 = (v18 << 16) | v7;\n  if ( !v5 )\n    v5 = sub_40D628(0, a1, a2, &v18);\n  v14 = ((unsigned __int64)v18 >> 8) | v13;\n  v9 = (v18 << 24) | v8;\n  if ( !v5 )\n    v5 = sub_40D628((int)&v18, a1, a2, &v18);\n  v15 = v18 | v14;\n  if ( !v5 )\n    v5 = sub_40D628(0, a1, a2, &v18);\n  v16 = (v18 << 8) | v15;\n  if ( !v5 )\n    v5 = sub_40D628(0, a1, a2, &v18);\n  v17 = (v18 << 16) | v16;\n  if ( v5 || (v5 = sub_40D628((int)&v18, a1, a2, &v18)) != 0 )\n  {\n    *a3 = 0;\n    a3[1] = 0;\n    return v5;\n  }\n  else\n  {\n    v10 = v17 | (v18 << 24);\n    *a3 = v9;\n    a3[1] = v10;\n    return 0;\n  }\n}\n\n"
    },
    {
        "Function": "sub_50313D",
        "Total XOR and shift operations": 3,
        "XOR operations": 2,
        "Shift operations": 1,
        "Operation percentage": "12.00%",
        "Function Body": "\n// positive sp value has been detected, the output may be wrong!\nvoid __usercall sub_50313D(int a1@<eax>, char _CL@<cl>, int a3@<ebp>, int a4@<edi>)\n{\n  __int16 v4; // sp\n  __int16 v5; // dx\n  __int16 v7; // [esp-34h] [ebp-3Ch]\n\n  v5 = v4 ^ (v7 | 0x23);\n  LO67D8(a1) = 1 - a1 - 126;\n  LO67D8(v5) = v5 & 0x64;\n  _DX = v5 ^ (1 << (a3 & 0xF));\n  __asm { rcr     dl, cl }\n  __readeflags();\n  __readeflags();\n  *(_DWORD *)(a3 - 4) = *(_DWORD *)(a1 + a4);\n  __readeflags();\n  JU9DFCT(0x40184B);\n}\n// 4029A0: positive sp value 3C has been found\n// 404F19: control flows out of bounds to 40184B\n// 501E96: variable 'v4' is possibly undefined\n// 50EE49: variable 'v7' is possibly undefined\n\n"
    },
    {
        "Function": "sub_40DC69",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "8.82%",
        "Function Body": "\nint __usercall sub_40DC69@<eax>(int a1@<eax>, int a2@<ecx>, _DWORD *a3)\n{\n  int result; // eax\n  int v6; // ecx\n  int v7; // ebx\n  int v8; // ebx\n  int v9; // ebx\n  int v10; // [esp+Ch] [ebp-4h] BYREF\n\n  v10 = 0;\n  result = sub_40D628(a2, a1, a2, &v10);\n  v6 = v10;\n  v7 = v10;\n  if ( !result )\n  {\n    result = sub_40D628((int)&v10, a1, a2, &v10);\n    v6 = v10;\n  }\n  v8 = (v6 << 8) | v7;\n  if ( !result )\n  {\n    result = sub_40D628(v6, a1, a2, &v10);\n    v6 = v10;\n  }\n  v9 = (v6 << 16) | v8;\n  if ( result || (result = sub_40D628((int)&v10, a1, a2, &v10)) != 0 )\n    *a3 = 0;\n  else\n    *a3 = v9 + (v10 << 24);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40936E",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "7.09%",
        "Function Body": "\n_DWORD *__thiscall sub_40936E(_DWORD *Src, unsigned int a2, int a3, unsigned int a4, unsigned __int16 a5)\n{\n  int v6; // edx\n  int v7; // eax\n  unsigned int v8; // edx\n  unsigned int v9; // edi\n  unsigned int v10; // ecx\n  unsigned int v11; // edx\n  size_t v12; // eax\n  void *v13; // eax\n  _DWORD *v14; // esi\n  char *v15; // edi\n  void *v16; // ebx\n  char *v17; // edi\n  int i; // ecx\n  _DWORD *result; // eax\n  char *v20; // edi\n  int j; // ecx\n  size_t v22; // [esp-4h] [ebp-20h]\n  int v24; // [esp+10h] [ebp-Ch]\n  unsigned int v25; // [esp+14h] [ebp-8h]\n  int v26; // [esp+18h] [ebp-4h]\n\n  v6 = Src[4];\n  v26 = v6;\n  if ( 2171D53646 - v6 < a2 )\n    sub_40BEE1();\n  v7 = v6 + a2;\n  v8 = Src[5];\n  v24 = v7;\n  v9 = v7 | 7;\n  v25 = v8;\n  if ( (v7 | 7u) <= 0x7F88EEFE )\n  {\n    if ( v8 <= 2171D53646 - (v8 >> 1) )\n    {\n      if ( v9 < v8 + (v8 >> 1) )\n        v9 = v8 + (v8 >> 1);\n    }\n    else\n    {\n      v9 = 2171D53646;\n    }\n  }\n  else\n  {\n    v9 = 2171D53646;\n  }\n  v10 = __CFADD__(v9, 1) ? -1 : v9 + 1;\n  v11 = 2 * v10;\n  if ( v10 <= 0x7F88EEFF )\n  {\n    if ( v11 < 0x1000 )\n    {\n      if ( v11 )\n        v14 = operator new(2 * v10);\n      else\n        v14 = 0;\n      goto LABEL_18;\n    }\n  }\n  else\n  {\n    v11 = -1;\n  }\n  v12 = v11 + 35;\n  if ( v11 + 35 <= v11 )\n    v12 = -1;\n  v13 = operator new(v12);\n  if ( !v13 )\n    goto LABEL_33;\n  v14 = (_DWORD *)(((unsigned int)v13 + 35) & 0xFF19DCE0);\n  *(v14 - 1) = v13;\nLABEL_18:\n  Src[4] = v24;\n  Src[5] = v9;\n  v22 = 2 * v26;\n  v15 = (char *)v14 + 2 * v26;\n  if ( v25 >= 8 )\n  {\n    v16 = (void *)*Src;\n    memmove_0(v14, v16, v22);\n    if ( a4 )\n    {\n      memset32(v15, (a5 << 16) | a5, a4 >> 1);\n      v17 = &v15[4 * (a4 >> 1)];\n      for ( i = a4 & 1; i; --i )\n      {\n        *(_WORD *)v17 = a5;\n        v17 += 2;\n      }\n    }\n    *((_WORD *)v14 + a4 + v26) = 0;\n    if ( 2 * v25 + 2 < 0x1000 )\n      goto LABEL_26;\n    if ( (unsigned int)v16 - *((_DWORD *)v16 - 1) - 4 <= 0x1F )\n    {\n      v16 = (void *)*((_DWORD *)v16 - 1);\nLABEL_26:\n      sub_40B2CE(v16);\n      result = Src;\n      *Src = v14;\n      return result;\n    }\nLABEL_33:\n    _invalid_parameter_noinfo_noreturn();\n  }\n  memmove_0(v14, Src, v22);\n  if ( a4 )\n  {\n    memset32(v15, (a5 << 16) | a5, a4 >> 1);\n    v20 = &v15[4 * (a4 >> 1)];\n    for ( j = a4 & 1; j; --j )\n    {\n      *(_WORD *)v20 = a5;\n      v20 += 2;\n    }\n  }\n  *((_WORD *)v14 + v26 + a4) = 0;\n  result = Src;\n  *Src = v14;\n  return result;\n}\n// 40BEE1: using guessed type void __noreturn sub_40BEE1(void);\n\n"
    },
    {
        "Function": "sub_401013",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "6.17%",
        "Function Body": "\nsize_t __thiscall sub_401013(_DWORD **this, unsigned __int8 *Src, __int64 a3)\n{\n  int v4; // ecx\n  size_t v5; // edi\n  int v6; // eax\n  int v7; // ebx\n  size_t v8; // esi\n  bool v9; // cf\n  size_t v10; // eax\n  unsigned int v11; // esi\n  size_t v12; // kr10_4\n  void *v14; // [esp+4h] [ebp-10h]\n  unsigned int v15; // [esp+8h] [ebp-Ch]\n  _DWORD **v16; // [esp+Ch] [ebp-8h]\n  int v17; // [esp+10h] [ebp-4h]\n  size_t v18; // [esp+24h] [ebp+10h]\n\n  v4 = HI3FE2D(a3);\n  v16 = this;\n  v17 = HI3FE2D(a3);\n  if ( a3 < 0 )\n    return 0;\n  v5 = a3;\n  if ( a3 <= 0 )\n    return 0;\n  v15 = 0;\n  v18 = 0;\n  while ( 1 )\n  {\n    do\n    {\n      v14 = (void *)*this[8];\n      if ( v14 )\n        v6 = *this[12];\n      else\n        v6 = 0;\n      v7 = v6 >> 31;\n      v8 = v6;\n      if ( v6 >> 31 == -1 || (v6 >> 31 == -1 || v6 >= 0) && !v6 )\n      {\n        if ( ((int (__thiscall *)(_DWORD **, _DWORD))(*v16)[3])(v16, *Src) == -1 )\n          return v18;\n        v9 = v5-- != 0;\n        this = v16;\n        v8 = 1;\n        v4 = v9 + v17 - 1;\n        v7 = 0;\n      }\n      else\n      {\n        if ( v4 <= v7 && (v4 < v7 || v5 < v6) )\n        {\n          v8 = v5;\n          v7 = v4;\n        }\n        memmove_0(v14, Src, v8);\n        this = v16;\n        v4 = (__PAAB93__(v17, v5) - __PAAB93__(v7, v8)) >> 32;\n        v5 -= v8;\n        *v16[12] -= v8;\n        *v16[8] += v8;\n      }\n      v10 = v8;\n      v12 = v8 + v18;\n      v11 = (__PAAB93__(v7, v8) + __PAAB93__(v15, v18)) >> 32;\n      v18 = v12;\n      v17 = v4;\n      Src += v10;\n      v15 = v11;\n    }\n    while ( v4 > 0 );\n    if ( v4 < 0 )\n      break;\n    if ( !v5 )\n      return v12;\n  }\n  return v18;\n}\n\n"
    },
    {
        "Function": "sub_40199C",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "5.95%",
        "Function Body": "\nsize_t __thiscall sub_40199C(_DWORD **this, char *a2, __int64 a3)\n{\n  int v4; // ecx\n  size_t v5; // edi\n  int v6; // eax\n  int v7; // ebx\n  size_t v8; // esi\n  int v9; // eax\n  bool v10; // cf\n  size_t v11; // eax\n  unsigned int v12; // esi\n  size_t v13; // kr10_4\n  void *Src_4; // [esp+4h] [ebp-10h]\n  unsigned int v16; // [esp+8h] [ebp-Ch]\n  _DWORD **v17; // [esp+Ch] [ebp-8h]\n  int v18; // [esp+10h] [ebp-4h]\n  size_t v19; // [esp+24h] [ebp+10h]\n\n  v4 = HI3FE2D(a3);\n  v17 = this;\n  v18 = HI3FE2D(a3);\n  if ( a3 < 0 )\n    return 0;\n  v5 = a3;\n  if ( a3 <= 0 )\n    return 0;\n  v16 = 0;\n  v19 = 0;\n  while ( 1 )\n  {\n    do\n    {\n      Src_4 = (void *)*this[7];\n      if ( Src_4 )\n        v6 = *this[11];\n      else\n        v6 = 0;\n      v7 = v6 >> 31;\n      v8 = v6;\n      if ( v6 >> 31 == -1 || (v6 >> 31 == -1 || v6 >= 0) && !v6 )\n      {\n        v9 = ((int (__thiscall *)(_DWORD **))(*v17)[7])(v17);\n        if ( v9 == -1 )\n          return v19;\n        v10 = v5-- != 0;\n        this = v17;\n        v8 = 1;\n        *a2 = v9;\n        v4 = v10 + v18 - 1;\n        v7 = 0;\n      }\n      else\n      {\n        if ( v4 <= v7 && (v4 < v7 || v5 < v6) )\n        {\n          v8 = v5;\n          v7 = v4;\n        }\n        memmove_0(a2, Src_4, v8);\n        this = v17;\n        v4 = (__PAAB93__(v18, v5) - __PAAB93__(v7, v8)) >> 32;\n        v5 -= v8;\n        *v17[11] -= v8;\n        *v17[7] += v8;\n      }\n      v11 = v8;\n      v13 = v8 + v19;\n      v12 = (__PAAB93__(v7, v8) + __PAAB93__(v16, v19)) >> 32;\n      v19 = v13;\n      v18 = v4;\n      a2 += v11;\n      v16 = v12;\n    }\n    while ( v4 > 0 );\n    if ( v4 < 0 )\n      break;\n    if ( !v5 )\n      return v13;\n  }\n  return v19;\n}\n\n"
    },
    {
        "Function": "sub_40F0E4",
        "Total XOR and shift operations": 77,
        "XOR operations": 0,
        "Shift operations": 77,
        "Operation percentage": "5.04%",
        "Function Body": "\nint __usercall sub_40F0E4@<eax>(__m64 a1@<mm0>, __m64 a2@<mm1>, int *a3, int a4)\n{\n  int v4; // edi\n  unsigned __int8 *v5; // edx\n  size_t v6; // ecx\n  unsigned int v7; // ebx\n  int v8; // eax\n  unsigned int v9; // esi\n  int v10; // eax\n  int v11; // eax\n  int v12; // eax\n  int v13; // eax\n  unsigned int v14; // eax\n  unsigned int v15; // ecx\n  unsigned int v16; // eax\n  int v17; // eax\n  int v18; // eax\n  int *v19; // eax\n  int v20; // eax\n  int v21; // eax\n  int v22; // eax\n  int v23; // eax\n  int v24; // eax\n  int v25; // eax\n  int v26; // eax\n  int v27; // eax\n  int v28; // eax\n  int v29; // eax\n  int v30; // eax\n  int v31; // eax\n  int v32; // eax\n  int v33; // eax\n  unsigned int v34; // eax\n  int v35; // ecx\n  int v36; // edx\n  int v37; // ecx\n  unsigned int v38; // edx\n  int v39; // eax\n  size_t v40; // eax\n  int v41; // ecx\n  int v42; // eax\n  unsigned int v43; // ecx\n  int v44; // eax\n  int v45; // eax\n  size_t v46; // eax\n  int v47; // ecx\n  int v48; // eax\n  unsigned int v49; // ecx\n  int v50; // eax\n  int v51; // eax\n  int v52; // eax\n  int v53; // eax\n  int v54; // eax\n  int v55; // eax\n  int v56; // eax\n  int v57; // eax\n  int v58; // eax\n  unsigned int v59; // eax\n  int v60; // ecx\n  int v61; // eax\n  int v62; // eax\n  char v63; // cl\n  unsigned int v64; // ebx\n  int v65; // ecx\n  int v66; // eax\n  int v67; // eax\n  int v68; // eax\n  size_t v69; // eax\n  int v70; // eax\n  int v71; // eax\n  int v72; // ecx\n  unsigned int v73; // ebx\n  char v74; // al\n  unsigned int v75; // eax\n  int v76; // ecx\n  bool v77; // cc\n  int v78; // eax\n  int v79; // eax\n  int v80; // eax\n  size_t v81; // ecx\n  int v82; // eax\n  int v83; // eax\n  int v84; // eax\n  int v85; // ecx\n  size_t v86; // eax\n  int v87; // ecx\n  int v88; // eax\n  int v89; // eax\n  int v90; // eax\n  int v91; // ecx\n  __int16 v92; // cx\n  int v93; // eax\n  int v94; // ecx\n  int v95; // eax\n  int v96; // eax\n  unsigned int v97; // ebx\n  int v98; // eax\n  int v99; // eax\n  int v100; // eax\n  unsigned int v101; // ebx\n  int v102; // ecx\n  unsigned int v103; // edx\n  int v104; // ecx\n  int v105; // eax\n  size_t v106; // edx\n  size_t v107; // eax\n  bool v108; // zf\n  int v109; // eax\n  size_t v110; // eax\n  int v111; // eax\n  int v112; // eax\n  int v113; // eax\n  int v114; // ecx\n  int v115; // eax\n  unsigned int v116; // eax\n  int v117; // eax\n  int v118; // eax\n  int v119; // ecx\n  size_t v120; // eax\n  int v121; // eax\n  int v122; // eax\n  int v123; // eax\n  int v124; // ecx\n  int v125; // eax\n  unsigned int v126; // eax\n  int v127; // eax\n  int v128; // eax\n  int v129; // ecx\n  unsigned int v130; // eax\n  size_t v131; // eax\n  unsigned int v132; // ecx\n  unsigned int v133; // eax\n  int v134; // ecx\n  int v135; // ecx\n  _BYTE *v136; // ecx\n  unsigned int v137; // ecx\n  _BYTE *v138; // eax\n  int v139; // ecx\n  int v140; // eax\n  int v141; // eax\n  unsigned int v142; // eax\n  unsigned int v143; // eax\n  int v144; // eax\n  int v145; // eax\n  int v146; // eax\n  int result; // eax\n  size_t v148; // ecx\n  size_t v149; // edx\n  size_t v150; // ecx\n  size_t v151; // edx\n  size_t v153; // eax\n  unsigned int v154; // ebx\n  unsigned int v155; // eax\n  int v156; // eax\n  unsigned int v157; // [esp-14h] [ebp-48h]\n  unsigned __int8 *v158; // [esp-10h] [ebp-44h]\n  size_t v159; // [esp+4h] [ebp-30h]\n  size_t v160; // [esp+4h] [ebp-30h]\n  int v161; // [esp+8h] [ebp-2Ch]\n  int v162; // [esp+8h] [ebp-2Ch]\n  int v163; // [esp+8h] [ebp-2Ch]\n  int v164; // [esp+8h] [ebp-2Ch]\n  int i; // [esp+8h] [ebp-2Ch]\n  int v166; // [esp+Ch] [ebp-28h]\n  int v167; // [esp+10h] [ebp-24h]\n  size_t v168; // [esp+10h] [ebp-24h]\n  size_t v169; // [esp+10h] [ebp-24h]\n  unsigned int v170; // [esp+10h] [ebp-24h]\n  int v171; // [esp+14h] [ebp-20h]\n  int v172; // [esp+18h] [ebp-1Ch]\n  int v173; // [esp+18h] [ebp-1Ch]\n  __int16 v174; // [esp+18h] [ebp-1Ch]\n  _BYTE *v175; // [esp+1Ch] [ebp-18h]\n  unsigned int v176; // [esp+20h] [ebp-14h] BYREF\n  size_t v177; // [esp+24h] [ebp-10h]\n  size_t Size; // [esp+28h] [ebp-Ch]\n  void *Src; // [esp+2Ch] [ebp-8h]\n  size_t v180; // [esp+30h] [ebp-4h]\n  int v181; // [esp+3Ch] [ebp+8h]\n\n  if ( !a3 )\n    return -2;\n  v4 = a3[7];\n  if ( !v4 || !a3[3] || !*a3 && a3[1] )\n    return -2;\n  if ( *(_DWORD *)v4 == 11 )\n    *(_DWORD *)v4 = 12;\n  v5 = (unsigned __int8 *)*a3;\n  v175 = (_BYTE *)a3[3];\n  v6 = a3[4];\n  v7 = *(_DWORD *)(v4 + 56);\n  v180 = a3[1];\n  v159 = v180;\n  v8 = *(_DWORD *)v4;\n  v9 = *(_DWORD *)(v4 + 60);\n  v177 = v6;\n  Src = v5;\n  v171 = v6;\n  v166 = 0;\n  while ( 2 )\n  {\n    switch ( v8 )\n    {\n      case 0:\n        if ( *(_DWORD *)(v4 + 8) )\n        {\n          if ( v9 < 0x10 )\n          {\n            while ( v180 )\n            {\n              v10 = *v5;\n              --v180;\n              v11 = v10 << v9;\n              ++v5;\n              v9 += 8;\n              Src = v5;\n              v7 += v11;\n              if ( v9 >= 0x10 )\n                goto LABEL_15;\n            }\n            goto LABEL_310;\n          }\nLABEL_15:\n          if ( (*(_BYTE *)(v4 + 8) & 2) != 0 && v7 == 35615 )\n          {\n            *(_DWORD *)(v4 + 24) = sub_405679(0, 0, 0);\n            LO4A23(v176) = -29921;\n            v12 = sub_405679(*(_DWORD *)(v4 + 24), &v176, 2u);\n            v5 = (unsigned __int8 *)Src;\n            v7 = 0;\n            *(_DWORD *)(v4 + 24) = v12;\n            v9 = 0;\n            *(_DWORD *)v4 = 1;\n          }\n          else\n          {\n            v13 = *(_DWORD *)(v4 + 32);\n            *(_DWORD *)(v4 + 16) = 0;\n            if ( v13 )\n              *(_DWORD *)(v13 + 48) = -1;\n            if ( (*(_BYTE *)(v4 + 8) & 1) == 0 || ((v7 >> 8) + ((unsigned __int8)v7 << 8)) % 0x1F )\n            {\n              a3[6] = (int)\"incorrect header check\";\n              v5 = (unsigned __int8 *)Src;\n              goto LABEL_301;\n            }\n            if ( (v7 & 0xF) != 8 )\n            {\n              v5 = (unsigned __int8 *)Src;\n              a3[6] = (int)\"unknown compression method\";\n              goto LABEL_301;\n            }\n            v14 = *(_DWORD *)(v4 + 36);\n            v7 >>= 4;\n            v9 -= 4;\n            v15 = (v7 & 0xF) + 8;\n            if ( v14 )\n            {\n              if ( v15 > v14 )\n              {\n                v5 = (unsigned __int8 *)Src;\n                a3[6] = (int)\"invalid window size\";\n                goto LABEL_301;\n              }\n            }\n            else\n            {\n              *(_DWORD *)(v4 + 36) = v15;\n            }\n            *(_DWORD *)(v4 + 20) = 1 << v15;\n            v16 = sub_400A72(0, 0, 0);\n            v5 = (unsigned __int8 *)Src;\n            *(_DWORD *)(v4 + 24) = v16;\n            a3[12] = v16;\n            *(_DWORD *)v4 = ~BYTE1(v7) & 2 | 9;\n            v7 = 0;\n            v9 = 0;\n          }\n        }\n        else\n        {\n          *(_DWORD *)v4 = 12;\n        }\n        goto LABEL_302;\n      case 1:\n        if ( v9 >= 0x10 )\n          goto LABEL_33;\n        do\n        {\n          if ( !v180 )\n            goto LABEL_310;\n          v17 = *v5;\n          --v180;\n          v18 = v17 << v9;\n          ++v5;\n          v9 += 8;\n          Src = v5;\n          v7 += v18;\n        }\n        while ( v9 < 0x10 );\nLABEL_33:\n        *(_DWORD *)(v4 + 16) = v7;\n        if ( (_BYTE)v7 != 8 )\n        {\n          a3[6] = (int)\"unknown compression method\";\n          goto LABEL_301;\n        }\n        if ( (v7 & 0xE000) != 0 )\n        {\n          a3[6] = (int)\"unknown header flags set\";\n          goto LABEL_301;\n        }\n        v19 = *(int **)(v4 + 32);\n        if ( v19 )\n          *v19 = (v7 >> 8) & 1;\n        if ( (*(_DWORD *)(v4 + 16) & 0x200) != 0 )\n        {\n          LO4A23(v176) = v7;\n          v20 = sub_405679(*(_DWORD *)(v4 + 24), &v176, 2u);\n          v5 = (unsigned __int8 *)Src;\n          *(_DWORD *)(v4 + 24) = v20;\n        }\n        v7 = 0;\n        v9 = 0;\n        *(_DWORD *)v4 = 2;\n        do\n        {\nLABEL_43:\n          if ( !v180 )\n            goto LABEL_310;\n          v21 = *v5;\n          --v180;\n          v22 = v21 << v9;\n          ++v5;\n          v9 += 8;\n          Src = v5;\n          v7 += v22;\n        }\n        while ( v9 < 0x20 );\nLABEL_45:\n        v23 = *(_DWORD *)(v4 + 32);\n        if ( v23 )\n          *(_DWORD *)(v23 + 4) = v7;\n        if ( (*(_DWORD *)(v4 + 16) & 0x200) != 0 )\n        {\n          v176 = v7;\n          v24 = sub_405679(*(_DWORD *)(v4 + 24), &v176, 4u);\n          v5 = (unsigned __int8 *)Src;\n          *(_DWORD *)(v4 + 24) = v24;\n        }\n        v7 = 0;\n        v9 = 0;\n        *(_DWORD *)v4 = 3;\n        do\n        {\nLABEL_51:\n          if ( !v180 )\n            goto LABEL_310;\n          v25 = *v5;\n          --v180;\n          v26 = v25 << v9;\n          ++v5;\n          v9 += 8;\n          Src = v5;\n          v7 += v26;\n        }\n        while ( v9 < 0x10 );\nLABEL_53:\n        v27 = *(_DWORD *)(v4 + 32);\n        if ( v27 )\n        {\n          *(_DWORD *)(v27 + 8) = (unsigned __int8)v7;\n          *(_DWORD *)(*(_DWORD *)(v4 + 32) + 12) = v7 >> 8;\n        }\n        if ( (*(_DWORD *)(v4 + 16) & 0x200) != 0 )\n        {\n          LO4A23(v176) = v7;\n          v28 = sub_405679(*(_DWORD *)(v4 + 24), &v176, 2u);\n          v5 = (unsigned __int8 *)Src;\n          *(_DWORD *)(v4 + 24) = v28;\n        }\n        v7 = 0;\n        v9 = 0;\n        *(_DWORD *)v4 = 4;\nLABEL_58:\n        if ( (*(_DWORD *)(v4 + 16) & 0x400) != 0 )\n        {\n          if ( v9 < 0x10 )\n          {\n            while ( v180 )\n            {\n              v29 = *v5;\n              --v180;\n              v30 = v29 << v9;\n              ++v5;\n              v9 += 8;\n              Src = v5;\n              v7 += v30;\n              if ( v9 >= 0x10 )\n                goto LABEL_62;\n            }\n            goto LABEL_310;\n          }\nLABEL_62:\n          v31 = *(_DWORD *)(v4 + 32);\n          *(_DWORD *)(v4 + 64) = v7;\n          if ( v31 )\n            *(_DWORD *)(v31 + 20) = v7;\n          if ( (*(_DWORD *)(v4 + 16) & 0x200) != 0 )\n          {\n            LO4A23(v176) = v7;\n            v32 = sub_405679(*(_DWORD *)(v4 + 24), &v176, 2u);\n            v5 = (unsigned __int8 *)Src;\n            *(_DWORD *)(v4 + 24) = v32;\n          }\n          v7 = 0;\n          v9 = 0;\n        }\n        else\n        {\n          v33 = *(_DWORD *)(v4 + 32);\n          if ( v33 )\n            *(_DWORD *)(v33 + 16) = 0;\n        }\n        *(_DWORD *)v4 = 5;\nLABEL_70:\n        if ( (*(_DWORD *)(v4 + 16) & 0x400) != 0 )\n        {\n          v34 = *(_DWORD *)(v4 + 64);\n          Size = v34;\n          if ( v34 > v180 )\n          {\n            v34 = v180;\n            Size = v180;\n          }\n          if ( v34 )\n          {\n            v35 = *(_DWORD *)(v4 + 32);\n            if ( v35 )\n            {\n              v161 = *(_DWORD *)(v35 + 16);\n              if ( v161 )\n              {\n                v36 = *(_DWORD *)(v4 + 32);\n                v37 = *(_DWORD *)(v36 + 20) - *(_DWORD *)(v4 + 64);\n                v38 = *(_DWORD *)(v36 + 24);\n                if ( v34 + v37 > v38 )\n                  v34 = v38 - v37;\n                memmove_0((void *)(v37 + v161), Src, v34);\n                v34 = Size;\n                v5 = (unsigned __int8 *)Src;\n              }\n            }\n            if ( (*(_DWORD *)(v4 + 16) & 0x200) != 0 )\n            {\n              v39 = sub_405679(*(_DWORD *)(v4 + 24), Src, Size);\n              v5 = (unsigned __int8 *)Src;\n              *(_DWORD *)(v4 + 24) = v39;\n              v34 = Size;\n            }\n            v180 -= v34;\n            v5 += v34;\n            *(_DWORD *)(v4 + 64) -= v34;\n            Src = v5;\n          }\n          if ( *(_DWORD *)(v4 + 64) )\n            goto LABEL_310;\n        }\n        *(_DWORD *)(v4 + 64) = 0;\n        *(_DWORD *)v4 = 6;\nLABEL_84:\n        if ( (*(_DWORD *)(v4 + 16) & 0x800) != 0 )\n        {\n          if ( !v180 )\n            goto LABEL_310;\n          v40 = 0;\n          do\n          {\n            v41 = v5[v40];\n            Size = v40 + 1;\n            v42 = *(_DWORD *)(v4 + 32);\n            v172 = v41;\n            if ( v42 )\n            {\n              v162 = *(_DWORD *)(v42 + 28);\n              if ( v162 )\n              {\n                v43 = *(_DWORD *)(v4 + 64);\n                if ( v43 < *(_DWORD *)(v42 + 32) )\n                {\n                  *(_BYTE *)(v162 + v43) = v172;\n                  ++*(_DWORD *)(v4 + 64);\n                  v5 = (unsigned __int8 *)Src;\n                }\n              }\n            }\n            if ( !v172 )\n              break;\n            v40 = Size;\n          }\n          while ( Size < v180 );\n          if ( (*(_DWORD *)(v4 + 16) & 0x200) != 0 )\n          {\n            v44 = sub_405679(*(_DWORD *)(v4 + 24), Src, Size);\n            v5 = (unsigned __int8 *)Src;\n            *(_DWORD *)(v4 + 24) = v44;\n          }\n          v180 -= Size;\n          v5 += Size;\n          Src = v5;\n          if ( v172 )\n            goto LABEL_310;\n        }\n        else\n        {\n          v45 = *(_DWORD *)(v4 + 32);\n          if ( v45 )\n            *(_DWORD *)(v45 + 28) = 0;\n        }\n        *(_DWORD *)(v4 + 64) = 0;\n        *(_DWORD *)v4 = 7;\nLABEL_100:\n        if ( (*(_DWORD *)(v4 + 16) & 0x1000) != 0 )\n        {\n          if ( !v180 )\n            goto LABEL_310;\n          v46 = 0;\n          do\n          {\n            v47 = v5[v46];\n            Size = v46 + 1;\n            v48 = *(_DWORD *)(v4 + 32);\n            v173 = v47;\n            if ( v48 )\n            {\n              v163 = *(_DWORD *)(v48 + 36);\n              if ( v163 )\n              {\n                v49 = *(_DWORD *)(v4 + 64);\n                if ( v49 < *(_DWORD *)(v48 + 40) )\n                {\n                  *(_BYTE *)(v163 + v49) = v173;\n                  ++*(_DWORD *)(v4 + 64);\n                  v5 = (unsigned __int8 *)Src;\n                }\n              }\n            }\n            if ( !v173 )\n              break;\n            v46 = Size;\n          }\n          while ( Size < v180 );\n          if ( (*(_DWORD *)(v4 + 16) & 0x200) != 0 )\n          {\n            v50 = sub_405679(*(_DWORD *)(v4 + 24), Src, Size);\n            v5 = (unsigned __int8 *)Src;\n            *(_DWORD *)(v4 + 24) = v50;\n          }\n          v180 -= Size;\n          v5 += Size;\n          Src = v5;\n          if ( v173 )\n            goto LABEL_310;\n        }\n        else\n        {\n          v51 = *(_DWORD *)(v4 + 32);\n          if ( v51 )\n            *(_DWORD *)(v51 + 36) = 0;\n        }\n        *(_DWORD *)v4 = 8;\nLABEL_116:\n        if ( (*(_DWORD *)(v4 + 16) & 0x200) != 0 )\n        {\n          if ( v9 < 0x10 )\n          {\n            while ( v180 )\n            {\n              v52 = *v5;\n              --v180;\n              v53 = v52 << v9;\n              ++v5;\n              v9 += 8;\n              Src = v5;\n              v7 += v53;\n              if ( v9 >= 0x10 )\n                goto LABEL_120;\n            }\n            goto LABEL_310;\n          }\nLABEL_120:\n          if ( v7 != *(unsigned __int16 *)(v4 + 24) )\n          {\n            a3[6] = (int)\"header crc mismatch\";\n            goto LABEL_301;\n          }\n          v7 = 0;\n          v9 = 0;\n        }\n        v54 = *(_DWORD *)(v4 + 32);\n        if ( v54 )\n        {\n          *(_DWORD *)(v54 + 44) = (*(int *)(v4 + 16) >> 9) & 1;\n          *(_DWORD *)(*(_DWORD *)(v4 + 32) + 48) = 1;\n        }\n        v55 = sub_405679(0, 0, 0);\n        v5 = (unsigned __int8 *)Src;\n        *(_DWORD *)(v4 + 24) = v55;\n        a3[12] = v55;\n        *(_DWORD *)v4 = 11;\n        goto LABEL_302;\n      case 2:\n        if ( v9 < 0x20 )\n          goto LABEL_43;\n        goto LABEL_45;\n      case 3:\n        if ( v9 < 0x10 )\n          goto LABEL_51;\n        goto LABEL_53;\n      case 4:\n        goto LABEL_58;\n      case 5:\n        goto LABEL_70;\n      case 6:\n        goto LABEL_84;\n      case 7:\n        goto LABEL_100;\n      case 8:\n        goto LABEL_116;\n      case 9:\n        if ( v9 >= 0x20 )\n          goto LABEL_129;\n        do\n        {\n          if ( !v180 )\n            goto LABEL_310;\n          v56 = *v5;\n          --v180;\n          v57 = v56 << v9;\n          ++v5;\n          v9 += 8;\n          Src = v5;\n          v7 += v57;\n        }\n        while ( v9 < 0x20 );\nLABEL_129:\n        v58 = HI7613(v7) + (((v7 << 16) + (v7 & 0xFF00)) << 8) + ((v7 >> 8) & 0xFF00);\n        *(_DWORD *)(v4 + 24) = v58;\n        a3[12] = v58;\n        v7 = 0;\n        v9 = 0;\n        *(_DWORD *)v4 = 10;\nLABEL_130:\n        if ( !*(_DWORD *)(v4 + 12) )\n        {\n          a3[3] = (int)v175;\n          v148 = v177;\n          *a3 = (int)v5;\n          v149 = v180;\n          a3[4] = v148;\n          a3[1] = v149;\n          *(_DWORD *)(v4 + 60) = v9;\n          *(_DWORD *)(v4 + 56) = v7;\n          return 2;\n        }\n        v59 = sub_400A72(0, 0, 0);\n        *(_DWORD *)(v4 + 24) = v59;\n        a3[12] = v59;\n        v5 = (unsigned __int8 *)Src;\n        *(_DWORD *)v4 = 11;\nLABEL_132:\n        if ( a4 == 5 || a4 == 6 )\n          goto LABEL_310;\nLABEL_134:\n        if ( !*(_DWORD *)(v4 + 4) )\n        {\n          if ( v9 >= 3 )\n          {\nLABEL_139:\n            v63 = v7;\n            v64 = v7 >> 1;\n            *(_DWORD *)(v4 + 4) = v63 & 1;\n            switch ( v64 & 3 )\n            {\n              case 0u:\n                v7 = v64 >> 2;\n                *(_DWORD *)v4 = 13;\n                v9 -= 3;\n                goto LABEL_302;\n              case 1u:\n                sub_4032FA((_DWORD *)v4);\n                *(_DWORD *)v4 = 19;\n                if ( a4 != 6 )\n                  goto LABEL_145;\n                v7 = v64 >> 2;\n                v9 -= 3;\n                goto LABEL_310;\n              case 2u:\n                v7 = v64 >> 2;\n                *(_DWORD *)v4 = 16;\n                v9 -= 3;\n                goto LABEL_302;\n              case 3u:\n                a3[6] = (int)\"invalid block type\";\n                *(_DWORD *)v4 = 29;\n                goto LABEL_145;\n              default:\nLABEL_145:\n                v7 = v64 >> 2;\n                v9 -= 3;\n                goto LABEL_302;\n            }\n          }\n          while ( v180 )\n          {\n            v61 = *v5;\n            --v180;\n            v62 = v61 << v9;\n            ++v5;\n            v9 += 8;\n            Src = v5;\n            v7 += v62;\n            if ( v9 >= 3 )\n              goto LABEL_139;\n          }\n          goto LABEL_310;\n        }\n        v60 = v9 & 7;\n        v7 >>= v60;\n        v9 -= v60;\n        *(_DWORD *)v4 = 26;\n        goto LABEL_302;\n      case 10:\n        goto LABEL_130;\n      case 11:\n        goto LABEL_132;\n      case 12:\n        goto LABEL_134;\n      case 13:\n        v65 = v9 & 7;\n        v9 -= v65;\n        v7 >>= v65;\n        if ( v9 >= 0x20 )\n          goto LABEL_149;\n        do\n        {\n          if ( !v180 )\n            goto LABEL_310;\n          v66 = *v5;\n          --v180;\n          v67 = v66 << v9;\n          ++v5;\n          v9 += 8;\n          Src = v5;\n          v7 += v67;\n        }\n        while ( v9 < 0x20 );\nLABEL_149:\n        v68 = (unsigned __int16)v7;\n        if ( (unsigned __int16)v7 != ~v7 >> 16 )\n        {\n          a3[6] = (int)\"invalid stored block lengths\";\n          goto LABEL_301;\n        }\n        v7 = 0;\n        v9 = 0;\n        *(_DWORD *)(v4 + 64) = v68;\n        *(_DWORD *)v4 = 14;\n        if ( a4 == 6 )\n          goto LABEL_310;\nLABEL_152:\n        *(_DWORD *)v4 = 15;\nLABEL_153:\n        v69 = *(_DWORD *)(v4 + 64);\n        Size = v69;\n        if ( !v69 )\n          goto LABEL_231;\n        if ( v69 > v180 )\n        {\n          v69 = v180;\n          Size = v180;\n        }\n        if ( v69 > v177 )\n        {\n          v69 = v177;\n          Size = v177;\n        }\n        if ( !v69 )\n          goto LABEL_310;\n        memmove_0(v175, Src, Size);\n        Src = (char *)Src + Size;\n        v180 -= Size;\n        v177 -= Size;\n        v175 += Size;\n        v5 = (unsigned __int8 *)Src;\n        *(_DWORD *)(v4 + 64) -= Size;\n        goto LABEL_302;\n      case 14:\n        goto LABEL_152;\n      case 15:\n        goto LABEL_153;\n      case 16:\n        if ( v9 >= 0xE )\n          goto LABEL_163;\n        do\n        {\n          if ( !v180 )\n            goto LABEL_310;\n          v70 = *v5;\n          --v180;\n          v71 = v70 << v9;\n          ++v5;\n          v9 += 8;\n          Src = v5;\n          v7 += v71;\n        }\n        while ( v9 < 0xE );\nLABEL_163:\n        v72 = v7 & 0x1F;\n        v73 = v7 >> 5;\n        v74 = v73;\n        *(_DWORD *)(v4 + 96) = v72 + 257;\n        v73 >>= 5;\n        v75 = (v74 & 0x1F) + 1;\n        v76 = (v73 & 0xF) + 4;\n        v7 = v73 >> 4;\n        v9 -= 14;\n        v77 = *(_DWORD *)(v4 + 96) <= 0x11Eu;\n        *(_DWORD *)(v4 + 100) = v75;\n        *(_DWORD *)(v4 + 92) = v76;\n        if ( !v77 || v75 > 0x1E )\n        {\n          a3[6] = (int)\"too many length or distance symbols\";\n          goto LABEL_301;\n        }\n        *(_DWORD *)(v4 + 104) = 0;\n        *(_DWORD *)v4 = 17;\nLABEL_166:\n        if ( *(_DWORD *)(v4 + 104) < *(_DWORD *)(v4 + 92) )\n        {\n          while ( v9 >= 3 )\n          {\nLABEL_170:\n            *(_WORD *)(v4 + 2 * (unsigned __int16)word_4369A0[(*(_DWORD *)(v4 + 104))++] + 112) = v7 & 7;\n            v7 >>= 3;\n            v9 -= 3;\n            if ( *(_DWORD *)(v4 + 104) >= *(_DWORD *)(v4 + 92) )\n              goto LABEL_171;\n          }\n          while ( v180 )\n          {\n            v78 = *v5;\n            --v180;\n            v79 = v78 << v9;\n            ++v5;\n            v9 += 8;\n            Src = v5;\n            v7 += v79;\n            if ( v9 >= 3 )\n              goto LABEL_170;\n          }\n          goto LABEL_310;\n        }\nLABEL_171:\n        while ( *(_DWORD *)(v4 + 104) < 0x13u )\n          *(_WORD *)(v4 + 2 * (unsigned __int16)word_4369A0[(*(_DWORD *)(v4 + 104))++] + 112) = 0;\n        *(_DWORD *)(v4 + 108) = v4 + 1328;\n        *(_DWORD *)(v4 + 76) = v4 + 1328;\n        *(_DWORD *)(v4 + 84) = 7;\n        v80 = sub_403FC7(0, v4 + 112, 0x13u, (_DWORD **)(v4 + 108), (unsigned int *)(v4 + 84), (char *)(v4 + 752));\n        v5 = (unsigned __int8 *)Src;\n        v166 = v80;\n        if ( v80 )\n        {\n          a3[6] = (int)\"invalid code lengths set\";\n          goto LABEL_301;\n        }\n        *(_DWORD *)(v4 + 104) = 0;\n        *(_DWORD *)v4 = 18;\nLABEL_177:\n        if ( *(_DWORD *)(v4 + 104) < (unsigned int)(*(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 100)) )\n        {\n          while ( 1 )\n          {\n            v81 = *(_DWORD *)(*(_DWORD *)(v4 + 76) + 4 * (v7 & ((1 << *(_DWORD *)(v4 + 84)) - 1)));\n            Size = v81;\n            if ( BYTE1(v81) > v9 )\n              break;\nLABEL_181:\n            v86 = HI077D(v81);\n            if ( HI077D(v81) >= 0x10u )\n            {\n              if ( HI077D(v81) == 16 )\n              {\n                if ( v9 < (unsigned int)BYTE1(v81) + 2 )\n                {\n                  while ( v180 )\n                  {\n                    v88 = *v5;\n                    --v180;\n                    v89 = v88 << v9;\n                    BYTE1(v81) = BYTE1(Size);\n                    ++v5;\n                    v9 += 8;\n                    v7 += v89;\n                    Src = v5;\n                    if ( v9 >= (unsigned int)BYTE1(Size) + 2 )\n                      goto LABEL_187;\n                  }\n                  goto LABEL_310;\n                }\nLABEL_187:\n                v90 = *(_DWORD *)(v4 + 104);\n                v91 = BYTE1(v81);\n                v7 >>= v91;\n                v9 -= v91;\n                if ( !v90 )\n                {\n                  a3[6] = (int)\"invalid bit length repeat\";\n                  goto LABEL_301;\n                }\n                v92 = *(_WORD *)(v4 + 2 * v90 + 110);\n                v93 = (v7 & 3) + 3;\n                v7 >>= 2;\n                v174 = v92;\n                Size = v93;\n                v9 -= 2;\n              }\n              else\n              {\n                v94 = BYTE1(v81);\n                v167 = v94;\n                if ( HI077D(Size) == 17 )\n                {\n                  if ( v9 < v94 + 3 )\n                  {\n                    while ( v180 )\n                    {\n                      v95 = *v5;\n                      --v180;\n                      v96 = v95 << v9;\n                      v94 = v167;\n                      ++v5;\n                      v9 += 8;\n                      v7 += v96;\n                      Src = v5;\n                      if ( v9 >= v167 + 3 )\n                        goto LABEL_193;\n                    }\n                    goto LABEL_310;\n                  }\nLABEL_193:\n                  v97 = v7 >> v94;\n                  Size = (v97 & 7) + 3;\n                  v7 = v97 >> 3;\n                  v98 = -3;\n                }\n                else\n                {\n                  if ( v9 < v94 + 7 )\n                  {\n                    while ( v180 )\n                    {\n                      v99 = *v5;\n                      --v180;\n                      v100 = v99 << v9;\n                      v94 = v167;\n                      ++v5;\n                      v9 += 8;\n                      v7 += v100;\n                      Src = v5;\n                      if ( v9 >= v167 + 7 )\n                        goto LABEL_197;\n                    }\n                    goto LABEL_310;\n                  }\nLABEL_197:\n                  v101 = v7 >> v94;\n                  Size = (v101 & 0x7F) + 11;\n                  v7 = v101 >> 7;\n                  v98 = -7;\n                }\n                v9 += v98 - v94;\n                v93 = Size;\n                v174 = 0;\n              }\n              if ( v93 + *(_DWORD *)(v4 + 104) > (unsigned int)(*(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 100)) )\n              {\n                a3[6] = (int)\"invalid bit length repeat\";\n                goto LABEL_301;\n              }\n              for ( ; Size; ++*(_DWORD *)(v4 + 104) )\n              {\n                v102 = *(_DWORD *)(v4 + 104);\n                --Size;\n                *(_WORD *)(v4 + 2 * v102 + 112) = v174;\n              }\n            }\n            else\n            {\n              v87 = BYTE1(v81);\n              v7 >>= v87;\n              v9 -= v87;\n              *(_WORD *)(v4 + 2 * (*(_DWORD *)(v4 + 104))++ + 112) = v86;\n            }\n            if ( *(_DWORD *)(v4 + 104) >= (unsigned int)(*(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 100)) )\n              goto LABEL_203;\n          }\n          while ( v180 )\n          {\n            v82 = *v5;\n            --v180;\n            v83 = v82 << v9;\n            ++v5;\n            v9 += 8;\n            v7 += v83;\n            v84 = 1 << *(_DWORD *)(v4 + 84);\n            v85 = *(_DWORD *)(v4 + 76);\n            Src = v5;\n            v81 = *(_DWORD *)(v85 + 4 * (v7 & (v84 - 1)));\n            Size = v81;\n            if ( BYTE1(v81) <= v9 )\n              goto LABEL_181;\n          }\n          goto LABEL_310;\n        }\nLABEL_203:\n        if ( *(_DWORD *)v4 == 29 )\n          goto LABEL_302;\n        if ( !*(_WORD *)(v4 + 624) )\n        {\n          a3[6] = (int)\"invalid code -- missing end-of-block\";\n          goto LABEL_301;\n        }\n        *(_DWORD *)(v4 + 108) = v4 + 1328;\n        *(_DWORD *)(v4 + 76) = v4 + 1328;\n        v103 = *(_DWORD *)(v4 + 96);\n        *(_DWORD *)(v4 + 84) = 9;\n        v166 = sub_403FC7(1, v4 + 112, v103, (_DWORD **)(v4 + 108), (unsigned int *)(v4 + 84), (char *)(v4 + 752));\n        if ( v166 )\n        {\n          v5 = (unsigned __int8 *)Src;\n          a3[6] = (int)\"invalid literal/lengths set\";\n          goto LABEL_301;\n        }\n        *(_DWORD *)(v4 + 80) = *(_DWORD *)(v4 + 108);\n        v104 = *(_DWORD *)(v4 + 96);\n        *(_DWORD *)(v4 + 88) = 6;\n        v105 = sub_403FC7(\n                 2,\n                 v4 + 2 * v104 + 112,\n                 *(_DWORD *)(v4 + 100),\n                 (_DWORD **)(v4 + 108),\n                 (unsigned int *)(v4 + 88),\n                 (char *)(v4 + 752));\n        v5 = (unsigned __int8 *)Src;\n        v166 = v105;\n        if ( v105 )\n        {\n          a3[6] = (int)\"invalid distances set\";\n          goto LABEL_301;\n        }\n        *(_DWORD *)v4 = 19;\n        if ( a4 == 6 )\n          goto LABEL_310;\nLABEL_213:\n        *(_DWORD *)v4 = 20;\nLABEL_214:\n        if ( v180 >= 6 && v177 >= 0x102 )\n        {\n          v106 = v177;\n          a3[3] = (int)v175;\n          *a3 = (int)Src;\n          a3[4] = v106;\n          a3[1] = v180;\n          *(_DWORD *)(v4 + 56) = v7;\n          *(_DWORD *)(v4 + 60) = v9;\n          sub_404C06(a1, a2, a3, v171);\n          v7 = *(_DWORD *)(v4 + 56);\n          v9 = *(_DWORD *)(v4 + 60);\n          v175 = (_BYTE *)a3[3];\n          v5 = (unsigned __int8 *)*a3;\n          v107 = a3[1];\n          v108 = *(_DWORD *)v4 == 11;\n          v177 = a3[4];\n          Src = v5;\n          v180 = v107;\n          if ( v108 )\n            *(_DWORD *)(v4 + 7108) = -1;\n          goto LABEL_302;\n        }\n        v109 = 1 << *(_DWORD *)(v4 + 84);\n        *(_DWORD *)(v4 + 7108) = 0;\n        v110 = *(_DWORD *)(*(_DWORD *)(v4 + 76) + 4 * (v7 & (v109 - 1)));\n        Size = v110;\n        if ( BYTE1(v110) > v9 )\n        {\n          while ( v180 )\n          {\n            v111 = *v5;\n            --v180;\n            v112 = v111 << v9;\n            ++v5;\n            v9 += 8;\n            v7 += v112;\n            v113 = 1 << *(_DWORD *)(v4 + 84);\n            v114 = *(_DWORD *)(v4 + 76);\n            Src = v5;\n            v110 = *(_DWORD *)(v114 + 4 * (v7 & (v113 - 1)));\n            Size = v110;\n            if ( BYTE1(v110) <= v9 )\n              goto LABEL_221;\n          }\n          goto LABEL_310;\n        }\nLABEL_221:\n        if ( (_BYTE)v110 && (v110 & 0xF0) == 0 )\n        {\n          v168 = v110;\n          Size = *(_DWORD *)(*(_DWORD *)(v4 + 76)\n                           + 4 * (HI077D(Size) + ((v7 & ((1 << (BYTE1(v110) + v110)) - 1)) >> SBA774(v110))));\n          if ( BYTE1(v110) + (unsigned int)BYTE1(Size) > v9 )\n          {\n            while ( v180 )\n            {\n              v115 = *v5 << v9;\n              --v180;\n              ++v5;\n              v7 += v115;\n              v9 += 8;\n              Src = v5;\n              Size = *(_DWORD *)(*(_DWORD *)(v4 + 76)\n                               + 4 * (HI077D(v168) + ((v7 & ((1 << (BYTE1(v168) + v168)) - 1)) >> SBA774(v168))));\n              if ( BYTE1(v168) + (unsigned int)BYTE1(Size) <= v9 )\n                goto LABEL_226;\n            }\n            goto LABEL_310;\n          }\nLABEL_226:\n          v110 = Size;\n          v7 >>= SBA774(v168);\n          v9 -= BYTE1(v168);\n          *(_DWORD *)(v4 + 7108) = BYTE1(v168);\n        }\n        *(_DWORD *)(v4 + 7108) += BYTE1(v110);\n        v7 >>= SBA774(v110);\n        v9 -= BYTE1(v110);\n        *(_DWORD *)(v4 + 64) = HI077D(v110);\n        if ( !(_BYTE)v110 )\n        {\n          *(_DWORD *)v4 = 25;\n          goto LABEL_302;\n        }\n        if ( (v110 & 0x20) == 0 )\n        {\n          if ( (v110 & 0x40) != 0 )\n          {\n            a3[6] = (int)\"invalid literal/length code\";\n            goto LABEL_301;\n          }\n          *(_DWORD *)(v4 + 72) = v110 & 0xF;\n          *(_DWORD *)v4 = 21;\nLABEL_235:\n          v116 = *(_DWORD *)(v4 + 72);\n          if ( v116 )\n          {\n            if ( v9 < v116 )\n            {\n              while ( v180 )\n              {\n                v117 = *v5;\n                --v180;\n                v118 = v117 << v9;\n                ++v5;\n                v9 += 8;\n                Src = v5;\n                v7 += v118;\n                if ( v9 >= *(_DWORD *)(v4 + 72) )\n                  goto LABEL_239;\n              }\n              goto LABEL_310;\n            }\nLABEL_239:\n            v119 = *(_DWORD *)(v4 + 72);\n            v9 -= v119;\n            *(_DWORD *)(v4 + 64) += v7 & ((1 << v119) - 1);\n            v7 >>= v119;\n            *(_DWORD *)(v4 + 7108) += v119;\n          }\n          *(_DWORD *)(v4 + 7112) = *(_DWORD *)(v4 + 64);\n          *(_DWORD *)v4 = 22;\nLABEL_241:\n          v120 = *(_DWORD *)(*(_DWORD *)(v4 + 80) + 4 * (v7 & ((1 << *(_DWORD *)(v4 + 88)) - 1)));\n          Size = v120;\n          if ( BYTE1(v120) > v9 )\n          {\n            while ( v180 )\n            {\n              v121 = *v5;\n              --v180;\n              v122 = v121 << v9;\n              ++v5;\n              v9 += 8;\n              v7 += v122;\n              v123 = 1 << *(_DWORD *)(v4 + 88);\n              v124 = *(_DWORD *)(v4 + 80);\n              Src = v5;\n              v120 = *(_DWORD *)(v124 + 4 * (v7 & (v123 - 1)));\n              Size = v120;\n              if ( BYTE1(v120) <= v9 )\n                goto LABEL_244;\n            }\n            goto LABEL_310;\n          }\nLABEL_244:\n          if ( (v120 & 0xF0) == 0 )\n          {\n            v169 = v120;\n            Size = *(_DWORD *)(*(_DWORD *)(v4 + 80)\n                             + 4 * (HI077D(Size) + ((v7 & ((1 << (BYTE1(v120) + v120)) - 1)) >> SBA774(v120))));\n            if ( BYTE1(v120) + (unsigned int)BYTE1(Size) > v9 )\n            {\n              while ( v180 )\n              {\n                v125 = *v5 << v9;\n                --v180;\n                ++v5;\n                v7 += v125;\n                v9 += 8;\n                Src = v5;\n                Size = *(_DWORD *)(*(_DWORD *)(v4 + 80)\n                                 + 4 * (HI077D(v169) + ((v7 & ((1 << (BYTE1(v169) + v169)) - 1)) >> SBA774(v169))));\n                if ( BYTE1(v169) + (unsigned int)BYTE1(Size) <= v9 )\n                  goto LABEL_248;\n              }\n              goto LABEL_310;\n            }\nLABEL_248:\n            v120 = Size;\n            v7 >>= SBA774(v169);\n            v9 -= BYTE1(v169);\n            *(_DWORD *)(v4 + 7108) += BYTE1(v169);\n          }\n          *(_DWORD *)(v4 + 7108) += BYTE1(v120);\n          v7 >>= SBA774(v120);\n          v9 -= BYTE1(v120);\n          if ( (v120 & 0x40) != 0 )\n          {\n            a3[6] = (int)\"invalid distance code\";\n            goto LABEL_301;\n          }\n          *(_DWORD *)(v4 + 68) = HI077D(v120);\n          *(_DWORD *)(v4 + 72) = v120 & 0xF;\n          *(_DWORD *)v4 = 23;\nLABEL_252:\n          v126 = *(_DWORD *)(v4 + 72);\n          if ( v126 )\n          {\n            if ( v9 < v126 )\n            {\n              while ( v180 )\n              {\n                v127 = *v5;\n                --v180;\n                v128 = v127 << v9;\n                ++v5;\n                v9 += 8;\n                Src = v5;\n                v7 += v128;\n                if ( v9 >= *(_DWORD *)(v4 + 72) )\n                  goto LABEL_256;\n              }\n              goto LABEL_310;\n            }\nLABEL_256:\n            v129 = *(_DWORD *)(v4 + 72);\n            v9 -= v129;\n            *(_DWORD *)(v4 + 68) += v7 & ((1 << v129) - 1);\n            v7 >>= v129;\n            *(_DWORD *)(v4 + 7108) += v129;\n          }\n          *(_DWORD *)v4 = 24;\nLABEL_258:\n          if ( !v177 )\n            goto LABEL_310;\n          v130 = *(_DWORD *)(v4 + 68);\n          if ( v130 <= v171 - v177 )\n          {\n            v136 = &v175[-v130];\n            v133 = *(_DWORD *)(v4 + 64);\n            v164 = (int)v136;\n            v170 = v133;\nLABEL_269:\n            Size = v133;\n          }\n          else\n          {\n            v131 = v130 - (v171 - v177);\n            Size = v131;\n            if ( v131 > *(_DWORD *)(v4 + 44) && *(_DWORD *)(v4 + 7104) )\n            {\n              a3[6] = (int)\"invalid distance too far back\";\n              goto LABEL_301;\n            }\n            v132 = *(_DWORD *)(v4 + 48);\n            if ( v131 <= v132 )\n            {\n              v135 = *(_DWORD *)(v4 + 48) + *(_DWORD *)(v4 + 52) - v131;\n              v133 = Size;\n            }\n            else\n            {\n              v133 = v131 - v132;\n              v134 = *(_DWORD *)(v4 + 40) + *(_DWORD *)(v4 + 52);\n              Size = v133;\n              v135 = v134 - v133;\n            }\n            v164 = v135;\n            v170 = *(_DWORD *)(v4 + 64);\n            if ( v133 > v170 )\n            {\n              v133 = *(_DWORD *)(v4 + 64);\n              goto LABEL_269;\n            }\n          }\n          if ( v133 > v177 )\n          {\n            v133 = v177;\n            Size = v177;\n          }\n          v177 -= v133;\n          v137 = v170 - v133;\n          v138 = v175;\n          *(_DWORD *)(v4 + 64) = v137;\n          v139 = v164 - (_DWORD)v175;\n          for ( i = v164 - (_DWORD)v175; ; v139 = i )\n          {\n            *v175 = v138[v139];\n            v138 = v175 + 1;\n            v108 = Size-- == 1;\n            ++v175;\n            if ( v108 )\n              break;\n          }\n          if ( !*(_DWORD *)(v4 + 64) )\n            *(_DWORD *)v4 = 20;\n          goto LABEL_302;\n        }\n        *(_DWORD *)(v4 + 7108) = -1;\nLABEL_231:\n        *(_DWORD *)v4 = 11;\n        goto LABEL_302;\n      case 17:\n        goto LABEL_166;\n      case 18:\n        goto LABEL_177;\n      case 19:\n        goto LABEL_213;\n      case 20:\n        goto LABEL_214;\n      case 21:\n        goto LABEL_235;\n      case 22:\n        goto LABEL_241;\n      case 23:\n        goto LABEL_252;\n      case 24:\n        goto LABEL_258;\n      case 25:\n        if ( !v177 )\n          goto LABEL_310;\n        *v175 = *(_BYTE *)(v4 + 64);\n        --v177;\n        ++v175;\n        *(_DWORD *)v4 = 20;\n        goto LABEL_302;\n      case 26:\n        if ( !*(_DWORD *)(v4 + 8) )\n          goto LABEL_293;\n        if ( v9 >= 0x20 )\n          goto LABEL_283;\n        do\n        {\n          if ( !v180 )\n            goto LABEL_310;\n          v140 = *v5;\n          --v180;\n          v141 = v140 << v9;\n          ++v5;\n          v9 += 8;\n          Src = v5;\n          v7 += v141;\n        }\n        while ( v9 < 0x20 );\nLABEL_283:\n        v142 = v171 - v177;\n        a3[5] += v171 - v177;\n        *(_DWORD *)(v4 + 28) += v142;\n        if ( v142 )\n        {\n          v158 = &v175[-v142];\n          v157 = *(_DWORD *)(v4 + 24);\n          if ( *(_DWORD *)(v4 + 16) )\n            v143 = sub_405679(v157, v158, v142);\n          else\n            v143 = sub_400A72(v157, v158, v142);\n          v5 = (unsigned __int8 *)Src;\n          *(_DWORD *)(v4 + 24) = v143;\n          a3[12] = v143;\n        }\n        v171 = v177;\n        v144 = v7;\n        if ( !*(_DWORD *)(v4 + 16) )\n          v144 = HI7613(v7) + ((v7 >> 8) & 0xFF00) + (((v7 << 16) + (v7 & 0xFF00)) << 8);\n        if ( v144 != *(_DWORD *)(v4 + 24) )\n        {\n          a3[6] = (int)\"incorrect data check\";\n          goto LABEL_301;\n        }\n        v7 = 0;\n        v9 = 0;\nLABEL_293:\n        *(_DWORD *)v4 = 27;\nLABEL_294:\n        if ( !*(_DWORD *)(v4 + 8) || !*(_DWORD *)(v4 + 16) )\n          goto LABEL_307;\n        if ( v9 < 0x20 )\n        {\n          while ( v180 )\n          {\n            v145 = *v5;\n            --v180;\n            v146 = v145 << v9;\n            ++v5;\n            v9 += 8;\n            Src = v5;\n            v7 += v146;\n            if ( v9 >= 0x20 )\n              goto LABEL_299;\n          }\n          goto LABEL_310;\n        }\nLABEL_299:\n        if ( v7 != *(_DWORD *)(v4 + 28) )\n        {\n          a3[6] = (int)\"incorrect length check\";\nLABEL_301:\n          *(_DWORD *)v4 = 29;\nLABEL_302:\n          v8 = *(_DWORD *)v4;\n          if ( *(_DWORD *)v4 > 0x1Eu )\n            return -2;\n          continue;\n        }\n        v7 = 0;\n        v9 = 0;\nLABEL_307:\n        *(_DWORD *)v4 = 28;\nLABEL_308:\n        v166 = 1;\nLABEL_310:\n        a3[3] = (int)v175;\n        v150 = v177;\n        *a3 = (int)v5;\n        v151 = v180;\n        a3[4] = v150;\n        a3[1] = v151;\n        v108 = *(_DWORD *)(v4 + 40) == 0;\n        *(_DWORD *)(v4 + 56) = v7;\n        *(_DWORD *)(v4 + 60) = v9;\n        if ( v108 && (v171 == a3[4] || *(int *)v4 >= 29 || *(int *)v4 >= 26 && a4 == 4) || !sub_40EE64(v171, (int)a3) )\n        {\n          v153 = v159 - a3[1];\n          v154 = v171 - a3[4];\n          a3[2] += v153;\n          a3[5] += v154;\n          *(_DWORD *)(v4 + 28) += v154;\n          v160 = v153;\n          if ( *(_DWORD *)(v4 + 8) && v154 )\n          {\n            if ( *(_DWORD *)(v4 + 16) )\n              v155 = sub_405679(*(_DWORD *)(v4 + 24), (_BYTE *)(a3[3] - v154), v154);\n            else\n              v155 = sub_400A72(*(_DWORD *)(v4 + 24), (unsigned __int8 *)(a3[3] - v154), v154);\n            *(_DWORD *)(v4 + 24) = v155;\n            a3[12] = v155;\n          }\n          v156 = *(_DWORD *)v4;\n          if ( *(_DWORD *)v4 == 19 || (v181 = 0, v156 == 14) )\n            v181 = 256;\n          a3[11] = *(_DWORD *)(v4 + 60) + v181 + (*(_DWORD *)(v4 + 4) != 0 ? 0x40 : 0) + (v156 != 11 ? 0 : 0x80);\n          if ( (v160 || v154) && a4 != 4 )\n          {\n            return v166;\n          }\n          else\n          {\n            result = v166;\n            if ( !v166 )\n              return -5;\n          }\n        }\n        else\n        {\n          *(_DWORD *)v4 = 30;\n          return -4;\n        }\n        return result;\n      case 27:\n        goto LABEL_294;\n      case 28:\n        goto LABEL_308;\n      case 29:\n        v166 = -3;\n        goto LABEL_310;\n      case 30:\n        return -4;\n      default:\n        return -2;\n    }\n  }\n}\n// 40184A: variable 'v5' is possibly undefined\n// 4369A0: using guessed type __int16 word_4369A0[20];\n\n"
    },
    {
        "Function": "sub_403FC7",
        "Total XOR and shift operations": 13,
        "XOR operations": 0,
        "Shift operations": 13,
        "Operation percentage": "4.74%",
        "Function Body": "\nint __cdecl sub_403FC7(int a1, int a2, unsigned int a3, _DWORD **a4, unsigned int *a5, char *a6)\n{\n  unsigned int i; // eax\n  unsigned int v7; // ecx\n  unsigned int v8; // eax\n  unsigned int j; // ebx\n  int v11; // edx\n  unsigned int k; // ecx\n  int v13; // esi\n  unsigned int m; // eax\n  __int16 v15; // cx\n  unsigned int n; // eax\n  char *v17; // eax\n  _DWORD *v18; // edx\n  unsigned int v19; // eax\n  int v20; // edi\n  bool v21; // cf\n  int v22; // ecx\n  int v23; // eax\n  int v24; // eax\n  int v25; // edx\n  _DWORD *v26; // ecx\n  unsigned int ii; // eax\n  int v29; // esi\n  char v30; // dl\n  char v31; // cl\n  unsigned int v32; // edx\n  int v33; // eax\n  unsigned __int16 *v34; // esi\n  int v35; // eax\n  unsigned int v36; // edx\n  bool v37; // cf\n  _DWORD *v38; // eax\n  int v39; // ecx\n  unsigned int v40; // edx\n  __int16 v41[16]; // [esp+8h] [ebp-7Ch]\n  int v42[8]; // [esp+28h] [ebp-5Ch] BYREF\n  int v43; // [esp+48h] [ebp-3Ch]\n  int v44; // [esp+4Ch] [ebp-38h]\n  int v45; // [esp+50h] [ebp-34h]\n  int v46; // [esp+54h] [ebp-30h]\n  int v47; // [esp+58h] [ebp-2Ch]\n  unsigned int v48; // [esp+5Ch] [ebp-28h]\n  char *v49; // [esp+60h] [ebp-24h]\n  _BYTE *v50; // [esp+64h] [ebp-20h]\n  int v51; // [esp+68h] [ebp-1Ch]\n  _DWORD *v52; // [esp+6Ch] [ebp-18h]\n  unsigned int v53; // [esp+70h] [ebp-14h]\n  char *v54; // [esp+74h] [ebp-10h]\n  unsigned int v55; // [esp+78h] [ebp-Ch]\n  unsigned int v56; // [esp+7Ch] [ebp-8h]\n  unsigned int v57; // [esp+80h] [ebp-4h]\n  int v58; // [esp+94h] [ebp+10h]\n  unsigned __int16 v59; // [esp+94h] [ebp+10h]\n\n  memset(v42, 0, sizeof(v42));\n  for ( i = 0; i < a3; ++i )\n    ++*((_WORD *)v42 + *(unsigned __int16 *)(a2 + 2 * i));\n  v7 = *a5;\n  v57 = *a5;\n  v8 = 15;\n  do\n  {\n    if ( *((_WORD *)v42 + v8) )\n      break;\n    --v8;\n  }\n  while ( v8 );\n  v53 = v8;\n  if ( v7 > v8 )\n  {\n    v57 = v8;\n    v7 = v8;\n  }\n  if ( !v8 )\n  {\n    *(*a4)++ = 320;\n    *(*a4)++ = 320;\n    *a5 = 1;\n    return 0;\n  }\n  for ( j = 1; j < v8; ++j )\n  {\n    if ( *((_WORD *)v42 + j) )\n      break;\n  }\n  if ( v7 < j )\n    v57 = j;\n  v11 = 1;\n  for ( k = 1; k <= 0xF; ++k )\n  {\n    v11 = 2 * v11 - *((unsigned __int16 *)v42 + k);\n    if ( v11 < 0 )\n      return -1;\n  }\n  v13 = a1;\n  if ( v11 > 0 && (!a1 || v8 != 1) )\n    return -1;\n  v41[1] = 0;\n  for ( m = 1; m < 15; v41[m] = v15 )\n  {\n    v15 = *(_WORD *)((char *)v42 + m * 2) + v41[m];\n    ++m;\n  }\n  for ( n = 0; n < a3; ++n )\n  {\n    if ( *(_WORD *)(a2 + 2 * n) )\n    {\n      *(_WORD *)&a6[2 * (unsigned __int16)v41[*(unsigned __int16 *)(a2 + 2 * n)]++] = n;\n      v13 = a1;\n    }\n  }\n  if ( v13 )\n  {\n    if ( v13 != 1 )\n    {\n      v49 = (char *)&unk_43CC52;\n      v50 = &unk_436B3A;\n      v51 = -1;\n      goto LABEL_34;\n    }\n    v49 = (char *)&unk_437266 - 514;\n    v17 = (char *)&unk_437774 - 514;\n    v51 = 256;\n  }\n  else\n  {\n    v17 = a6;\n    v49 = a6;\n    v51 = 19;\n  }\n  v50 = v17;\nLABEL_34:\n  v18 = *a4;\n  v56 = 0;\n  v55 = 0;\n  v46 = -1;\n  v19 = 1 << v57;\n  v52 = v18;\n  v20 = 1 << v57;\n  v47 = 1 << v57;\n  v48 = 1 << v57;\n  v45 = (1 << v57) - 1;\n  if ( v13 == 1 )\n  {\n    v21 = v19 < 0x354;\n    goto LABEL_38;\n  }\n  if ( v13 == 2 )\n  {\n    v21 = v19 < 0x250;\nLABEL_38:\n    if ( !v21 )\n      return 1;\n  }\n  v54 = a6;\n  while ( 1 )\n  {\n    BYTE1(v58) = j - v55;\n    v22 = *(unsigned __int16 *)v54;\n    if ( v22 >= v51 )\n    {\n      if ( v22 <= v51 )\n      {\n        LO67D8(v58) = 96;\n        HI077D(v58) = 0;\n      }\n      else\n      {\n        v23 = 2 * *(unsigned __int16 *)v54;\n        LO67D8(v58) = v50[v23];\n        HI077D(v58) = *(_WORD *)&v49[v23];\n      }\n    }\n    else\n    {\n      LO67D8(v58) = 0;\n      HI077D(v58) = *(_WORD *)v54;\n    }\n    v24 = v20;\n    v25 = 1 << (j - v55);\n    v44 = v20;\n    v26 = &v52[v20 + (v56 >> v55)];\n    do\n    {\n      v26 -= v25;\n      v24 -= v25;\n      *v26 = v58;\n    }\n    while ( v24 );\n    for ( ii = 1 << (j - 1); (ii & v56) != 0; ii >>= 1 )\n      ;\n    if ( ii )\n      v56 = ii + (v56 & (ii - 1));\n    else\n      v56 = 0;\n    v54 += 2;\n    if ( (*((_WORD *)v42 + j))-- != 1 )\n      goto LABEL_56;\n    if ( j == v53 )\n      break;\n    j = *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)v54);\nLABEL_56:\n    if ( j <= v57 || (v29 = v56 & v45, v43 = v56 & v45, (v56 & v45) == v46) )\n    {\n      v20 = v47;\n    }\n    else\n    {\n      v30 = v55;\n      if ( !v55 )\n      {\n        v55 = v57;\n        v30 = v57;\n      }\n      v31 = j - v30;\n      v52 += v44;\n      v32 = j;\n      v33 = 1 << v31;\n      if ( j < v53 )\n      {\n        v34 = (unsigned __int16 *)v42 + j;\n        do\n        {\n          v35 = v33 - *v34;\n          if ( v35 <= 0 )\n            break;\n          ++v32;\n          ++v31;\n          ++v34;\n          v33 = 2 * v35;\n        }\n        while ( v32 < v53 );\n        v29 = v43;\n      }\n      v20 = 1 << v31;\n      v36 = (1 << v31) + v48;\n      v47 = 1 << v31;\n      v48 = v36;\n      if ( a1 == 1 )\n      {\n        v37 = v36 < 0x354;\n      }\n      else\n      {\n        if ( a1 != 2 )\n          goto LABEL_70;\n        v37 = v36 < 0x250;\n      }\n      if ( !v37 )\n        return 1;\nLABEL_70:\n      LO67D8((*a4)[v29]) = v31;\n      BYTE1((*a4)[v29]) = v57;\n      v38 = *a4;\n      v39 = v52 - *a4;\n      v46 = v29;\n      HI077D(v38[v29]) = v39;\n    }\n  }\n  if ( v56 )\n  {\n    LO67D8(v59) = 64;\n    HI7613(v59) = j - v55;\n    v52[v56] = v59;\n  }\n  v40 = v57;\n  *a4 += v48;\n  *a5 = v40;\n  return 0;\n}\n\n"
    },
    {
        "Function": "sub_404C06",
        "Total XOR and shift operations": 20,
        "XOR operations": 1,
        "Shift operations": 19,
        "Operation percentage": "3.60%",
        "Function Body": "\nint *__usercall sub_404C06@<eax>(__m64 a1@<mm0>, __m64 a2@<mm1>, int *a3, int a4)\n{\n  unsigned int v4; // kr00_4\n  _DWORD *v5; // edi\n  int v6; // edx\n  int v7; // ecx\n  unsigned int v8; // eax\n  unsigned int v9; // ecx\n  char *v10; // edx\n  unsigned int v11; // ebp\n  unsigned int v12; // ebx\n  char *v13; // esi\n  char *v14; // ecx\n  unsigned int v15; // ecx\n  int v16; // eax\n  char *v17; // edi\n  unsigned int v18; // kr04_4\n  unsigned int v19; // kr08_4\n  unsigned __int16 v30; // ax\n  char v31; // cl\n  unsigned int i; // eax\n  unsigned int v33; // edx\n  unsigned __int8 v34; // cl\n  unsigned __int8 v35; // ch\n  unsigned __int16 v36; // ax\n  char v37; // cl\n  int v38; // eax\n  unsigned __int16 v39; // ax\n  char v40; // cl\n  unsigned int j; // eax\n  unsigned int v42; // edx\n  unsigned __int8 v43; // cl\n  unsigned __int8 v44; // ch\n  unsigned __int16 v45; // ax\n  char v46; // cl\n  int v47; // eax\n  char *v48; // esi\n  char v49; // al\n  char v50; // dl\n  char *v51; // edi\n  char *v52; // edi\n  char v53; // al\n  unsigned int v54; // ecx\n  char *v55; // esi\n  unsigned int v56; // eax\n  unsigned int v57; // ecx\n  unsigned int v58; // ecx\n  __m64 v59; // mm4\n  __m64 v60; // mm3\n  __m64 v61; // mm5\n  __m64 v62; // mm2\n  __m64 v63; // mm7\n  __m64 v64; // mm7\n  int v65; // eax\n  unsigned int v66; // edx\n  int v67; // eax\n  __m64 v68; // mm7\n  __m64 v69; // mm7\n  int v70; // eax\n  unsigned int k; // eax\n  int v72; // eax\n  unsigned int v73; // ecx\n  char v74; // dl\n  char *v75; // esi\n  char *v76; // edi\n  char *v77; // edi\n  char v78; // al\n  unsigned int v79; // ecx\n  char *v80; // esi\n  unsigned int v81; // ecx\n  unsigned int v82; // ecx\n  const char *v83; // ecx\n  int v84; // edx\n  int *result; // eax\n  int v86; // edx\n  int v87; // esi\n  unsigned int v88; // ebx\n  char *v89; // [esp+4h] [ebp-64h]\n  char *v90; // [esp+8h] [ebp-60h]\n  unsigned int v91; // [esp+Ch] [ebp-5Ch]\n  unsigned int v92; // [esp+10h] [ebp-58h]\n  unsigned int v93; // [esp+14h] [ebp-54h]\n  unsigned int v94; // [esp+18h] [ebp-50h]\n  unsigned int v95; // [esp+1Ch] [ebp-4Ch]\n  int v96; // [esp+20h] [ebp-48h]\n  unsigned int v97; // [esp+24h] [ebp-44h]\n  char *v98; // [esp+28h] [ebp-40h]\n  unsigned int v99; // [esp+2Ch] [ebp-3Ch]\n  char v100[12]; // [esp+30h] [ebp-38h] BYREF\n  char *v101; // [esp+3Ch] [ebp-2Ch]\n  char *v102; // [esp+40h] [ebp-28h]\n  unsigned int v103; // [esp+44h] [ebp-24h]\n  unsigned int v104; // [esp+48h] [ebp-20h]\n  char *v105; // [esp+4Ch] [ebp-1Ch]\n  char *v106; // [esp+50h] [ebp-18h]\n  unsigned int v107; // [esp+54h] [ebp-14h]\n\n  v4 = __readeflags();\n  v107 = v4;\n  v5 = (_DWORD *)a3[7];\n  v6 = *a3 + a3[1] - 11;\n  v102 = (char *)*a3;\n  v98 = (char *)v6;\n  v7 = a3[4];\n  v106 = (char *)a3[3];\n  v101 = &v106[v7 - a4];\n  v97 = (unsigned int)&v106[v7 - 257];\n  v95 = v5[19];\n  v96 = v5[20];\n  v93 = (1 << v5[21]) - 1;\n  v94 = (1 << v5[22]) - 1;\n  v8 = v5[10];\n  v9 = v5[12];\n  v10 = (char *)v5[13];\n  v104 = v8;\n  v103 = v9;\n  v105 = v10;\n  v11 = v5[14];\n  v12 = v5[15];\n  v13 = v102;\n  v14 = v98;\n  if ( v98 > v102 )\n  {\n    while ( ((unsigned __int8)v13 & 3) != 0 )\n    {\n      v16 = (unsigned __int8)*v13++;\n      v14 = (char *)v12;\n      v12 += 8;\n      v8 = v16 << (char)v14;\n      v11 |= v8;\n    }\n  }\n  else\n  {\n    v15 = v98 + 11 - v102;\n    qmemcpy(v100, v102, v15);\n    v8 = 0;\n    memset(&v100[v15], 0, 12 - v15);\n    v14 = 0;\n    v13 = v100;\n    v98 = v100;\n  }\n  v17 = v106;\n  while ( dword_50551C != 2 )\n  {\n    if ( (unsigned int)dword_50551C > 2 )\n    {\n      while ( 1 )\n      {\n        if ( (unsigned __int8)v12 <= 0xFu )\n        {\n          v30 = *(_WORD *)v13;\n          v13 += 2;\n          v31 = v12;\n          LO67D8(v12) = v12 + 16;\n          v11 |= v30 << v31;\n        }\n        for ( i = *(_DWORD *)(v95 + 4 * (v11 & v93)); ; i = *(_DWORD *)(v95 + 4 * (v33 + (v11 & ((1 << i) - 1)))) )\n        {\n          LO67D8(v12) = v12 - BYTE1(i);\n          v11 >>= SBA774(i);\n          if ( !(_BYTE)i )\n          {\n            *v17++ = BYTE2(i);\n            goto LABEL_22;\n          }\n          v33 = HI077D(i);\n          if ( (i & 0x10) != 0 )\n            break;\n          if ( (i & 0x40) != 0 )\n            goto LABEL_97;\n        }\n        v34 = i & 0xF;\n        if ( (i & 0xF) != 0 )\n        {\n          if ( (unsigned __int8)v12 < v34 )\n          {\n            v35 = i & 0xF;\n            v36 = *(_WORD *)v13;\n            v13 += 2;\n            v37 = v12;\n            LO67D8(v12) = v12 + 16;\n            v11 |= v36 << v37;\n            v34 = v35;\n          }\n          LO67D8(v12) = v12 - v34;\n          v38 = v11 & ((1 << v34) - 1);\n          v11 >>= v34;\n          v33 += v38;\n        }\n        v99 = v33;\n        if ( (unsigned __int8)v12 <= 0xFu )\n        {\n          v39 = *(_WORD *)v13;\n          v13 += 2;\n          v40 = v12;\n          LO67D8(v12) = v12 + 16;\n          v11 |= v39 << v40;\n        }\n        for ( j = *(_DWORD *)(v96 + 4 * (v11 & v94)); ; j = *(_DWORD *)(v96 + 4 * (v42 + (v11 & ((1 << j) - 1)))) )\n        {\n          v42 = HI077D(j);\n          LO67D8(v12) = v12 - BYTE1(j);\n          v11 >>= SBA774(j);\n          if ( (j & 0x10) != 0 )\n            break;\n          if ( (j & 0x40) != 0 )\n            goto LABEL_96;\n        }\n        v43 = j & 0xF;\n        if ( (j & 0xF) != 0 )\n        {\n          if ( (unsigned __int8)v12 < v43 )\n          {\n            v44 = j & 0xF;\n            v45 = *(_WORD *)v13;\n            v13 += 2;\n            v46 = v12;\n            LO67D8(v12) = v12 + 16;\n            v11 |= v45 << v46;\n            v43 = v44;\n          }\n          LO67D8(v12) = v12 - v43;\n          v47 = v11 & ((1 << v43) - 1);\n          v11 >>= v43;\n          v42 += v47;\n        }\n        else if ( v42 == 1 && v101 != v17 )\n        {\n          v52 = v17 - 1;\n          v53 = *v52;\n          v52[1] = *v52;\n          v52[2] = v53;\n          v52[3] = v53;\n          v52 += 4;\n          memset(v52, v53, v99 - 3);\n          v17 = &v52[v99 - 3];\n          goto LABEL_22;\n        }\n        v102 = v13;\n        if ( v17 - v101 >= v42 )\n        {\n          v48 = &v17[-v42];\n          *v17 = v17[-v42];\n          v49 = v17[-v42 + 1];\n          v50 = v17[-v42 + 2];\n          v17[1] = v49;\n          v17[2] = v50;\n          v51 = v17 + 3;\n          qmemcpy(v51, v48 + 3, v99 - 3);\n          v17 = &v51[v99 - 3];\n          v13 = v102;\n          goto LABEL_22;\n        }\n        if ( v104 < v42 )\n          goto LABEL_100;\n        v54 = v42 + v101 - v17;\n        if ( v103 )\n        {\n          if ( v54 > v103 )\n          {\n            v55 = &v105[v104 + v103 - v54];\n            v57 = v54 - v103;\n            v56 = v99;\n            if ( v99 > v57 )\n            {\n              v56 = v99 - v57;\n              qmemcpy(v17, v55, v57);\n              v17 += v57;\n              v55 = v105;\n              v58 = v103;\n              if ( v56 > v103 )\n              {\n                v56 -= v103;\n                qmemcpy(v17, v105, v103);\n                v17 += v58;\n                v55 = &v17[-v42];\n              }\n            }\n            goto LABEL_57;\n          }\n          v55 = &v105[v103 - v54];\n          v56 = v99;\n          if ( v99 > v54 )\n          {\nLABEL_56:\n            v56 = v99 - v54;\n            qmemcpy(v17, v55, v54);\n            v17 += v54;\n            v55 = &v17[-v42];\n          }\n        }\n        else\n        {\n          v55 = &v105[v104 - v54];\n          v56 = v99;\n          if ( v99 > v54 )\n            goto LABEL_56;\n        }\nLABEL_57:\n        qmemcpy(v17, v55, v56);\n        v17 += v56;\n        v13 = v102;\nLABEL_22:\n        if ( v97 <= (unsigned int)v17 || v98 <= v13 )\n          goto LABEL_104;\n      }\n    }\n    v92 = v8;\n    v91 = v12;\n    v90 = v14;\n    v89 = v10;\n    v18 = __readeflags();\n    __writeeflags(v18 ^ 0x200944);\n    v19 = __readeflags();\n    if ( v18 == v19 )\n      goto LABEL_15;\n    _EAX = 0;\n    __asm { cpuid }\n    if ( _EBX != 198B929159 )\n      goto LABEL_15;\n    if ( _ECX != 18FCCF8270 )\n      goto LABEL_15;\n    if ( _EDX != 1271BA4169 )\n      goto LABEL_15;\n    _EAX = 1;\n    __asm { cpuid }\n    if ( ((_EAX >> 8) & 0xF) != 6 )\n      goto LABEL_15;\n    if ( (_EDX & 0x8087E4) != 0 )\n      dword_50551C = 2;\n    else\nLABEL_15:\n      dword_50551C = 3;\n    v10 = v89;\n    v14 = v90;\n    v12 = v91;\n    v8 = v92;\n  }\n  _m_empty();\n  a1 = _mm_cvtsi32_si64(v11);\n  v11 = v12;\n  v59 = _mm_cvtsi32_si64(v93);\n  v60 = v59;\n  v61 = _mm_cvtsi32_si64(v94);\n  v62 = v61;\n  a2.m64_u64 = 0i64;\n  v12 = v95;\nLABEL_59:\n  a1 = _m_psrlq(a1, a2);\n  if ( v11 <= 0x20 )\n  {\n    v63 = _mm_cvtsi32_si64(*(_DWORD *)v13);\n    v13 += 4;\n    v64 = _m_psllqi(v63, v11);\n    v11 += 32;\n    a1 = _m_por(a1, v64);\n  }\n  v65 = _mm_cvtsi64_si32(_m_pand(v59, a1));\n  v59 = v60;\n  for ( i = *(_DWORD *)(v12 + 4 * v65); ; i = *(_DWORD *)(v12\n                                                        + 4 * (v66 + (dword_400CE2[i & 0xF] & _mm_cvtsi64_si32(a1)))) )\n  {\n    a2 = _mm_cvtsi32_si64(BYTE1(i));\n    v11 -= BYTE1(i);\n    if ( !(_BYTE)i )\n    {\n      *v17++ = BYTE2(i);\nLABEL_64:\n      if ( v97 <= (unsigned int)v17 || v98 <= v13 )\n        goto LABEL_104;\n      goto LABEL_59;\n    }\n    v66 = HI077D(i);\n    if ( (i & 0x10) != 0 )\n    {\n      v67 = i & 0xF;\n      if ( v67 )\n      {\n        a1 = _m_psrlq(a1, a2);\n        a2 = _mm_cvtsi32_si64(v67);\n        v11 -= v67;\n        v66 += dword_400CE2[v67] & _mm_cvtsi64_si32(a1);\n      }\n      a1 = _m_psrlq(a1, a2);\n      if ( v11 <= 0x20 )\n      {\n        v68 = _mm_cvtsi32_si64(*(_DWORD *)v13);\n        v13 += 4;\n        v69 = _m_psllqi(v68, v11);\n        v11 += 32;\n        a1 = _m_por(a1, v69);\n      }\n      v70 = _mm_cvtsi64_si32(_m_pand(v61, a1));\n      v61 = v62;\n      for ( k = *(_DWORD *)(v96 + 4 * v70);\n            ;\n            k = *(_DWORD *)(v96 + 4 * (v12 + (dword_400CE2[k & 0xF] & _mm_cvtsi64_si32(a1)))) )\n      {\n        v12 = HI077D(k);\n        v11 -= BYTE1(k);\n        a2 = _mm_cvtsi32_si64(BYTE1(k));\n        if ( (k & 0x10) != 0 )\n          break;\n        if ( (k & 0x40) != 0 )\n        {\nLABEL_96:\n          v83 = \"invalid distance code\";\n          v84 = 26;\n          goto LABEL_101;\n        }\n        a1 = _m_psrlq(a1, a2);\n      }\n      v72 = k & 0xF;\n      if ( v72 )\n      {\n        a1 = _m_psrlq(a1, a2);\n        a2 = _mm_cvtsi32_si64(v72);\n        v11 -= v72;\n        v12 += dword_400CE2[v72] & _mm_cvtsi64_si32(a1);\n      }\n      else if ( v12 == 1 && v101 != v17 )\n      {\n        v77 = v17 - 1;\n        v78 = *v77;\n        v77[1] = *v77;\n        v77[2] = v78;\n        v77[3] = v78;\n        v77 += 4;\n        memset(v77, v78, v66 - 3);\n        v17 = &v77[v66 - 3];\n        v12 = v95;\n        goto LABEL_64;\n      }\n      v102 = v13;\n      if ( v17 - v101 >= v12 )\n      {\n        v73 = v66 - 3;\n        *v17 = v17[-v12];\n        v74 = v17[-v12 + 2];\n        v75 = &v17[-v12 + 3];\n        v17[1] = v17[-v12 + 1];\n        v17[2] = v74;\n        v76 = v17 + 3;\n        qmemcpy(v76, v75, v73);\n        v17 = &v76[v73];\n        v13 = v102;\n        v12 = v95;\n        goto LABEL_64;\n      }\n      if ( v104 < v12 )\n      {\nLABEL_100:\n        v13 = v102;\n        v83 = \"invalid distance too far back\";\n        v84 = 26;\n        goto LABEL_101;\n      }\n      v79 = v12 + v101 - v17;\n      if ( v103 )\n      {\n        if ( v79 > v103 )\n        {\n          v80 = &v105[v104 + v103 - v79];\n          v81 = v79 - v103;\n          if ( v66 > v81 )\n          {\n            v66 -= v81;\n            qmemcpy(v17, v80, v81);\n            v17 += v81;\n            v80 = v105;\n            v82 = v103;\n            if ( v66 > v103 )\n            {\n              v66 -= v103;\n              qmemcpy(v17, v105, v103);\n              v17 += v82;\n              v80 = &v17[-v12];\n            }\n          }\n          goto LABEL_95;\n        }\n        v80 = &v105[v103 - v79];\n        if ( v66 > v79 )\n          goto LABEL_94;\n      }\n      else\n      {\n        v80 = &v105[v104 - v79];\n        if ( v66 > v79 )\n        {\nLABEL_94:\n          v66 -= v79;\n          qmemcpy(v17, v80, v79);\n          v17 += v79;\n          v80 = &v17[-v12];\n        }\n      }\nLABEL_95:\n      qmemcpy(v17, v80, v66);\n      v17 += v66;\n      v13 = v102;\n      v12 = v95;\n      goto LABEL_64;\n    }\n    if ( (i & 0x40) != 0 )\n      break;\n    a1 = _m_psrlq(a1, a2);\n  }\nLABEL_97:\n  if ( (i & 0x20) != 0 )\n  {\n    v83 = 0;\n    v84 = 11;\n  }\n  else\n  {\n    v83 = \"invalid literal/length code\";\n    v84 = 26;\n  }\nLABEL_101:\n  if ( v83 )\n    a3[6] = (int)v83;\n  *(_DWORD *)a3[7] = v84;\nLABEL_104:\n  if ( dword_50551C == 2 )\n    v12 = v11;\n  result = a3;\n  v86 = a3[7];\n  v87 = (int)&v13[-(v12 >> 3)];\n  v88 = v12 - 8 * (v12 >> 3);\n  a3[3] = (int)v17;\n  *(_DWORD *)(v86 + 60) = v88;\n  if ( v98 == v100 )\n  {\n    v87 = *a3 + v87 - (_DWORD)v100;\n    v98 = (char *)(a3[1] - 11 + *a3);\n  }\n  *a3 = v87;\n  if ( dword_50551C == 2 )\n  {\n    v11 = _mm_cvtsi64_si32(_m_psrlq(a1, a2));\n    _m_empty();\n  }\n  *(_DWORD *)(v86 + 56) = ((1 << v88) - 1) & v11;\n  a3[1] = (int)&v98[-v87 + 11];\n  a3[4] = v97 - (_DWORD)v17 + 257;\n  __writeeflags(v107);\n  return result;\n}\n// 400CE2: using guessed type int dword_400CE2[];\n// 50551C: using guessed type int dword_50551C;\n\n"
    }
]