[
    {
        "Function": "sub_40BCF2",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "15.79%",
        "Function Body": "\n__int16 __usercall sub_40BCF2@<ax>(char *a1@<eax>, int a2@<edx>, int a3@<ecx>)\n{\n  int v4; // eax\n  int v5; // ecx\n\n  BYTE1(a3) = a3;\n  v4 = a3 << 16;\n  LO8F8F(v4) = a3;\n  v5 = a2 >> 2;\n  if ( a2 >> 2 >= 0 )\n  {\n    memset32(a1, v4, v5);\n    memset(&a1[4 * v5], v4, a2 & 3);\n  }\n  return v4;\n}\n\n"
    },
    {
        "Function": "sub_40EC2C",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "14.29%",
        "Function Body": "\nunsigned int __usercall sub_40EC2C@<eax>(int a1@<eax>)\n{\n  return (((unsigned int)*(unsigned __int16 *)(a1 + 14) * *(_DWORD *)(a1 + 4) + 31) >> 3) & 0xFFC367FC;\n}\n\n"
    },
    {
        "Function": "Delphi_Random_40392C",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "11.11%",
        "Function Body": "\nint __usercall Delphi_Random_40392C@<eax>(unsigned int a1@<eax>)\n{\n  dword_402F8F = 13BF4A813 * dword_402F8F + 1;\n  return ((unsigned int)dword_402F8F * (unsigned __int64)a1) >> 32;\n}\n// 402F8F: using guessed type int dword_402F8F;\n\n"
    },
    {
        "Function": "sub_409350",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "8.33%",
        "Function Body": "\nint __usercall sub_409350@<eax>(int result@<eax>)\n{\n  if ( result )\n  {\n    if ( !((*(_DWORD *)(result - 8) + 1 < 0) ^ __OFADD__(1, *(_DWORD *)(result - 8)) | (*(_DWORD *)(result - 8) == -1)) )\n      _InterlockedIncrement((volatile signed __int32 *)(result - 8));\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "if",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "7.69%",
        "Function Body": "\n__int64 __usercall sub_40632B@<edx:eax>(int a1@<eax>, int a2@<edx>, int a3)\n{\n  int v5; // eax\n\n  if ( *(_BYTE *)(a3 - 14) >= 2u || *(_BYTE *)(a3 - 13) == 1 )\n    v5 = sub_40DB90((*(unsigned __int8 *)(a3 - 13) << 8) + *(unsigned __int8 *)(a3 - 14));\n  else\n    v5 = *(unsigned __int16 *)(a3 - 10);\n  return a2 * (__int64)(4 * ((a1 * v5 + 31) / 32));\n}\n\n"
    },
    {
        "Function": "sub_405F44",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "7.14%",
        "Function Body": "\nvolatile __int32 *__usercall sub_405F44@<eax>(volatile __int32 *result@<eax>, __int32 a2@<edx>)\n{\n  __int32 v2; // edx\n\n  if ( a2 && !((*(_DWORD *)(a2 - 8) + 1 < 0) ^ __OFADD__(1, *(_DWORD *)(a2 - 8)) | (*(_DWORD *)(a2 - 8) == -1)) )\n    _InterlockedIncrement((volatile signed __int32 *)(a2 - 8));\n  v2 = _InterlockedExchange(result, a2);\n  if ( v2 && *(int *)(v2 - 8) >= 1 && !_InterlockedDecrement((volatile signed __int32 *)(v2 - 8)) )\n    return (volatile __int32 *)sub_40B363(v2 - 8);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4077A7",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "7.14%",
        "Function Body": "\nint __cdecl sub_4077A7(int a1)\n{\n  int result; // eax\n  unsigned __int8 v2; // dl\n\n  result = 0;\n  v2 = *(_BYTE *)(a1 - 14);\n  if ( v2 >= 2u || *(_BYTE *)(a1 - 13) == 1 )\n    return 4 * ((*(unsigned __int8 *)(a1 - 13) << 8) + v2);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40DB90",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "5.26%",
        "Function Body": "\nint __usercall sub_40DB90@<eax>(int a1@<eax>)\n{\n  _BYTE *v1; // edx\n  int v2; // ecx\n\n  v1 = &unk_40864F;\n  do\n  {\n    v2 = (unsigned __int8)*v1;\n    if ( !*v1 )\n      break;\n    ++v1;\n  }\n  while ( 1 << v2 < a1 );\n  return v2;\n}\n\n"
    },
    {
        "Function": "sub_40ED11",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "5.00%",
        "Function Body": "\nOLFCDCR **__usercall sub_40ED11@<eax>(OLFCDCR **a1@<eax>, const OLFCDCR *a2@<edx>)\n{\n  unsigned int v2; // ecx\n  OLFCDCR **result; // eax\n  void *v4; // ecx\n\n  if ( !a2 )\n    return sub_4093F0(a1);\n  v2 = *((_DWORD *)a2 - 1) >> 1;\n  if ( !v2 )\n    return sub_4093F0(a1);\n  result = (OLFCDCR **)SysReAllocStringLen(a1, a2, v2);\n  if ( !result )\n    sub_402600(1, v4);\n  return result;\n}\n// 401D00: variable 'v4' is possibly undefined\n\n"
    },
    {
        "Function": "sub_401E0D",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "4.71%",
        "Function Body": "\n_DWORD *__usercall sub_401E0D@<eax>(int a1@<eax>)\n{\n  int v2; // ebx\n  int *v3; // edx\n  int *v4; // esi\n  int *v5; // eax\n  int *v6; // eax\n  struct _EX18C3ION_REB170RABDAD_RE33FE *ExceptionList; // [esp-Ch] [ebp-20h] BYREF\n  void *v9; // [esp-8h] [ebp-1Ch]\n  int *v10; // [esp-4h] [ebp-18h]\n  int v11; // [esp+Ch] [ebp-8h]\n  _DWORD *v12; // [esp+10h] [ebp-4h]\n  int savedregs; // [esp+14h] [ebp+0h] BYREF\n\n  if ( !byte_40B371 && !sub_409659() || a1 > 2116873640 )\n    return 0;\n  v10 = &savedregs;\n  v9 = &loc_409FD4;\n  ExceptionList = NtCurrentTeb()->NtTib.ExceptionList;\n  __writefsdword(0, (unsigned int)&ExceptionList);\n  if ( byte_40D89C )\n    EnterCriticalSection(&CriticalSection);\n  v2 = (a1 + 7) & 0xFFC367FC;\n  if ( v2 < 12 )\n    v2 = 12;\n  if ( v2 <= 4096 && (v3 = (int *)*((_DWORD *)hMem + (v2 >> 2) - 3)) != 0 )\n  {\n    v4 = (int *)*((_DWORD *)hMem + (v2 >> 2) - 3);\n    *(int *)((char *)v3 + v2) &= ~1u;\n    v5 = (int *)v3[1];\n    if ( v3 == v5 )\n    {\n      *((_DWORD *)hMem + (v2 >> 2) - 3) = 0;\n    }\n    else\n    {\n      *((_DWORD *)hMem + (v2 >> 2) - 3) = v5;\n      v11 = *v3;\n      *(_DWORD *)(v11 + 4) = v5;\n      *v5 = v11;\n    }\n    *v4 = v3[2] | 2;\n    v12 = v4 + 1;\n    ++dword_401CFA;\n    dword_405392 += v2 - 4;\n    sub_4078A9((unsigned int)ExceptionList, (int)v9, (int)v10);\n  }\n  else if ( v2 > dword_40F6C1 )\n  {\n    v12 = sub_40ECAA(v2);\n    __writefsdword(0, (unsigned int)ExceptionList);\n    v10 = (int *)&loc_40DE9B;\n    if ( byte_40D89C )\n      LeaveCriticalSection(&CriticalSection);\n  }\n  else\n  {\n    dword_40F6C1 -= v2;\n    if ( dword_40F6C1 < 12 )\n    {\n      v2 += dword_40F6C1;\n      dword_40F6C1 = 0;\n    }\n    v6 = (int *)dword_408736;\n    dword_408736 += v2;\n    *v6 = v2 | 2;\n    v12 = v6 + 1;\n    ++dword_401CFA;\n    dword_405392 += v2 - 4;\n    sub_4078A9((unsigned int)ExceptionList, (int)v9, (int)v10);\n  }\n  return v12;\n}\n// 40E07B: conditional instruction was optimized away because ebx.4 is in (C..1000)\n// 4066B5: conditional instruction was optimized away because ebx.4 is in (C..1000)\n// 4001A6: conditional instruction was optimized away because ebx.4 is in (C..1000)\n// 40D89C: using guessed type char byte_40D89C;\n// 401CFA: using guessed type int dword_401CFA;\n// 405392: using guessed type int dword_405392;\n// 40B371: using guessed type char byte_40B371;\n// 40F6C1: using guessed type int dword_40F6C1;\n// 408736: using guessed type int dword_408736;\n\n"
    },
    {
        "Function": "sub_40BA33",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "4.65%",
        "Function Body": "\nint __usercall sub_40BA33@<eax>(int result@<eax>, int a2@<edx>, unsigned int a3@<ecx>)\n{\n  unsigned int v3; // esi\n  unsigned int v4; // esi\n\n  v3 = a3 >> 2;\n  if ( a3 >> 2 )\n  {\n    while ( *(_DWORD *)result == *(_DWORD *)a2 )\n    {\n      v4 = v3 - 1;\n      if ( !v4 )\n      {\n        result += 4;\n        a2 += 4;\n        goto LABEL_8;\n      }\n      if ( *(_DWORD *)(result + 4) != *(_DWORD *)(a2 + 4) )\n        return result;\n      result += 8;\n      a2 += 8;\n      v3 = v4 - 1;\n      if ( !v3 )\n        goto LABEL_8;\n    }\n  }\n  else\n  {\nLABEL_8:\n    if ( (a3 & 3) != 0\n      && *(_BYTE *)result == *(_BYTE *)a2\n      && ((a3 & 3) == 1\n       || *(_BYTE *)(result + 1) == *(_BYTE *)(a2 + 1)\n       && ((a3 & 3) == 2 || *(_BYTE *)(result + 2) == *(_BYTE *)(a2 + 2))) )\n    {\n      return 0;\n    }\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_408788",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "4.26%",
        "Function Body": "\nint __usercall sub_408788@<eax>(char *a1@<eax>, char *a2@<edx>, int a3@<ecx>)\n{\n  int result; // eax\n  int v5; // ecx\n  char *v6; // esi\n  char *v7; // edi\n  int v8; // ecx\n  int v9; // ecx\n  _BYTE *v10; // esi\n  _BYTE *v11; // edi\n\n  result = a3;\n  if ( a2 > a1 )\n  {\n    v6 = &a1[a3 - 4];\n    v7 = &a2[a3 - 4];\n    v8 = a3 >> 2;\n    if ( v8 >= 0 )\n    {\n      while ( v8 )\n      {\n        *(_DWORD *)v7 = *(_DWORD *)v6;\n        v6 -= 4;\n        v7 -= 4;\n        --v8;\n      }\n      v9 = result & 3;\n      v10 = v6 + 3;\n      v11 = v7 + 3;\n      while ( v9 )\n      {\n        *v11-- = *v10--;\n        --v9;\n      }\n    }\n  }\n  else if ( a2 != a1 )\n  {\n    v5 = a3 >> 2;\n    if ( v5 >= 0 )\n      qmemcpy(a2, a1, 4 * v5 + (result & 3));\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4002DF",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "3.33%",
        "Function Body": "\nint __usercall sub_4002DF@<eax>(int a1@<eax>)\n{\n  int v1; // edx\n  int v2; // ebx\n  _DWORD *v3; // eax\n  int v4; // esi\n  _DWORD *v5; // eax\n\n  v1 = *(_DWORD *)(a1 - 4);\n  if ( (v1 & 0x804A4B02) != -2116873646 )\n    dword_40A256 = 4;\n  v2 = v1 & 0x7FFC367C;\n  v3 = (_DWORD *)(a1 - (v1 & 0x7FFC367C));\n  if ( ((*v3 ^ v1) & 0xFFC367FE) != 0 )\n    dword_40A256 = 5;\n  if ( (*(_BYTE *)v3 & 1) != 0 )\n  {\n    v4 = *(v3 - 1);\n    v5 = (_DWORD *)((char *)v3 - v4);\n    if ( v4 != v5[2] )\n      dword_40A256 = 6;\n    sub_40576C(v5);\n    v2 += v4;\n  }\n  return v2;\n}\n// 40A256: using guessed type int dword_40A256;\n\n"
    },
    {
        "Function": "sub_4079A4",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "3.33%",
        "Function Body": "\nunsigned int __fastcall sub_4079A4(int a1)\n{\n  int v1; // ebx\n  unsigned int result; // eax\n\n  LO2844(a1) = 16;\n  v1 = dword_40C1AB;\n  do\n  {\n    Text[(unsigned __int8)a1] = v1 % 10 + 48;\n    v1 /= 10;\n    --a1;\n  }\n  while ( v1 );\n  LO2844(a1) = 28;\n  result = dword_40E193;\n  do\n  {\n    Text[(unsigned __int8)a1] = byte_405575[result & 0xF];\n    result >>= 4;\n    --a1;\n  }\n  while ( result );\n  return result;\n}\n// 40C1AB: using guessed type int dword_40C1AB;\n// 40E193: using guessed type int dword_40E193;\n\n"
    },
    {
        "Function": "sub_404445",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "2.86%",
        "Function Body": "\nvolatile __int32 *__usercall sub_404445@<eax>(volatile __int32 *result@<eax>, __int32 a2@<edx>)\n{\n  char *v2; // edx\n  char *v3; // eax\n  __int32 v4; // edx\n  char *v5; // [esp-8h] [ebp-8h]\n  char *v6; // [esp-8h] [ebp-8h]\n  volatile __int32 *v7; // [esp-4h] [ebp-4h]\n\n  if ( a2 )\n  {\n    if ( (*(_DWORD *)(a2 - 8) + 1 < 0) ^ __OFADD__(1, *(_DWORD *)(a2 - 8)) | (*(_DWORD *)(a2 - 8) == -1) )\n    {\n      v7 = result;\n      v5 = (char *)a2;\n      v2 = (char *)sub_40EDFA(*(_DWORD *)(a2 - 4));\n      v3 = v5;\n      v6 = v2;\n      sub_408788(v3, v2, *((_DWORD *)v3 - 1));\n      a2 = (__int32)v6;\n      result = v7;\n    }\n    else\n    {\n      _InterlockedIncrement((volatile signed __int32 *)(a2 - 8));\n    }\n  }\n  v4 = _InterlockedExchange(result, a2);\n  if ( v4 && *(int *)(v4 - 8) >= 1 && !_InterlockedDecrement((volatile signed __int32 *)(v4 - 8)) )\n    return (volatile __int32 *)sub_40B363(v4 - 8);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4009AE",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "1.75%",
        "Function Body": "\nchar __usercall sub_4009AE@<al>(int a1@<eax>, unsigned int a2@<edx>, int a3@<ecx>)\n{\n  void *v3; // edi\n  int v4; // ebx\n  int v5; // esi\n  HAF140 v6; // eax\n  void *v7; // eax\n  unsigned int v8; // edx\n  int v9; // edi\n  int v10; // edi\n  void *v11; // edi\n  int v12; // ebx\n  int v13; // esi\n  HAF140 v14; // eax\n  HAF140 v15; // eax\n  int v16; // eax\n  int v17; // edi\n  HAF140 v18; // eax\n  int v19; // edi\n  int v21; // [esp-10h] [ebp-A8h]\n  struct _EX18C3ION_REB170RABDAD_RE33FE *ExceptionList; // [esp-Ch] [ebp-A4h] BYREF\n  void *v23; // [esp-8h] [ebp-A0h]\n  int *v24; // [esp-4h] [ebp-9Ch]\n  char pv[4]; // [esp+Ch] [ebp-8Ch] BYREF\n  int v26; // [esp+10h] [ebp-88h]\n  int cy; // [esp+14h] [ebp-84h]\n  unsigned __int16 v28; // [esp+1Ch] [ebp-7Ch]\n  unsigned __int16 v29; // [esp+1Eh] [ebp-7Ah]\n  int v30[2]; // [esp+24h] [ebp-74h] BYREF\n  int v31; // [esp+2Ch] [ebp-6Ch]\n  __int16 v32; // [esp+30h] [ebp-68h]\n  unsigned __int16 v33; // [esp+32h] [ebp-66h]\n  int v34; // [esp+38h] [ebp-60h]\n  void **v35; // [esp+4Ch] [ebp-4Ch]\n  void **v36; // [esp+50h] [ebp-48h]\n  unsigned int v37; // [esp+54h] [ebp-44h]\n  char *v38; // [esp+58h] [ebp-40h]\n  __int16 v39; // [esp+5Eh] [ebp-3Ah]\n  __int16 v40; // [esp+60h] [ebp-38h]\n  unsigned __int16 v41; // [esp+62h] [ebp-36h]\n  char *v42; // [esp+64h] [ebp-34h]\n  _DWORD *v43; // [esp+68h] [ebp-30h]\n  HAF140 h; // [esp+6Ch] [ebp-2Ch]\n  int v45; // [esp+70h] [ebp-28h]\n  int v46; // [esp+74h] [ebp-24h]\n  char v47; // [esp+7Bh] [ebp-1Dh]\n  int v48; // [esp+7Ch] [ebp-1Ch]\n  unsigned int v49; // [esp+80h] [ebp-18h]\n  void **v50; // [esp+84h] [ebp-14h]\n  char v51[2]; // [esp+88h] [ebp-10h] BYREF\n  unsigned __int16 v52; // [esp+8Ah] [ebp-Eh]\n  unsigned __int16 v53; // [esp+8Eh] [ebp-Ah]\n  int v54; // [esp+90h] [ebp-8h]\n  int v55; // [esp+94h] [ebp-4h]\n  int savedregs; // [esp+98h] [ebp+0h] BYREF\n\n  v48 = a3;\n  v49 = a2;\n  v50 = (void **)a1;\n  v47 = 0;\n  v39 = 0;\n  v40 = 1;\n  v41 = (int)(a2 + 1) / 2;\n  if ( sub_4038DC(a3) == 6 )\n  {\n    v45 = 16 * v41 + 6;\n    v38 = sub_408532();\n    v43 = sub_405D28(0, 0);\n    v42 = sub_405D28(0, 0);\n    v24 = &savedregs;\n    v23 = &loc_401E06;\n    ExceptionList = NtCurrentTeb()->NtTib.ExceptionList;\n    __writefsdword(0, (unsigned int)&ExceptionList);\n    v37 = (v49 >> 1) + 1;\n    v36 = v50;\n    do\n    {\n      v3 = *v36;\n      h = v36[1];\n      if ( !v3 && !h )\n        break;\n      GetObjectA(h, 24, pv);\n      v4 = v26;\n      v5 = cy;\n      if ( v3 )\n        GetObjectA(v3, 24, pv);\n      sub_40BCF2(v51, 16, 0);\n      v51[0] = v4;\n      v51[1] = v5;\n      if ( v3 )\n      {\n        v6 = CopyImage(v3, 0, v4, v5, 0x2000u);\n        sub_405326((int)v43, v6);\n        sub_40BCF2((char *)v30, 40, 0);\n        v30[0] = 40;\n        v7 = (void *)sub_40C352((int)v43);\n        GetObjectA(v7, 24, pv);\n        if ( v28 == 1 && v29 >= 0xFu )\n        {\n          v52 = 0;\n          v53 = v29;\n        }\n        else\n        {\n          v8 = v28 * (1 << v29);\n          if ( v8 >= 0x10 )\n          {\n            if ( v8 >= 0x100 )\n            {\n              sub_4034EE((int)v43);\n              v52 = 256;\n            }\n            else\n            {\n              sub_4034EE((int)v43);\n              LO2844(v52) = 16;\n            }\n          }\n          else\n          {\n            sub_4034EE((int)v43);\n            LO2844(v52) = 2;\n          }\n        }\n      }\n      else\n      {\n        LO2844(v52) = 2;\n      }\n      sub_4042C7(v38, (HI8A66(v52) << 8) + (unsigned __int8)v52);\n      v9 = sub_40632B(v4, v5, (int)&savedregs);\n      v10 = sub_4077A7((int)&savedregs) + 40 + v9;\n      v54 = sub_407ED0(v4, v5) + v10;\n      v55 = v45;\n      if ( sub_4038DC(v48) != 16 )\n      {\nLABEL_48:\n        sub_4078A9((unsigned int)ExceptionList, (int)v23, (int)v24);\n        return v47;\n      }\n      v45 += v54;\n      v36 += 2;\n      --v37;\n    }\n    while ( v37 );\n    v37 = (v49 >> 1) + 1;\n    v46 = 0;\n    v35 = v50;\n    while ( 1 )\n    {\n      v11 = *v35;\n      h = v35[1];\n      if ( !v11 && !h )\n      {\nLABEL_50:\n        __writefsdword(0, (unsigned int)ExceptionList);\n        v24 = (int *)&loc_402890;\n        sub_4007B5(v38);\n        sub_4007B5(v43);\n        sub_4007B5(v42);\n        return 1;\n      }\n      GetObjectA(h, 24, pv);\n      v12 = v26;\n      v13 = cy;\n      sub_40BCF2((char *)v30, 40, 0);\n      v30[0] = 40;\n      v30[1] = v12;\n      v31 = v13;\n      if ( v11 )\n        v31 = 2 * v12;\n      v32 = 1;\n      v52 = sub_401B8F((int)v38, v46);\n      if ( !v53 )\n        v53 = sub_40DB90(v52);\n      v33 = v53;\n      v21 = sub_40632B(v12, v13, (int)&savedregs) + 40;\n      v34 = sub_407ED0(v12, v13) + v21;\n      if ( sub_4038DC(v48) != 40 )\n        goto LABEL_48;\n      if ( !v11 )\n      {\n        v15 = CopyImage(h, 0, v12, v13, 0);\n        sub_405326((int)v43, v15);\n        sub_4034EE((int)v43);\n        goto LABEL_43;\n      }\n      v14 = CopyImage(v11, 0, v12, v13, 0);\n      sub_405326((int)v43, v14);\n      if ( v33 > 0x10u )\n      {\n        if ( v33 == 24 || v33 == 32 )\nLABEL_38:\n          sub_4034EE((int)v43);\n      }\n      else if ( v33 == 16 || v33 == 1 || v33 == 4 || v33 == 8 )\n      {\n        goto LABEL_38;\n      }\nLABEL_43:\n      if ( *(_DWORD *)((char *)v43 + 65) )\n      {\n        v16 = sub_4038DC(v48);\n        if ( v16 != 4 * v52 )\n          goto LABEL_48;\n        sub_40632B(v12, v13, (int)&savedregs);\n        v17 = sub_4038DC(v48);\n        if ( v17 != (unsigned int)sub_40632B(v12, v13, (int)&savedregs) )\n          goto LABEL_48;\n      }\n      v18 = CopyImage(h, 0, v12, v13, 0);\n      sub_405326((int)v42, v18);\n      sub_4034EE((int)v42);\n      sub_407ED0(v12, v13);\n      v19 = sub_4038DC(v48);\n      if ( v19 != (unsigned int)sub_407ED0(v12, v13) )\n        goto LABEL_48;\n      ++v46;\n      v35 += 2;\n      if ( !--v37 )\n        goto LABEL_50;\n    }\n  }\n  return v47;\n}\n// 4009AE: using guessed type char pv[4];\n\n"
    }
]