[
    {
        "Function": "sub_418861",
        "Total XOR and shift operations": 12,
        "XOR operations": 0,
        "Shift operations": 12,
        "Operation percentage": "29.27%",
        "Function Body": "\nunsigned int __cdecl sub_418861(unsigned int a1)\n{\n  unsigned int v1; // esi\n  int v2; // edi\n  int v3; // ebx\n  unsigned int v4; // eax\n\n  v1 = (a1 & 0xC0D68B | (a1 >> 2) & 0xFC000) >> 14;\n  v2 = 0;\n  if ( (a1 & 0x3000) != 0 )\n  {\n    if ( (a1 & 0x3000) == 4096 )\n      v3 = 512;\n    else\n      v3 = 0;\n  }\n  else\n  {\n    v3 = 768;\n  }\n  v4 = ((a1 & 0xC0D68B | (a1 >> 2) & 0xFC000) >> 14) & 0x300;\n  if ( (v1 & 0x300) != 0 )\n  {\n    switch ( v4 )\n    {\n      case 0x100u:\n        v2 = 1024;\n        break;\n      case 0x200u:\n        v2 = 2048;\n        break;\n      case 0x300u:\n        v2 = 3072;\n        break;\n    }\n  }\n  return v2 | v3 | (a1 >> 2) & 0x1000 | (32 * (v1 & 1)) | ((a1 & 0xC0D68B | (a1 >> 2) & 0xFC000) >> 18) & 1 | (2 * ((v1 >> 5) & 1)) | (8 * ((v1 >> 2) & 1)) | (16 * ((v1 >> 1) & 1)) | (4 * (((a1 & 0xC0D68B | (a1 >> 2) & 0xFC000) >> 17) & 1));\n}\n\n"
    },
    {
        "Function": "function",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "15.00%",
        "Function Body": "\nunsigned __int64 __usercall sub_4133E2@<edx:eax>(unsigned __int64 a1@<edx:eax>)\n{\n  int v1; // ecx\n  bool v2; // cc\n  char v3; // cl\n\n  v1 = HIE4BFD(a1) >> 20;\n  HIE4BFD(a1) = HIE4BFD(a1) & 0xFFFFF | 0x10E119;\n  v2 = v1 < 1075;\n  v3 = v1 - 51;\n  if ( v2 )\n    return a1 >> (-v3 & 0x1F);\n  else\n    return a1 << (v3 & 0x1F);\n}\n\n// nfuncs=554 queued=97 decompiled=97 lumina nreq=0 worse=0 better=0\n// ALL OK, 97 function(s) have been successfully decompiled\n"
    },
    {
        "Function": "sub_408283",
        "Total XOR and shift operations": 30,
        "XOR operations": 26,
        "Shift operations": 4,
        "Operation percentage": "14.71%",
        "Function Body": "\nint __fastcall sub_408283(unsigned __int8 *a1, int a2)\n{\n  int v2; // ebx\n  unsigned __int8 *v3; // edi\n  int v4; // esi\n  int v5; // edx\n  unsigned __int8 *v6; // ebx\n  unsigned __int8 *v7; // ecx\n  int v8; // edx\n  int v9; // eax\n  int v10; // esi\n  unsigned __int8 v11; // cl\n  unsigned __int8 v12; // al\n  unsigned __int8 v13; // cl\n  unsigned __int8 v14; // al\n  unsigned __int8 v15; // cl\n  unsigned __int8 v16; // al\n  unsigned __int8 v17; // cl\n  _BYTE *v18; // edi\n  char v19; // bh\n  char v20; // ch\n  char v21; // dl\n  char v22; // dh\n  int v23; // ebx\n  char *v24; // esi\n  unsigned __int8 *v25; // eax\n  int v26; // edx\n  char v27; // cl\n  unsigned __int8 *v28; // esi\n  int v29; // ebx\n  unsigned __int8 *v30; // ecx\n  int v31; // edx\n  int v32; // eax\n  unsigned __int8 v33; // cl\n  int v34; // esi\n  unsigned __int8 v35; // al\n  unsigned __int8 v36; // cl\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // cl\n  unsigned __int8 v39; // al\n  unsigned __int8 v40; // cl\n  int result; // eax\n  _BYTE *v42; // ecx\n  int v43; // edx\n  unsigned __int8 *v44; // [esp+Ch] [ebp-18h]\n  int v46; // [esp+14h] [ebp-10h]\n  char *v47; // [esp+18h] [ebp-Ch]\n  int v48; // [esp+1Ch] [ebp-8h]\n  char v49; // [esp+23h] [ebp-1h]\n\n  v2 = 4;\n  v3 = a1;\n  v44 = a1;\n  v4 = a2 - (_DWORD)a1;\n  do\n  {\n    v5 = 4;\n    do\n    {\n      *a1 ^= a1[v4];\n      ++a1;\n      --v5;\n    }\n    while ( v5 );\n    --v2;\n  }\n  while ( v2 );\n  v46 = 9;\n  v47 = (char *)(a2 + 16);\n  do\n  {\n    v6 = v3;\n    v48 = 4;\n    do\n    {\n      v7 = v6;\n      v8 = 4;\n      do\n      {\n        v9 = *v7;\n        v7 += 4;\n        *(v7 - 4) = RijnDael_AES_LONG_41C1A7[v9];\n        --v8;\n      }\n      while ( v8 );\n      ++v6;\n      --v48;\n    }\n    while ( v48 );\n    v10 = 4;\n    v11 = v3[1];\n    v3[1] = v3[5];\n    v3[5] = v3[9];\n    v3[9] = v3[13];\n    v12 = v3[10];\n    v3[13] = v11;\n    v13 = v3[2];\n    v3[2] = v12;\n    v14 = v3[14];\n    v3[10] = v13;\n    v15 = v3[6];\n    v3[6] = v14;\n    v16 = v3[15];\n    v3[14] = v15;\n    v17 = v3[3];\n    v3[3] = v16;\n    v3[15] = v3[11];\n    v3[11] = v3[7];\n    v3[7] = v17;\n    v18 = v3 + 2;\n    do\n    {\n      v19 = v18[1];\n      v18 += 4;\n      v20 = *(v18 - 4);\n      v21 = *(v18 - 5);\n      v49 = *(v18 - 6);\n      v22 = v21 ^ v49 ^ v20 ^ v19;\n      *(v18 - 6) = v22 ^ v49 ^ (2 * (v21 ^ v49)) ^ (27 * ((unsigned __int8)(v21 ^ v49) >> 7));\n      *(v18 - 5) = v22 ^ v21 ^ (2 * (v20 ^ v21)) ^ (27 * ((unsigned __int8)(v20 ^ v21) >> 7));\n      *(v18 - 4) = v22 ^ v20 ^ (2 * (v20 ^ v19)) ^ (27 * ((unsigned __int8)(v20 ^ v19) >> 7));\n      *(v18 - 3) = v22 ^ v19 ^ (2 * (v19 ^ v49)) ^ (27 * ((unsigned __int8)(v19 ^ v49) >> 7));\n      --v10;\n    }\n    while ( v10 );\n    v3 = v44;\n    v23 = 4;\n    v24 = v47;\n    v25 = v44;\n    do\n    {\n      v26 = 4;\n      do\n      {\n        v27 = *v24++;\n        *v25++ ^= v27;\n        --v26;\n      }\n      while ( v26 );\n      v47 = v24;\n      --v23;\n    }\n    while ( v23 );\n    --v46;\n  }\n  while ( v46 );\n  v28 = v44;\n  v29 = 4;\n  do\n  {\n    v30 = v28;\n    v31 = 4;\n    do\n    {\n      v32 = *v30;\n      v30 += 4;\n      *(v30 - 4) = RijnDael_AES_LONG_41C1A7[v32];\n      --v31;\n    }\n    while ( v31 );\n    ++v28;\n    --v29;\n  }\n  while ( v29 );\n  v33 = v44[1];\n  v34 = 4;\n  v44[1] = v44[5];\n  v44[5] = v44[9];\n  v44[9] = v44[13];\n  v35 = v44[10];\n  v44[13] = v33;\n  v36 = v44[2];\n  v44[2] = v35;\n  v37 = v44[14];\n  v44[10] = v36;\n  v38 = v44[6];\n  v44[6] = v37;\n  v39 = v44[15];\n  v44[14] = v38;\n  v40 = v44[3];\n  v44[3] = v39;\n  v44[15] = v44[11];\n  result = v44[7];\n  v44[7] = v40;\n  v44[11] = result;\n  v42 = (_BYTE *)(a2 + 160);\n  do\n  {\n    v43 = 4;\n    do\n    {\n      LO17EE(result) = *v42++;\n      *v3++ ^= result;\n      --v43;\n    }\n    while ( v43 );\n    --v34;\n  }\n  while ( v34 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40978A",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "7.41%",
        "Function Body": "\nint __fastcall sub_40978A(int a1, unsigned int a2)\n{\n  unsigned int v3; // edi\n  bool v4; // zf\n  unsigned int v5; // edx\n  int v6; // esi\n  int v7; // esi\n\n  if ( !a2 )\n    return 1;\n  v3 = a2 >> 1;\n  v4 = (a2 & 1) == 0;\n  v5 = a2 >> 1;\n  if ( v4 )\n  {\n    v6 = sub_40978A(10, v5);\n    return v6 * sub_40978A(10, v3);\n  }\n  else\n  {\n    v7 = sub_40978A(10, v5);\n    return 10 * v7 * sub_40978A(10, v3);\n  }\n}\n\n"
    },
    {
        "Function": "sub_406E27",
        "Total XOR and shift operations": 15,
        "XOR operations": 3,
        "Shift operations": 12,
        "Operation percentage": "6.33%",
        "Function Body": "\nint __cdecl sub_406E27(\n        double *a1,\n        char *Str,\n        unsigned int a3,\n        char *a4,\n        unsigned int a5,\n        signed int Size,\n        unsigned __int8 a7,\n        unsigned int a8,\n        struct __crt_locale_pointers *a9)\n{\n  int v9; // edi\n  char *v10; // esi\n  int v11; // edi\n  __int64 v12; // rcx\n  char *v13; // eax\n  _BYTE *v14; // edx\n  char *v15; // esi\n  char v16; // al\n  unsigned int v17; // edx\n  int v18; // ecx\n  int v19; // eax\n  unsigned __int64 v20; // rax\n  unsigned int v21; // eax\n  unsigned int v22; // ecx\n  unsigned __int64 v23; // rax\n  char *i; // eax\n  char v25; // cl\n  char v26; // cl\n  int v27; // esi\n  char *v28; // edx\n  char *v29; // edi\n  signed __int64 v31; // [esp-1Ch] [ebp-58h]\n  signed __int64 v32; // [esp-1Ch] [ebp-58h]\n  signed __int64 v33; // [esp-1Ch] [ebp-58h]\n  int v34[3]; // [esp+4h] [ebp-38h] BYREF\n  char v35; // [esp+10h] [ebp-2Ch]\n  char *v36; // [esp+18h] [ebp-24h]\n  int v37; // [esp+20h] [ebp-1Ch]\n  int v38; // [esp+28h] [ebp-14h]\n  unsigned int v39; // [esp+2Ch] [ebp-10h]\n  unsigned int v40; // [esp+30h] [ebp-Ch]\n  int v41; // [esp+34h] [ebp-8h]\n  char v42; // [esp+3Bh] [ebp-1h]\n\n  v9 = Size;\n  if ( Size < 0 )\n    v9 = 0;\n  v10 = Str;\n  *Str = 0;\n  _LocaleUpdate::_LocaleUpdate((_LocaleUpdate *)v34, a9);\n  if ( a3 > v9 + 11 )\n  {\n    HIE4BFD(v12) = a1;\n    LOA44BD(v12) = *((_DWORD *)a1 + 1);\n    if ( (((unsigned int)v12 >> 20) & 0x7FF) == 2047 )\n    {\n      v11 = fp_format_e(a1, Str, a3, a4, a5, v9, 0, a8, 0);\n      if ( v11 )\n      {\n        *Str = 0;\n      }\n      else\n      {\n        v13 = strrchr(Str, 101);\n        if ( v13 )\n        {\n          *v13 = 32 * (a7 ^ 1) + 80;\n          v13[3] = 0;\n        }\n        v11 = 0;\n      }\n    }\n    else\n    {\n      if ( (int)v12 < 0 )\n      {\n        *Str = 45;\n        v10 = Str + 1;\n        LOA44BD(v12) = *((_DWORD *)a1 + 1);\n      }\n      v14 = v10 + 1;\n      v39 = 1023;\n      v42 = a7 ^ 1;\n      v36 = v10 + 1;\n      v37 = 32 * (a7 ^ 1) + 7;\n      if ( (v12 & 0x7FBF7B00) != 0 )\n      {\n        *v10 = 49;\n      }\n      else\n      {\n        *v10 = 48;\n        if ( *((_DWORD *)a1 + 1) & 0xFFFFF | *(_DWORD *)a1 )\n          v39 = 1022;\n        else\n          v39 = 0;\n      }\n      v15 = v10 + 2;\n      v40 = (unsigned int)(v14 + 1);\n      if ( v9 )\n        v16 = ***(_BYTE ***)(v34[1] + 136);\n      else\n        v16 = 0;\n      *v14 = v16;\n      v38 = *((_DWORD *)a1 + 1) & 0xFFFFF;\n      if ( v38 || *(_DWORD *)a1 )\n      {\n        v17 = 0;\n        v18 = 98F094;\n        LO98A3(v19) = 48;\n        v41 = 48;\n        v40 = 0;\n        v38 = 98F094;\n        do\n        {\n          if ( v9 <= 0 )\n            break;\n          LOA44BD(v20) = v17 & *(_DWORD *)a1;\n          HIE4BFD(v20) = v18 & *((_DWORD *)a1 + 1) & 0xFFFFF;\n          v21 = (unsigned __int16)((v20 >> v41) + 48);\n          if ( v21 > 0x39 )\n            LO17EE(v21) = v37 + v21;\n          v22 = v38;\n          v17 = __PA1740__(v38, v40) >> 4;\n          *v15++ = v21;\n          v18 = v22 >> 4;\n          v19 = v41 - 4;\n          --v9;\n          v40 = v17;\n          v38 = v18;\n          v41 = v19;\n        }\n        while ( (v19 & 0x8000u) == 0 );\n        v40 = (unsigned int)v15;\n        if ( (v19 & 0x8000u) == 0 )\n        {\n          LOA44BD(v23) = v17 & *(_DWORD *)a1;\n          HIE4BFD(v23) = v18 & *((_DWORD *)a1 + 1) & 0xFFFFF;\n          if ( (unsigned __int16)(v23 >> v41) > 8u )\n          {\n            for ( i = v15 - 1; ; --i )\n            {\n              v25 = *i;\n              if ( *i != 102 && v25 != 70 )\n                break;\n              *i = 48;\n            }\n            HIE4BFD(v12) = a1;\n            if ( i == v36 )\n            {\n              ++*(i - 1);\n            }\n            else\n            {\n              if ( v25 == 57 )\n                v26 = v37 + 58;\n              else\n                v26 = v25 + 1;\n              *i = v26;\n            }\n          }\n        }\n      }\n      if ( v9 > 0 )\n      {\n        memset(v15, 48, v9);\n        v15 += v9;\n        v40 = (unsigned int)v15;\n      }\n      if ( !*v36 )\n      {\n        v15 = v36;\n        v40 = (unsigned int)v36;\n      }\n      *v15 = 32 * v42 + 80;\n      v27 = (((*(_QWORD *)HIE4BFD(v12) >> 52) & 0x7FFi64) - (unsigned __int64)v39) >> 32;\n      LOA44BD(v12) = ((*(_QWORD *)HIE4BFD(v12) >> 52) & 0x7FF) - v39;\n      v28 = (char *)(v40 + 2);\n      v36 = (char *)(v40 + 2);\n      if ( v27 < 0 )\n      {\n        LOA44BD(v12) = -(int)v12;\n        v27 = (unsigned __int64)-__SPA1740__(v27, v12) >> 32;\n        BYTE4(v12) = 45;\n      }\n      else\n      {\n        BYTE4(v12) = 43;\n      }\n      *(_BYTE *)(v40 + 1) = BYTE4(v12);\n      v29 = v28;\n      *v28 = 48;\n      if ( v27 >= 0 && (v27 > 0 || (unsigned int)v12 >= 0x3E8) )\n      {\n        v31 = __PA1740__(v27, v12);\n        v12 = __SPA1740__(v27, v12) % 1000;\n        v27 = HIE4BFD(v12);\n        v37 = (unsigned __int64)(v31 / 1000) >> 32;\n        v28 = v36;\n        *v36 = v31 / 1000 + 48;\n        v29 = v28 + 1;\n      }\n      if ( v29 != v28 || v27 >= 0 && (v27 > 0 || (unsigned int)v12 >= 0x64) )\n      {\n        v32 = __PA1740__(v27, v12);\n        v12 = __SPA1740__(v27, v12) % 100;\n        v27 = HIE4BFD(v12);\n        v37 = (unsigned __int64)(v32 / 100) >> 32;\n        v28 = v36;\n        *v29++ = v32 / 100 + 48;\n      }\n      if ( v29 != v28 || v27 >= 0 && (v27 > 0 || (unsigned int)v12 >= 0xA) )\n      {\n        v33 = __PA1740__(v27, v12);\n        v12 = __SPA1740__(v27, v12) % 10;\n        v36 = (char *)((unsigned __int64)(v33 / 10) >> 32);\n        *v29++ = v33 / 10 + 48;\n      }\n      *v29 = v12 + 48;\n      v29[1] = 0;\n      v11 = 0;\n    }\n  }\n  else\n  {\n    v11 = 34;\n    *_errno() = 34;\n    _invalid_parameter_noinfo();\n  }\n  if ( v35 )\n    *(_DWORD *)(v34[0] + 848) &= ~2u;\n  return v11;\n}\n\n"
    },
    {
        "Function": "sub_40169D",
        "Total XOR and shift operations": 7,
        "XOR operations": 6,
        "Shift operations": 1,
        "Operation percentage": "6.14%",
        "Function Body": "\nchar __fastcall sub_40169D(int a1, unsigned int a2, char *a3, __int128 *a4, __int128 *a5)\n{\n  unsigned int v5; // ebx\n  __int128 *v6; // edi\n  char *v7; // edx\n  char v8; // ah\n  char v9; // cl\n  char v10; // ch\n  unsigned int v11; // ebx\n  int v12; // ecx\n  int v13; // edx\n  int v14; // eax\n  char v15; // cl\n  char v16; // al\n  char result; // al\n  int v18; // ecx\n  char v21; // [esp+15h] [ebp-C7h]\n  char v22[13]; // [esp+18h] [ebp-C4h] BYREF\n  char v23[163]; // [esp+25h] [ebp-B7h] BYREF\n  __int128 v24; // [esp+C8h] [ebp-14h] BYREF\n\n  v5 = 4;\n  v22[0] = *a3;\n  v22[1] = a3[1];\n  v22[2] = a3[2];\n  v22[3] = a3[3];\n  v22[4] = a3[4];\n  v22[5] = a3[5];\n  v22[6] = a3[6];\n  v22[7] = a3[7];\n  v22[8] = a3[8];\n  v22[9] = a3[9];\n  v22[10] = a3[10];\n  v22[11] = a3[11];\n  v22[12] = a3[12];\n  v23[0] = a3[13];\n  v23[1] = a3[14];\n  v6 = a5;\n  v7 = v23;\n  v23[2] = a3[15];\n  do\n  {\n    v8 = *(v7 - 1);\n    v9 = v7[1];\n    v10 = v7[2];\n    v21 = *v7;\n    if ( (v5 & 3) == 0 )\n    {\n      v21 = RijnDael_AES_LONG_41C1A7[(unsigned __int8)v7[1]];\n      v8 = RijnDael_AES_LONG_41C1A7[(unsigned __int8)*v7] ^ byte_414201[v5 >> 2];\n      v9 = RijnDael_AES_LONG_41C1A7[(unsigned __int8)v7[2]];\n      v10 = RijnDael_AES_LONG_41C1A7[(unsigned __int8)*(v7 - 1)];\n    }\n    ++v5;\n    v7[3] = v8 ^ *(v7 - 13);\n    v7[4] = v21 ^ *(v7 - 12);\n    v7[5] = v9 ^ *(v7 - 11);\n    v7[6] = v10 ^ *(v7 - 10);\n    v7 += 4;\n  }\n  while ( v5 < 0x2C );\n  v11 = 0;\n  v12 = 16;\n  if ( a2 )\n  {\n    v13 = a1;\n    do\n    {\n      if ( v12 == 16 )\n      {\n        v24 = *a4;\n        sub_408283((unsigned __int8 *)&v24, (int)v22);\n        v14 = 15;\n        while ( 1 )\n        {\n          v15 = *((_BYTE *)a4 + v14);\n          if ( v15 != -1 )\n            break;\n          *((_BYTE *)a4 + v14--) = 0;\n          if ( v14 < 0 )\n            goto LABEL_13;\n        }\n        *((_BYTE *)a4 + v14) = v15 + 1;\nLABEL_13:\n        v13 = a1;\n        v12 = 0;\n      }\n      v16 = *((_BYTE *)&v24 + v12++);\n      *(_BYTE *)(v13 + v11++) ^= v16;\n    }\n    while ( v11 < a2 );\n  }\n  result = (_BYTE)a4 + 15;\n  if ( a5 > (__int128 *)((char *)a4 + 15) || (__int128 *)((char *)a5 + 15) < a4 )\n  {\n    *a5 = *a4;\n  }\n  else\n  {\n    v18 = 16;\n    do\n    {\n      result = *((_BYTE *)v6 + (char *)a4 - (char *)a5);\n      v6 = (__int128 *)((char *)v6 + 1);\n      *((_BYTE *)v6 - 1) = result;\n      --v18;\n    }\n    while ( v18 );\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_409C6D",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "5.26%",
        "Function Body": "\n_WORD *__fastcall sub_409C6D(int a1, int a2)\n{\n  _WORD *result; // eax\n  int v3; // edx\n  __int16 v4; // cx\n\n  result = (_WORD *)(a1 - 2);\n  v3 = ((a2 - a1) >> 1) + 1;\n  do\n  {\n    v4 = result[v3];\n    *++result = v4;\n  }\n  while ( v4 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40C05B",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "4.88%",
        "Function Body": "\nint __cdecl sub_40C05B(int FileHandle, const void *a2, int a3)\n{\n  int v3; // edi\n  int v5; // [esp+10h] [ebp-20h]\n\n  if ( FileHandle == -2 )\n  {\n    *__doserrno() = 0;\n    *_errno() = 9;\n    return -1;\n  }\n  if ( FileHandle < 0\n    || FileHandle >= (unsigned int)dword_4118B6\n    || (v5 = 56 * (FileHandle & 0x3F), (*(_BYTE *)(dword_41747B[FileHandle >> 6] + v5 + 40) & 1) == 0) )\n  {\n    *__doserrno() = 0;\n    *_errno() = 9;\n    _invalid_parameter_noinfo();\n    return -1;\n  }\n  __acrt_lowio_lock_fh(FileHandle);\n  v3 = -1;\n  if ( (*(_BYTE *)(dword_41747B[FileHandle >> 6] + v5 + 40) & 1) != 0 )\n  {\n    v3 = sub_40F803(FileHandle, a2, a3);\n  }\n  else\n  {\n    *_errno() = 9;\n    *__doserrno() = 0;\n  }\n  __acrt_lowio_unlock_fh(FileHandle);\n  return v3;\n}\n// 40E738: using guessed type _DWORD __cdecl __acrt_lowio_lock_fh(_DWORD);\n// 40CDDD: using guessed type _DWORD __cdecl __acrt_lowio_unlock_fh(_DWORD);\n// 41747B: using guessed type int dword_41747B[128];\n// 4118B6: using guessed type int dword_4118B6;\n\n"
    },
    {
        "Function": "sub_41B17F",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "2.63%",
        "Function Body": "\nint __cdecl sub_41B17F(int a1)\n{\n  int v2; // [esp+4h] [ebp-10h] BYREF\n  int *v3; // [esp+8h] [ebp-Ch] BYREF\n  int v4; // [esp+Ch] [ebp-8h] BYREF\n\n  if ( a1 == -2 )\n  {\n    *__doserrno() = 0;\n    *_errno() = 9;\n  }\n  else\n  {\n    if ( a1 >= 0\n      && a1 < (unsigned int)dword_4118B6\n      && (*(_BYTE *)(dword_41747B[a1 >> 6] + 56 * (a1 & 0x3F) + 40) & 1) != 0 )\n    {\n      v4 = a1;\n      v3 = &a1;\n      v2 = a1;\n      return __crt_seh_guarded_call<int>::operator()<_lambda_218ce3db14220d0be481dae8ef3383b6_,_lambda_628dfdc04ba53c8bfc02c99CF715f3f5_ &,_lambda_57dc472bd5c9d5f3b2cbca59b8a843ae_>(\n               &v2,\n               &v3,\n               &v4);\n    }\n    *__doserrno() = 0;\n    *_errno() = 9;\n    _invalid_parameter_noinfo();\n  }\n  return -1;\n}\n// 41C88E: using guessed type _DWORD __stdcall __crt_seh_guarded_call<int>::operator()<_lambda_218ce3db14220d0be481dae8ef3383b6_,_lambda_628dfdc04ba53c8bfc02c99CF715f3f5_ &,_lambda_57dc472bd5c9d5f3b2cbca59b8a843ae_>(_DWORD, _DWORD, _DWORD);\n// 41747B: using guessed type int dword_41747B[128];\n// 4118B6: using guessed type int dword_4118B6;\n// 41B17F: using guessed type int var_8;\n\n"
    },
    {
        "Function": "sub_40C004",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "1.85%",
        "Function Body": "\n_DWORD *__fastcall sub_40C004(__int16 *a1, _DWORD *a2)\n{\n  __int16 *v2; // edi\n  int v3; // eax\n  unsigned int v4; // eax\n  unsigned int v5; // esi\n  _DWORD *result; // eax\n  int v7; // ebx\n  _DWORD *v8; // ecx\n  int v9; // esi\n  __int16 v10; // dx\n  char v11; // cl\n  _WORD *v12; // eax\n  _WORD *v14; // [esp+10h] [ebp-Ch]\n  _DWORD *v15; // [esp+14h] [ebp-8h]\n  char v16; // [esp+19h] [ebp-3h]\n  char v17; // [esp+1Ah] [ebp-2h]\n  char v18; // [esp+1Bh] [ebp-1h]\n\n  v2 = a1;\n  v3 = 0;\n  if ( *a1 )\n  {\n    do\n      ++v3;\n    while ( a1[v3] );\n  }\n  v4 = v3 + 2;\n  v5 = v4 >> 1;\n  result = GlobalAlloc(0, 4 * ((v4 >> 1) + v4) + 4);\n  v15 = result;\n  v7 = 0;\n  v18 = 1;\n  v17 = 0;\n  v8 = &result[2 * v5 + 2];\n  v9 = 0;\n  *result = v8;\n  v10 = *v2;\n  v14 = v8;\n  v11 = 0;\n  v16 = 0;\n  if ( *v2 )\n  {\n    v12 = v14;\n    do\n    {\n      if ( v11 )\n      {\n        if ( v10 == 34 )\n        {\n          v11 = 0;\n          v16 = 0;\n        }\n        else\n        {\nLABEL_18:\n          ++v9;\n          *v12++ = v10;\n        }\n      }\n      else\n      {\n        switch ( v10 )\n        {\n          case 9:\n          case 10:\n          case 13:\n          case 32:\n            if ( v17 )\n            {\n              ++v9;\n              *v12++ = 0;\n            }\n            v11 = v16;\n            v17 = 0;\n            v18 = 1;\n            break;\n          case 34:\n            v11 = 1;\n            v16 = 1;\n            v17 = 1;\n            if ( v18 )\n              v15[v7++] = v12;\n            v18 = 0;\n            break;\n          default:\n            v17 = 1;\n            if ( v18 )\n              v15[v7++] = v12;\n            v11 = v16;\n            v18 = 0;\n            goto LABEL_18;\n        }\n      }\n      v10 = v2[1];\n      ++v2;\n    }\n    while ( v10 );\n    result = v15;\n  }\n  v14[v9] = 0;\n  result[v7] = 0;\n  *a2 = v7;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_406A18",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "1.83%",
        "Function Body": "\nchar __thiscall sub_406A18(int this, int a2, char a3)\n{\n  int v4; // eax\n  int v6; // eax\n  int v7; // edi\n  int v8; // ebx\n  int v9; // eax\n  bool v10; // zf\n  int v11; // eax\n  int v12; // eax\n  int v13; // eax\n  int v14; // eax\n  int v15; // eax\n  int v16; // eax\n  int v17; // ecx\n  int v18; // [esp-4h] [ebp-14h]\n  int v19; // [esp+Ch] [ebp-4h]\n\n  v4 = __crt_stdio_output::to_integer_size(*(_DWORD *)(this + 44));\n  v19 = v4;\n  switch ( v4 )\n  {\n    case 1:\n      v15 = *(_DWORD *)(this + 32);\n      *(_DWORD *)(this + 20) += 4;\n      v10 = (v15 & 0x10) == 0;\n      v16 = *(_DWORD *)(this + 20);\n      if ( v10 )\n        v12 = *(unsigned __int8 *)(v16 - 4);\n      else\n        v12 = *(char *)(v16 - 4);\n      goto LABEL_16;\n    case 2:\n      v13 = *(_DWORD *)(this + 32);\n      *(_DWORD *)(this + 20) += 4;\n      v10 = (v13 & 0x10) == 0;\n      v14 = *(_DWORD *)(this + 20);\n      if ( v10 )\n        v12 = *(unsigned __int16 *)(v14 - 4);\n      else\n        v12 = *(__int16 *)(v14 - 4);\nLABEL_16:\n      v8 = v12 >> 31;\n      v7 = v12;\n      goto LABEL_17;\n    case 4:\n      v9 = *(_DWORD *)(this + 32);\n      *(_DWORD *)(this + 20) += 4;\n      v10 = (v9 & 0x10) == 0;\n      v11 = *(_DWORD *)(this + 20);\n      if ( v10 )\n      {\n        v7 = *(_DWORD *)(v11 - 4);\n        v8 = 0;\n        goto LABEL_17;\n      }\n      v12 = *(_DWORD *)(v11 - 4);\n      goto LABEL_16;\n  }\n  if ( v4 != 8 )\n  {\n    *_errno() = 22;\n    _invalid_parameter_noinfo();\n    return 0;\n  }\n  *(_DWORD *)(this + 20) += 8;\n  v6 = *(_DWORD *)(this + 20);\n  v7 = *(_DWORD *)(v6 - 8);\n  v8 = *(_DWORD *)(v6 - 4);\nLABEL_17:\n  v17 = *(_DWORD *)(this + 32);\n  if ( (v17 & 0x10) != 0 && v8 < 0 )\n  {\n    v7 = -v7;\n    v8 = (unsigned __int64)-__SPA1740__(v8, v7) >> 32;\n    v17 |= 0x40u;\n    *(_DWORD *)(this + 32) = v17;\n  }\n  if ( *(int *)(this + 40) >= 0 )\n  {\n    v18 = *(_DWORD *)(this + 40);\n    *(_DWORD *)(this + 32) = v17 & 0xFF0B74F7;\n    __crt_stdio_output::formatting_buffer::ensure_buffer_is_big_enough<char>(v18);\n  }\n  else\n  {\n    *(_DWORD *)(this + 40) = 1;\n  }\n  if ( !(v8 | v7) )\n    *(_DWORD *)(this + 32) &= ~0x20u;\n  *(_BYTE *)(this + 60) = 0;\n  if ( v19 == 8 )\n    unknown_libname_4(v7, v8, a2, a3);\n  else\n    unknown_libname_3(v7, a2, a3);\n  if ( (*(_DWORD *)(this + 32) & 0x80) != 0 && (!*(_DWORD *)(this + 56) || **(_BYTE **)(this + 52) != 48) )\n  {\n    *(_BYTE *)--*(_DWORD *)(this + 52) = 48;\n    ++*(_DWORD *)(this + 56);\n  }\n  return 1;\n}\n// 405EB8: using guessed type _DWORD __stdcall __crt_stdio_output::formatting_buffer::ensure_buffer_is_big_enough<char>(_DWORD);\n// 408231: using guessed type _DWORD __stdcall unknown_libname_3(_DWORD, _DWORD, char);\n// 40FB4E: using guessed type _DWORD __stdcall unknown_libname_4(_DWORD, _DWORD, _DWORD, char);\n// 4011C3: using guessed type int __cdecl __crt_stdio_output::to_integer_size(_DWORD);\n\n"
    },
    {
        "Function": "sub_4045B6",
        "Total XOR and shift operations": 15,
        "XOR operations": 1,
        "Shift operations": 14,
        "Operation percentage": "1.35%",
        "Function Body": "\n_DWORD *__usercall sub_4045B6@<eax>(_BYTE *a1@<edx>, int a2@<ecx>, unsigned int a3@<ebp>, unsigned int a4)\n{\n  _BYTE *v4; // edi\n  unsigned int v6; // eax\n  double v7; // xmm2_8\n  double v8; // xmm3_8\n  double v9; // xmm5_8\n  unsigned int v10; // ecx\n  __int64 v11; // xmm0_8\n  void *(__cdecl *v12)(SIZE_T, int); // eax\n  BOOL (__cdecl *v13)(LP6878); // eax\n  unsigned int v14; // eax\n  double *v15; // esi\n  int v16; // edx\n  char v17; // cl\n  unsigned int v18; // edi\n  char v19; // cl\n  unsigned int v20; // edi\n  char v21; // cl\n  unsigned int v22; // edi\n  char v23; // cl\n  int v24; // eax\n  _BYTE *v25; // edi\n  _BYTE *v26; // edi\n  char v27; // cl\n  unsigned int v28; // edi\n  char v29; // cl\n  unsigned int v30; // edi\n  char v31; // cl\n  unsigned int v32; // edi\n  char v33; // cl\n  unsigned int v34; // esi\n  int v35; // edx\n  char v36; // al\n  unsigned int v37; // esi\n  unsigned int v38; // esi\n  unsigned int v39; // esi\n  int v40; // eax\n  int v41; // eax\n  bool v42; // zf\n  unsigned int v43; // edx\n  unsigned int v44; // eax\n  int v45; // edx\n  int v46; // eax\n  _BYTE *v47; // edi\n  _BYTE *v48; // edi\n  _BYTE *v49; // edi\n  _BYTE *v50; // edi\n  _BYTE *v51; // edi\n  int v52; // eax\n  _BYTE *v53; // edi\n  _BYTE *v54; // edi\n  char i; // cl\n  int v56; // eax\n  unsigned int v57; // eax\n  double v58; // xmm1_8\n  int v59; // eax\n  __int64 v60; // rax\n  unsigned int v61; // edx\n  unsigned __int64 v62; // rt0\n  int v63; // ecx\n  __m128i v64; // xmm0\n  int v65; // eax\n  unsigned int v66; // eax\n  int v67; // eax\n  unsigned int v68; // edx\n  int v69; // eax\n  int v70; // eax\n  int v71; // edx\n  double v72; // xmm0_8\n  unsigned int v73; // eax\n  int v74; // eax\n  unsigned int v75; // edx\n  int v76; // eax\n  int v77; // eax\n  int v78; // eax\n  int v79; // ecx\n  unsigned int v80; // edx\n  int v81; // eax\n  bool v82; // sf\n  _DWORD *result; // eax\n  _DWORD *v84; // eax\n  _DWORD *v85; // ecx\n  unsigned int v86; // edi\n  _DWORD *v87; // esi\n  double v88; // [esp-90h] [ebp-9Ch]\n  int v89; // [esp-84h] [ebp-90h]\n  double v90; // [esp-80h] [ebp-8Ch]\n  _BYTE *v91; // [esp-74h] [ebp-80h]\n  int v92; // [esp-70h] [ebp-7Ch]\n  unsigned int v93; // [esp-6Ch] [ebp-78h]\n  double v94; // [esp-68h] [ebp-74h]\n  _DWORD *v95; // [esp-60h] [ebp-6Ch] BYREF\n  _DWORD *v96; // [esp-5Ch] [ebp-68h] BYREF\n  unsigned __int8 v97; // [esp-57h] [ebp-63h]\n  char v98; // [esp-56h] [ebp-62h]\n  unsigned __int8 v99; // [esp-55h] [ebp-61h]\n  int v100; // [esp-54h] [ebp-60h]\n  int v101; // [esp-50h] [ebp-5Ch]\n  double *v102; // [esp-4Ch] [ebp-58h] BYREF\n  char v103; // [esp-45h] [ebp-51h]\n  _BYTE *v104; // [esp-44h] [ebp-50h]\n  int v105; // [esp-40h] [ebp-4Ch]\n  unsigned int v106; // [esp-3Ch] [ebp-48h]\n  unsigned int v107[17]; // [esp-38h] [ebp-44h] BYREF\n  unsigned int retaddr; // [esp+Ch] [ebp+0h]\n\n  v107[14] = a3;\n  v107[15] = retaddr;\n  v95 = 0;\n  v4 = a1;\n  v91 = a1;\n  memset(v107, 0, 0x34u);\n  v6 = a4;\n  v7 = 0.0;\n  v8 = 0.0;\n  v94 = 0.0;\n  v9 = 0.0;\n  v88 = 0.0;\n  v90 = 0.0;\n  if ( a4 >= 3 && *v4 == 0xEF && v4[1] == 0xBB && v4[2] == 0xBF )\n  {\n    v4 += 3;\n    v6 = a4 - 3;\n    v91 = v4;\n  }\n  v10 = (unsigned int)&v4[v6];\n  v11 = *(_QWORD *)(a2 + 16);\n  *(_OWORD *)&v107[3] = *(_OWORD *)a2;\n  v107[1] = -1;\n  v12 = (void *(__cdecl *)(SIZE_T, int))_mm_cvtsi128_si32(_mm_srli_si128(*(__m128i *)&v107[3], 8));\n  *(_QWORD *)&v107[7] = v11;\n  v104 = (_BYTE *)v10;\n  v107[9] = 1;\n  if ( !v12 )\n    v12 = sub_402F16;\n  v107[5] = (unsigned int)v12;\n  v13 = (BOOL (__cdecl *)(LP6878))v107[6];\n  if ( !v107[6] )\n    v13 = sub_406ED8;\n  v107[1] -= 8;\n  v107[6] = (unsigned int)v13;\n  v107[2] = -9;\n  do\n  {\n    v14 = 0;\n    v101 = 0;\n    v15 = 0;\n    v106 = 0;\n    v16 = 8;\n    v96 = 0;\n    v102 = 0;\n    v105 = 8;\n    v107[11] = 1;\n    while ( 1 )\n    {\n      v107[10] = (unsigned int)v4;\n      if ( v4 == (_BYTE *)v10 )\n        LO17EE(v10) = 0;\n      else\n        LO17EE(v10) = *v4;\n      v103 = v10;\n      if ( (v16 & 0x20) != 0 )\n      {\n        if ( !(_BYTE)v10 || v14 > v107[1] )\n          goto LABEL_240;\n        if ( (v16 & 0x10) != 0 )\n        {\n          v16 &= ~0x10u;\n          v105 = v16;\n          switch ( (char)v10 )\n          {\n            case 'b':\n              v14 = v106;\n              if ( !v107[9] )\n                *(_BYTE *)(v106 + v101) = 8;\n              goto LABEL_22;\n            case 'f':\n              v14 = v106;\n              if ( !v107[9] )\n                *(_BYTE *)(v106 + v101) = 12;\n              goto LABEL_22;\n            case 'n':\n              v14 = v106;\n              if ( !v107[9] )\n                *(_BYTE *)(v106 + v101) = 10;\n              goto LABEL_22;\n            case 'r':\n              v14 = v106;\n              if ( !v107[9] )\n                *(_BYTE *)(v106 + v101) = 13;\n              goto LABEL_22;\n            case 't':\n              v14 = v106;\n              if ( !v107[9] )\n                *(_BYTE *)(v106 + v101) = 9;\n              goto LABEL_22;\n            case 'u':\n              if ( v104 - v4 <= 4 )\n                goto LABEL_240;\n              v17 = v4[1];\n              v18 = (unsigned int)(v4 + 1);\n              v107[10] = v18;\n              v103 = sub_400687(v17);\n              if ( v103 == -1 )\n                goto LABEL_240;\n              v19 = *(_BYTE *)(v18 + 1);\n              v20 = v18 + 1;\n              v107[10] = v20;\n              v99 = sub_400687(v19);\n              if ( v99 == 0xFF )\n                goto LABEL_240;\n              v21 = *(_BYTE *)(v20 + 1);\n              v22 = v20 + 1;\n              v107[10] = v22;\n              v98 = sub_400687(v21);\n              if ( v98 == -1 )\n                goto LABEL_240;\n              v23 = *(_BYTE *)(v22 + 1);\n              v4 = (_BYTE *)(v22 + 1);\n              v107[10] = (unsigned int)v4;\n              v97 = sub_400687(v23);\n              if ( v97 == 0xFF )\n                goto LABEL_240;\n              v24 = v99 | (unsigned __int8)(16 * v103);\n              v10 = v97 | (unsigned __int8)(16 * v98) | (v24 << 8);\n              v100 = v10;\n              if ( ((v97 | (unsigned __int16)((unsigned __int8)(16 * v98) | (unsigned __int16)((_WORD)v24 << 8))) & 0xF800) != 55296 )\n                goto LABEL_48;\n              if ( v104 - v4 <= 6 )\n                goto LABEL_240;\n              v25 = v4 + 1;\n              v107[10] = (unsigned int)v25;\n              if ( *v25 != 92 )\n                goto LABEL_240;\n              v26 = v25 + 1;\n              v107[10] = (unsigned int)v26;\n              if ( *v26 != 117 )\n                goto LABEL_240;\n              v27 = v26[1];\n              v28 = (unsigned int)(v26 + 1);\n              v107[10] = v28;\n              if ( sub_400687(v27) == -1 )\n                goto LABEL_240;\n              v29 = *(_BYTE *)(v28 + 1);\n              v30 = v28 + 1;\n              v107[10] = v30;\n              v97 = sub_400687(v29);\n              if ( v97 == 0xFF )\n                goto LABEL_240;\n              v31 = *(_BYTE *)(v30 + 1);\n              v32 = v30 + 1;\n              v107[10] = v32;\n              v98 = sub_400687(v31);\n              if ( v98 == -1 )\n                goto LABEL_240;\n              v33 = *(_BYTE *)(v32 + 1);\n              v4 = (_BYTE *)(v32 + 1);\n              v107[10] = (unsigned int)v4;\n              v99 = sub_400687(v33);\n              if ( v99 == 0xFF )\n                goto LABEL_240;\n              v10 = v99 | (unsigned __int8)(16 * v98) | ((v97 & 3 | (4 * (v100 & 0x3BF | 0x40))) << 8);\n              v100 = v10;\nLABEL_48:\n              if ( v10 <= 0x7F )\n              {\nLABEL_49:\n                v14 = v106;\n                goto LABEL_50;\n              }\n              if ( v10 > 0x7FF )\n              {\n                if ( v10 > 0xFFFF )\n                {\n                  if ( v107[9] )\n                  {\n                    v14 = v106 + 4;\n                    break;\n                  }\n                  v39 = v106;\n                  v35 = v101;\n                  ++v106;\n                  *(_BYTE *)(v39 + v101) = (v10 >> 18) | 0xF0;\n                  v36 = (v10 >> 12) & 0x3F | 0x80;\n                }\n                else\n                {\n                  if ( v107[9] )\n                  {\n                    v14 = v106 + 3;\n                    break;\n                  }\n                  v35 = v101;\n                  v36 = (v10 >> 12) | 0xE0;\n                }\n                v37 = v106++;\n                *(_BYTE *)(v37 + v35) = v36;\n                v38 = v106;\n                *(_BYTE *)(v106 + v35) = (v10 >> 6) & 0x3F | 0x80;\n                v16 = v105;\n                *(_BYTE *)(v38 + v101 + 1) = v10 & 0x3F | 0x80;\n                v14 = v38 + 2;\n                v15 = v102;\n                break;\n              }\n              if ( v107[9] )\n              {\n                v14 = v106 + 2;\n              }\n              else\n              {\n                v34 = v106;\n                *(_BYTE *)(v106 + v101) = (v10 >> 6) | 0xC0;\n                *(_BYTE *)(v34 + v101 + 1) = v100 & 0x3F | 0x80;\n                v14 = v34 + 2;\n                v15 = v102;\n              }\n              break;\n            default:\n              goto LABEL_49;\n          }\nLABEL_23:\n          v106 = v14;\nLABEL_24:\n          v10 = (unsigned int)v104;\n          goto LABEL_25;\n        }\n        if ( (_BYTE)v10 == 92 )\n        {\n          v16 |= 0x10u;\n          v105 = v16;\n          goto LABEL_24;\n        }\n        if ( (_BYTE)v10 != 34 )\n        {\nLABEL_50:\n          if ( !v107[9] )\n          {\n            *(_BYTE *)(v14 + v101) = v10;\n            v15 = v102;\n          }\nLABEL_22:\n          ++v14;\n          goto LABEL_23;\n        }\n        if ( !v107[9] )\n        {\n          *(_BYTE *)(v14 + v101) = 0;\n          v15 = v102;\n        }\n        v40 = *((_DWORD *)v15 + 1);\n        v16 &= ~0x20u;\n        v105 = v16;\n        v101 = 0;\n        v41 = v40 - 1;\n        if ( !v41 )\n        {\n          if ( v107[9] )\n          {\n            *((_DWORD *)v15 + 3) += v106 + 1;\n            v16 |= 0x48u;\n            v14 = v106;\n            v105 = v16;\n          }\n          else\n          {\n            *(_DWORD *)(*((_DWORD *)v15 + 3) + 12 * *((_DWORD *)v15 + 2)) = *((_DWORD *)v15 + 4);\n            v43 = v106;\n            *(_DWORD *)(*((_DWORD *)v15 + 3) + 12 * *((_DWORD *)v15 + 2) + 4) = v106;\n            v44 = v43 + 1;\n            v45 = v105;\n            *((_DWORD *)v15 + 4) += v44;\n            v16 = v45 | 0x48;\n            v105 = v16;\nLABEL_82:\n            v14 = v106;\n          }\n          goto LABEL_24;\n        }\n        v42 = v41 == 4;\n        v14 = v106;\n        if ( v42 )\n        {\n          v16 |= 1u;\n          *((_DWORD *)v15 + 2) = v106;\n          v105 = v16;\n        }\n      }\n      if ( (v107[4] & 1) == 0 )\n        break;\n      if ( (v16 & 0x6000) != 0 )\n      {\n        if ( (v16 & 0x2000) != 0 )\n        {\n          if ( (_BYTE)v10 == 13 || (_BYTE)v10 == 10 || !(_BYTE)v10 )\n          {\n            v16 &= ~0x2000u;\n            --v4;\n            v105 = v16;\n          }\n          goto LABEL_24;\n        }\n        if ( (v16 & 0x4000) == 0 )\n          break;\n        if ( !(_BYTE)v10 )\n          goto LABEL_240;\n        v42 = (_BYTE)v10 == 42;\n        v10 = (unsigned int)v104;\n        if ( v42 )\n        {\n          if ( v4 >= v104 - 1 )\n            goto LABEL_96;\n          v14 = v106;\n          if ( v4[1] == 47 )\n          {\n            v16 &= ~0x4000u;\n            ++v4;\n            v105 = v16;\n          }\n        }\n      }\n      else\n      {\n        if ( (_BYTE)v10 != 47 )\n          break;\n        if ( (v16 & 0x88) == 0 && *((_DWORD *)v15 + 1) != 1 )\n          goto LABEL_240;\n        v10 = (unsigned int)v104;\n        v107[10] = (unsigned int)++v4;\n        if ( v4 == v104 )\n          goto LABEL_240;\n        if ( *v4 != 42 )\n        {\n          if ( *v4 != 47 )\n            goto LABEL_240;\n          v16 |= 0x2000u;\n          v105 = v16;\nLABEL_96:\n          v14 = v106;\n          goto LABEL_25;\n        }\n        v14 = v106;\n        v16 |= 0x4000u;\n        v105 = v16;\n      }\nLABEL_25:\n      v8 = v88;\n      ++v4;\n      v9 = v90;\n    }\n    if ( (v16 & 0x80u) == 0 )\n    {\n      if ( (v16 & 8) != 0 )\n      {\n        v100 = (char)v10;\n        v15 = v102;\n        v46 = (char)v10 - 9;\n        switch ( (char)v10 )\n        {\n          case 9:\n          case 13:\n          case 32:\n            goto LABEL_82;\n          case 10:\n            goto LABEL_101;\n          case 11:\n          case 12:\n          case 14:\n          case 15:\n          case 16:\n          case 17:\n          case 18:\n          case 19:\n          case 20:\n          case 21:\n          case 22:\n          case 23:\n          case 24:\n          case 25:\n          case 26:\n          case 27:\n          case 28:\n          case 29:\n          case 30:\n          case 31:\n          case 33:\n          case 34:\n          case 35:\n          case 36:\n          case 37:\n          case 38:\n          case 39:\n          case 40:\n          case 41:\n          case 42:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 63:\n          case 64:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 91:\n          case 92:\n            v46 = v100;\n            goto LABEL_108;\n          case 93:\n            if ( !v102 || *((_DWORD *)v102 + 1) != 2 )\n              goto LABEL_240;\n            v16 = v16 & 0xFF0B74F2 | 1;\n            goto LABEL_224;\n          default:\nLABEL_108:\n            if ( (v16 & 4) != 0 )\n            {\n              if ( (_BYTE)v10 != 44 )\n                goto LABEL_240;\n              v14 = v106;\n              v16 &= ~4u;\n              v105 = v16;\n            }\n            else if ( (v16 & 0x40) != 0 )\n            {\n              if ( (_BYTE)v10 != 58 )\n                goto LABEL_240;\n              v14 = v106;\n              v16 &= ~0x40u;\n              v105 = v16;\n            }\n            else\n            {\n              v105 = v16 & 0xFF0B74F7;\n              switch ( v46 )\n              {\n                case '\"':\n                  if ( !sub_4004C7(v107, &v102, &v96, (int)&v95, 5) )\n                    goto LABEL_240;\n                  v15 = v102;\n                  v4 = (_BYTE *)v107[10];\n                  v16 = v105 | 0x20;\n                  v7 = v94;\n                  v101 = *((_DWORD *)v102 + 3);\n                  v14 = 0;\n                  v105 |= 0x20u;\n                  goto LABEL_23;\n                case '#':\n                case '$':\n                case '%':\n                case '&':\n                case '\\'':\n                case '(':\n                case ')':\n                case '*':\n                case '+':\n                case ',':\n                case '-':\n                case '.':\n                case '/':\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                case '8':\n                case '9':\n                case ':':\n                case ';':\n                case '<':\n                case '=':\n                case '>':\n                case '?':\n                case '@':\n                case 'A':\n                case 'B':\n                case 'C':\n                case 'D':\n                case 'E':\n                case 'F':\n                case 'G':\n                case 'H':\n                case 'I':\n                case 'J':\n                case 'K':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'O':\n                case 'P':\n                case 'Q':\n                case 'R':\n                case 'S':\n                case 'T':\n                case 'U':\n                case 'V':\n                case 'W':\n                case 'X':\n                case 'Y':\n                case 'Z':\n                case '\\\\':\n                case ']':\n                case '^':\n                case '_':\n                case '`':\n                case 'a':\n                case 'b':\n                case 'c':\n                case 'd':\n                case 'e':\n                case 'g':\n                case 'h':\n                case 'i':\n                case 'j':\n                case 'k':\n                case 'l':\n                case 'm':\n                case 'o':\n                case 'p':\n                case 'q':\n                case 'r':\n                case 's':\n                case 'u':\n                case 'v':\n                case 'w':\n                case 'x':\n                case 'y':\n                case 'z':\n                  v46 = v100;\n                  goto LABEL_141;\n                case '[':\n                  if ( !sub_4004C7(v107, &v102, &v96, (int)&v95, 2) )\n                    goto LABEL_240;\n                  v4 = (_BYTE *)v107[10];\n                  v16 = v105 | 8;\n                  v7 = v94;\n                  v15 = v102;\n                  v14 = v106;\n                  v105 |= 8u;\n                  goto LABEL_24;\n                case 'f':\n                  if ( v104 - v4 < 4 )\n                    goto LABEL_240;\n                  v49 = v4 + 1;\n                  v107[10] = (unsigned int)v49;\n                  if ( *v49 != 97 )\n                    goto LABEL_240;\n                  v50 = v49 + 1;\n                  v107[10] = (unsigned int)v50;\n                  if ( *v50 != 108 )\n                    goto LABEL_240;\n                  v51 = v50 + 1;\n                  v107[10] = (unsigned int)v51;\n                  if ( *v51 != 115 )\n                    goto LABEL_240;\n                  v107[10] = (unsigned int)(v51 + 1);\n                  if ( v51[1] != 101 )\n                    goto LABEL_240;\n                  v52 = sub_4004C7(v107, &v102, &v96, (int)&v95, 6);\n                  goto LABEL_133;\n                case 'n':\n                  if ( v104 - v4 < 3 )\n                    goto LABEL_240;\n                  v53 = v4 + 1;\n                  v107[10] = (unsigned int)v53;\n                  if ( *v53 != 117 )\n                    goto LABEL_240;\n                  v54 = v53 + 1;\n                  v107[10] = (unsigned int)v54;\n                  if ( *v54 != 108 )\n                    goto LABEL_240;\n                  v107[10] = (unsigned int)(v54 + 1);\n                  if ( v54[1] != 108 )\n                    goto LABEL_240;\n                  v52 = sub_4004C7(v107, &v102, &v96, (int)&v95, 7);\nLABEL_133:\n                  if ( !v52 )\n                    goto LABEL_240;\n                  v4 = (_BYTE *)v107[10];\n                  v16 = v105 | 1;\n                  v7 = v94;\n                  v15 = v102;\n                  goto LABEL_224;\n                case 't':\n                  if ( v104 - v4 < 3 )\n                    goto LABEL_240;\n                  v47 = v4 + 1;\n                  v107[10] = (unsigned int)v47;\n                  if ( *v47 != 114 )\n                    goto LABEL_240;\n                  v48 = v47 + 1;\n                  v107[10] = (unsigned int)v48;\n                  if ( *v48 != 117 )\n                    goto LABEL_240;\n                  v107[10] = (unsigned int)(v48 + 1);\n                  if ( v48[1] != 101 || !sub_4004C7(v107, &v102, &v96, (int)&v95, 6) )\n                    goto LABEL_240;\n                  v15 = v102;\n                  v4 = (_BYTE *)v107[10];\n                  v16 = v105 | 1;\n                  v7 = v94;\n                  *((_DWORD *)v102 + 2) = 1;\n                  goto LABEL_224;\n                case '{':\n                  if ( !sub_4004C7(v107, &v102, &v96, (int)&v95, 1) )\n                    goto LABEL_240;\n                  v4 = (_BYTE *)v107[10];\n                  v7 = v94;\n                  v16 = v105;\n                  v15 = v102;\n                  v14 = v106;\n                  goto LABEL_24;\n                default:\nLABEL_141:\n                  if ( ((unsigned int)(v46 - 48) > 9 || !v100) && (_BYTE)v10 != 45\n                    || !sub_4004C7(v107, &v102, &v96, (int)&v95, 3) )\n                  {\n                    goto LABEL_240;\n                  }\n                  v4 = (_BYTE *)v107[10];\n                  if ( !v107[9] )\n                  {\n                    for ( i = v103;\n                          (unsigned int)(i - 48) <= 9 && i || i == 43 || i == 45 || i == 101 || i == 69 || i == 46;\n                          i = *v4 )\n                    {\n                      v107[10] = (unsigned int)++v4;\n                      if ( v4 == v104 )\n                        break;\n                    }\n                    v7 = v94;\n                    v16 = v105 | 3;\n                    v15 = v102;\n                    goto LABEL_224;\n                  }\n                  v15 = v102;\n                  v7 = 0.0;\n                  v14 = v106;\n                  v94 = 0.0;\n                  v90 = 0.0;\n                  v88 = 0.0;\n                  if ( v103 != 45 )\n                  {\n                    v16 = v105 & 0xFF8EE3FD | 2;\n                    v105 = v16;\n                    goto LABEL_226;\n                  }\n                  v16 = v105 & 0xFF8EE3FF | 0x100;\n                  v105 = v16;\n                  break;\n              }\n            }\n            break;\n        }\n        goto LABEL_24;\n      }\n      v56 = *((_DWORD *)v15 + 1);\n      if ( v56 == 1 )\n      {\n        switch ( (char)v10 )\n        {\n          case 9:\n          case 13:\n          case 32:\n            goto LABEL_82;\n          case 10:\nLABEL_101:\n            ++v107[11];\n            v14 = v106;\n            v107[12] = 0;\n            goto LABEL_24;\n          case 34:\n            if ( (v16 & 4) != 0 )\n              goto LABEL_240;\n            v16 |= 0x20u;\n            v101 = *((_DWORD *)v15 + 4);\n            v14 = 0;\n            v105 = v16;\n            v106 = 0;\n            goto LABEL_226;\n          case 44:\n            if ( (v16 & 4) == 0 )\n              goto LABEL_240;\n            v16 &= ~4u;\n            goto LABEL_224;\n          case 125:\n            v16 = v16 & 0xFF0B74FA | 1;\n            goto LABEL_224;\n          default:\n            goto LABEL_240;\n        }\n      }\n      if ( (unsigned int)(v56 - 3) > 1 )\n        goto LABEL_225;\n      v57 = (char)v10 - 48;\n      v100 = v57;\n      if ( v57 > 9 || !(_BYTE)v10 )\n      {\n        if ( (_BYTE)v10 == 43 || (_BYTE)v10 == 45 )\n        {\n          if ( (v16 & 0xC00) != 1024 )\n            goto LABEL_190;\n          v65 = 6144;\n          if ( (_BYTE)v10 != 45 )\n            v65 = 2048;\n          v16 |= v65;\n          v14 = v106;\n          v105 = v16;\n          goto LABEL_24;\n        }\n        if ( (_BYTE)v10 == 46 && *((_DWORD *)v15 + 1) == 3 )\n        {\n          if ( v7 == 0.0 )\n            goto LABEL_240;\n          *((_DWORD *)v15 + 1) = 4;\n          v7 = 0.0;\n          v14 = v106;\n          v16 = v105 | 0x8000;\n          v15[1] = (double)*((__int64 *)v15 + 1);\n          v105 = v16;\n          v94 = 0.0;\n          goto LABEL_24;\n        }\nLABEL_190:\n        if ( (v16 & 0x400) != 0 )\n        {\n          if ( v7 == 0.0 )\n            goto LABEL_240;\n          v72 = v8;\n          if ( (v16 & 0x1000) != 0 )\n            v72 = -v8;\n          v73 = (unsigned int)v72;\n          if ( (unsigned int)v72 )\n          {\n            v75 = v73 >> 1;\n            if ( (v73 & 1) != 0 )\n            {\n              v77 = sub_40978A(v10, v75);\n              v74 = 10 * v77 * v77;\n            }\n            else\n            {\n              v76 = sub_40978A(v10, v75);\n              v74 = v76 * v76;\n            }\n          }\n          else\n          {\n            v74 = 1;\n          }\n          v16 = v105;\n          v15[1] = (double)v74 * v15[1];\n        }\n        else\n        {\n          if ( *((_DWORD *)v15 + 1) == 4 )\n          {\n            if ( v7 == 0.0 )\n              goto LABEL_240;\n            v66 = (unsigned int)v7;\n            if ( (unsigned int)v7 )\n            {\n              v68 = v66 >> 1;\n              if ( (v66 & 1) != 0 )\n              {\n                v70 = sub_40978A(v10, v68);\n                v67 = 10 * v70 * v70;\n              }\n              else\n              {\n                v69 = sub_40978A(v10, v68);\n                v67 = v69 * v69;\n              }\n            }\n            else\n            {\n              v67 = 1;\n            }\n            v16 = v105;\n            LO17EE(v10) = v103;\n            v15[1] = v90 / (double)v67 + v15[1];\n          }\n          if ( (_BYTE)v10 == 101 || (_BYTE)v10 == 69 )\n          {\n            v71 = v16 | 0x400;\n            v42 = *((_DWORD *)v15 + 1) == 3;\n            v105 = v71;\n            if ( v42 )\n            {\n              *((_DWORD *)v15 + 1) = 4;\n              v71 = v105;\n              v15[1] = (double)*((__int64 *)v15 + 1);\n            }\n            v14 = v106;\n            v7 = 0.0;\n            v16 = v71 & 0xFFAAB4FF;\n            v94 = 0.0;\n            v105 = v16;\n            goto LABEL_24;\n          }\n        }\n        if ( (v16 & 0x100) != 0 )\n        {\n          if ( *((_DWORD *)v15 + 1) == 3 )\n          {\n            v7 = v94;\n            v78 = (*((_DWORD *)v15 + 2) != 0) + *((_DWORD *)v15 + 3);\n            *((_DWORD *)v15 + 2) = -*((_DWORD *)v15 + 2);\n            v16 |= 3u;\n            *((_DWORD *)v15 + 3) = -v78;\nLABEL_224:\n            v105 = v16;\nLABEL_225:\n            v14 = v106;\nLABEL_226:\n            if ( (v16 & 2) != 0 )\n            {\n              v16 &= ~2u;\n              --v4;\n              v105 = v16;\n              v107[10] = (unsigned int)v4;\n            }\n            if ( (v16 & 1) != 0 )\n            {\n              v79 = *(_DWORD *)v15;\n              v80 = v16 & 0xFF0B74FE;\n              if ( *(_DWORD *)v15 )\n              {\n                v16 = (8 * (*(_DWORD *)(v79 + 4) == 2) + 4) | v80;\n                v105 = v16;\n                if ( !v107[9] )\n                {\n                  if ( *(_DWORD *)(v79 + 4) == 1 )\n                  {\n                    *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v15 + 12) + 12 * *(_DWORD *)(v79 + 8) + 8) = v15;\n                  }\n                  else if ( *(_DWORD *)(v79 + 4) == 2 )\n                  {\n                    *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v15 + 12) + 4 * *(_DWORD *)(v79 + 8)) = v15;\n                  }\n                }\n                v81 = *(_DWORD *)v15;\n                if ( ++*(_DWORD *)(v81 + 8) > v107[1] )\n                {\nLABEL_240:\n                  v84 = v95;\n                  v85 = v96;\n                  if ( v107[9] )\n                    v84 = v96;\n                  if ( v84 )\n                  {\n                    v86 = v107[7];\n                    do\n                    {\n                      v87 = (_DWORD *)v84[4];\n                      ((void (__cdecl *)(_DWORD *, unsigned int))v107[6])(v84, v86);\n                      v84 = v87;\n                    }\n                    while ( v87 );\n                    v85 = v96;\n                  }\n                  if ( !v107[9] )\n                    sub_40F9B5((int)&v107[3], v85);\n                  return 0;\n                }\n                v15 = *(double **)v15;\n                v14 = v106;\n                v102 = v15;\n              }\n              else\n              {\n                v16 = v80 | 0x84;\n                v105 = v16;\n              }\n            }\n            goto LABEL_24;\n          }\n          v15[1] = -v15[1];\n        }\n        v7 = v94;\n        v16 |= 3u;\n        goto LABEL_224;\n      }\n      v7 = v7 + 1.0;\n      v94 = v7;\n      if ( (v16 & 0x400) != 0 )\n      {\n        v64 = _mm_cvtsi32_si128(v57);\n        v16 |= 0x800u;\n        v14 = v106;\n        v105 = v16;\n        v88 = v8 * 10.0 + _mm_cvtepi32_pd(v64).m128d_f64[0];\n        goto LABEL_24;\n      }\n      if ( *((_DWORD *)v15 + 1) == 3 )\n      {\n        if ( (v16 & 0x200) != 0 )\n          goto LABEL_240;\n        if ( v7 == 1.0 && (_BYTE)v10 == 48 )\n          v105 = v16 | 0x200;\n        v59 = v100;\n        v93 = *((_DWORD *)v15 + 2);\n        v100 = *((_DWORD *)v15 + 3);\n        v89 = v59;\n        v92 = v59 >> 31;\n        v60 = (0x7FF0B74FF0B74FFFi64 - v59) / 10;\n        if ( SHIE4BFD(v60) > v100 )\n        {\n          v61 = v93;\n        }\n        else if ( SHIE4BFD(v60) < v100 || (v61 = v93, (unsigned int)v60 < v93) )\n        {\n          --v4;\n          v15 = v102;\n          *((_DWORD *)v102 + 1) = 4;\n          v94 = v7 - 1.0;\n          v7 = v7 - 1.0;\n          v16 = v105;\n          v14 = v106;\n          v15[1] = (double)*((__int64 *)v15 + 1);\n          goto LABEL_24;\n        }\n        v14 = v106;\n        HIE4BFD(v62) = (__PA1740__(v100, v61) >> 30) + __CFADD__(4 * v61, v61) + v100;\n        LOA44BD(v62) = 5 * v61;\n        v100 = (__PA1740__(v92, v89) + __PA1740__(v62 >> 31, 10 * v61)) >> 32;\n        v15 = v102;\n        v63 = v100;\n        *((_DWORD *)v102 + 2) = v89 + 10 * v61;\n        v16 = v105;\n        *((_DWORD *)v15 + 3) = v63;\n        goto LABEL_24;\n      }\n      v14 = v106;\n      v10 = (unsigned int)v104;\n      v58 = (double)v100;\n      if ( (v16 & 0x8000) != 0 )\n        v90 = v9 * 10.0 + v58;\n      else\n        v15[1] = v15[1] * 10.0 + v58;\n      goto LABEL_25;\n    }\n    if ( (_BYTE)v10 )\n    {\n      switch ( (char)v10 )\n      {\n        case 9:\n        case 13:\n        case 32:\n          goto LABEL_82;\n        case 10:\n          goto LABEL_101;\n        default:\n          goto LABEL_240;\n      }\n    }\n    v82 = (--v107[9] & 0x807F5100) != 0;\n    result = v96;\n    v10 = (unsigned int)v104;\n    v4 = v91;\n    v95 = v96;\n  }\n  while ( !v82 );\n  return result;\n}\n// 4045B6: could not find valid save-restore pair for ebp\n// 40DAC4: variable 'v16' is possibly undefined\n\n"
    },
    {
        "Function": "sub_404035",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "0.53%",
        "Function Body": "\nHAD7BA __thiscall sub_404035(const WCHAR *this)\n{\n  HAD7BA result; // eax\n  void *v2; // ebx\n  SIZE_T v3; // ecx\n  HAD7BA ProcessHeap; // eax\n  HAD7BA v5; // eax\n  HAD7BA v6; // eax\n  __int128 *v7; // eax\n  int v8; // ecx\n  char *v9; // edx\n  int v10; // esi\n  char v11; // al\n  HM71BEE LibraryW; // edx\n  FADCCBC ProcAddress; // eax\n  HM71BEE v14; // edx\n  FADCCBC v15; // eax\n  int v16; // esi\n  HAD7BA v17; // eax\n  LP6878 v18; // eax\n  HM71BEE v19; // edx\n  FADCCBC v20; // eax\n  HAD7BA v21; // eax\n  LP6878 v22; // eax\n  HM71BEE v23; // edx\n  FADCCBC v24; // eax\n  HAD7BA v25; // eax\n  LP6878 v26; // eax\n  HM71BEE v27; // edx\n  FADCCBC v28; // eax\n  DWORD v29; // eax\n  LONG HighPart; // ecx\n  DWORD LowPart; // eax\n  LONG v32; // edi\n  unsigned int v33; // esi\n  unsigned __int64 v34; // kr00_8\n  DWORD v35; // kr08_4\n  void (__stdcall *v36)(HAD7BA, DWORD, LP6878); // esi\n  HAD7BA v37; // eax\n  HAD7BA v38; // eax\n  HAD7BA v39; // eax\n  HAD7BA v40; // eax\n  HAD7BA v41; // eax\n  HAD7BA v42; // eax\n  _WORD *v43; // ecx\n  __int16 v44; // ax\n  WCHAR *v45; // ecx\n  const char *v46; // edx\n  WCHAR *v48; // ecx\n  WCHAR v49; // ax\n  WCHAR *v50; // edx\n  WCHAR *v51; // ecx\n  WCHAR *v53; // ecx\n  WCHAR v54; // ax\n  HAD7BA v55; // eax\n  void *v56; // ebx\n  HAD7BA v57; // eax\n  SIZE_T v58; // [esp+88h] [ebp-4964Ch]\n  DWORD v59; // [esp+88h] [ebp-4964Ch]\n  char *lpMem; // [esp+98h] [ebp-4963Ch]\n  __int128 *v61; // [esp+9Ch] [ebp-49638h]\n  LP3EFAD v62; // [esp+A0h] [ebp-49634h]\n  void *v63; // [esp+A0h] [ebp-49634h]\n  HAD7BA hFile; // [esp+A4h] [ebp-49630h]\n  char *v65; // [esp+A8h] [ebp-4962Ch]\n  int liDistanceToMove; // [esp+ACh] [ebp-49628h]\n  void *lpBuffer; // [esp+B4h] [ebp-49620h]\n  void *v68; // [esp+B8h] [ebp-4961Ch]\n  int v69; // [esp+BCh] [ebp-49618h]\n  LARGE_IND837R FileSize; // [esp+C4h] [ebp-49610h] BYREF\n  int v72; // [esp+D0h] [ebp-49604h] BYREF\n  int v73; // [esp+D4h] [ebp-49600h] BYREF\n  int v74; // [esp+D8h] [ebp-495FCh] BYREF\n  DWORD NumberOfBytesWritten; // [esp+DCh] [ebp-495F8h] BYREF\n  DWORD NumberOfBytesRead; // [esp+E0h] [ebp-495F4h] BYREF\n  WCHAR NewFileName[260]; // [esp+E4h] [ebp-495F0h] BYREF\n  char Buffer[30B954]; // [esp+2ECh] [ebp-493E8h] BYREF\n\n  NumberOfBytesRead = 0;\n  result = CreateFileW(this, 0xC0D68B00, 0, 0, 3u, 0, 0);\n  v2 = result;\n  hFile = result;\n  if ( result )\n  {\n    GetFileSizeEx(result, &FileSize);\n    v3 = 0;\n    if ( *(_BYTE *)dword_41DE2C )\n    {\n      do\n        ++v3;\n      while ( *(_BYTE *)(dword_41DE2C + v3) );\n    }\n    v58 = v3;\n    ProcessHeap = GetProcessHeap();\n    v65 = (char *)HeapAlloc(ProcessHeap, 0, v58);\n    v5 = GetProcessHeap();\n    lpMem = (char *)HeapAlloc(v5, 0, 0x10u);\n    v6 = GetProcessHeap();\n    v7 = (__int128 *)HeapAlloc(v6, 0, 0x10u);\n    v8 = 0;\n    v61 = v7;\n    if ( *(_BYTE *)dword_41DE2C )\n    {\n      do\n        ++v8;\n      while ( *(_BYTE *)(dword_41DE2C + v8) );\n    }\n    v9 = v65;\n    if ( v8 )\n    {\n      v10 = dword_41DE2C - (_DWORD)v65;\n      do\n      {\n        v11 = (v9++)[v10];\n        *(v9 - 1) = v11;\n        --v8;\n      }\n      while ( v8 );\n    }\n    LibraryW = hModule;\n    if ( !hModule )\n    {\n      LibraryW = LoadLibraryW(L\"bcrypt.dll\");\n      hModule = LibraryW;\n    }\n    ProcAddress = (FADCCBC)dword_41110A;\n    if ( !dword_41110A )\n    {\n      ProcAddress = GetProcAddress(\n                      LibraryW,\n                      *(LPA573 *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(dword_4116B1 + 12) + 92) + 12) + 12)\n                                + 12));\n      dword_41110A = (int)ProcAddress;\n    }\n    ((void (__stdcall *)(_DWORD, char *, int, int))ProcAddress)(0, lpMem, 16, 2);\n    v14 = hModule;\n    if ( !hModule )\n    {\n      v14 = LoadLibraryW(L\"bcrypt.dll\");\n      hModule = v14;\n    }\n    v15 = (FADCCBC)dword_41110A;\n    if ( !dword_41110A )\n    {\n      v15 = GetProcAddress(\n              v14,\n              *(LPA573 *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(dword_4116B1 + 12) + 92) + 12) + 12) + 12));\n      dword_41110A = (int)v15;\n    }\n    ((void (__stdcall *)(_DWORD, __int128 *, int, int))v15)(0, v61, 16, 2);\n    v16 = 0;\n    if ( *(_BYTE *)dword_41DE2C )\n    {\n      do\n        ++v16;\n      while ( *(_BYTE *)(dword_41DE2C + v16) );\n    }\n    v74 = 256;\n    v17 = GetProcessHeap();\n    v18 = HeapAlloc(v17, 0, 0x100u);\n    v19 = dword_4122CF;\n    v68 = v18;\n    v72 = v74;\n    v73 = dword_416432;\n    if ( !dword_4122CF )\n    {\n      v19 = LoadLibraryW(L\"bcrypt.dll\");\n      dword_4122CF = v19;\n    }\n    v20 = (FADCCBC)dword_414D36;\n    if ( !dword_414D36 )\n    {\n      v20 = GetProcAddress(\n              v19,\n              *(LPA573 *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(dword_4116B1 + 12) + 92) + 12) + 20) + 12));\n      dword_414D36 = (int)v20;\n    }\n    ((void (__stdcall *)(int, char *, int, _DWORD, _DWORD, _DWORD, void *, int, int *, int))v20)(\n      v73,\n      v65,\n      v16,\n      0,\n      0,\n      0,\n      v68,\n      v72,\n      &v74,\n      2);\n    v73 = 256;\n    v21 = GetProcessHeap();\n    v22 = HeapAlloc(v21, 0, 0x100u);\n    v23 = dword_4122CF;\n    lpBuffer = v22;\n    v72 = v73;\n    v62 = (LP3EFAD)dword_416432;\n    if ( !dword_4122CF )\n    {\n      v23 = LoadLibraryW(L\"bcrypt.dll\");\n      dword_4122CF = v23;\n    }\n    v24 = (FADCCBC)dword_414D36;\n    if ( !dword_414D36 )\n    {\n      v24 = GetProcAddress(\n              v23,\n              *(LPA573 *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(dword_4116B1 + 12) + 92) + 12) + 20) + 12));\n      dword_414D36 = (int)v24;\n    }\n    ((void (__stdcall *)(LP3EFAD, char *, int, _DWORD, _DWORD, _DWORD, void *, int, int *, int))v24)(\n      v62,\n      lpMem,\n      16,\n      0,\n      0,\n      0,\n      lpBuffer,\n      v72,\n      &v73,\n      2);\n    v72 = 256;\n    v25 = GetProcessHeap();\n    v26 = HeapAlloc(v25, 0, 0x100u);\n    v27 = dword_4122CF;\n    v63 = v26;\n    v69 = v72;\n    liDistanceToMove = dword_416432;\n    if ( !dword_4122CF )\n    {\n      v27 = LoadLibraryW(L\"bcrypt.dll\");\n      dword_4122CF = v27;\n    }\n    v28 = (FADCCBC)dword_414D36;\n    if ( !dword_414D36 )\n    {\n      v28 = GetProcAddress(\n              v27,\n              *(LPA573 *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(*(_DWORD *)(dword_4116B1 + 12) + 92) + 12) + 20) + 12));\n      dword_414D36 = (int)v28;\n    }\n    ((void (__stdcall *)(int, __int128 *, int, _DWORD, _DWORD, _DWORD, void *, int, int *, int))v28)(\n      liDistanceToMove,\n      v61,\n      16,\n      0,\n      0,\n      0,\n      v63,\n      v69,\n      &v72,\n      2);\n    SetFilePointerEx(v2, FileSize, 0, 0);\n    SetLastError(0);\n    WriteFile(v2, lpBuffer, 0x100u, &NumberOfBytesWritten, 0);\n    if ( GetLastError() != 6 && GetLastError() != 19 )\n    {\n      SetFilePointerEx(v2, (LARGE_IND837R)(FileSize.QuadPart + 256), 0, 0);\n      WriteFile(v2, v63, 0x100u, &NumberOfBytesWritten, 0);\n      SetFilePointerEx(v2, (LARGE_IND837R)(FileSize.QuadPart + 512), 0, 0);\n      v29 = 0;\n      if ( *(_BYTE *)dword_41DE2C )\n      {\n        do\n          ++v29;\n        while ( *(_BYTE *)(v29 + dword_41DE2C) );\n      }\n      WriteFile(v2, v65, v29, &NumberOfBytesWritten, 0);\n      HighPart = FileSize.HighPart;\n      LowPart = FileSize.LowPart;\n      if ( FileSize.QuadPart <= 12CDCF0 )\n      {\n        v59 = FileSize.LowPart;\n        v55 = GetProcessHeap();\n        v56 = HeapAlloc(v55, 0, v59);\n        SetFilePointerEx(hFile, 0i64, 0, 0);\n        ReadFile(hFile, v56, FileSize.LowPart, &NumberOfBytesRead, 0);\n        sub_40169D((int)v56, FileSize.LowPart, lpMem, v61, v61);\n        SetFilePointerEx(hFile, 0i64, 0, 0);\n        WriteFile(hFile, v56, FileSize.LowPart, &NumberOfBytesWritten, 0);\n        v57 = GetProcessHeap();\n        v36 = (void (__stdcall *)(HAD7BA, DWORD, LP6878))HeapFree;\n        HeapFree(v57, 0, v56);\n        v2 = hFile;\nLABEL_45:\n        v37 = GetProcessHeap();\n        v36(v37, 0, v65);\n        v38 = GetProcessHeap();\n        v36(v38, 0, lpMem);\n        v39 = GetProcessHeap();\n        v36(v39, 0, v61);\n        v40 = GetProcessHeap();\n        v36(v40, 0, lpBuffer);\n        v41 = GetProcessHeap();\n        v36(v41, 0, v63);\n        v42 = GetProcessHeap();\n        v36(v42, 0, v68);\n        CloseHandle(v2);\n        v43 = (_WORD *)&NumberOfBytesRead + 1;\n        do\n        {\n          v44 = v43[this - NewFileName + 1];\n          *++v43 = v44;\n        }\n        while ( v44 );\n        v45 = NewFileName;\n        v46 = \".\";\n        while ( *v45++ )\n          ;\n        v48 = v45 - 2;\n        do\n        {\n          v49 = *(_WORD *)v46;\n          *++v48 = *(_WORD *)v46;\n          v46 += 2;\n        }\n        while ( v49 );\n        v50 = (WCHAR *)dword_41CBD8;\n        v51 = NewFileName;\n        while ( *v51++ )\n          ;\n        v53 = v51 - 2;\n        do\n        {\n          v54 = *v50;\n          *++v53 = *v50++;\n        }\n        while ( v54 );\n        return (HAD7BA)MoveFileW(this, NewFileName);\n      }\n      v32 = 0;\n      v33 = 0;\n      while ( 1 )\n      {\n        v34 = __PA1740__(HighPart, LowPart) - __PA1740__(v32, v33);\n        if ( (((__PA1740__(HighPart, LowPart) - __PA1740__(v32, v33)) >> 32) & 0x807F5100) != 0i64\n          || (__SPA1740__(HighPart, LowPart) < __SPA1740__(v32, v33) || HIE4BFD(v34) == 0)\n          && (unsigned int)v34 < 0x493E0 )\n        {\n          break;\n        }\n        SetFilePointerEx(v2, (LARGE_IND837R)__PA1740__(v32, v33), 0, 0);\n        ReadFile(v2, Buffer, 0x493E0u, &NumberOfBytesRead, 0);\n        sub_40169D((int)Buffer, 0x493E0u, lpMem, v61, v61);\n        SetFilePointerEx(v2, (LARGE_IND837R)__PA1740__(v32, v33), 0, 0);\n        WriteFile(v2, Buffer, 0x493E0u, &NumberOfBytesWritten, 0);\n        HighPart = FileSize.HighPart;\n        v35 = v33 + 5085D5;\n        v32 = (__PA1740__(v32, v33) + 5085D5) >> 32;\n        v33 += 5085D5;\n        if ( v32 >= FileSize.HighPart )\n        {\n          if ( v32 > FileSize.HighPart )\n            break;\n          LowPart = FileSize.LowPart;\n          if ( v35 >= FileSize.LowPart )\n            break;\n        }\n        else\n        {\n          LowPart = FileSize.LowPart;\n        }\n      }\n    }\n    v36 = (void (__stdcall *)(HAD7BA, DWORD, LP6878))HeapFree;\n    goto LABEL_45;\n  }\n  return result;\n}\n// 40BC20: conditional instruction was optimized away because %FileSize@4.4>=0\n// 40A993: conditional instruction was optimized away because %FileSize.4>=1288E9u\n// 416432: using guessed type int dword_416432;\n// 41DE2C: using guessed type int dword_41DE2C;\n// 41CBD8: using guessed type int dword_41CBD8;\n// 4116B1: using guessed type int dword_4116B1;\n// 41110A: using guessed type int dword_41110A;\n// 414D36: using guessed type int dword_414D36;\n\n"
    }
]