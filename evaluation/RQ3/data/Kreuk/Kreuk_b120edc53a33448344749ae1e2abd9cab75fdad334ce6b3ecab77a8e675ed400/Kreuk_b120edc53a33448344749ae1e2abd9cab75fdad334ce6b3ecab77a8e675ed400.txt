[
    {
        "Function": "sub_40E2CB",
        "Total XOR and shift operations": 134,
        "XOR operations": 46,
        "Shift operations": 88,
        "Operation percentage": "50.76%",
        "Function Body": "\nint __thiscall sub_40E2CB(_DWORD *this, int a2)\n{\n  int v3; // edx\n  int v4; // eax\n  unsigned __int64 v5; // kr00_8\n  int v6; // eax\n  unsigned __int64 v7; // kr08_8\n  int v8; // ecx\n  unsigned __int64 v9; // kr10_8\n  int v10; // edx\n  unsigned int v11; // eax\n  int v12; // edi\n  unsigned int v13; // ecx\n  int v14; // eax\n  unsigned int v15; // edx\n  int v16; // ecx\n  unsigned int v17; // edi\n  int v18; // edx\n  unsigned int v19; // eax\n  int v20; // edi\n  unsigned int v21; // ecx\n  int v22; // eax\n  unsigned int v23; // edx\n  int v24; // ecx\n  unsigned int v25; // edi\n  int v26; // edx\n  unsigned int v27; // eax\n  int v28; // edi\n  int v29; // eax\n  unsigned int v30; // ecx\n  int v31; // ebx\n  unsigned int v32; // edx\n  int v33; // ecx\n  unsigned int v34; // edi\n  int v35; // edx\n  unsigned int v36; // eax\n  int v37; // edi\n  unsigned int v38; // ebx\n  int v39; // eax\n  int v40; // ebx\n  int v41; // eax\n  int v42; // ecx\n  int v43; // ecx\n  unsigned int v44; // edi\n  int v45; // edx\n  unsigned int v46; // ebx\n  int v47; // edi\n  unsigned int v48; // ecx\n  int v49; // eax\n  unsigned int v50; // edx\n  int v51; // ecx\n  __int64 v52; // kr18_8\n  unsigned int v53; // edx\n  unsigned int v54; // eax\n  unsigned int v55; // edi\n  unsigned int v56; // ecx\n  unsigned int v57; // eax\n  __int64 v58; // kr20_8\n  int v59; // ecx\n  unsigned int v60; // edx\n  int v61; // ebx\n  unsigned int v62; // edx\n  int v63; // edi\n  unsigned int v64; // eax\n  int v65; // edx\n  unsigned int v66; // ecx\n  int v67; // eax\n  unsigned int v68; // ebx\n  unsigned int v69; // ebp\n  unsigned int v70; // edi\n  unsigned int v71; // ebx\n  unsigned int v72; // edx\n  unsigned int v73; // ecx\n  unsigned int v74; // eax\n  unsigned int v75; // ebp\n  unsigned int v76; // edi\n  unsigned int v77; // ebx\n  unsigned int v78; // ecx\n  unsigned int v79; // eax\n  unsigned int v80; // edx\n  unsigned int v81; // edi\n  unsigned int v82; // ebx\n  unsigned int v83; // ecx\n  unsigned int v84; // edx\n  unsigned int v85; // eax\n  int v86; // ecx\n  int v87; // edx\n  int v88; // edi\n  int v89; // eax\n  int result; // eax\n  int v91; // [esp+10h] [ebp-50h] BYREF\n  int v92; // [esp+14h] [ebp-4Ch] BYREF\n  int v93; // [esp+18h] [ebp-48h] BYREF\n  int v94; // [esp+1Ch] [ebp-44h] BYREF\n  int v95; // [esp+20h] [ebp-40h] BYREF\n  int v96; // [esp+24h] [ebp-3Ch]\n  int v97; // [esp+28h] [ebp-38h]\n  int v98; // [esp+2Ch] [ebp-34h]\n  int v99; // [esp+30h] [ebp-30h]\n  int v100; // [esp+34h] [ebp-2Ch]\n  int v101; // [esp+38h] [ebp-28h]\n  int v102; // [esp+3Ch] [ebp-24h]\n  int v103; // [esp+40h] [ebp-20h]\n  int v104; // [esp+44h] [ebp-1Ch]\n  int v105; // [esp+48h] [ebp-18h]\n  int v106; // [esp+4Ch] [ebp-14h]\n  int v107; // [esp+50h] [ebp-10h]\n  int v108; // [esp+54h] [ebp-Ch]\n  int v109; // [esp+58h] [ebp-8h]\n  int v110; // [esp+5Ch] [ebp-4h]\n\n  v3 = this[21];\n  v4 = this[19];\n  v92 = this[20];\n  v93 = v3;\n  v91 = v4;\n  v94 = this[22];\n  sub_4007A1((int)&v95, a2, 0x40u);\n  v5 = (unsigned __int64)(v91 + v95 + (v92 & v93 | v94 & (unsigned int)~v92) - 6805C1936) << 7;\n  v6 = v92 + (v5 | HI7134D(v5));\n  v7 = (unsigned __int64)(v94 + v96 + (v6 & v92 | v93 & (unsigned int)~v6) - 38A35E586) << 12;\n  v8 = v6 + (v7 | HI7134D(v7));\n  v9 = (unsigned __int64)(v93 + v97 + (v6 & v8 | v92 & (unsigned int)~v8) + 60A678819) << 17;\n  v10 = v8 + (v9 | HI7134D(v9));\n  v92 = v10\n      + (((v92 + v98 + (v10 & v8 | v6 & (unsigned int)~v10) - 1077085330) >> 10) | ((v92\n                                                                                   + v98\n                                                                                   + (v10 & v8 | v6 & ~v10)\n                                                                                   - 1077085330) << 22));\n  v11 = v6 + v99 + (v92 & v10 | v8 & ~v92) - 173BAB897;\n  v12 = v92 + ((v11 << 7) | (v11 >> 25));\n  v13 = v8 + v100 + (v12 & v92 | v10 & ~v12) + 1226BF0426;\n  v14 = v12 + ((v13 << 12) | (v13 >> 20));\n  v15 = v10 + v101 + (v12 & v14 | v92 & ~v14) - 14F4281341;\n  v16 = v14 + ((v15 << 17) | (v15 >> 15));\n  v92 = v16\n      + (((v92 + v102 + (v16 & v14 | v12 & (unsigned int)~v16) - 45744A83) >> 10) | ((v92\n                                                                                    + v102\n                                                                                    + (v16 & v14 | v12 & ~v16)\n                                                                                    - 45744A83) << 22));\n  v17 = v12 + v103 + (v92 & v16 | v14 & ~v92) + 1767425416;\n  v18 = v92 + ((v17 << 7) | (v17 >> 25));\n  v19 = v14 + v104 + (v18 & v92 | v16 & ~v18) - 19F9F14417;\n  v20 = v18 + ((v19 << 12) | (v19 >> 20));\n  v21 = v16 + v105 + (v18 & v20 | v92 & ~v20) - 42063;\n  v22 = v20 + ((v21 << 17) | (v21 >> 15));\n  v92 = v22\n      + (((v92 + v106 + (v22 & v20 | v18 & (unsigned int)~v22) - 19705F4162) >> 10) | ((v92\n                                                                                      + v106\n                                                                                      + (v22 & v20 | v18 & ~v22)\n                                                                                      - 19705F4162) << 22));\n  v23 = v18 + v107 + (v92 & v22 | v20 & ~v92) + 18DC893682;\n  v24 = v92 + ((v23 << 7) | (v23 >> 25));\n  v25 = v20 + v108 + (v24 & v92 | v22 & ~v24) - 408C9401;\n  v26 = v24 + ((v25 << 12) | (v25 >> 20));\n  v27 = v22 + v109 + (v24 & v26 | v92 & ~v26) - 15D0B72290;\n  v28 = v26 + ((v27 << 17) | (v27 >> 15));\n  v29 = v28\n      + (((v110 + (v28 & v26 | v24 & (unsigned int)~v28) + v92 + 1247965329) >> 10) | ((v110\n                                                                                      + (v28 & v26 | v24 & ~v28)\n                                                                                      + v92\n                                                                                      + 1247965329) << 22));\n  v30 = v24 + v96 + (v29 & v26 | v28 & ~v26) - 16621C510;\n  v31 = v29 + ((32 * v30) | (v30 >> 27));\n  v32 = v26 + v101 + (v31 & v28 | v29 & ~v28) - 1046731632;\n  v33 = v31 + ((v32 << 9) | (v32 >> 23));\n  v34 = v28 + v106 + (v29 & v33 | v31 & ~v29) + 64F811713;\n  v35 = v33 + ((v34 << 14) | (v34 >> 18));\n  v36 = v29 + v95 + (v31 & v35 | v33 & ~v31) - 37E23A302;\n  v37 = v35 + ((v36 >> 12) | (v36 << 20));\n  v38 = v31 + v100 + (v37 & v33 | v35 & ~v33) - 701CED691;\n  v39 = v105 + ((v37 + ((32 * v38) | (v38 >> 27))) & v35 | v37 & ~v35);\n  v40 = v37 + ((32 * v38) | (v38 >> 27));\n  v41 = v40 + (((v33 + v39 + 38E31D83) << 9) | ((unsigned int)(v33 + v39 + 38E31D83) >> 23));\n  v42 = v110 + (v37 & v41 | v40 & ~v37);\n  v43 = v41 + (((v35 + v42 - 665AD7335) << 14) | ((unsigned int)(v35 + v42 - 665AD7335) >> 18));\n  v44 = v37 + v99 + (v40 & v43 | v41 & ~v40) - 40F1D1848;\n  v45 = v43 + ((v44 >> 12) | (v44 << 20));\n  v46 = v40 + v104 + (v45 & v41 | v43 & ~v41) + 568EC8438;\n  v91 = v45 + ((32 * v46) | (v46 >> 27));\n  v47 = v91\n      + (((v41 + v109 + (v91 & v43 | v45 & ~v43) - 105ED83690) << 9) | ((v41\n                                                                       + v109\n                                                                       + (v91 & v43 | v45 & (unsigned int)~v43)\n                                                                       - 105ED83690) >> 23));\n  v48 = v43 + v98 + (v45 & v47 | v91 & ~v45) - 185FB5961;\n  v49 = v47 + ((v48 << 14) | (v48 >> 18));\n  v50 = v45 + v103 + (v91 & v49 | v47 & ~v91) + 1142041501;\n  v51 = v49 + ((v50 >> 12) | (v50 << 20));\n  v52 = 32i64 * (v91 + v108 + (v51 & v47 | v49 & (unsigned int)~v47) - 14DC5E1467);\n  v91 = v51 + (v52 | HI7134D(v52));\n  v53 = v91\n      + (((v47 + v97 + (v91 & v49 | v51 & ~v49) - 51001184) << 9) | ((v47\n                                                                    + v97\n                                                                    + (v91 & v49 | v51 & (unsigned int)~v49)\n                                                                    - 51001184) >> 23));\n  v54 = v49 + v102 + (v51 & v53 | v91 & ~v51) + 17C50A8473;\n  v55 = v53 + ((v54 << 14) | (v54 >> 18));\n  v56 = v51 + v107 + (v91 & v55 | v53 & ~v91) - 1958C57734;\n  v57 = v55 + ((v56 >> 12) | (v56 << 20));\n  v58 = 16i64 * (v91 + v100 + (v57 ^ v55 ^ v53) - 376407);\n  v59 = v57 + (v58 | HI7134D(v58));\n  v60 = v53 + v103 + (v59 ^ v57 ^ v55) - 206B184463;\n  v61 = v59 + ((v60 << 11) | (v60 >> 21));\n  v62 = v55 + v106 + (v59 ^ v57 ^ v61) + 18B7CC0562;\n  v63 = v61 + ((v62 << 16) | HIEE01(v62));\n  v64 = v57 + v109 + (v59 ^ v63 ^ v61) - 3544D556;\n  v65 = v63 + ((v64 >> 9) | (v64 << 23));\n  v66 = v59 + v96 + (v65 ^ v63 ^ v61) - 1590342060;\n  v67 = v65 + ((16 * v66) | (v66 >> 28));\n  v68 = v61 + v99 + (v67 ^ v65 ^ v63) + 123FD43353;\n  v69 = v67 + ((v68 << 11) | (v68 >> 21));\n  v70 = v63 + v102 + (v67 ^ v65 ^ v69) - 15CE3A632;\n  v71 = v69 + ((v70 << 16) | HIEE01(v70));\n  v72 = v65 + v105 + (v67 ^ v71 ^ v69) - 105F100640;\n  v73 = v71 + ((v72 >> 9) | (v72 << 23));\n  v74 = v73\n      + ((16 * (v67 + v108 + (v73 ^ v71 ^ v69) + 68DDC8174)) | ((v67 + v108 + (v73 ^ v71 ^ v69) + 68DDC8174) >> 28));\n  v75 = v95 + (v74 ^ v73 ^ v71) + v69 - 350C1D222;\n  v76 = v74 + ((v75 << 11) | (v75 >> 21));\n  v77 = v76\n      + (((v71 + v98 + (v74 ^ v73 ^ v76) - 722F8C979) << 16) | ((v71 + v98 + (v74 ^ v73 ^ v76) - 722F8C979) >> 16));\n  v78 = v77 + (((v73 + v101 + (v74 ^ v77 ^ v76) + 76E08089) >> 9) | ((v73 + v101 + (v74 ^ v77 ^ v76) + 76E08089) << 23));\n  v79 = v74 + v104 + (v78 ^ v77 ^ v76) - 64DE7A487;\n  v80 = v78 + ((16 * v79) | (v79 >> 28));\n  v81 = v80\n      + (((v76 + v107 + (v80 ^ v78 ^ v77) - 42EA49835) << 11) | ((v76 + v107 + (v80 ^ v78 ^ v77) - 42EA49835) >> 21));\n  v82 = v81\n      + (((v77 + v110 + (v80 ^ v78 ^ v81) + 53F28E520) << 16) | ((v77 + v110 + (v80 ^ v78 ^ v81) + 53F28E520) >> 16));\n  v83 = v78 + v97 + (v80 ^ v82 ^ v81) - 9926F9651;\n  v92 = v82 + ((v83 >> 9) | (v83 << 23));\n  v84 = v80 + v95 + (v82 ^ (v92 | ~v81)) - 19B768844;\n  v91 = v92 + ((v84 << 6) | (v84 >> 26));\n  v94 = v91\n      + (((v81 + v102 + (v92 ^ (v91 | ~v82)) + 11A3A01415) << 10) | ((v81 + v102 + (v92 ^ (v91 | ~v82)) + 11A3A01415) >> 22));\n  v85 = v82 + v109 + (v91 ^ (v94 | ~v92)) - 14EC1E4905;\n  v93 = v94 + ((v85 << 15) | (v85 >> 17));\n  sub_403043(&v92, v93, v94, v91, v100, 21, -57F81D55);\n  sub_403043(&v91, v92, v93, v94, v107, 6, 17B9545571);\n  sub_403043(&v94, v91, v92, v93, v98, 10, -1868EA6606);\n  sub_403043(&v93, v94, v91, v92, v105, 15, -10B3C23);\n  sub_403043(&v92, v93, v94, v91, v96, 21, -201D3E2799);\n  sub_403043(&v91, v92, v93, v94, v103, 6, 18175E3359);\n  sub_403043(&v94, v91, v92, v93, v110, 10, -30727544);\n  sub_403043(&v93, v94, v91, v92, v101, 15, -1557F78380);\n  sub_403043(&v92, v93, v94, v91, v108, 21, 134AEC1649);\n  sub_403043(&v91, v92, v93, v94, v99, 6, -14983A070);\n  sub_403043(&v94, v91, v92, v93, v106, 10, -119B7A0379);\n  sub_403043(&v93, v94, v91, v92, v97, 15, 7187D1259);\n  sub_403043(&v92, v93, v94, v91, v104, 21, -34B40D551);\n  v86 = v93;\n  v87 = this[21];\n  v88 = v92 + this[20];\n  this[19] += v91;\n  this[20] = v88;\n  v89 = this[22];\n  this[21] = v86 + v87;\n  result = v94 + v89;\n  this[22] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_41A28C",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "21.88%",
        "Function Body": "\nCArchive *__stdcall sub_41A28C(CArchive *a1, const void **a2)\n{\n  int v2; // edx\n\n  v2 = *((_DWORD *)*a2 - 2);\n  if ( v2 >= 255 )\n  {\n    if ( v2 >= 65534 )\n    {\n      CArchive::operator<<(255);\n      CArchive::operator<<(0xFFFF);\n      sub_40A0B1(*((_DWORD *)*a2 - 2));\n    }\n    else\n    {\n      CArchive::operator<<(255);\n      CArchive::operator<<(*((_WORD *)*a2 - 4));\n    }\n  }\n  else\n  {\n    CArchive::operator<<(*((_DWORD *)*a2 - 2));\n  }\n  CArchive::Write(a1, *a2, *((_DWORD *)*a2 - 2));\n  return a1;\n}\n// 40EDBB: using guessed type _DWORD __stdcall CArchive::operator<<(char);\n// 40B951: using guessed type _DWORD __stdcall CArchive::operator<<(__int16);\n// 40A0B1: using guessed type _DWORD __stdcall sub_40A0B1(_DWORD);\n\n"
    },
    {
        "Function": "sub_403043",
        "Total XOR and shift operations": 2,
        "XOR operations": 1,
        "Shift operations": 1,
        "Operation percentage": "14.29%",
        "Function Body": "\nint __stdcall sub_403043(int *a1, int a2, int a3, int a4, int a5, char a6, int a7)\n{\n  int v7; // ecx\n  int result; // eax\n\n  v7 = a7 + a5 + (a3 ^ (a2 | ~a4)) + *a1;\n  *a1 = v7;\n  result = v7 << a6;\n  *a1 = a2 + __ROL4__(v7, a6);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_400F0E",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "11.54%",
        "Function Body": "\nvoid __stdcall __noreturn sub_400F0E(int a1)\n{\n  DWORD v1; // eax\n  LONG Bias; // ecx\n  unsigned int v3; // edx\n  char v4[4]; // [esp+20h] [ebp-D4h] BYREF\n  int v5[4]; // [esp+28h] [ebp-CCh] BYREF\n  struct _TIME_ZONE_IN135BATION TimeZoneInformation; // [esp+3Ch] [ebp-B8h] BYREF\n  int v7; // [esp+F0h] [ebp-4h]\n\n  v5[3] = 0;\n  v1 = GetTimeZoneInformation(&TimeZoneInformation);\n  Bias = TimeZoneInformation.Bias;\n  if ( v1 == 2 )\n    Bias = TimeZoneInformation.DaylightBias + TimeZoneInformation.Bias;\n  v5[0] = (int)off_42CF51;\n  v7 = 1;\n  v3 = (int)(((unsigned __int64)(20174E8071i64 * Bias) >> 32) - Bias) >> 5;\n  sub_414130((CString *)v5, a2d2d, (v3 >> 31) + v3);\n  ((void (__stdcall __noreturn *)(char *))loc_41E904)(v4);\n}\n// 42CF51: using guessed type void *off_42CF51;\n// 400F0E: using guessed type char var_D4[4];\n\n"
    },
    {
        "Function": "sub_40A0F1",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "10.53%",
        "Function Body": "\nunsigned int __cdecl sub_40A0F1(unsigned int a1, int a2)\n{\n  unsigned int v4; // eax\n  int v5; // esi\n\n  v4 = 0;\n  do\n  {\n    v5 = a1 & 1;\n    a1 >>= 1;\n    v4 = 2 * (v5 | v4);\n    --a2;\n  }\n  while ( a2 > 0 );\n  return v4 >> 1;\n}\n\n"
    },
    {
        "Function": "sub_409DF7",
        "Total XOR and shift operations": 12,
        "XOR operations": 0,
        "Shift operations": 12,
        "Operation percentage": "9.45%",
        "Function Body": "\nint __cdecl sub_409DF7(int a1, int a2, int a3, int a4)\n{\n  int v4; // ecx\n  int v5; // edx\n  int v6; // ecx\n  int v7; // edi\n  int v8; // ecx\n  int v9; // edx\n  int v10; // ecx\n  int v11; // edx\n  int v12; // ecx\n  int v13; // edi\n  int v14; // ecx\n  int v15; // edx\n  int v16; // ecx\n  int v17; // eax\n  int v18; // edx\n  int v19; // ecx\n  int v20; // edi\n  int v21; // edx\n  int v22; // edx\n  int i; // edi\n  int v24; // ecx\n  unsigned __int16 v25; // ax\n  int v26; // edx\n  int v27; // ecx\n  int v28; // ebx\n  int v29; // edx\n  int v30; // edx\n\n  v4 = *(_DWORD *)(a1 + 5812);\n  if ( v4 <= 11 )\n  {\n    *(_WORD *)(a1 + 5808) |= (a2 - 257) << v4;\n    *(_DWORD *)(a1 + 5812) = v4 + 5;\n  }\n  else\n  {\n    v5 = (a2 - 257) << v4;\n    v6 = *(_DWORD *)(a1 + 20);\n    *(_WORD *)(a1 + 5808) |= v5;\n    *(_BYTE *)(v6 + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5808);\n    v7 = *(_DWORD *)(a1 + 8);\n    LOBCD5(v5) = *(_BYTE *)(a1 + 5809);\n    v8 = *(_DWORD *)(a1 + 20) + 1;\n    *(_DWORD *)(a1 + 20) = v8;\n    *(_BYTE *)(v8 + v7) = v5;\n    v9 = *(_DWORD *)(a1 + 5812);\n    ++*(_DWORD *)(a1 + 20);\n    *(_DWORD *)(a1 + 5812) = v9 - 11;\n    *(_WORD *)(a1 + 5808) = (unsigned __int16)(a2 - 257) >> (16 - v9);\n  }\n  v10 = *(_DWORD *)(a1 + 5812);\n  if ( v10 <= 11 )\n  {\n    *(_WORD *)(a1 + 5808) |= (a3 - 1) << v10;\n    *(_DWORD *)(a1 + 5812) = v10 + 5;\n  }\n  else\n  {\n    v11 = (a3 - 1) << v10;\n    v12 = *(_DWORD *)(a1 + 20);\n    *(_WORD *)(a1 + 5808) |= v11;\n    *(_BYTE *)(v12 + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5808);\n    v13 = *(_DWORD *)(a1 + 8);\n    LOBCD5(v11) = *(_BYTE *)(a1 + 5809);\n    v14 = *(_DWORD *)(a1 + 20) + 1;\n    *(_DWORD *)(a1 + 20) = v14;\n    *(_BYTE *)(v14 + v13) = v11;\n    v15 = *(_DWORD *)(a1 + 5812);\n    ++*(_DWORD *)(a1 + 20);\n    *(_DWORD *)(a1 + 5812) = v15 - 11;\n    *(_WORD *)(a1 + 5808) = (unsigned __int16)(a3 - 1) >> (16 - v15);\n  }\n  v16 = *(_DWORD *)(a1 + 5812);\n  v17 = a4 - 4;\n  if ( v16 <= 12 )\n  {\n    *(_WORD *)(a1 + 5808) |= v17 << v16;\n    *(_DWORD *)(a1 + 5812) = v16 + 4;\n  }\n  else\n  {\n    v18 = v17 << v16;\n    v19 = *(_DWORD *)(a1 + 20);\n    *(_WORD *)(a1 + 5808) |= v18;\n    *(_BYTE *)(v19 + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5808);\n    v20 = *(_DWORD *)(a1 + 8);\n    v21 = *(_DWORD *)(a1 + 20) + 1;\n    *(_DWORD *)(a1 + 20) = v21;\n    *(_BYTE *)(v21 + v20) = *(_BYTE *)(a1 + 5809);\n    v22 = *(_DWORD *)(a1 + 5812);\n    ++*(_DWORD *)(a1 + 20);\n    *(_DWORD *)(a1 + 5812) = v22 - 12;\n    *(_WORD *)(a1 + 5808) = (unsigned __int16)v17 >> (16 - v22);\n  }\n  for ( i = 0; i < a4; ++i )\n  {\n    v24 = *(_DWORD *)(a1 + 5812);\n    if ( v24 <= 13 )\n    {\n      *(_WORD *)(a1 + 5808) |= *(_WORD *)(a1 + 4 * (unsigned __int8)byte_41A605[i] + 2678) << v24;\n      *(_DWORD *)(a1 + 5812) = v24 + 3;\n    }\n    else\n    {\n      v25 = *(_WORD *)(a1 + 4 * (unsigned __int8)byte_41A605[i] + 2678);\n      v26 = v25 << v24;\n      v27 = *(_DWORD *)(a1 + 20);\n      *(_WORD *)(a1 + 5808) |= v26;\n      *(_BYTE *)(v27 + *(_DWORD *)(a1 + 8)) = *(_BYTE *)(a1 + 5808);\n      v28 = *(_DWORD *)(a1 + 8);\n      v29 = *(_DWORD *)(a1 + 20) + 1;\n      *(_DWORD *)(a1 + 20) = v29;\n      *(_BYTE *)(v29 + v28) = *(_BYTE *)(a1 + 5809);\n      v30 = *(_DWORD *)(a1 + 5812);\n      ++*(_DWORD *)(a1 + 20);\n      *(_DWORD *)(a1 + 5812) = v30 - 13;\n      *(_WORD *)(a1 + 5808) = v25 >> (16 - v30);\n    }\n  }\n  sub_40E228(a1, a1 + 140, a2 - 1);\n  return sub_40E228(a1, a1 + 2432, a3 - 1);\n}\n\n"
    },
    {
        "Function": "sub_4007A1",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "8.70%",
        "Function Body": "\nvoid __stdcall sub_4007A1(int a1, int a2, unsigned int a3)\n{\n  unsigned __int16 *v4; // eax\n  unsigned __int16 v5; // cx\n  int v6; // edx\n\n  if ( a3 )\n  {\n    v4 = (unsigned __int16 *)(a2 + 2);\n    do\n    {\n      v5 = *v4;\n      v6 = *((unsigned __int8 *)v4 - 1);\n      v4 += 2;\n      a1 += 4;\n      *(_DWORD *)(a1 - 4) = *((unsigned __int8 *)v4 - 6) | ((v6 | (v5 << 8)) << 8);\n    }\n    while ( (unsigned int)v4 - 2 - a2 < a3 );\n  }\n}\n\n"
    },
    {
        "Function": "sub_40B8CB",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "8.33%",
        "Function Body": "\n_BYTE *__cdecl sub_40B8CB(int a1, _BYTE *a2, int a3, int a4)\n{\n  int v4; // ecx\n  int v5; // esi\n  int v6; // ecx\n  int v7; // edi\n  int v8; // esi\n  int v9; // esi\n\n  v4 = *(_DWORD *)(a1 + 5812);\n  if ( v4 <= 13 )\n  {\n    *(_WORD *)(a1 + 5808) |= a4 << v4;\n    *(_DWORD *)(a1 + 5812) = v4 + 3;\n  }\n  else\n  {\n    v5 = a4 << v4;\n    v6 = *(_DWORD *)(a1 + 8);\n    *(_WORD *)(a1 + 5808) |= v5;\n    *(_BYTE *)(v6 + *(_DWORD *)(a1 + 20)) = *(_BYTE *)(a1 + 5808);\n    v7 = *(_DWORD *)(a1 + 8);\n    LOBCD5(v6) = *(_BYTE *)(a1 + 5809);\n    v8 = *(_DWORD *)(a1 + 20) + 1;\n    *(_DWORD *)(a1 + 20) = v8;\n    *(_BYTE *)(v7 + v8) = v6;\n    v9 = *(_DWORD *)(a1 + 5812);\n    ++*(_DWORD *)(a1 + 20);\n    *(_DWORD *)(a1 + 5812) = v9 - 13;\n    *(_WORD *)(a1 + 5808) = (unsigned __int16)a4 >> (16 - v9);\n  }\n  return sub_404B1F((_DWORD *)a1, a2, a3, 1);\n}\n\n"
    },
    {
        "Function": "sub_41A638",
        "Total XOR and shift operations": 15,
        "XOR operations": 0,
        "Shift operations": 15,
        "Operation percentage": "8.24%",
        "Function Body": "\n_DWORD *__cdecl sub_41A638(_DWORD *a1, int a2)\n{\n  _DWORD *result; // eax\n  int *v3; // esi\n  unsigned int v4; // edi\n  int v5; // ecx\n  char *v6; // ebx\n  unsigned int v7; // edx\n  _BYTE *v8; // ecx\n  unsigned int v9; // ebx\n  bool v10; // zf\n  _BYTE *v11; // ecx\n  unsigned int v12; // ebx\n  unsigned int v13; // edx\n  unsigned int v14; // ebx\n  unsigned int v15; // esi\n  unsigned int v16; // esi\n  _DWORD *v17; // ecx\n  LP57DC *v18; // eax\n  _DWORD *v19; // [esp+Ch] [ebp-10h]\n  int v20; // [esp+10h] [ebp-Ch]\n  int v21; // [esp+14h] [ebp-8h]\n  int v22; // [esp+18h] [ebp-4h]\n  char *v23; // [esp+28h] [ebp+Ch]\n  int *v24; // [esp+28h] [ebp+Ch]\n  char v25; // [esp+2Bh] [ebp+Fh]\n\n  result = (_DWORD *)a1[4];\n  v3 = (int *)(a2 - 4);\n  v4 = (unsigned int)(a2 - a1[3]) >> 15;\n  v19 = &result[129 * v4 + 81];\n  v5 = *(_DWORD *)(a2 - 4) - 1;\n  v22 = v5;\n  if ( (v5 & 1) == 0 )\n  {\n    v6 = (char *)v3 + v5;\n    v20 = *(int *)((char *)v3 + v5);\n    v21 = *(_DWORD *)(a2 - 8);\n    v23 = (char *)v3 + v5;\n    if ( (v20 & 1) == 0 )\n    {\n      v7 = (v20 >> 4) - 1;\n      if ( v7 > 0x3F )\n        v7 = 63;\n      if ( *((_DWORD *)v6 + 1) == *((_DWORD *)v6 + 2) )\n      {\n        if ( v7 >= 0x20 )\n        {\n          v11 = (char *)result + v7 + 4;\n          v12 = ~(0x80C41E00 >> (v7 - 32));\n          result[v4 + 49] &= v12;\n          v10 = (*v11)-- == 1;\n          if ( v10 )\n            a1[1] &= v12;\n        }\n        else\n        {\n          v8 = (char *)result + v7 + 4;\n          v9 = ~(0x80C41E00 >> v7);\n          result[v4 + 17] &= v9;\n          v10 = (*v8)-- == 1;\n          if ( v10 )\n            *a1 &= v9;\n        }\n        v5 = v22;\n        v6 = v23;\n      }\n      v5 += v20;\n      *(_DWORD *)(*((_DWORD *)v6 + 2) + 4) = *((_DWORD *)v6 + 1);\n      v22 = v5;\n      *(_DWORD *)(*((_DWORD *)v23 + 1) + 8) = *((_DWORD *)v23 + 2);\n    }\n    v13 = (v5 >> 4) - 1;\n    if ( v13 > 0x3F )\n      v13 = 63;\n    if ( (v21 & 1) != 0 )\n    {\n      v14 = (unsigned int)a1;\n    }\n    else\n    {\n      v24 = (int *)((char *)v3 - v21);\n      v14 = (v21 >> 4) - 1;\n      if ( v14 > 0x3F )\n        v14 = 63;\n      v22 = v21 + v5;\n      v13 = ((v21 + v5) >> 4) - 1;\n      if ( v13 > 0x3F )\n        v13 = 63;\n      if ( v14 != v13 )\n      {\n        if ( v24[1] == v24[2] )\n        {\n          if ( v14 >= 0x20 )\n          {\n            v16 = ~(0x80C41E00 >> (v14 - 32));\n            result[v4 + 49] &= v16;\n            v10 = (*((_BYTE *)result + v14 + 4))-- == 1;\n            if ( v10 )\n              a1[1] &= v16;\n          }\n          else\n          {\n            v15 = ~(0x80C41E00 >> v14);\n            result[v4 + 17] &= v15;\n            v10 = (*((_BYTE *)result + v14 + 4))-- == 1;\n            if ( v10 )\n              *a1 &= v15;\n          }\n        }\n        *(_DWORD *)(v24[2] + 4) = v24[1];\n        *(_DWORD *)(v24[1] + 8) = v24[2];\n      }\n      v3 = v24;\n    }\n    if ( (v21 & 1) != 0 || v14 != v13 )\n    {\n      v17 = &v19[2 * v13];\n      v3[1] = v17[1];\n      v3[2] = (int)v17;\n      v17[1] = v3;\n      *(_DWORD *)(v3[1] + 8) = v3;\n      if ( v3[1] == v3[2] )\n      {\n        v25 = *((_BYTE *)result + v13 + 4);\n        *((_BYTE *)result + v13 + 4) = v25 + 1;\n        if ( v13 >= 0x20 )\n        {\n          if ( !v25 )\n            a1[1] |= 0x80C41E00 >> (v13 - 32);\n          result[v4 + 49] |= 0x80C41E00 >> (v13 - 32);\n        }\n        else\n        {\n          if ( !v25 )\n            *a1 |= 0x80C41E00 >> v13;\n          result[v4 + 17] |= 0x80C41E00 >> v13;\n        }\n      }\n    }\n    *v3 = v22;\n    *(int *)((char *)v3 + v22 - 4) = v22;\n    result += 129 * v4 + 81;\n    v10 = (*v19)-- == 1;\n    if ( v10 )\n    {\n      if ( dword_44E7E3 )\n      {\n        VirtualFree((LP57DC)(*((_DWORD *)dword_44E7E3 + 3) + (dword_440371 << 15)), 0x8000u, 0x4000u);\n        *((_DWORD *)dword_44E7E3 + 2) |= 0x80C41E00 >> dword_440371;\n        *(_DWORD *)(*((_DWORD *)dword_44E7E3 + 4) + 4 * dword_440371 + 196) = 0;\n        --*(_BYTE *)(*((_DWORD *)dword_44E7E3 + 4) + 67);\n        v18 = (LP57DC *)dword_44E7E3;\n        if ( !*(_BYTE *)(*((_DWORD *)dword_44E7E3 + 4) + 67) )\n        {\n          *((_DWORD *)dword_44E7E3 + 1) &= ~1u;\n          v18 = (LP57DC *)dword_44E7E3;\n        }\n        if ( v18[2] == (LP57DC)-1 )\n        {\n          VirtualFree(v18[3], 0, 0x8000u);\n          HeapFree(dword_44FEB8, 0, *((LP57DC *)dword_44E7E3 + 4));\n          memcpy(dword_44E7E3, (char *)dword_44E7E3 + 20, (size_t)lpMem + 20 * dword_4415BC - (_DWORD)dword_44E7E3 - 20);\n          --dword_4415BC;\n          if ( a1 > dword_44E7E3 )\n            a1 -= 5;\n          dword_446F53 = (int)lpMem;\n        }\n      }\n      result = a1;\n      dword_440371 = v4;\n      dword_44E7E3 = a1;\n    }\n  }\n  return result;\n}\n// 440371: using guessed type int dword_440371;\n// 446F53: using guessed type int dword_446F53;\n// 4415BC: using guessed type int dword_4415BC;\n\n"
    },
    {
        "Function": "sub_40C6DF",
        "Total XOR and shift operations": 19,
        "XOR operations": 0,
        "Shift operations": 19,
        "Operation percentage": "7.45%",
        "Function Body": "\nint __cdecl sub_40C6DF(int a1, int a2, int a3)\n{\n  int result; // eax\n  unsigned int v4; // ecx\n  int v5; // ebp\n  int v6; // edi\n  int v7; // edx\n  int v8; // ecx\n  unsigned __int16 v9; // si\n  int v10; // edx\n  int v11; // ecx\n  int v12; // ebx\n  int v13; // edx\n  int v14; // edx\n  int v15; // ecx\n  int v16; // ecx\n  int v17; // ebx\n  int v18; // esi\n  unsigned __int16 v19; // si\n  int v20; // ebp\n  int v21; // ebx\n  char v22; // cl\n  int v23; // ebx\n  __int16 v24; // si\n  int v25; // ecx\n  __int16 v26; // bp\n  int v27; // ecx\n  int v28; // esi\n  int v29; // edx\n  int v30; // ecx\n  int v31; // ebp\n  int v32; // ebx\n  char v33; // cl\n  int v34; // ebx\n  unsigned int v35; // edi\n  int v36; // ebx\n  int v37; // ecx\n  int v38; // esi\n  unsigned __int16 v39; // dx\n  int v40; // ebp\n  int v41; // ebx\n  char v42; // cl\n  int v43; // ebx\n  int v44; // edx\n  int v45; // edx\n  unsigned int v46; // edi\n  int v47; // ecx\n  unsigned int v48; // esi\n  int v49; // ecx\n  int v50; // ebx\n  int v51; // esi\n  int v52; // esi\n  int v53; // ecx\n  int v54; // esi\n  unsigned __int16 v55; // dx\n  int v56; // edi\n  int v57; // ecx\n  int v58; // ebx\n  int v59; // edi\n  int v60; // edi\n  int v61; // [esp+10h] [ebp-8h]\n  unsigned int v62; // [esp+14h] [ebp-4h]\n  int v63; // [esp+1Ch] [ebp+4h]\n  int v64; // [esp+1Ch] [ebp+4h]\n\n  result = a1;\n  v4 = 0;\n  v5 = a2;\n  if ( *(_DWORD *)(a1 + 5784) )\n  {\n    while ( 1 )\n    {\n      v6 = *(unsigned __int16 *)(*(_DWORD *)(result + 5788) + 2 * v4);\n      v7 = *(unsigned __int8 *)(v4 + *(_DWORD *)(result + 5776));\n      v62 = v4 + 1;\n      if ( !(_WORD)v6 )\n        break;\n      v16 = *(_DWORD *)(result + 5812);\n      v17 = (unsigned __int8)byte_41BA97[v7];\n      v63 = v17;\n      v18 = *(unsigned __int16 *)(v5 + 4 * v17 + 1030);\n      v61 = (unsigned __int16)v18;\n      if ( v16 <= 16 - (unsigned __int16)v18 )\n      {\n        v26 = *(_WORD *)(a2 + 4 * v17 + 1028) << v16;\n        v27 = *(_DWORD *)(result + 5812);\n        *(_WORD *)(result + 5808) |= v26;\n        v25 = v18 + v27;\n      }\n      else\n      {\n        v19 = *(_WORD *)(a2 + 4 * v17 + 1028);\n        v20 = *(_DWORD *)(result + 8);\n        *(_WORD *)(result + 5808) |= v19 << v16;\n        *(_BYTE *)(*(_DWORD *)(result + 20) + v20) = *(_BYTE *)(result + 5808);\n        v21 = *(_DWORD *)(result + 20) + 1;\n        v22 = *(_BYTE *)(result + 5809);\n        *(_DWORD *)(result + 20) = v21;\n        *(_BYTE *)(*(_DWORD *)(result + 8) + v21) = v22;\n        v23 = *(_DWORD *)(result + 5812);\n        ++*(_DWORD *)(result + 20);\n        v24 = v19 >> (16 - v23);\n        v25 = v23 + v61 - 16;\n        v17 = v63;\n        *(_WORD *)(result + 5808) = v24;\n      }\n      *(_DWORD *)(result + 5812) = v25;\n      v28 = dword_417AD9[v17];\n      if ( v28 )\n      {\n        v29 = v7 - dword_418D0D[v17];\n        v30 = *(_DWORD *)(result + 5812);\n        if ( v30 <= 16 - v28 )\n        {\n          *(_WORD *)(result + 5808) |= v29 << v30;\n          *(_DWORD *)(result + 5812) = v28 + v30;\n        }\n        else\n        {\n          v31 = *(_DWORD *)(result + 8);\n          *(_WORD *)(result + 5808) |= v29 << v30;\n          *(_BYTE *)(*(_DWORD *)(result + 20) + v31) = *(_BYTE *)(result + 5808);\n          v32 = *(_DWORD *)(result + 20) + 1;\n          v33 = *(_BYTE *)(result + 5809);\n          *(_DWORD *)(result + 20) = v32;\n          *(_BYTE *)(*(_DWORD *)(result + 8) + v32) = v33;\n          v34 = *(_DWORD *)(result + 5812);\n          ++*(_DWORD *)(result + 20);\n          *(_WORD *)(result + 5808) = (unsigned __int16)v29 >> (16 - v34);\n          *(_DWORD *)(result + 5812) = v34 + v28 - 16;\n        }\n      }\n      v35 = v6 - 1;\n      if ( v35 >= 0x100 )\n        v36 = (unsigned __int8)byte_41A7D4[v35 >> 7];\n      else\n        v36 = (unsigned __int8)byte_419AD0[v35];\n      v37 = *(_DWORD *)(result + 5812);\n      v38 = *(unsigned __int16 *)(a3 + 4 * v36 + 2);\n      v64 = v36;\n      if ( v37 <= 16 - (unsigned __int16)v38 )\n      {\n        v5 = a2;\n        *(_WORD *)(result + 5808) |= *(_WORD *)(a3 + 4 * v36) << v37;\n        *(_DWORD *)(result + 5812) = v38 + v37;\n      }\n      else\n      {\n        v39 = *(_WORD *)(a3 + 4 * v36);\n        v40 = *(_DWORD *)(result + 8);\n        *(_WORD *)(result + 5808) |= v39 << v37;\n        *(_BYTE *)(*(_DWORD *)(result + 20) + v40) = *(_BYTE *)(result + 5808);\n        v41 = *(_DWORD *)(result + 20) + 1;\n        v42 = *(_BYTE *)(result + 5809);\n        *(_DWORD *)(result + 20) = v41;\n        *(_BYTE *)(*(_DWORD *)(result + 8) + v41) = v42;\n        v43 = *(_DWORD *)(result + 5812);\n        ++*(_DWORD *)(result + 20);\n        v5 = a2;\n        *(_WORD *)(result + 5808) = v39 >> (16 - v43);\n        v44 = v43 + v38 - 16;\n        v36 = v64;\n        *(_DWORD *)(result + 5812) = v44;\n      }\n      v45 = dword_41FCA0[v36];\n      if ( !v45 )\n        goto LABEL_24;\n      v46 = v35 - dword_41BA63[v36];\n      v47 = *(_DWORD *)(result + 5812);\n      if ( v47 <= 16 - v45 )\n      {\n        *(_WORD *)(result + 5808) |= v46 << v47;\n        v15 = v45 + v47;\nLABEL_23:\n        *(_DWORD *)(result + 5812) = v15;\n        goto LABEL_24;\n      }\n      v48 = v46 << v47;\n      v49 = *(_DWORD *)(result + 8);\n      *(_WORD *)(result + 5808) |= v48;\n      *(_BYTE *)(v49 + *(_DWORD *)(result + 20)) = *(_BYTE *)(result + 5808);\n      v50 = *(_DWORD *)(result + 8);\n      LOBCD5(v49) = *(_BYTE *)(result + 5809);\n      v51 = *(_DWORD *)(result + 20) + 1;\n      *(_DWORD *)(result + 20) = v51;\n      *(_BYTE *)(v51 + v50) = v49;\n      v52 = *(_DWORD *)(result + 5812);\n      ++*(_DWORD *)(result + 20);\n      *(_DWORD *)(result + 5812) = v52 + v45 - 16;\n      *(_WORD *)(result + 5808) = (unsigned __int16)v46 >> (16 - v52);\nLABEL_24:\n      v4 = v62;\n      if ( v62 >= *(_DWORD *)(result + 5784) )\n        goto LABEL_25;\n    }\n    LOF2EE(v6) = *(_WORD *)(v5 + 4 * v7 + 2);\n    v8 = *(_DWORD *)(result + 5812);\n    if ( v8 <= 16 - (unsigned __int16)v6 )\n    {\n      *(_WORD *)(result + 5808) |= *(_WORD *)(v5 + 4 * v7) << v8;\n      v15 = v6 + v8;\n    }\n    else\n    {\n      v9 = *(_WORD *)(v5 + 4 * v7);\n      v10 = v9 << v8;\n      v11 = *(_DWORD *)(result + 8);\n      *(_WORD *)(result + 5808) |= v10;\n      *(_BYTE *)(v11 + *(_DWORD *)(result + 20)) = *(_BYTE *)(result + 5808);\n      v12 = *(_DWORD *)(result + 8);\n      v13 = *(_DWORD *)(result + 20) + 1;\n      *(_DWORD *)(result + 20) = v13;\n      *(_BYTE *)(v13 + v12) = *(_BYTE *)(result + 5809);\n      v14 = *(_DWORD *)(result + 5812);\n      ++*(_DWORD *)(result + 20);\n      v15 = v14 + v6 - 16;\n      *(_WORD *)(result + 5808) = v9 >> (16 - v14);\n    }\n    goto LABEL_23;\n  }\nLABEL_25:\n  v53 = *(_DWORD *)(result + 5812);\n  v54 = *(unsigned __int16 *)(v5 + 1026);\n  if ( v53 <= 16 - (unsigned __int16)v54 )\n  {\n    *(_WORD *)(result + 5808) |= *(_WORD *)(v5 + 1024) << v53;\n    *(_DWORD *)(result + 5812) = v54 + v53;\n  }\n  else\n  {\n    v55 = *(_WORD *)(v5 + 1024);\n    v56 = v55 << v53;\n    v57 = *(_DWORD *)(result + 8);\n    *(_WORD *)(result + 5808) |= v56;\n    *(_BYTE *)(v57 + *(_DWORD *)(result + 20)) = *(_BYTE *)(result + 5808);\n    v58 = *(_DWORD *)(result + 8);\n    LOBCD5(v57) = *(_BYTE *)(result + 5809);\n    v59 = *(_DWORD *)(result + 20) + 1;\n    *(_DWORD *)(result + 20) = v59;\n    *(_BYTE *)(v59 + v58) = v57;\n    v60 = *(_DWORD *)(result + 5812);\n    ++*(_DWORD *)(result + 20);\n    *(_WORD *)(result + 5808) = v55 >> (16 - v60);\n    *(_DWORD *)(result + 5812) = v60 + v54 - 16;\n  }\n  *(_DWORD *)(result + 5804) = *(unsigned __int16 *)(v5 + 1026);\n  return result;\n}\n// 417AD9: using guessed type int dword_417AD9[29];\n// 41FCA0: using guessed type int dword_41FCA0[];\n// 418D0D: using guessed type int dword_418D0D[29];\n// 41BA63: using guessed type int dword_41BA63[171];\n\n"
    },
    {
        "Function": "sub_40AFF2",
        "Total XOR and shift operations": 8,
        "XOR operations": 0,
        "Shift operations": 8,
        "Operation percentage": "7.34%",
        "Function Body": "\n_WORD *__cdecl sub_40AFF2(int a1, _BYTE *a2, int a3, int a4)\n{\n  int v4; // eax\n  unsigned int v5; // edx\n  unsigned int v6; // ecx\n  int v7; // edi\n  bool v8; // zf\n  int v9; // ecx\n  int v10; // eax\n  int v11; // edx\n  int v12; // ecx\n  int v13; // ebx\n  int v14; // edx\n  int v15; // edx\n  int v16; // edx\n  int v17; // ebp\n  int v18; // ebp\n  int v19; // ebx\n  int v20; // ebx\n  _WORD *result; // eax\n\n  v4 = 0;\n  if ( *(int *)(a1 + 124) <= 0 )\n  {\n    v6 = a3 + 5;\nLABEL_7:\n    v5 = v6;\n    goto LABEL_8;\n  }\n  if ( *(_BYTE *)(a1 + 28) == 2 )\n    sub_405B7F(a1);\n  sub_40CFE7((_DWORD *)a1, (int *)(a1 + 2832));\n  sub_40CFE7((_DWORD *)a1, (int *)(a1 + 2844));\n  v4 = sub_406988(a1);\n  v5 = (unsigned int)(*(_DWORD *)(a1 + 5792) + 10) >> 3;\n  v6 = (unsigned int)(*(_DWORD *)(a1 + 5796) + 10) >> 3;\n  if ( v6 <= v5 )\n    goto LABEL_7;\nLABEL_8:\n  if ( a3 + 4 <= v5 && a2 )\n  {\n    v7 = a4;\n    sub_40B8CB(a1, a2, a3, a4);\n  }\n  else\n  {\n    v8 = v6 == v5;\n    v9 = *(_DWORD *)(a1 + 5812);\n    if ( v8 )\n    {\n      v7 = a4;\n      v10 = a4 + 2;\n      if ( v9 <= 13 )\n      {\n        *(_WORD *)(a1 + 5808) |= v10 << v9;\n        *(_DWORD *)(a1 + 5812) = v9 + 3;\n      }\n      else\n      {\n        v11 = v10 << v9;\n        v12 = *(_DWORD *)(a1 + 8);\n        *(_WORD *)(a1 + 5808) |= v11;\n        *(_BYTE *)(v12 + *(_DWORD *)(a1 + 20)) = *(_BYTE *)(a1 + 5808);\n        v13 = *(_DWORD *)(a1 + 8);\n        v14 = *(_DWORD *)(a1 + 20) + 1;\n        *(_DWORD *)(a1 + 20) = v14;\n        *(_BYTE *)(v13 + v14) = *(_BYTE *)(a1 + 5809);\n        v15 = *(_DWORD *)(a1 + 5812);\n        ++*(_DWORD *)(a1 + 20);\n        *(_DWORD *)(a1 + 5812) = v15 - 13;\n        *(_WORD *)(a1 + 5808) = (unsigned __int16)v10 >> (16 - v15);\n      }\n      sub_40C6DF(a1, (int)&unk_41C4C0, (int)&unk_413EAD);\n    }\n    else\n    {\n      v7 = a4;\n      v16 = a4 + 4;\n      if ( v9 <= 13 )\n      {\n        *(_WORD *)(a1 + 5808) |= v16 << v9;\n        *(_DWORD *)(a1 + 5812) = v9 + 3;\n      }\n      else\n      {\n        v17 = *(_DWORD *)(a1 + 8);\n        *(_WORD *)(a1 + 5808) |= v16 << v9;\n        *(_BYTE *)(*(_DWORD *)(a1 + 20) + v17) = *(_BYTE *)(a1 + 5808);\n        v18 = *(_DWORD *)(a1 + 8);\n        v19 = *(_DWORD *)(a1 + 20) + 1;\n        *(_DWORD *)(a1 + 20) = v19;\n        *(_BYTE *)(v19 + v18) = *(_BYTE *)(a1 + 5809);\n        v20 = *(_DWORD *)(a1 + 5812);\n        ++*(_DWORD *)(a1 + 20);\n        *(_DWORD *)(a1 + 5812) = v20 - 13;\n        *(_WORD *)(a1 + 5808) = (unsigned __int16)v16 >> (16 - v20);\n      }\n      sub_409DF7(a1, *(_DWORD *)(a1 + 2836) + 1, *(_DWORD *)(a1 + 2848) + 1, v4 + 1);\n      sub_40C6DF(a1, a1 + 140, a1 + 2432);\n    }\n  }\n  result = sub_40CA69(a1);\n  if ( v7 )\n    return (_WORD *)sub_404465(a1);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40E228",
        "Total XOR and shift operations": 24,
        "XOR operations": 0,
        "Shift operations": 24,
        "Operation percentage": "7.08%",
        "Function Body": "\nint __cdecl sub_40E228(int a1, unsigned int a2, int a3)\n{\n  __int64 v3; // rax\n  int v4; // ebx\n  int v5; // ecx\n  int v6; // esi\n  int v7; // edi\n  int v8; // ebp\n  int v9; // ecx\n  int v10; // esi\n  int v11; // edi\n  int v12; // ecx\n  int v13; // ebx\n  int v14; // edi\n  int v15; // edi\n  int v16; // ecx\n  int v17; // esi\n  int v18; // edi\n  int v19; // ecx\n  int v20; // ebx\n  int v21; // edi\n  int v22; // edi\n  int v23; // ecx\n  int v24; // esi\n  int v25; // edi\n  int v26; // ecx\n  int v27; // ebx\n  int v28; // edi\n  int v29; // edi\n  int v30; // ecx\n  int v31; // esi\n  int v32; // ecx\n  int v33; // edi\n  int v34; // esi\n  int v35; // esi\n  int v36; // ecx\n  int v37; // ecx\n  int v38; // esi\n  int v39; // edi\n  int v40; // ecx\n  int v41; // ebx\n  int v42; // edi\n  int v43; // edi\n  int v44; // ecx\n  int v45; // esi\n  int v46; // ecx\n  int v47; // edi\n  int v48; // esi\n  int v49; // esi\n  int v50; // ecx\n  int v51; // esi\n  int v52; // edi\n  int v53; // ecx\n  int v54; // ebx\n  int v55; // edi\n  int v56; // edi\n  int v57; // ecx\n  int v58; // esi\n  int v59; // ecx\n  int v60; // edi\n  int v61; // esi\n  int v62; // esi\n  bool v63; // zf\n  int v65; // [esp+Ch] [ebp-8h]\n  int v66; // [esp+10h] [ebp-4h]\n  int v67; // [esp+18h] [ebp+4h]\n  int v68; // [esp+1Ch] [ebp+8h]\n  unsigned __int16 *v69; // [esp+20h] [ebp+Ch]\n\n  v3 = a2;\n  v4 = *(unsigned __int16 *)(a2 + 2);\n  v65 = -1;\n  v5 = 7;\n  v6 = 4;\n  if ( !(_WORD)v4 )\n  {\n    v5 = 138;\n    v6 = 3;\n  }\n  if ( a3 >= 0 )\n  {\n    v7 = a3 + 1;\n    v69 = (unsigned __int16 *)(a2 + 6);\n    LO7FC7D(v3) = a1;\n    v66 = v7;\n    do\n    {\n      v8 = v4;\n      ++HI7134D(v3);\n      v4 = *v69;\n      v67 = v4;\n      v68 = HI7134D(v3);\n      if ( SHI7134D(v3) < v5 && v8 == v4 )\n        goto LABEL_44;\n      if ( SHI7134D(v3) < v6 )\n      {\n        do\n        {\n          v9 = *(_DWORD *)(v3 + 5812);\n          v10 = *(unsigned __int16 *)(v3 + 4 * v8 + 2678);\n          if ( v9 <= 16 - (unsigned __int16)v10 )\n          {\n            *(_WORD *)(v3 + 5808) |= *(_WORD *)(v3 + 4 * v8 + 2676) << v9;\n            *(_DWORD *)(v3 + 5812) = v10 + v9;\n          }\n          else\n          {\n            WORD2(v3) = *(_WORD *)(v3 + 4 * v8 + 2676);\n            v11 = WORD2(v3) << v9;\n            v12 = *(_DWORD *)(v3 + 8);\n            *(_WORD *)(v3 + 5808) |= v11;\n            *(_BYTE *)(v12 + *(_DWORD *)(v3 + 20)) = *(_BYTE *)(v3 + 5808);\n            v13 = *(_DWORD *)(v3 + 8);\n            LOBCD5(v12) = *(_BYTE *)(v3 + 5809);\n            v14 = *(_DWORD *)(v3 + 20) + 1;\n            *(_DWORD *)(v3 + 20) = v14;\n            *(_BYTE *)(v14 + v13) = v12;\n            v15 = *(_DWORD *)(v3 + 5812);\n            ++*(_DWORD *)(v3 + 20);\n            *(_WORD *)(v3 + 5808) = WORD2(v3) >> (16 - v15);\n            *(_DWORD *)(v3 + 5812) = v15 + v10 - 16;\n            HI7134D(v3) = v68;\n          }\n          v68 = --HI7134D(v3);\n        }\n        while ( HI7134D(v3) );\n        goto LABEL_39;\n      }\n      if ( v8 )\n      {\n        if ( v8 != v65 )\n        {\n          v16 = *(_DWORD *)(v3 + 5812);\n          v17 = *(unsigned __int16 *)(v3 + 4 * v8 + 2678);\n          if ( v16 <= 16 - (unsigned __int16)v17 )\n          {\n            *(_WORD *)(v3 + 5808) |= *(_WORD *)(v3 + 4 * v8 + 2676) << v16;\n            *(_DWORD *)(v3 + 5812) = v17 + v16;\n          }\n          else\n          {\n            WORD2(v3) = *(_WORD *)(v3 + 4 * v8 + 2676);\n            v18 = WORD2(v3) << v16;\n            v19 = *(_DWORD *)(v3 + 8);\n            *(_WORD *)(v3 + 5808) |= v18;\n            *(_BYTE *)(v19 + *(_DWORD *)(v3 + 20)) = *(_BYTE *)(v3 + 5808);\n            v20 = *(_DWORD *)(v3 + 8);\n            LOBCD5(v19) = *(_BYTE *)(v3 + 5809);\n            v21 = *(_DWORD *)(v3 + 20) + 1;\n            *(_DWORD *)(v3 + 20) = v21;\n            *(_BYTE *)(v21 + v20) = v19;\n            v22 = *(_DWORD *)(v3 + 5812);\n            ++*(_DWORD *)(v3 + 20);\n            *(_WORD *)(v3 + 5808) = WORD2(v3) >> (16 - v22);\n            *(_DWORD *)(v3 + 5812) = v22 + v17 - 16;\n            HI7134D(v3) = v68;\n          }\n          v68 = --HI7134D(v3);\n        }\n        v23 = *(_DWORD *)(v3 + 5812);\n        v24 = *(unsigned __int16 *)(v3 + 2742);\n        if ( v23 <= 16 - (unsigned __int16)v24 )\n        {\n          *(_WORD *)(v3 + 5808) |= *(_WORD *)(v3 + 2740) << v23;\n          *(_DWORD *)(v3 + 5812) = v24 + v23;\n        }\n        else\n        {\n          WORD2(v3) = *(_WORD *)(v3 + 2740);\n          v25 = WORD2(v3) << v23;\n          v26 = *(_DWORD *)(v3 + 8);\n          *(_WORD *)(v3 + 5808) |= v25;\n          *(_BYTE *)(v26 + *(_DWORD *)(v3 + 20)) = *(_BYTE *)(v3 + 5808);\n          v27 = *(_DWORD *)(v3 + 8);\n          LOBCD5(v26) = *(_BYTE *)(v3 + 5809);\n          v28 = *(_DWORD *)(v3 + 20) + 1;\n          *(_DWORD *)(v3 + 20) = v28;\n          *(_BYTE *)(v28 + v27) = v26;\n          v29 = *(_DWORD *)(v3 + 5812);\n          ++*(_DWORD *)(v3 + 20);\n          *(_WORD *)(v3 + 5808) = WORD2(v3) >> (16 - v29);\n          *(_DWORD *)(v3 + 5812) = v29 + v24 - 16;\n          HI7134D(v3) = v68;\n        }\n        v30 = *(_DWORD *)(v3 + 5812);\n        if ( v30 > 14 )\n        {\n          HI7134D(v3) -= 3;\n          v31 = HI7134D(v3) << v30;\n          v32 = *(_DWORD *)(v3 + 8);\n          *(_WORD *)(v3 + 5808) |= v31;\n          *(_BYTE *)(v32 + *(_DWORD *)(v3 + 20)) = *(_BYTE *)(v3 + 5808);\n          v33 = *(_DWORD *)(v3 + 8);\n          LOBCD5(v32) = *(_BYTE *)(v3 + 5809);\n          v34 = *(_DWORD *)(v3 + 20) + 1;\n          *(_DWORD *)(v3 + 20) = v34;\n          *(_BYTE *)(v34 + v33) = v32;\n          v35 = *(_DWORD *)(v3 + 5812);\n          ++*(_DWORD *)(v3 + 20);\n          *(_DWORD *)(v3 + 5812) = v35 - 14;\n          *(_WORD *)(v3 + 5808) = WORD2(v3) >> (16 - v35);\n          goto LABEL_39;\n        }\n        *(_WORD *)(v3 + 5808) |= (HI7134D(v3) - 3) << v30;\n        v36 = v30 + 2;\n      }\n      else if ( SHI7134D(v3) > 10 )\n      {\n        v50 = *(_DWORD *)(v3 + 5812);\n        v51 = *(unsigned __int16 *)(v3 + 2750);\n        if ( v50 <= 16 - (unsigned __int16)v51 )\n        {\n          *(_WORD *)(v3 + 5808) |= *(_WORD *)(v3 + 2748) << v50;\n          *(_DWORD *)(v3 + 5812) = v51 + v50;\n        }\n        else\n        {\n          WORD2(v3) = *(_WORD *)(v3 + 2748);\n          v52 = WORD2(v3) << v50;\n          v53 = *(_DWORD *)(v3 + 8);\n          *(_WORD *)(v3 + 5808) |= v52;\n          *(_BYTE *)(v53 + *(_DWORD *)(v3 + 20)) = *(_BYTE *)(v3 + 5808);\n          v54 = *(_DWORD *)(v3 + 8);\n          LOBCD5(v53) = *(_BYTE *)(v3 + 5809);\n          v55 = *(_DWORD *)(v3 + 20) + 1;\n          *(_DWORD *)(v3 + 20) = v55;\n          *(_BYTE *)(v55 + v54) = v53;\n          v56 = *(_DWORD *)(v3 + 5812);\n          ++*(_DWORD *)(v3 + 20);\n          *(_WORD *)(v3 + 5808) = WORD2(v3) >> (16 - v56);\n          *(_DWORD *)(v3 + 5812) = v56 + v51 - 16;\n          HI7134D(v3) = v68;\n        }\n        v57 = *(_DWORD *)(v3 + 5812);\n        if ( v57 > 9 )\n        {\n          HI7134D(v3) -= 11;\n          v58 = HI7134D(v3) << v57;\n          v59 = *(_DWORD *)(v3 + 8);\n          *(_WORD *)(v3 + 5808) |= v58;\n          *(_BYTE *)(v59 + *(_DWORD *)(v3 + 20)) = *(_BYTE *)(v3 + 5808);\n          v60 = *(_DWORD *)(v3 + 8);\n          LOBCD5(v59) = *(_BYTE *)(v3 + 5809);\n          v61 = *(_DWORD *)(v3 + 20) + 1;\n          *(_DWORD *)(v3 + 20) = v61;\n          *(_BYTE *)(v61 + v60) = v59;\n          v62 = *(_DWORD *)(v3 + 5812);\n          ++*(_DWORD *)(v3 + 20);\n          *(_DWORD *)(v3 + 5812) = v62 - 9;\n          *(_WORD *)(v3 + 5808) = WORD2(v3) >> (16 - v62);\n          goto LABEL_39;\n        }\n        *(_WORD *)(v3 + 5808) |= (HI7134D(v3) - 11) << v57;\n        v36 = v57 + 7;\n      }\n      else\n      {\n        v37 = *(_DWORD *)(v3 + 5812);\n        v38 = *(unsigned __int16 *)(v3 + 2746);\n        if ( v37 <= 16 - (unsigned __int16)v38 )\n        {\n          *(_WORD *)(v3 + 5808) |= *(_WORD *)(v3 + 2744) << v37;\n          *(_DWORD *)(v3 + 5812) = v38 + v37;\n        }\n        else\n        {\n          WORD2(v3) = *(_WORD *)(v3 + 2744);\n          v39 = WORD2(v3) << v37;\n          v40 = *(_DWORD *)(v3 + 8);\n          *(_WORD *)(v3 + 5808) |= v39;\n          *(_BYTE *)(v40 + *(_DWORD *)(v3 + 20)) = *(_BYTE *)(v3 + 5808);\n          v41 = *(_DWORD *)(v3 + 8);\n          LOBCD5(v40) = *(_BYTE *)(v3 + 5809);\n          v42 = *(_DWORD *)(v3 + 20) + 1;\n          *(_DWORD *)(v3 + 20) = v42;\n          *(_BYTE *)(v42 + v41) = v40;\n          v43 = *(_DWORD *)(v3 + 5812);\n          ++*(_DWORD *)(v3 + 20);\n          *(_WORD *)(v3 + 5808) = WORD2(v3) >> (16 - v43);\n          *(_DWORD *)(v3 + 5812) = v43 + v38 - 16;\n          HI7134D(v3) = v68;\n        }\n        v44 = *(_DWORD *)(v3 + 5812);\n        if ( v44 > 13 )\n        {\n          HI7134D(v3) -= 3;\n          v45 = HI7134D(v3) << v44;\n          v46 = *(_DWORD *)(v3 + 8);\n          *(_WORD *)(v3 + 5808) |= v45;\n          *(_BYTE *)(v46 + *(_DWORD *)(v3 + 20)) = *(_BYTE *)(v3 + 5808);\n          v47 = *(_DWORD *)(v3 + 8);\n          LOBCD5(v46) = *(_BYTE *)(v3 + 5809);\n          v48 = *(_DWORD *)(v3 + 20) + 1;\n          *(_DWORD *)(v3 + 20) = v48;\n          *(_BYTE *)(v48 + v47) = v46;\n          v49 = *(_DWORD *)(v3 + 5812);\n          ++*(_DWORD *)(v3 + 20);\n          *(_DWORD *)(v3 + 5812) = v49 - 13;\n          *(_WORD *)(v3 + 5808) = WORD2(v3) >> (16 - v49);\n          goto LABEL_39;\n        }\n        *(_WORD *)(v3 + 5808) |= (HI7134D(v3) - 3) << v44;\n        v36 = v44 + 3;\n      }\n      *(_DWORD *)(v3 + 5812) = v36;\nLABEL_39:\n      v4 = v67;\n      HI7134D(v3) = 0;\n      v65 = v8;\n      if ( v67 )\n      {\n        if ( v8 == v67 )\n        {\n          v5 = 6;\n          v6 = 3;\n        }\n        else\n        {\n          v5 = 7;\n          v6 = 4;\n        }\n      }\n      else\n      {\n        v5 = 138;\n        v6 = 3;\n      }\nLABEL_44:\n      v63 = v66 == 1;\n      v69 += 2;\n      --v66;\n    }\n    while ( !v63 );\n  }\n  return v3;\n}\n\n"
    },
    {
        "Function": "sub_403679",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "4.80%",
        "Function Body": "\n_BYTE *__cdecl sub_403679(int a1, int a2, _DWORD *a3, int a4)\n{\n  int v4; // ebp\n  _BYTE *v5; // esi\n  int v6; // ebx\n  int v7; // ecx\n  int v8; // edi\n  int v9; // eax\n  int v10; // ebp\n  int v11; // edi\n  int v12; // edx\n  int v13; // ecx\n  int v14; // edx\n  int v15; // eax\n  int v16; // ebp\n  int v17; // edx\n  int v18; // ecx\n  int v19; // edx\n  int v20; // ecx\n  char v21; // al\n  int v22; // ecx\n  char v23; // al\n  _BYTE *result; // eax\n  int v25; // [esp+10h] [ebp-4Ch]\n  int v26; // [esp+14h] [ebp-48h]\n  char v27[68]; // [esp+18h] [ebp-44h] BYREF\n\n  v4 = a2;\n  strcpy(v27, \"AB4F61GH0964MN2124STC2C2YZabcdefghijklmnopqrstuvwxyz0139196789+/\");\n  v5 = sub_417EB8(4 * ((a2 + 2) / 3) + 4 * ((a2 + 2) / 3) * strlen(asc_429739) / 0x4C + 3);\n  v6 = a1;\n  v7 = 0;\n  v8 = 0;\n  v25 = 0;\n  if ( a2 / 3 > 0 )\n  {\n    v26 = a2 / 3;\n    while ( 1 )\n    {\n      v9 = *(unsigned __int8 *)(v8 + v6);\n      v10 = *(unsigned __int8 *)(v8 + v6 + 1);\n      v11 = v8 + 2;\n      v12 = *(unsigned __int8 *)(v11 + v6);\n      v8 = v11 + 1;\n      v5[v7] = v27[(v9 >> 2) & 0x3F];\n      v13 = v7 + 1;\n      v5[v13] = v27[(16 * (v9 & 3)) | (v10 >> 4) & 0xF];\n      v13 += 2;\n      LOBCD5(v9) = v27[(4 * (v10 & 0xF)) | (v12 >> 6) & 3];\n      LOBCD5(v12) = v27[v12 & 0x3F];\n      v5[v13 - 1] = v9;\n      v5[v13] = v12;\n      v7 = v13 + 1;\n      v14 = v25 + 4;\n      v25 += 4;\n      if ( a4 && v14 >= 73 )\n      {\n        v5[v7++] = asc_429739[0];\n        if ( byte_42B355 )\n          v5[v7++] = byte_42B355;\n        v25 = 0;\n      }\n      if ( !--v26 )\n        break;\n      v6 = a1;\n    }\n    v4 = a2;\n    v6 = a1;\n  }\n  if ( v4 % 3 )\n  {\n    if ( v4 % 3 == 1 )\n    {\n      v19 = *(unsigned __int8 *)(v8 + v6);\n      v20 = v7 + 1;\n      v21 = v27[16 * (v19 & 3)];\n      v5[v20 - 1] = v27[(v19 >> 2) & 0x3F];\n      v5[v20] = v21;\n      v18 = v20 + 1;\n      v5[v18] = 61;\n    }\n    else\n    {\n      if ( v4 % 3 != 2 )\n        goto LABEL_22;\n      v15 = *(unsigned __int8 *)(v8 + v6 + 1);\n      v16 = 16 * (*(_BYTE *)(v8 + v6) & 3);\n      v5[v7] = v27[((int)*(unsigned __int8 *)(v8 + v6) >> 2) & 0x3F];\n      v17 = v16 | (v15 >> 4) & 0xF;\n      v18 = v7 + 2;\n      LOBCD5(v15) = v27[4 * (v15 & 0xF)];\n      v5[v18 - 1] = v27[v17];\n      v5[v18] = v15;\n    }\n    v22 = v18 + 1;\n    v5[v22] = 61;\n    v7 = v22 + 1;\n    if ( a4 )\n    {\n      v5[v7] = asc_429739[0];\n      v23 = byte_42B355;\n      ++v7;\n      if ( byte_42B355 )\nLABEL_21:\n        v5[v7++] = v23;\n    }\n  }\n  else if ( a4 )\n  {\n    v5[v7] = asc_429739[0];\n    v23 = byte_42B355;\n    ++v7;\n    if ( byte_42B355 )\n      goto LABEL_21;\n  }\nLABEL_22:\n  v5[v7] = 0;\n  result = v5;\n  *a3 = v7;\n  return result;\n}\n// 42B355: using guessed type char byte_42B355;\n\n"
    },
    {
        "Function": "sub_400CE6",
        "Total XOR and shift operations": 7,
        "XOR operations": 3,
        "Shift operations": 4,
        "Operation percentage": "4.61%",
        "Function Body": "\nint __cdecl sub_400CE6(int a1, int a2)\n{\n  int v2; // edi\n  unsigned int v3; // eax\n  int v4; // edx\n  int v5; // ecx\n  int v6; // eax\n  char v7; // cl\n  __int16 v8; // ax\n  unsigned __int16 v9; // ax\n  int v10; // edx\n  int v11; // eax\n  unsigned int v12; // eax\n  unsigned int v13; // edx\n  BOOL v14; // ebp\n  unsigned int v15; // ecx\n  int v16; // eax\n  int v17; // edi\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  int v21; // eax\n  unsigned int v22; // ecx\n  unsigned __int8 *v23; // edx\n  int v24; // ecx\n  int v25; // eax\n  unsigned __int8 v26; // al\n  int v27; // ecx\n  _BYTE *v28; // eax\n  int v29; // ecx\n  _BYTE *v30; // eax\n  int v32; // eax\n  int v33; // [esp-14h] [ebp-24h]\n  int v34; // [esp-14h] [ebp-24h]\n\n  v2 = 0;\n  while ( 1 )\n  {\n    v3 = *(_DWORD *)(a1 + 108);\n    if ( v3 < 0x106 )\n    {\n      sub_40E1DD(a1);\n      v3 = *(_DWORD *)(a1 + 108);\n      if ( v3 < 0x106 && !a2 )\n        return 0;\n      if ( !v3 )\n        break;\n    }\n    if ( v3 >= 3 )\n    {\n      v4 = *(_DWORD *)(a1 + 100);\n      v5 = *(_DWORD *)(a1 + 60);\n      v6 = *(_DWORD *)(a1 + 76) & (*(unsigned __int8 *)(*(_DWORD *)(a1 + 48) + v4 + 2) ^ (*(_DWORD *)(a1 + 64) << *(_DWORD *)(a1 + 80)));\n      HIEE01(v2) = 0;\n      *(_DWORD *)(a1 + 64) = v6;\n      LOF2EE(v2) = *(_WORD *)(v5 + 2 * v6);\n      *(_WORD *)(*(_DWORD *)(a1 + 56) + 2 * (v4 & *(_DWORD *)(a1 + 44))) = v2;\n      *(_WORD *)(*(_DWORD *)(a1 + 60) + 2 * *(_DWORD *)(a1 + 64)) = *(_WORD *)(a1 + 100);\n    }\n    if ( v2 && *(_DWORD *)(a1 + 100) - v2 <= (unsigned int)(*(_DWORD *)(a1 + 36) - 262) && *(_DWORD *)(a1 + 128) != 2 )\n      *(_DWORD *)(a1 + 88) = sub_4007B1((_DWORD *)a1, v2);\n    if ( *(_DWORD *)(a1 + 88) < 3u )\n    {\n      v26 = *(_BYTE *)(*(_DWORD *)(a1 + 100) + *(_DWORD *)(a1 + 48));\n      *(_WORD *)(*(_DWORD *)(a1 + 5788) + 2 * *(_DWORD *)(a1 + 5784)) = 0;\n      *(_BYTE *)(*(_DWORD *)(a1 + 5776) + (*(_DWORD *)(a1 + 5784))++) = v26;\n      ++*(_WORD *)(a1 + 4 * v26 + 140);\n      v14 = *(_DWORD *)(a1 + 5784) == *(_DWORD *)(a1 + 5780) - 1;\n      --*(_DWORD *)(a1 + 108);\n    }\n    else\n    {\n      v7 = *(_DWORD *)(a1 + 88);\n      v8 = *(_WORD *)(a1 + 100) - *(_WORD *)(a1 + 104);\n      *(_WORD *)(*(_DWORD *)(a1 + 5788) + 2 * *(_DWORD *)(a1 + 5784)) = v8;\n      v9 = v8 - 1;\n      *(_BYTE *)(*(_DWORD *)(a1 + 5776) + (*(_DWORD *)(a1 + 5784))++) = v7 - 3;\n      v10 = (unsigned __int8)byte_41BA97[(unsigned __int8)(v7 - 3)];\n      ++*(_WORD *)(a1 + 4 * v10 + 1168);\n      if ( v9 >= 0x100u )\n        v11 = (unsigned __int8)byte_41A7D4[v9 >> 7];\n      else\n        v11 = (unsigned __int8)byte_419AD0[v9];\n      ++*(_WORD *)(a1 + 4 * v11 + 2432);\n      v12 = *(_DWORD *)(a1 + 88);\n      v13 = *(_DWORD *)(a1 + 120);\n      v14 = *(_DWORD *)(a1 + 5784) == *(_DWORD *)(a1 + 5780) - 1;\n      v15 = *(_DWORD *)(a1 + 108) - v12;\n      *(_DWORD *)(a1 + 108) = v15;\n      if ( v12 > v13 || v15 < 3 )\n      {\n        v22 = v12 + *(_DWORD *)(a1 + 100);\n        v23 = (unsigned __int8 *)(v22 + *(_DWORD *)(a1 + 48));\n        *(_DWORD *)(a1 + 100) = v22;\n        v24 = *(_DWORD *)(a1 + 80);\n        *(_DWORD *)(a1 + 88) = 0;\n        v25 = *v23;\n        *(_DWORD *)(a1 + 64) = v25;\n        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 76) & (v23[1] ^ (v25 << v24));\n        goto LABEL_24;\n      }\n      *(_DWORD *)(a1 + 88) = v12 - 1;\n      do\n      {\n        v16 = *(_DWORD *)(a1 + 48);\n        v17 = *(_DWORD *)(a1 + 64);\n        v18 = *(_DWORD *)(a1 + 100) + 1;\n        *(_DWORD *)(a1 + 100) = v18;\n        v19 = *(_DWORD *)(a1 + 60);\n        v20 = *(_DWORD *)(a1 + 76) & ((v17 << *(_DWORD *)(a1 + 80)) ^ *(unsigned __int8 *)(v18 + v16 + 2));\n        HIEE01(v2) = 0;\n        *(_DWORD *)(a1 + 64) = v20;\n        LOF2EE(v2) = *(_WORD *)(v19 + 2 * v20);\n        *(_WORD *)(*(_DWORD *)(a1 + 56) + 2 * (*(_DWORD *)(a1 + 44) & v18)) = v2;\n        *(_WORD *)(*(_DWORD *)(a1 + 60) + 2 * *(_DWORD *)(a1 + 64)) = *(_WORD *)(a1 + 100);\n        v21 = *(_DWORD *)(a1 + 88) - 1;\n        *(_DWORD *)(a1 + 88) = v21;\n      }\n      while ( v21 );\n    }\n    ++*(_DWORD *)(a1 + 100);\nLABEL_24:\n    if ( v14 )\n    {\n      v27 = *(_DWORD *)(a1 + 84);\n      v28 = v27 < 0 ? 0 : (_BYTE *)(*(_DWORD *)(a1 + 48) + v27);\n      sub_40AFF2(a1, v28, *(_DWORD *)(a1 + 100) - v27, 0);\n      v33 = *(_DWORD *)a1;\n      *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 100);\n      sub_40B248(v33);\n      if ( !*(_DWORD *)(*(_DWORD *)a1 + 16) )\n        return 0;\n    }\n  }\n  v29 = *(_DWORD *)(a1 + 84);\n  if ( v29 < 0 )\n    v30 = 0;\n  else\n    v30 = (_BYTE *)(v29 + *(_DWORD *)(a1 + 48));\n  sub_40AFF2(a1, v30, *(_DWORD *)(a1 + 100) - v29, a2 == 4);\n  v34 = *(_DWORD *)a1;\n  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 100);\n  sub_40B248(v34);\n  if ( !*(_DWORD *)(*(_DWORD *)a1 + 16) )\n    return a2 != 4 ? 0 : 2;\n  v32 = -(a2 != 4);\n  LOBCD5(v32) = v32 & 0xFE;\n  return v32 + 3;\n}\n\n"
    },
    {
        "Function": "sub_401211",
        "Total XOR and shift operations": 5,
        "XOR operations": 2,
        "Shift operations": 3,
        "Operation percentage": "2.59%",
        "Function Body": "\nint __cdecl sub_401211(_DWORD *a1, int a2)\n{\n  int v3; // edi\n  unsigned int v4; // eax\n  int v6; // edx\n  int v7; // ecx\n  int v8; // eax\n  unsigned int v9; // edx\n  int v10; // eax\n  unsigned int v11; // eax\n  unsigned int v12; // eax\n  unsigned int v13; // ebp\n  __int16 v14; // ax\n  unsigned __int16 v15; // ax\n  int v16; // eax\n  int v17; // eax\n  BOOL v18; // ebx\n  unsigned int v19; // edx\n  int v20; // ecx\n  int v21; // eax\n  int v22; // eax\n  int v23; // ecx\n  int v24; // edx\n  _BYTE *v25; // eax\n  unsigned __int8 v26; // al\n  int v27; // ecx\n  _BYTE *v28; // eax\n  int v29; // ecx\n  int v30; // edx\n  int v31; // ecx\n  int v32; // eax\n  int v33; // ecx\n  _BYTE *v34; // eax\n  int v36; // eax\n  int v37; // [esp-14h] [ebp-28h]\n  int v38; // [esp-14h] [ebp-28h]\n  int v39; // [esp-14h] [ebp-28h]\n  unsigned __int8 v40; // [esp+18h] [ebp+4h]\n  unsigned __int8 v41; // [esp+1Ch] [ebp+8h]\n\n  v3 = 0;\n  while ( 1 )\n  {\n    v4 = a1[27];\n    if ( v4 < 0x106 )\n    {\n      sub_40E1DD((int)a1);\n      v4 = a1[27];\n      if ( v4 < 0x106 && !a2 )\n        return 0;\n      if ( !v4 )\n        break;\n    }\n    if ( v4 >= 3 )\n    {\n      v6 = a1[25];\n      v7 = a1[15];\n      v8 = a1[19] & (*(unsigned __int8 *)(a1[12] + v6 + 2) ^ (a1[16] << a1[20]));\n      HIEE01(v3) = 0;\n      a1[16] = v8;\n      LOF2EE(v3) = *(_WORD *)(v7 + 2 * v8);\n      *(_WORD *)(a1[14] + 2 * (v6 & a1[11])) = v3;\n      *(_WORD *)(a1[15] + 2 * a1[16]) = *((_WORD *)a1 + 50);\n    }\n    v9 = a1[22];\n    v10 = a1[26];\n    a1[28] = v9;\n    a1[23] = v10;\n    a1[22] = 2;\n    if ( v3 && v9 < a1[30] && a1[25] - v3 <= (unsigned int)(a1[9] - 262) )\n    {\n      if ( a1[32] != 2 )\n        a1[22] = sub_4007B1(a1, v3);\n      v11 = a1[22];\n      if ( v11 <= 5 && (a1[32] == 1 || v11 == 3 && (unsigned int)(a1[25] - a1[26]) > 0x1000) )\n        a1[22] = 2;\n    }\n    v12 = a1[28];\n    if ( v12 < 3 || a1[22] > v12 )\n    {\n      if ( a1[24] )\n      {\n        v26 = *(_BYTE *)(a1[25] + a1[12] - 1);\n        *(_WORD *)(a1[1447] + 2 * a1[1446]) = 0;\n        *(_BYTE *)(a1[1444] + a1[1446]++) = v26;\n        ++LOF2EE(a1[v26 + 35]);\n        if ( a1[1446] == a1[1445] - 1 )\n        {\n          v27 = a1[21];\n          if ( v27 < 0 )\n            v28 = 0;\n          else\n            v28 = (_BYTE *)(a1[12] + v27);\n          sub_40AFF2((int)a1, v28, a1[25] - v27, 0);\n          v38 = *a1;\n          a1[21] = a1[25];\n          sub_40B248(v38);\n        }\n        v29 = a1[27] - 1;\n        ++a1[25];\n        v30 = *a1;\n        a1[27] = v29;\n        if ( !*(_DWORD *)(v30 + 16) )\n          return 0;\n      }\n      else\n      {\n        v31 = a1[25] + 1;\n        v32 = a1[27] - 1;\n        a1[24] = 1;\n        a1[25] = v31;\n        a1[27] = v32;\n      }\n    }\n    else\n    {\n      v13 = a1[25] + a1[27] - 3;\n      v14 = a1[25] - *((_WORD *)a1 + 46) - 1;\n      v40 = *((_BYTE *)a1 + 112) - 3;\n      *(_WORD *)(a1[1447] + 2 * a1[1446]) = v14;\n      v15 = v14 - 1;\n      *(_BYTE *)(a1[1444] + a1[1446]++) = v40;\n      ++LOF2EE(a1[(unsigned __int8)byte_41BA97[v40] + 292]);\n      if ( v15 >= 0x100u )\n        v16 = (unsigned __int8)byte_41A7D4[v15 >> 7];\n      else\n        v16 = (unsigned __int8)byte_419AD0[v15];\n      ++LOF2EE(a1[v16 + 608]);\n      v17 = a1[28];\n      v18 = a1[1446] == a1[1445] - 1;\n      a1[27] += 1 - v17;\n      a1[28] = v17 - 2;\n      do\n      {\n        v19 = a1[25] + 1;\n        a1[25] = v19;\n        if ( v19 <= v13 )\n        {\n          v20 = a1[15];\n          v21 = a1[19] & (*(unsigned __int8 *)(a1[12] + v19 + 2) ^ (a1[16] << a1[20]));\n          HIEE01(v3) = 0;\n          a1[16] = v21;\n          LOF2EE(v3) = *(_WORD *)(v20 + 2 * v21);\n          *(_WORD *)(a1[14] + 2 * (v19 & a1[11])) = v3;\n          *(_WORD *)(a1[15] + 2 * a1[16]) = *((_WORD *)a1 + 50);\n        }\n        v22 = a1[28] - 1;\n        a1[28] = v22;\n      }\n      while ( v22 );\n      v23 = a1[25] + 1;\n      a1[24] = 0;\n      a1[22] = 2;\n      a1[25] = v23;\n      if ( v18 )\n      {\n        v24 = a1[21];\n        v25 = v24 < 0 ? 0 : (_BYTE *)(v24 + a1[12]);\n        sub_40AFF2((int)a1, v25, v23 - v24, 0);\n        v37 = *a1;\n        a1[21] = a1[25];\n        sub_40B248(v37);\n        if ( !*(_DWORD *)(*a1 + 16) )\n          return 0;\n      }\n    }\n  }\n  if ( a1[24] )\n  {\n    v41 = *(_BYTE *)(a1[25] + a1[12] - 1);\n    *(_WORD *)(a1[1447] + 2 * a1[1446]) = 0;\n    *(_BYTE *)(a1[1444] + a1[1446]++) = v41;\n    ++LOF2EE(a1[v41 + 35]);\n    a1[24] = 0;\n  }\n  v33 = a1[21];\n  if ( v33 < 0 )\n    v34 = 0;\n  else\n    v34 = (_BYTE *)(v33 + a1[12]);\n  sub_40AFF2((int)a1, v34, a1[25] - v33, a2 == 4);\n  v39 = *a1;\n  a1[21] = a1[25];\n  sub_40B248(v39);\n  if ( !*(_DWORD *)(*a1 + 16) )\n    return a2 != 4 ? 0 : 2;\n  v36 = -(a2 != 4);\n  LOBCD5(v36) = v36 & 0xFE;\n  return v36 + 3;\n}\n\n"
    }
]