[
    {
        "Function": "sub_4009C7",
        "Total XOR and shift operations": 30,
        "XOR operations": 16,
        "Shift operations": 14,
        "Operation percentage": "272.73%",
        "Function Body": "\nint __cdecl sub_4009C7(int a1, int a2)\n{\n  int v2; // ecx\n\n  v2 = (4\n      * ((16 * ((((~(a2 ^ a1) << 16) & ~(a2 ^ a1)) << 8) & (~(a2 ^ a1) << 16) & ~(a2 ^ a1))) & (((~(a2 ^ a1) << 16) & ~(a2 ^ a1)) << 8) & (~(a2 ^ a1) << 16) & ~(a2 ^ a1))) & (16 * ((((~(a2 ^ a1) << 16) & ~(a2 ^ a1)) << 8) & (~(a2 ^ a1) << 16) & ~(a2 ^ a1))) & (((~(a2 ^ a1) << 16) & ~(a2 ^ a1)) << 8) & (~(a2 ^ a1) << 16) & ~(a2 ^ a1);\n  return (v2 >> 31) & ((2 * v2) >> 31);\n}\n\n"
    },
    {
        "Function": "sub_405FB7",
        "Total XOR and shift operations": 79,
        "XOR operations": 76,
        "Shift operations": 3,
        "Operation percentage": "116.18%",
        "Function Body": "\nunsigned int __cdecl sub_405FB7(_DWORD *a1, int a2, _DWORD *a3, unsigned int *a4)\n{\n  unsigned int v5; // ebx\n  unsigned int v6; // edx\n  unsigned int v7; // ecx\n  _DWORD *v8; // edi\n  bool v9; // zf\n  unsigned int v10; // ebx\n  unsigned int v11; // edx\n  unsigned int v12; // eax\n  unsigned int v13; // eax\n  unsigned int v14; // eax\n  unsigned int result; // eax\n  unsigned int v16; // [esp+8h] [ebp-10h]\n  unsigned int v17; // [esp+Ch] [ebp-Ch]\n  unsigned int v18; // [esp+10h] [ebp-8h]\n  unsigned int v19; // [esp+10h] [ebp-8h]\n  unsigned int v20; // [esp+14h] [ebp-4h]\n  unsigned int v21; // [esp+20h] [ebp+8h]\n  int v22; // [esp+24h] [ebp+Ch]\n  unsigned int v23; // [esp+28h] [ebp+10h]\n\n  v21 = *a1 ^ (__ROL4__(*a3, 8) & 0xFF1473 | __ROR4__(*a3, 8) & 0xFF147300);\n  v18 = a1[1] ^ (__ROL4__(a3[1], 8) & 0xFF1473 | __ROR4__(a3[1], 8) & 0xFF147300);\n  v5 = a1[2] ^ (__ROL4__(a3[2], 8) & 0xFF1473 | __ROR4__(a3[2], 8) & 0xFF147300);\n  v6 = a1[3] ^ (__ROL4__(a3[3], 8) & 0xFF1473 | __ROR4__(a3[3], 8) & 0xFF147300);\n  v17 = a1[4] ^ dword_404438[(unsigned __int8)v6] ^ RijnDael_AES_Base_40A316[HI304E(v21)] ^ dword_40B06B[BYTE2(v18)] ^ dword_40FBE7[BYTE1(v5)];\n  v20 = a1[5] ^ dword_404438[(unsigned __int8)v21] ^ RijnDael_AES_Base_40A316[HI304E(v18)] ^ dword_40B06B[BYTE2(v5)] ^ dword_40FBE7[BYTE1(v6)];\n  v23 = a1[6] ^ dword_404438[(unsigned __int8)v18] ^ RijnDael_AES_Base_40A316[HI304E(v5)] ^ dword_40FBE7[BYTE1(v21)] ^ dword_40B06B[BYTE2(v6)];\n  v7 = a1[7] ^ dword_404438[(unsigned __int8)v5] ^ RijnDael_AES_Base_40A316[HI304E(v6)] ^ dword_40B06B[BYTE2(v21)] ^ dword_40FBE7[BYTE1(v18)];\n  v8 = a1 + 8;\n  v9 = a2 >> 1 == 1;\n  v22 = (a2 >> 1) - 1;\n  while ( !v9 )\n  {\n    v19 = *v8 ^ dword_404438[(unsigned __int8)v7] ^ RijnDael_AES_Base_40A316[HI304E(v17)] ^ dword_40B06B[BYTE2(v20)] ^ dword_40FBE7[BYTE1(v23)];\n    v16 = v8[1] ^ dword_404438[(unsigned __int8)v17] ^ RijnDael_AES_Base_40A316[HI304E(v20)] ^ dword_40B06B[BYTE2(v23)] ^ dword_40FBE7[BYTE1(v7)];\n    v10 = v8[2] ^ dword_404438[(unsigned __int8)v20] ^ RijnDael_AES_Base_40A316[HI304E(v23)] ^ dword_40FBE7[BYTE1(v17)] ^ dword_40B06B[BYTE2(v7)];\n    v11 = v8[3] ^ dword_404438[(unsigned __int8)v23] ^ RijnDael_AES_Base_40A316[HI304E(v7)] ^ dword_40B06B[BYTE2(v17)] ^ dword_40FBE7[BYTE1(v20)];\n    v17 = v8[4] ^ dword_404438[(unsigned __int8)v11] ^ RijnDael_AES_Base_40A316[HI304E(v19)] ^ dword_40B06B[BYTE2(v16)] ^ dword_40FBE7[(unsigned __int8)((unsigned __int16)(*((_WORD *)v8 + 4) ^ LOE77A(dword_404438[(unsigned __int8)v20]) ^ LOE77A(RijnDael_AES_Base_40A316[HI304E(v23)]) ^ LOE77A(dword_40FBE7[BYTE1(v17)]) ^ LOE77A(dword_40B06B[BYTE2(v7)])) >> 8)];\n    v20 = v8[5] ^ dword_404438[(unsigned __int8)v19] ^ RijnDael_AES_Base_40A316[HI304E(v16)] ^ dword_40B06B[BYTE2(v10)] ^ dword_40FBE7[BYTE1(v11)];\n    v23 = v8[6] ^ dword_404438[(unsigned __int8)v16] ^ RijnDael_AES_Base_40A316[HI304E(v10)] ^ dword_40FBE7[BYTE1(v19)] ^ dword_40B06B[BYTE2(v11)];\n    v7 = v8[7] ^ dword_404438[(unsigned __int8)v10] ^ RijnDael_AES_Base_40A316[HI304E(v11)] ^ dword_40B06B[BYTE2(v19)] ^ dword_40FBE7[BYTE1(v16)];\n    v8 += 8;\n    v9 = v22-- == 1;\n  }\n  v12 = *v8 ^ LOA063(dword_403E0F[(unsigned __int8)v7]) ^ dword_403E0F[HI304E(v17)] & 0xFFC8F900 ^ dword_403E0F[BYTE1(v23)] & 0xFF00 ^ dword_403E0F[BYTE2(v20)] & 0xFFC8F9;\n  *a4 = __ROL4__(v12, 8) & 0xFF1473 | __ROR4__(v12, 8) & 0xFF147300;\n  v13 = v8[1] ^ LOA063(dword_403E0F[(unsigned __int8)v17]) ^ dword_403E0F[HI304E(v20)] & 0xFFC8F900 ^ dword_403E0F[BYTE1(v7)] & 0xFF00 ^ dword_403E0F[BYTE2(v23)] & 0xFFC8F9;\n  a4[1] = __ROL4__(v13, 8) & 0xFF1473 | __ROR4__(v13, 8) & 0xFF147300;\n  a4[2] = __ROL4__(\n            v8[2] ^ LOA063(dword_403E0F[(unsigned __int8)v20]) ^ dword_403E0F[HI304E(v23)] & 0xFFC8F900 ^ dword_403E0F[BYTE1(v17)] & 0xFF00 ^ dword_403E0F[BYTE2(v7)] & 0xFFC8F9,\n            8) & 0xFF1473 | __ROR4__(\n                              v8[2] ^ LOA063(dword_403E0F[(unsigned __int8)v20]) ^ dword_403E0F[HI304E(v23)] & 0xFFC8F900 ^ dword_403E0F[BYTE1(v17)] & 0xFF00 ^ dword_403E0F[BYTE2(v7)] & 0xFFC8F9,\n                              8) & 0xFF147300;\n  v14 = v8[3] ^ LOA063(dword_403E0F[(unsigned __int8)v23]) ^ dword_403E0F[HI304E(v7)] & 0xFFC8F900 ^ dword_403E0F[BYTE1(v20)] & 0xFF00 ^ dword_403E0F[BYTE2(v17)] & 0xFFC8F9;\n  result = __ROL4__(v14, 8) & 0xFF1473 | __ROR4__(v14, 8) & 0xFF147300;\n  a4[3] = result;\n  return result;\n}\n// 40A316: using guessed type int RijnDael_AES_Base_40A316[256];\n// 40B06B: using guessed type int dword_40B06B[256];\n// 40FBE7: using guessed type int dword_40FBE7[256];\n// 404438: using guessed type int dword_404438[256];\n// 403E0F: using guessed type int dword_403E0F[1537];\n\n"
    },
    {
        "Function": "sub_408C30",
        "Total XOR and shift operations": 55,
        "XOR operations": 0,
        "Shift operations": 55,
        "Operation percentage": "71.43%",
        "Function Body": "\n__int64 __cdecl sub_408C30(int *a1, unsigned __int8 *a2)\n{\n  int v3; // esi\n  unsigned __int64 v4; // rt0\n  int v5; // ecx\n  int v6; // ecx\n  int v7; // ecx\n  int v8; // ecx\n  int v9; // ecx\n  int v10; // ecx\n  __int64 result; // rax\n\n  v3 = (a2[1] << 8) | (*a2 | (*((unsigned __int16 *)a2 + 1) << 16)) & 0x3FD2B9F;\n  a1[1] = (unsigned __int64)a2[1] >> 24;\n  *a1 = v3;\n  HI7CDAD(v4) = (unsigned __int64)(a2[6] & 7) >> 24;\n  LO04A4D(v4) = a2[5] | ((a2[6] & 7) << 8);\n  HI7CDAD(v4) = v4 >> 24;\n  LO04A4D(v4) = a2[4] | ((_DWORD)v4 << 8);\n  v5 = (a2[3] >> 2) | ((_DWORD)v4 << 6);\n  a1[3] = v4 >> 26;\n  a1[2] = v5;\n  HI7CDAD(v4) = (unsigned __int64)(a2[9] & 0x1F) >> 24;\n  LO04A4D(v4) = a2[8] | ((a2[9] & 0x1F) << 8);\n  HI7CDAD(v4) = v4 >> 24;\n  LO04A4D(v4) = a2[7] | ((_DWORD)v4 << 8);\n  a1[4] = (a2[6] >> 3) | (32 * v4);\n  a1[5] = v4 >> 27;\n  HI7CDAD(v4) = (unsigned __int64)(a2[12] & 0x3F) >> 24;\n  LO04A4D(v4) = a2[11] | ((a2[12] & 0x3F) << 8);\n  HI7CDAD(v4) = v4 >> 24;\n  LO04A4D(v4) = a2[10] | ((_DWORD)v4 << 8);\n  v6 = (a2[9] >> 5) | (8 * v4);\n  a1[7] = v4 >> 29;\n  a1[6] = v6;\n  HI7CDAD(v4) = (unsigned __int64)a2[15] >> 24;\n  LO04A4D(v4) = *((unsigned __int16 *)a2 + 7);\n  HI7CDAD(v4) = v4 >> 24;\n  LO04A4D(v4) = a2[13] | (*((unsigned __int16 *)a2 + 7) << 8);\n  v7 = (a2[12] >> 6) | (4 * v4);\n  a1[9] = v4 >> 30;\n  a1[8] = v7;\n  v8 = (unsigned __int64)a2[17] >> 24;\n  a1[10] = (a2[17] << 8) | (a2[16] | (*((unsigned __int16 *)a2 + 9) << 16)) & 0x1F30A4F;\n  a1[11] = v8;\n  HI7CDAD(v4) = (unsigned __int64)(a2[22] & 7) >> 24;\n  LO04A4D(v4) = a2[21] | ((a2[22] & 7) << 8);\n  HI7CDAD(v4) = v4 >> 24;\n  LO04A4D(v4) = a2[20] | ((_DWORD)v4 << 8);\n  v9 = (a2[19] >> 1) | ((_DWORD)v4 << 7);\n  a1[13] = v4 >> 25;\n  a1[12] = v9;\n  HI7CDAD(v4) = (unsigned __int64)(a2[25] & 0xF) >> 24;\n  LO04A4D(v4) = a2[24] | ((a2[25] & 0xF) << 8);\n  HI7CDAD(v4) = v4 >> 24;\n  LO04A4D(v4) = a2[23] | ((_DWORD)v4 << 8);\n  v10 = (a2[22] >> 3) | (32 * v4);\n  a1[15] = v4 >> 27;\n  a1[14] = v10;\n  HI7CDAD(v4) = (unsigned __int64)(a2[28] & 0x3F) >> 24;\n  LO04A4D(v4) = a2[27] | ((a2[28] & 0x3F) << 8);\n  HI7CDAD(v4) = v4 >> 24;\n  LO04A4D(v4) = a2[26] | ((_DWORD)v4 << 8);\n  a1[16] = (a2[25] >> 4) | (16 * v4);\n  a1[17] = v4 >> 28;\n  HI7CDAD(v4) = (unsigned __int64)(a2[31] & 0x7F) >> 24;\n  LO04A4D(v4) = a2[30] | ((a2[31] & 0x7F) << 8);\n  HI7CDAD(v4) = v4 >> 24;\n  LO04A4D(v4) = a2[29] | ((_DWORD)v4 << 8);\n  result = a2[28] >> 6;\n  a1[19] = v4 >> 30;\n  a1[18] = result | (4 * v4);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4045FD",
        "Total XOR and shift operations": 257,
        "XOR operations": 188,
        "Shift operations": 69,
        "Operation percentage": "65.06%",
        "Function Body": "\nint __cdecl sub_4045FD(_DWORD *a1)\n{\n  _DWORD *v1; // esi\n  int v2; // edi\n  int v3; // eax\n  unsigned int v4; // ecx\n  unsigned int v5; // ebx\n  int v6; // esi\n  int v7; // edx\n  int v8; // eax\n  int v9; // eax\n  int v10; // eax\n  int v11; // edx\n  int v12; // edx\n  int v13; // esi\n  int v14; // eax\n  int v15; // eax\n  int v16; // esi\n  int v17; // edx\n  int v18; // eax\n  int v19; // eax\n  int v20; // eax\n  int v21; // eax\n  int v22; // edx\n  int v23; // edx\n  int v24; // esi\n  int v25; // eax\n  int v26; // eax\n  int v27; // eax\n  int v28; // edx\n  int v29; // edx\n  int v30; // esi\n  int v31; // eax\n  int v32; // eax\n  int v33; // eax\n  int v34; // edx\n  unsigned int v35; // esi\n  unsigned int v36; // edx\n  __int64 v37; // rcx\n  unsigned int v38; // edi\n  unsigned int v39; // edx\n  unsigned __int64 v40; // rdi\n  unsigned int v41; // edx\n  unsigned __int64 v42; // rdi\n  unsigned int v43; // edx\n  unsigned __int64 v44; // rdi\n  unsigned int v45; // edx\n  unsigned __int64 v46; // rdi\n  unsigned int v47; // edx\n  unsigned __int64 v48; // rdi\n  unsigned int v49; // edx\n  unsigned __int64 v50; // rdi\n  unsigned int v51; // edx\n  unsigned __int64 v52; // rdi\n  unsigned int v53; // edx\n  unsigned __int64 v54; // rdi\n  unsigned int v55; // edx\n  unsigned __int64 v56; // rdi\n  unsigned int v57; // edx\n  unsigned __int64 v58; // rcx\n  unsigned int v59; // edx\n  int v60; // edx\n  int v61; // edx\n  int v62; // edx\n  int v63; // eax\n  int v64; // edx\n  int v65; // eax\n  int v66; // edx\n  int v67; // eax\n  int result; // eax\n  _DWORD *v69; // [esp+Ch] [ebp-28h]\n  unsigned int v70; // [esp+10h] [ebp-24h]\n  unsigned int v71; // [esp+10h] [ebp-24h]\n  unsigned int v72; // [esp+10h] [ebp-24h]\n  int v73; // [esp+10h] [ebp-24h]\n  int v74; // [esp+10h] [ebp-24h]\n  int v75; // [esp+10h] [ebp-24h]\n  int v76; // [esp+10h] [ebp-24h]\n  int v77; // [esp+10h] [ebp-24h]\n  __int64 v78; // [esp+14h] [ebp-20h]\n  __int64 v79; // [esp+14h] [ebp-20h]\n  __int64 v80; // [esp+14h] [ebp-20h]\n  __int64 v81; // [esp+14h] [ebp-20h]\n  __int64 v82; // [esp+14h] [ebp-20h]\n  __int64 v83; // [esp+14h] [ebp-20h]\n  int v84; // [esp+1Ch] [ebp-18h]\n  int v85; // [esp+1Ch] [ebp-18h]\n  int v86; // [esp+1Ch] [ebp-18h]\n  int v87; // [esp+1Ch] [ebp-18h]\n  int v88; // [esp+1Ch] [ebp-18h]\n  int v89; // [esp+20h] [ebp-14h]\n  int v90; // [esp+20h] [ebp-14h]\n  int v91; // [esp+20h] [ebp-14h]\n  int v92; // [esp+20h] [ebp-14h]\n  int v93; // [esp+20h] [ebp-14h]\n  int v94; // [esp+20h] [ebp-14h]\n  unsigned __int64 v95; // [esp+24h] [ebp-10h]\n  int v96; // [esp+2Ch] [ebp-8h]\n\n  v1 = a1;\n  v69 = &unk_401917;\n  do\n  {\n    v2 = v1[48] ^ v1[38] ^ v1[28] ^ v1[18] ^ v1[8];\n    v96 = v1[44] ^ v1[34] ^ v1[24] ^ v1[14] ^ v1[4];\n    v95 = *((_QWORD *)v1 + 20) ^ *((_QWORD *)v1 + 15) ^ *((_QWORD *)v1 + 10) ^ *((_QWORD *)v1 + 5) ^ *(_QWORD *)v1;\n    v3 = v1[42] ^ v1[32] ^ v1[22] ^ v1[12] ^ v1[2];\n    v4 = v1[43] ^ v1[33] ^ v1[23] ^ v1[13] ^ v1[3];\n    v70 = v1[45] ^ v1[35] ^ v1[25] ^ v1[15] ^ v1[5];\n    HI7CDAD(v78) = v1[46] ^ v1[36] ^ v1[26] ^ v1[16] ^ v1[6];\n    v5 = v1[49] ^ v1[39] ^ v1[29] ^ v1[19] ^ v1[9];\n    v89 = v3;\n    LO04A4D(v78) = v1[47] ^ v1[37] ^ v1[27] ^ v1[17] ^ v1[7];\n    v6 = (2 * v3) | (v4 >> 31);\n    v7 = __PA2F09__(v4, v3) >> 31;\n    v8 = v5 ^ a1[1] ^ v7;\n    *a1 ^= v2 ^ v6;\n    a1[1] = v8;\n    a1[10] ^= v2 ^ v6;\n    a1[11] ^= v5 ^ v7;\n    v9 = v5 ^ a1[21] ^ v7;\n    a1[20] ^= v2 ^ v6;\n    a1[21] = v9;\n    v10 = v5 ^ a1[31] ^ v7;\n    a1[30] ^= v2 ^ v6;\n    a1[31] = v10;\n    v11 = v5 ^ a1[41] ^ v7;\n    a1[40] ^= v2 ^ v6;\n    a1[41] = v11;\n    v12 = __PA2F09__(v70, v96) >> 31;\n    v13 = (2 * v96) | (v70 >> 31);\n    v14 = HI7CDAD(v95) ^ a1[3] ^ v12;\n    a1[2] ^= v95 ^ v13;\n    a1[3] = v14;\n    v15 = HI7CDAD(v95) ^ a1[13] ^ v12;\n    a1[12] ^= v95 ^ v13;\n    a1[13] = v15;\n    a1[22] ^= v95 ^ v13;\n    a1[23] ^= HI7CDAD(v95) ^ v12;\n    a1[32] ^= v95 ^ v13;\n    a1[33] ^= HI7CDAD(v95) ^ v12;\n    a1[42] ^= v95 ^ v13;\n    a1[43] ^= HI7CDAD(v95) ^ v12;\n    v16 = v78 >> 31;\n    v17 = __PA2F09__(v78, HI7CDAD(v78)) >> 31;\n    v18 = v4 ^ a1[5] ^ v17;\n    a1[4] ^= v89 ^ v16;\n    a1[5] = v18;\n    v19 = v4 ^ a1[15] ^ v17;\n    a1[14] ^= v89 ^ v16;\n    a1[15] = v19;\n    v20 = v4 ^ a1[25] ^ v17;\n    a1[24] ^= v89 ^ v16;\n    a1[25] = v20;\n    v21 = v4 ^ a1[35] ^ v17;\n    a1[34] ^= v89 ^ v16;\n    a1[35] = v21;\n    v22 = v4 ^ a1[45] ^ v17;\n    a1[44] ^= v89 ^ v16;\n    a1[45] = v22;\n    v23 = __PA2F09__(v5, v2) >> 31;\n    v24 = (2 * v2) | (v5 >> 31);\n    a1[6] ^= v96 ^ v24;\n    a1[7] ^= v70 ^ v23;\n    v25 = a1[17] ^ v23;\n    a1[16] ^= v96 ^ v24;\n    a1[17] = v70 ^ v25;\n    v26 = v70 ^ a1[27] ^ v23;\n    a1[26] ^= v96 ^ v24;\n    a1[27] = v26;\n    v27 = v70 ^ a1[37] ^ v23;\n    a1[36] ^= v96 ^ v24;\n    a1[37] = v27;\n    v28 = v70 ^ a1[47] ^ v23;\n    a1[46] ^= v96 ^ v24;\n    a1[47] = v28;\n    v29 = v95 >> 31;\n    v30 = (2 * v95) | (HI7CDAD(v95) >> 31);\n    v31 = v78 ^ a1[9] ^ v29;\n    a1[8] ^= HI7CDAD(v78) ^ v30;\n    a1[9] = v31;\n    a1[18] ^= HI7CDAD(v78) ^ v30;\n    a1[19] ^= v78 ^ v29;\n    v32 = v78 ^ a1[29] ^ v29;\n    a1[28] ^= HI7CDAD(v78) ^ v30;\n    a1[29] = v32;\n    v33 = a1[39] ^ v29;\n    a1[38] ^= HI7CDAD(v78) ^ v30;\n    a1[39] = v78 ^ v33;\n    v34 = v78 ^ a1[49] ^ v29;\n    a1[48] ^= HI7CDAD(v78) ^ v30;\n    a1[49] = v34;\n    v35 = a1[2];\n    v36 = a1[3];\n    HI7CDAD(v37) = a1[20];\n    v38 = a1[21];\n    a1[20] = (2 * v35) | (v36 >> 31);\n    LO04A4D(v37) = v38;\n    a1[21] = __PA2F09__(v36, v35) >> 31;\n    v39 = a1[15];\n    v71 = a1[14];\n    a1[15] = __PA2F09__(v38, HI7CDAD(v37)) >> 29;\n    a1[14] = v37 >> 29;\n    v40 = *((_QWORD *)a1 + 11);\n    a1[22] = (v71 << 6) | (v39 >> 26);\n    a1[23] = __PA2F09__(v39, v71) >> 26;\n    HI7CDAD(v37) = a1[34];\n    v41 = a1[35];\n    a1[34] = ((_DWORD)v40 << 10) | (HI7CDAD(v40) >> 22);\n    LO04A4D(v37) = v41;\n    a1[35] = v40 >> 22;\n    v42 = *((_QWORD *)a1 + 18);\n    a1[36] = v37 >> 17;\n    a1[37] = __PA2F09__(v41, HI7CDAD(v37)) >> 17;\n    HI7CDAD(v37) = a1[6];\n    v43 = a1[7];\n    a1[6] = ((_DWORD)v42 << 21) | (HI7CDAD(v42) >> 11);\n    LO04A4D(v37) = v43;\n    a1[7] = v42 >> 11;\n    v44 = *((_QWORD *)a1 + 5);\n    a1[10] = v37 >> 4;\n    a1[11] = __PA2F09__(v43, HI7CDAD(v37)) >> 4;\n    HI7CDAD(v37) = a1[32];\n    v45 = a1[33];\n    a1[33] = (HI7CDAD(v44) >> 28) | (16 * v44);\n    a1[32] = v44 >> 28;\n    v46 = *((_QWORD *)a1 + 8);\n    a1[17] = __SPA2F09__(HI7CDAD(v37), v45) >> 19;\n    a1[16] = __PA2F09__(v45, HI7CDAD(v37)) >> 19;\n    HI7CDAD(v37) = a1[42];\n    v47 = a1[43];\n    a1[43] = (HI7CDAD(v46) >> 9) | ((_DWORD)v46 << 23);\n    LO04A4D(v37) = v47;\n    a1[42] = v46 >> 9;\n    v48 = *((_QWORD *)a1 + 24);\n    a1[48] = v37 >> 30;\n    a1[49] = __PA2F09__(v47, HI7CDAD(v37)) >> 30;\n    HI7CDAD(v37) = a1[8];\n    v49 = a1[9];\n    a1[8] = ((_DWORD)v48 << 14) | (HI7CDAD(v48) >> 18);\n    LO04A4D(v37) = v49;\n    a1[9] = v48 >> 18;\n    v50 = *((_QWORD *)a1 + 15);\n    a1[30] = v37 >> 5;\n    a1[31] = __PA2F09__(v49, HI7CDAD(v37)) >> 5;\n    HI7CDAD(v37) = a1[46];\n    v51 = a1[47];\n    a1[47] = (HI7CDAD(v50) >> 23) | ((_DWORD)v50 << 9);\n    a1[46] = v50 >> 23;\n    v52 = *((_QWORD *)a1 + 19);\n    a1[39] = __SPA2F09__(HI7CDAD(v37), v51) >> 8;\n    a1[38] = __PA2F09__(v51, HI7CDAD(v37)) >> 8;\n    HI7CDAD(v37) = a1[26];\n    v53 = a1[27];\n    a1[26] = ((_DWORD)v52 << 8) | HI304E(HI7CDAD(v52));\n    LO04A4D(v37) = v53;\n    a1[27] = v52 >> 24;\n    v54 = *((_QWORD *)a1 + 12);\n    a1[24] = v37 >> 7;\n    a1[25] = __PA2F09__(v53, HI7CDAD(v37)) >> 7;\n    HI7CDAD(v37) = a1[4];\n    v55 = a1[5];\n    a1[5] = (HI7CDAD(v54) >> 21) | ((_DWORD)v54 << 11);\n    a1[4] = v54 >> 21;\n    v56 = *((_QWORD *)a1 + 20);\n    a1[40] = __PA2F09__(v55, HI7CDAD(v37)) >> 2;\n    a1[41] = __SPA2F09__(HI7CDAD(v37), v55) >> 2;\n    HI7CDAD(v37) = a1[28];\n    v57 = a1[29];\n    a1[28] = ((_DWORD)v56 << 18) | (HI7CDAD(v56) >> 14);\n    a1[29] = v56 >> 14;\n    HI7CDAD(v56) = a1[45];\n    v72 = a1[44];\n    v58 = __PA2F09__(v57, HI7CDAD(v37)) << 7;\n    a1[44] = HI7CDAD(v58);\n    a1[45] = (v57 >> 25) | v58;\n    HI7CDAD(v58) = a1[18];\n    LO04A4D(v56) = a1[19];\n    a1[19] = (HI7CDAD(v56) >> 3) | (v72 << 29);\n    a1[18] = __PA2F09__(HI7CDAD(v56), v72) >> 3;\n    HI7CDAD(v56) = a1[12];\n    v59 = a1[13];\n    a1[12] = (HI7CDAD(v58) << 20) | ((unsigned int)v56 >> 12);\n    a1[13] = __PA2F09__(v56, HI7CDAD(v58)) >> 12;\n    a1[2] = __PA2F09__(v59, HI7CDAD(v56)) >> 20;\n    a1[3] = (v59 >> 20) | (HI7CDAD(v56) << 12);\n    HI7CDAD(v56) = a1[4];\n    v60 = a1[5];\n    v79 = *(_QWORD *)a1;\n    LO04A4D(v56) = a1[7];\n    v84 = a1[3];\n    HI7CDAD(v95) = a1[2];\n    v73 = a1[6];\n    v90 = a1[8];\n    LO04A4D(v95) = a1[9];\n    *a1 ^= HI7CDAD(v56) & ~HI7CDAD(v95);\n    a1[1] = HI7CDAD(v79) ^ v60 & ~v84;\n    a1[2] = HI7CDAD(v95) ^ v73 & ~HI7CDAD(v56);\n    a1[3] = v84 ^ v56 & ~v60;\n    a1[5] = v60 ^ v95 & ~(_DWORD)v56;\n    a1[4] = HI7CDAD(v56) ^ v90 & ~v73;\n    a1[7] = v56 ^ HI7CDAD(v79) & ~(_DWORD)v95;\n    a1[6] = v73 ^ v79 & ~v90;\n    a1[9] = v95 ^ v84 & ~HI7CDAD(v79);\n    a1[8] = v90 ^ HI7CDAD(v95) & ~(_DWORD)v79;\n    HI7CDAD(v56) = a1[14];\n    v61 = a1[15];\n    v80 = *((_QWORD *)a1 + 5);\n    LO04A4D(v56) = a1[17];\n    v85 = a1[13];\n    HI7CDAD(v95) = a1[12];\n    v74 = a1[16];\n    v91 = a1[18];\n    LO04A4D(v95) = a1[19];\n    a1[10] = v80 ^ HI7CDAD(v56) & ~HI7CDAD(v95);\n    a1[11] = HI7CDAD(v80) ^ v61 & ~v85;\n    a1[12] = HI7CDAD(v95) ^ v74 & ~HI7CDAD(v56);\n    a1[13] = v85 ^ v56 & ~v61;\n    a1[15] = v61 ^ v95 & ~(_DWORD)v56;\n    a1[14] = HI7CDAD(v56) ^ v91 & ~v74;\n    a1[16] = v74 ^ v80 & ~v91;\n    a1[17] = v56 ^ HI7CDAD(v80) & ~(_DWORD)v95;\n    a1[18] = v91 ^ HI7CDAD(v95) & ~(_DWORD)v80;\n    a1[19] = v95 ^ v85 & ~HI7CDAD(v80);\n    HI7CDAD(v56) = a1[24];\n    v62 = a1[25];\n    v81 = *((_QWORD *)a1 + 10);\n    LO04A4D(v56) = a1[27];\n    v86 = a1[23];\n    HI7CDAD(v95) = a1[22];\n    v75 = a1[26];\n    v92 = a1[28];\n    v63 = a1[29];\n    a1[20] = v81 ^ HI7CDAD(v56) & ~HI7CDAD(v95);\n    a1[21] = HI7CDAD(v81) ^ v62 & ~v86;\n    a1[22] = HI7CDAD(v95) ^ v75 & ~HI7CDAD(v56);\n    a1[23] = v86 ^ v56 & ~v62;\n    a1[24] = HI7CDAD(v56) ^ v92 & ~v75;\n    a1[25] = v62 ^ v63 & ~(_DWORD)v56;\n    a1[26] = v75 ^ v81 & ~v92;\n    a1[27] = v56 ^ HI7CDAD(v81) & ~v63;\n    a1[28] = v92 ^ HI7CDAD(v95) & ~(_DWORD)v81;\n    a1[29] = v63 ^ v86 & ~HI7CDAD(v81);\n    HI7CDAD(v56) = a1[34];\n    v64 = a1[35];\n    v82 = *((_QWORD *)a1 + 15);\n    LO04A4D(v56) = a1[37];\n    v87 = a1[33];\n    HI7CDAD(v95) = a1[32];\n    v76 = a1[36];\n    v93 = a1[38];\n    v65 = a1[39];\n    a1[30] = v82 ^ HI7CDAD(v56) & ~HI7CDAD(v95);\n    a1[31] = HI7CDAD(v82) ^ v64 & ~v87;\n    a1[32] = HI7CDAD(v95) ^ v76 & ~HI7CDAD(v56);\n    a1[33] = v87 ^ v56 & ~v64;\n    a1[34] = HI7CDAD(v56) ^ v93 & ~v76;\n    a1[35] = v64 ^ v65 & ~(_DWORD)v56;\n    a1[36] = v76 ^ v82 & ~v93;\n    a1[37] = v56 ^ HI7CDAD(v82) & ~v65;\n    a1[38] = v93 ^ HI7CDAD(v95) & ~(_DWORD)v82;\n    a1[39] = v65 ^ v87 & ~HI7CDAD(v82);\n    HI7CDAD(v56) = a1[44];\n    v83 = *((_QWORD *)a1 + 20);\n    v66 = a1[45];\n    LO04A4D(v56) = a1[47];\n    v88 = a1[43];\n    HI7CDAD(v95) = a1[42];\n    v77 = a1[46];\n    v94 = a1[48];\n    v67 = a1[49];\n    a1[40] = v83 ^ HI7CDAD(v56) & ~HI7CDAD(v95);\n    a1[41] = HI7CDAD(v83) ^ v66 & ~v88;\n    a1[42] = HI7CDAD(v95) ^ v77 & ~HI7CDAD(v56);\n    a1[43] = v88 ^ v56 & ~v66;\n    LO04A4D(v58) = HI7CDAD(v56) ^ v94 & ~v77;\n    v1 = a1;\n    a1[44] = v58;\n    a1[45] = v66 ^ v67 & ~(_DWORD)v56;\n    a1[46] = v77 ^ v83 & ~v94;\n    a1[47] = v56 ^ HI7CDAD(v83) & ~v67;\n    a1[48] = v94 ^ HI7CDAD(v95) & ~(_DWORD)v83;\n    a1[49] = v67 ^ v88 & ~HI7CDAD(v83);\n    *a1 ^= *v69;\n    result = v69[1];\n    a1[1] ^= result;\n    v69 += 2;\n  }\n  while ( (int)v69 < (int)&dbl_4037D7 );\n  return result;\n}\n// 4037D7: using guessed type double dbl_4037D7;\n\n"
    },
    {
        "Function": "sub_40534B",
        "Total XOR and shift operations": 57,
        "XOR operations": 57,
        "Shift operations": 0,
        "Operation percentage": "36.08%",
        "Function Body": "\nint __cdecl sub_40534B(unsigned int *a1, _DWORD *a2, int a3)\n{\n  int *v3; // edi\n  unsigned int v4; // edx\n  unsigned int v5; // ecx\n  int v6; // eax\n  unsigned int v7; // ecx\n  int v8; // ecx\n  _DWORD *v9; // esi\n  unsigned int v10; // edx\n  int v11; // eax\n  int v12; // ecx\n  unsigned int v14; // edx\n  int v15; // eax\n  unsigned int v16; // ecx\n  _DWORD *v17; // edi\n  int v18; // eax\n  int v19; // ecx\n  int v20; // eax\n  int *v21; // esi\n  int v22; // ecx\n  int v23; // eax\n  unsigned int v24; // edx\n  int v25; // eax\n  int v26; // ecx\n  unsigned int v27; // eax\n  unsigned int v28; // ecx\n  unsigned int v29; // edx\n  int v30; // eax\n  unsigned int *v31; // edx\n  int v32; // ecx\n  int v33; // eax\n  unsigned int v34; // edx\n  int v35; // eax\n  unsigned int *v36; // edx\n  int v37; // ecx\n  int v38; // ecx\n  int v39; // eax\n  unsigned int v40; // edx\n  int v41; // eax\n  int v42; // ecx\n  _DWORD *v44; // [esp+18h] [ebp+Ch]\n  unsigned int *v45; // [esp+1Ch] [ebp+10h]\n\n  v3 = (int *)(a1 + 1);\n  *a1 = __ROL4__(*a2, 8) & 0xFF1473 | __ROR4__(*a2, 8) & 0xFF147300;\n  a1[1] = __ROL4__(a2[1], 8) & 0xFF1473 | __ROR4__(a2[1], 8) & 0xFF147300;\n  a1[2] = __ROL4__(a2[2], 8) & 0xFF1473 | __ROR4__(a2[2], 8) & 0xFF147300;\n  v4 = __ROL4__(a2[3], 8) & 0xFF1473 | __ROR4__(a2[3], 8) & 0xFF147300;\n  a1[3] = v4;\n  if ( a3 == 128 )\n  {\n    v5 = *a1 ^ dword_403E0F[(unsigned __int8)v4] & 0xFF00 ^ LOA063(dword_403E0F[HI304E(v4)]) ^ dword_403E0F[BYTE1(v4)] & 0xFFC8F9 ^ (dword_403E0F[BYTE2(v4)] ^ 0x1044540) & 0xFFC8F900;\n    v6 = v5 ^ *v3;\n    a1[4] = v5;\n    v7 = a1[2];\n    a1[5] = v6;\n    v8 = v6 ^ v7;\n    a1[6] = v8;\n    a1[7] = v8 ^ v4;\n    v9 = &unk_40D8E7;\n    do\n    {\n      v3 += 4;\n      v10 = *v9++ ^ *(v3 - 1) ^ dword_403E0F[(unsigned __int8)v3[2]] & 0xFF00 ^ LOA063(dword_403E0F[HI304E(v3[2])]) ^ dword_403E0F[(unsigned __int8)BYTE2(v3[2])] & 0xFFC8F900 ^ dword_403E0F[(unsigned __int8)BYTE1(v3[2])] & 0xFFC8F9;\n      v3[3] = v10;\n      v11 = v10 ^ *v3;\n      v3[4] = v11;\n      v12 = v11 ^ v3[1];\n      v3[5] = v12;\n      v3[6] = v12 ^ v3[2];\n    }\n    while ( v9 != (_DWORD *)&unk_401917 );\n    return 10;\n  }\n  a1[4] = __ROL4__(a2[4], 8) & 0xFF1473 | __ROR4__(a2[4], 8) & 0xFF147300;\n  v14 = __ROL4__(a2[5], 8) & 0xFF1473 | __ROR4__(a2[5], 8) & 0xFF147300;\n  a1[5] = v14;\n  if ( a3 == 192 )\n  {\n    v15 = *v3;\n    v16 = *a1 ^ dword_403E0F[(unsigned __int8)v14] & 0xFF00 ^ LOA063(dword_403E0F[HI304E(v14)]) ^ dword_403E0F[BYTE1(v14)] & 0xFFC8F9 ^ (dword_403E0F[BYTE2(v14)] ^ 0x1044540) & 0xFFC8F900;\n    v17 = &unk_40D8E7;\n    v18 = v16 ^ v15;\n    a1[6] = v16;\n    v19 = v18 ^ a1[2];\n    a1[7] = v18;\n    v20 = v19 ^ a1[3];\n    a1[8] = v19;\n    a1[9] = v20;\n    v21 = (int *)(a1 + 10);\n    do\n    {\n      v22 = *(v21 - 1) ^ *(v21 - 6);\n      v23 = v22 ^ *(v21 - 5);\n      *v21 = v22;\n      v21[1] = v23;\n      v21 += 6;\n      v24 = *v17++ ^ *(v21 - 10) ^ dword_403E0F[(unsigned __int8)*(v21 - 5)] & 0xFF00 ^ LOA063(dword_403E0F[HI304E(*(v21 - 5))]) ^ dword_403E0F[(unsigned __int8)BYTE2(*(v21 - 5))] & 0xFFC8F900 ^ dword_403E0F[(unsigned __int8)BYTE1(*(v21 - 5))] & 0xFFC8F9;\n      *(v21 - 4) = v24;\n      v25 = v24 ^ *(v21 - 9);\n      *(v21 - 3) = v25;\n      v26 = v25 ^ *(v21 - 8);\n      *(v21 - 2) = v26;\n      *(v21 - 1) = v26 ^ *(v21 - 7);\n    }\n    while ( v17 != (_DWORD *)&unk_402415 );\n    return 12;\n  }\n  a1[6] = __ROL4__(a2[6], 8) & 0xFF1473 | __ROR4__(a2[6], 8) & 0xFF147300;\n  v27 = __ROL4__(a2[7], 8) & 0xFF1473 | __ROR4__(a2[7], 8) & 0xFF147300;\n  a1[7] = v27;\n  if ( a3 == 256 )\n  {\n    v44 = &unk_40D8E7;\n    v28 = a1[2];\n    v29 = *a1 ^ dword_403E0F[(unsigned __int8)v27] & 0xFF00 ^ LOA063(dword_403E0F[HI304E(v27)]) ^ dword_403E0F[BYTE1(v27)] & 0xFFC8F9 ^ (dword_403E0F[BYTE2(v27)] ^ 0x1044540) & 0xFFC8F900;\n    v30 = v29 ^ *v3;\n    a1[8] = v29;\n    a1[9] = v30;\n    v31 = a1 + 12;\n    v32 = v30 ^ v28;\n    v45 = a1 + 12;\n    v33 = v32 ^ a1[3];\n    a1[10] = v32;\n    a1[11] = v33;\n    do\n    {\n      v34 = *(v45 - 8) ^ LOA063(dword_403E0F[(unsigned __int8)*(v31 - 1)]) ^ dword_403E0F[HI304E(*(v31 - 1))] & 0xFFC8F900 ^ dword_403E0F[(unsigned __int8)BYTE1(*(v31 - 1))] & 0xFF00 ^ dword_403E0F[(unsigned __int8)BYTE2(*(v31 - 1))] & 0xFFC8F9;\n      *v45 = v34;\n      v35 = v34 ^ *(v45 - 7);\n      v36 = v45;\n      v37 = *(v45 - 6);\n      v45[1] = v35;\n      v38 = v35 ^ v37;\n      v39 = v38 ^ *(v45 - 5);\n      v45[2] = v38;\n      v45[3] = v39;\n      v45 += 8;\n      v40 = *v44 ^ *(v36 - 4) ^ dword_403E0F[(unsigned __int8)v36[3]] & 0xFF00 ^ LOA063(dword_403E0F[HI304E(v36[3])]) ^ dword_403E0F[(unsigned __int8)BYTE2(v36[3])] & 0xFFC8F900 ^ dword_403E0F[(unsigned __int8)BYTE1(v36[3])] & 0xFFC8F9;\n      *(v45 - 4) = v40;\n      v41 = v40 ^ *(v45 - 11);\n      v31 = v45;\n      *(v45 - 3) = v41;\n      v42 = v41 ^ *(v45 - 10);\n      *(v45 - 2) = v42;\n      *(v45 - 1) = v42 ^ *(v45 - 9);\n      ++v44;\n    }\n    while ( v44 != (_DWORD *)&unk_40276D );\n    return 14;\n  }\n  return 0;\n}\n// 403E0F: using guessed type int dword_403E0F[1537];\n\n"
    },
    {
        "Function": "sub_40F9DD",
        "Total XOR and shift operations": 32,
        "XOR operations": 32,
        "Shift operations": 0,
        "Operation percentage": "27.12%",
        "Function Body": "\nint __cdecl sub_40F9DD(int *a1, const void *a2)\n{\n  int v2; // edi\n  int v3; // ecx\n  int v4; // edx\n  int v5; // esi\n  int v6; // ebx\n  int v7; // eax\n  int v8; // esi\n  int v9; // edx\n  int v10; // ebx\n  int v11; // ecx\n  bool v12; // zf\n  int v13; // edx\n  int result; // eax\n  int v15[16]; // [esp+Ch] [ebp-74h] BYREF\n  int v16; // [esp+4Ch] [ebp-34h]\n  int v17; // [esp+50h] [ebp-30h]\n  int v18; // [esp+54h] [ebp-2Ch]\n  int v19; // [esp+58h] [ebp-28h]\n  int v20; // [esp+5Ch] [ebp-24h]\n  int v21; // [esp+60h] [ebp-20h]\n  int v22; // [esp+64h] [ebp-1Ch]\n  int v23; // [esp+68h] [ebp-18h]\n  int v24; // [esp+6Ch] [ebp-14h]\n  int v25; // [esp+70h] [ebp-10h]\n  int v26; // [esp+74h] [ebp-Ch]\n  int v27; // [esp+78h] [ebp-8h]\n  int v28; // [esp+7Ch] [ebp-4h]\n\n  v16 = 10;\n  qmemcpy(v15, a2, sizeof(v15));\n  v2 = v15[12];\n  v3 = v15[15];\n  v4 = v15[14];\n  v5 = v15[13];\n  v6 = v15[11];\n  v28 = v15[10];\n  v21 = v15[9];\n  v24 = v15[8];\n  v18 = v15[7];\n  v19 = v15[6];\n  v22 = v15[5];\n  v25 = v15[4];\n  v20 = v15[3];\n  v26 = v15[2];\n  v27 = v15[1];\n  v7 = v15[0];\n  v17 = v15[12];\n  v23 = v15[0];\n  do\n  {\n    v25 ^= __ROL4__(v2 + v7, 7);\n    v24 ^= __ROL4__(v23 + v25, 9);\n    v17 ^= __ROL4__(v25 + v24, 13);\n    v23 ^= __ROL4__(v17 + v24, 18);\n    v21 ^= __ROL4__(v22 + v27, 7);\n    v8 = __ROL4__(v22 + v21, 9) ^ v5;\n    v27 ^= __ROL4__(v8 + v21, 13);\n    v22 ^= __ROL4__(v8 + v27, 18);\n    v9 = __ROL4__(v19 + v28, 7) ^ v4;\n    v26 ^= __ROL4__(v9 + v28, 9);\n    v19 ^= __ROL4__(v9 + v26, 13);\n    v28 ^= __ROL4__(v19 + v26, 18);\n    v20 ^= __ROL4__(v6 + v3, 7);\n    v18 ^= __ROL4__(v20 + v3, 9);\n    v10 = __ROL4__(v18 + v20, 13) ^ v6;\n    v11 = __ROL4__(v18 + v10, 18) ^ v3;\n    v27 ^= __ROL4__(v20 + v23, 7);\n    v15[1] = v27;\n    v26 ^= __ROL4__(v23 + v27, 9);\n    v15[2] = v26;\n    v20 ^= __ROL4__(v27 + v26, 13);\n    v15[3] = v20;\n    v19 ^= __ROL4__(v25 + v22, 7);\n    v15[6] = v19;\n    v23 ^= __ROL4__(v20 + v26, 18);\n    v15[0] = v23;\n    v18 ^= __ROL4__(v22 + v19, 9);\n    v25 ^= __ROL4__(v18 + v19, 13);\n    v15[4] = v25;\n    v15[7] = v18;\n    v22 ^= __ROL4__(v18 + v25, 18);\n    v15[5] = v22;\n    v6 = __ROL4__(v21 + v28, 7) ^ v10;\n    v24 ^= __ROL4__(v6 + v28, 9);\n    v15[8] = v24;\n    v21 ^= __ROL4__(v6 + v24, 13);\n    v15[9] = v21;\n    v28 ^= __ROL4__(v24 + v21, 18);\n    v15[10] = v28;\n    v2 = __ROL4__(v11 + v9, 7) ^ v17;\n    v17 = v2;\n    v15[12] = v2;\n    v5 = __ROL4__(v11 + v2, 9) ^ v8;\n    v4 = __ROL4__(v5 + v2, 13) ^ v9;\n    v3 = __ROL4__(v4 + v5, 18) ^ v11;\n    v12 = v16-- == 1;\n    v7 = v23;\n  }\n  while ( !v12 );\n  v15[11] = v6;\n  v15[14] = v4;\n  v13 = 0;\n  v15[15] = v3;\n  v15[13] = v5;\n  do\n  {\n    result = *(int *)((char *)&v15[v13] + (_BYTE *)a2 - (_BYTE *)v15);\n    v15[v13++] += result;\n  }\n  while ( v13 < 16 );\n  qmemcpy(a1, v15, 0x40u);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40DAE2",
        "Total XOR and shift operations": 6,
        "XOR operations": 4,
        "Shift operations": 2,
        "Operation percentage": "22.22%",
        "Function Body": "\nchar __cdecl sub_40DAE2(unsigned int a1)\n{\n  unsigned int v1; // esi\n  __int16 v2; // ax\n  unsigned __int16 v3; // bx\n  unsigned __int16 v4; // di\n  int v6; // [esp+10h] [ebp-8h]\n\n  v1 = HI61D3(a1);\n  v2 = 0;\n  v4 = HI61D3(a1);\n  v3 = a1;\n  v6 = 64;\n  while ( 1 )\n  {\n    v3 += (16 * v1) ^ (v4 >> 5) ^ (v2 + 31161 + v1);\n    v4 += (16 * v3) ^ (v3 >> 5) ^ (v3 + v2 + 31161);\n    if ( !--v6 )\n      break;\n    LOE77A(v1) = v4;\n    v2 += 31161;\n  }\n  return v3 & 1;\n}\n\n"
    },
    {
        "Function": "sub_406BC9",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "16.67%",
        "Function Body": "\nchar *__cdecl sub_406BC9(char *a1, unsigned __int8 a2, unsigned int a3)\n{\n  if ( a3 )\n  {\n    memset32(a1, 16B1AD09 * a2, a3 >> 2);\n    memset(&a1[4 * (a3 >> 2)], a2, a3 & 3);\n  }\n  return a1;\n}\n\n"
    },
    {
        "Function": "sub_40269F",
        "Total XOR and shift operations": 4,
        "XOR operations": 3,
        "Shift operations": 1,
        "Operation percentage": "13.33%",
        "Function Body": "\n__int64 __cdecl sub_40269F(int a1, _DWORD *a2, int a3)\n{\n  _DWORD *v3; // esi\n  int v4; // edi\n  int v5; // eax\n  int v6; // ecx\n  bool v7; // zf\n  __int64 result; // rax\n  int v10; // [esp+20h] [ebp+14h]\n\n  v3 = a2;\n  v4 = a1 - (_DWORD)a2;\n  v10 = 10;\n  do\n  {\n    v5 = *(_DWORD *)((char *)v3 + v4);\n    v6 = -a3 & (v5 ^ *v3);\n    *(_QWORD *)((char *)v3 + v4) = v6 ^ v5;\n    v7 = v10-- == 1;\n    result = v6 ^ *v3;\n    *v3 = result;\n    v3 += 2;\n    *(v3 - 1) = (int)result >> 31;\n  }\n  while ( !v7 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40F716",
        "Total XOR and shift operations": 3,
        "XOR operations": 2,
        "Shift operations": 1,
        "Operation percentage": "12.00%",
        "Function Body": "\nint __cdecl sub_40F716(int a1, unsigned __int8 *a2, int a3)\n{\n  int v3; // edx\n  unsigned int v4; // ecx\n  int v6; // edi\n\n  v3 = a3;\n  v4 = ~a1;\n  while ( v3 )\n  {\n    --v3;\n    v4 ^= *a2++;\n    v6 = 8;\n    do\n    {\n      v4 = -(v4 & 1) & 0xED5E1820 ^ (v4 >> 1);\n      --v6;\n    }\n    while ( v6 );\n  }\n  return ~v4;\n}\n\n"
    },
    {
        "Function": "sub_407036",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "11.83%",
        "Function Body": "\nint __cdecl sub_407036(_BYTE *a1, int a2)\n{\n  int i; // ecx\n  int v3; // edi\n  int v4; // esi\n  int j; // ebx\n  int v6; // ecx\n  int v7; // edx\n  int v8; // eax\n  int v9; // eax\n  int v10; // edx\n  int k; // edx\n  int v12; // eax\n  int v13; // ecx\n  int v14; // eax\n  int v15; // ecx\n  int v16; // esi\n  int v17; // ebx\n  int v18; // eax\n  int v19; // edx\n  int v20; // edx\n  int v21; // ebx\n  int v22; // eax\n  int v23; // ecx\n  int v24; // edx\n  int v25; // ebx\n  int v26; // ecx\n  int v27; // edx\n  int v28; // ecx\n  int v29; // edx\n  int v30; // ecx\n  int v31; // edx\n  int v32; // ecx\n  int result; // eax\n  int v34; // [esp+0h] [ebp-40h]\n  int v35[4]; // [esp+4h] [ebp-3Ch]\n  int v36; // [esp+14h] [ebp-2Ch]\n  int v37; // [esp+18h] [ebp-28h]\n  int v38; // [esp+1Ch] [ebp-24h]\n  int v39; // [esp+20h] [ebp-20h]\n  int v40; // [esp+24h] [ebp-1Ch]\n  int v41; // [esp+28h] [ebp-18h]\n  int v42; // [esp+2Ch] [ebp-14h]\n  int v43; // [esp+30h] [ebp-10h]\n  int v44; // [esp+34h] [ebp-Ch]\n  int v45; // [esp+38h] [ebp-8h]\n  int v46; // [esp+3Ch] [ebp-4h]\n\n  for ( i = 0; i < 10; ++i )\n    v35[i - 1] = *(_DWORD *)(a2 + 8 * i);\n  v3 = 2;\n  v4 = 2;\n  do\n  {\n    for ( j = 0; j < 9; ++j )\n    {\n      v6 = v35[j - 1];\n      if ( (j & 1) != 0 )\n      {\n        v7 = -((v6 >> 25) & (v6 >> 31));\n        v8 = -33699832 * ((v6 >> 25) & (v6 >> 31));\n      }\n      else\n      {\n        v7 = -((v6 >> 26) & (v6 >> 31));\n        v8 = -679AD564 * ((v6 >> 26) & (v6 >> 31));\n      }\n      v35[j] -= v7;\n      v35[j - 1] = v6 + v8;\n    }\n    v9 = 19 * ((v40 >> 25) & (v40 >> 31));\n    v40 += -33699832 * ((v40 >> 25) & (v40 >> 31));\n    v10 = v9 + v34;\n    v34 += v9;\n    --v4;\n  }\n  while ( v4 );\n  v35[0] += (v10 >> 26) & (v10 >> 31);\n  v34 = -679AD564 * ((v10 >> 26) & (v10 >> 31)) + v10;\n  do\n  {\n    for ( k = 0; k < 9; ++k )\n    {\n      v12 = v35[k - 1];\n      if ( (k & 1) != 0 )\n      {\n        v13 = v12 >> 25;\n        v14 = v12 & 0x1F30A4F;\n      }\n      else\n      {\n        v13 = v12 >> 26;\n        v14 = v12 & 0x3FD2B9F;\n      }\n      v35[k] += v13;\n      v35[k - 1] = v14;\n    }\n    v15 = v40 >> 25;\n    v40 &= 0x1F30A4Fu;\n    v16 = 19 * v15 + v34;\n    v34 = v16;\n    --v3;\n  }\n  while ( v3 );\n  v17 = 1;\n  v45 = 1;\n  v46 = 1;\n  do\n  {\n    if ( (v17 & 1) != 0 )\n      v18 = sub_4009C7(v35[v17 - 1], 0x1F30A4F);\n    else\n      v18 = sub_4009C7(v35[v17 - 1], 0x3FD2B9F);\n    v20 = v18 & v19;\n    ++v17;\n  }\n  while ( v17 < 10 );\n  v21 = v45;\n  v34 = v16 - (v20 & 0x3F0DE2D);\n  do\n  {\n    if ( (v21 & 1) != 0 )\n      v22 = v20 & 0x1F30A4F;\n    else\n      v22 = v20 & 0x3FD2B9F;\n    v35[v21++ - 1] -= v22;\n  }\n  while ( v21 < 10 );\n  v45 = 32 * v35[2];\n  v46 = v35[3] << 6;\n  v44 = 2 * v37;\n  v43 = 8 * v38;\n  v23 = v34;\n  v42 = 16 * v39;\n  v24 = v35[0];\n  v41 = v40 << 6;\n  a1[1] = BYTE1(v34);\n  v25 = v35[1];\n  a1[2] = BYTE2(v23);\n  v24 *= 4;\n  v25 *= 8;\n  a1[4] = BYTE1(v24);\n  a1[5] = BYTE2(v24);\n  a1[7] = BYTE1(v25);\n  *a1 = v23;\n  a1[8] = BYTE2(v25);\n  a1[3] = v24 | HI304E(v23);\n  v26 = v45;\n  a1[10] = BYTE1(v45);\n  a1[11] = BYTE2(v26);\n  a1[6] = v25 | HI304E(v24);\n  v27 = v46;\n  a1[13] = BYTE1(v46);\n  LOA063(v25) = v26 | HI304E(v25);\n  a1[14] = BYTE2(v27);\n  a1[12] = v27 | HI304E(v26);\n  v28 = v36;\n  a1[17] = BYTE1(v36);\n  a1[15] = HI304E(v27);\n  v29 = v44;\n  a1[16] = v28;\n  a1[9] = v25;\n  a1[18] = BYTE2(v28);\n  a1[20] = BYTE1(v29);\n  a1[21] = BYTE2(v29);\n  a1[19] = v29 | HI304E(v28);\n  v30 = v43;\n  a1[23] = BYTE1(v43);\n  a1[24] = BYTE2(v30);\n  a1[22] = v30 | HI304E(v29);\n  v31 = v42;\n  a1[26] = BYTE1(v42);\n  a1[27] = BYTE2(v31);\n  a1[25] = v31 | HI304E(v30);\n  v32 = v41;\n  a1[29] = BYTE1(v41);\n  result = v32 >> 16;\n  a1[28] = v32 | HI304E(v31);\n  a1[30] = BYTE2(v32);\n  a1[31] = HI304E(v32);\n  return result;\n}\n// 406E95: variable 'v19' is possibly undefined\n\n"
    },
    {
        "Function": "sub_401D7D",
        "Total XOR and shift operations": 8,
        "XOR operations": 0,
        "Shift operations": 8,
        "Operation percentage": "10.13%",
        "Function Body": "\n_DWORD *__cdecl sub_401D7D(_DWORD *a1)\n{\n  _DWORD *v1; // eax\n  unsigned int v2; // ebx\n  unsigned int v3; // edi\n  __int64 v4; // rax\n  unsigned __int64 v5; // kr00_8\n  bool v6; // cf\n  __int64 v7; // rdi\n  signed __int64 v8; // kr08_8\n  unsigned __int64 v9; // kr10_8\n  bool v10; // zf\n  unsigned int v11; // edx\n  unsigned int v12; // esi\n  int v13; // ecx\n  unsigned int v14; // ebx\n  unsigned int v15; // edi\n  int v16; // esi\n  _DWORD *result; // eax\n  _DWORD *v18; // [esp+Ch] [ebp-Ch]\n  int v19; // [esp+10h] [ebp-8h]\n  _DWORD *v20; // [esp+14h] [ebp-4h]\n\n  v19 = 5;\n  a1[20] = 0;\n  a1[21] = 0;\n  v1 = a1 + 2;\n  v18 = a1 + 2;\n  v20 = a1 + 2;\n  do\n  {\n    v2 = *(v1 - 2);\n    v3 = *(v1 - 1);\n    v4 = *((_QWORD *)v1 - 1) / 0x4095CF0i64;\n    v5 = __PA2F09__(v3, v2) - (v4 << 26);\n    v6 = __CFADD__((_DWORD)v4, *v20);\n    *v20 += v4;\n    *(v20 - 1) = HI7CDAD(v5);\n    v20[1] += HI7CDAD(v4) + v6;\n    v7 = (int)v20[1];\n    *(v20 - 2) = v5;\n    v8 = __PA2F09__(v7, *v20) + (HI7CDAD(v7) >> 7);\n    HI7CDAD(v7) = (unsigned __int64)v8 >> 25;\n    v9 = __PA2F09__(v7, *v20) - (v8 >> 25 << 25);\n    v6 = __CFADD__(HI7CDAD(v7), v20[2]);\n    v20[2] += HI7CDAD(v7);\n    *v20 = v9;\n    v20[3] += (SHI7CDAD(v8) >> 25) + v6;\n    v20[1] = HI7CDAD(v9);\n    v1 = v20 + 4;\n    v10 = v19-- == 1;\n    v20 += 4;\n  }\n  while ( !v10 );\n  v11 = a1[20];\n  v12 = a1[21];\n  v13 = *((_QWORD *)a1 + 10) >> 28;\n  v6 = __CFADD__(16 * v11, *a1);\n  *a1 += 16 * v11;\n  a1[1] += v13 + v6;\n  *(_QWORD *)a1 += 2 * __PA2F09__(v12, v11);\n  v6 = __CFADD__(v11, *a1);\n  *a1 += v11;\n  v14 = *a1;\n  a1[1] += v12 + v6;\n  a1[20] = 0;\n  a1[21] = 0;\n  v15 = a1[1];\n  v16 = __SPA2F09__(v15, v14) / 0x4095CF0;\n  *(_QWORD *)a1 = __SPA2F09__(v15, v14) % 0x4095CF0;\n  result = a1 + 2;\n  v6 = __CFADD__(v16, *v18);\n  *v18 += v16;\n  a1[3] += ((unsigned __int64)(__SPA2F09__(v15, v14) / 0x4095CF0) >> 32) + v6;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40C004",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "8.18%",
        "Function Body": "\nint __cdecl sub_40C004(_DWORD *a1)\n{\n  unsigned int v1; // edx\n  unsigned int v2; // esi\n  int v3; // ecx\n  bool v4; // cf\n  unsigned int v5; // edx\n  unsigned int v6; // esi\n  unsigned int v7; // edx\n  unsigned int v8; // esi\n  unsigned int v9; // edx\n  unsigned int v10; // esi\n  unsigned int v11; // edx\n  unsigned int v12; // esi\n  unsigned int v13; // edx\n  unsigned int v14; // esi\n  unsigned int v15; // edx\n  unsigned int v16; // esi\n  unsigned int v17; // edx\n  unsigned int v18; // esi\n  unsigned int v19; // edx\n  unsigned int v20; // esi\n  int result; // eax\n\n  v1 = a1[36];\n  v2 = a1[37];\n  v3 = *((_QWORD *)a1 + 18) >> 28;\n  v4 = __CFADD__(16 * v1, a1[16]);\n  a1[16] += 16 * v1;\n  a1[17] += v3 + v4;\n  *((_QWORD *)a1 + 8) += 2 * __PA2F09__(v2, v1);\n  v4 = __CFADD__(v1, a1[16]);\n  a1[16] += v1;\n  v5 = a1[34];\n  a1[17] += v2 + v4;\n  v6 = a1[35];\n  v4 = __CFADD__(16 * v5, a1[14]);\n  a1[14] += 16 * v5;\n  a1[15] += (__PA2F09__(v6, v5) >> 28) + v4;\n  *((_QWORD *)a1 + 7) += 2 * __PA2F09__(v6, v5);\n  v4 = __CFADD__(v5, a1[14]);\n  a1[14] += v5;\n  v7 = a1[32];\n  a1[15] += v6 + v4;\n  v8 = a1[33];\n  v4 = __CFADD__(16 * v7, a1[12]);\n  a1[12] += 16 * v7;\n  a1[13] += (__PA2F09__(v8, v7) >> 28) + v4;\n  *((_QWORD *)a1 + 6) += 2 * __PA2F09__(v8, v7);\n  v4 = __CFADD__(v7, a1[12]);\n  a1[12] += v7;\n  v9 = a1[30];\n  a1[13] += v8 + v4;\n  v10 = a1[31];\n  v4 = __CFADD__(16 * v9, a1[10]);\n  a1[10] += 16 * v9;\n  a1[11] += (__PA2F09__(v10, v9) >> 28) + v4;\n  *((_QWORD *)a1 + 5) += 2 * __PA2F09__(v10, v9);\n  v4 = __CFADD__(v9, a1[10]);\n  a1[10] += v9;\n  v11 = a1[28];\n  a1[11] += v10 + v4;\n  v12 = a1[29];\n  v4 = __CFADD__(16 * v11, a1[8]);\n  a1[8] += 16 * v11;\n  a1[9] += (__PA2F09__(v12, v11) >> 28) + v4;\n  *((_QWORD *)a1 + 4) += 2 * __PA2F09__(v12, v11);\n  v4 = __CFADD__(v11, a1[8]);\n  a1[8] += v11;\n  v13 = a1[26];\n  a1[9] += v12 + v4;\n  v14 = a1[27];\n  v4 = __CFADD__(16 * v13, a1[6]);\n  a1[6] += 16 * v13;\n  a1[7] += (__PA2F09__(v14, v13) >> 28) + v4;\n  *((_QWORD *)a1 + 3) += 2 * __PA2F09__(v14, v13);\n  v4 = __CFADD__(v13, a1[6]);\n  a1[6] += v13;\n  v15 = a1[24];\n  a1[7] += v14 + v4;\n  v16 = a1[25];\n  v4 = __CFADD__(16 * v15, a1[4]);\n  a1[4] += 16 * v15;\n  a1[5] += (__PA2F09__(v16, v15) >> 28) + v4;\n  *((_QWORD *)a1 + 2) += 2 * __PA2F09__(v16, v15);\n  v4 = __CFADD__(v15, a1[4]);\n  a1[4] += v15;\n  v17 = a1[22];\n  a1[5] += v16 + v4;\n  v18 = a1[23];\n  v4 = __CFADD__(16 * v17, a1[2]);\n  a1[2] += 16 * v17;\n  a1[3] += (__PA2F09__(v18, v17) >> 28) + v4;\n  *((_QWORD *)a1 + 1) += 2 * __PA2F09__(v18, v17);\n  v4 = __CFADD__(v17, a1[2]);\n  a1[2] += v17;\n  v19 = a1[20];\n  a1[3] += v18 + v4;\n  v20 = a1[21];\n  v4 = __CFADD__(16 * v19, *a1);\n  *a1 += 16 * v19;\n  a1[1] += (__PA2F09__(v20, v19) >> 28) + v4;\n  result = 2 * v19;\n  *(_QWORD *)a1 += 2 * __PA2F09__(v20, v19);\n  *(_QWORD *)a1 += __PA2F09__(v20, v19);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_408FAC",
        "Total XOR and shift operations": 11,
        "XOR operations": 0,
        "Shift operations": 11,
        "Operation percentage": "1.34%",
        "Function Body": "\n_DWORD *__cdecl sub_408FAC(const void *a1, char *a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  char *v4; // ebx\n  double v5; // st7\n  int v6; // eax\n  unsigned int v7; // edi\n  _DWORD *v8; // esi\n  int v9; // edx\n  char v10; // cl\n  char *v11; // ebx\n  char *v12; // ebx\n  char *v13; // ebx\n  unsigned int v14; // ecx\n  char *v15; // ebx\n  char *v16; // ebx\n  char *v17; // ebx\n  char *v18; // ebx\n  char *v19; // ebx\n  int v20; // ecx\n  int v21; // esi\n  int v22; // esi\n  int v23; // esi\n  int v24; // eax\n  int v25; // eax\n  bool v26; // zf\n  char i; // al\n  char *v28; // ebx\n  char *v29; // ebx\n  char *v30; // ebx\n  char *v31; // ebx\n  int v32; // eax\n  char *v33; // ebx\n  char *v34; // ebx\n  char *v35; // ebx\n  int v36; // ecx\n  _DWORD *v37; // eax\n  int v38; // esi\n  int v39; // eax\n  int v40; // edi\n  int v41; // esi\n  unsigned __int64 v42; // rax\n  unsigned int v43; // kr00_4\n  int v44; // edi\n  int v45; // eax\n  double v46; // st7\n  int v47; // eax\n  int v48; // edx\n  int v49; // eax\n  double v50; // st7\n  int v51; // eax\n  bool v52; // cf\n  _DWORD *v53; // eax\n  unsigned int v54; // edx\n  int v55; // ecx\n  int v56; // eax\n  bool v57; // sf\n  _DWORD *result; // eax\n  int v59; // ebx\n  _DWORD *v60; // eax\n  _DWORD *v61; // esi\n  int v62; // [esp+18h] [ebp-70h] BYREF\n  unsigned int v63; // [esp+1Ch] [ebp-6Ch]\n  int v64; // [esp+20h] [ebp-68h]\n  int v65[6]; // [esp+24h] [ebp-64h] BYREF\n  int v66; // [esp+3Ch] [ebp-4Ch]\n  char *v67; // [esp+40h] [ebp-48h]\n  int v68; // [esp+44h] [ebp-44h]\n  int v69; // [esp+48h] [ebp-40h]\n  __int64 v70; // [esp+4Ch] [ebp-3Ch]\n  char *v71; // [esp+54h] [ebp-34h]\n  int v72; // [esp+58h] [ebp-30h]\n  double v73; // [esp+5Ch] [ebp-2Ch]\n  int v74; // [esp+64h] [ebp-24h]\n  _DWORD *v75; // [esp+68h] [ebp-20h] BYREF\n  char *v76; // [esp+6Ch] [ebp-1Ch]\n  _DWORD *v77; // [esp+70h] [ebp-18h] BYREF\n  int v78; // [esp+74h] [ebp-14h]\n  _DWORD *v79; // [esp+78h] [ebp-10h] BYREF\n  _DWORD *v80; // [esp+7Ch] [ebp-Ch]\n  unsigned int v81; // [esp+80h] [ebp-8h]\n  unsigned __int8 v82; // [esp+87h] [ebp-1h]\n  _DWORD *v83; // [esp+90h] [ebp+8h]\n  char v84; // [esp+93h] [ebp+Bh]\n  unsigned __int8 v85; // [esp+93h] [ebp+Bh]\n  char v86; // [esp+97h] [ebp+Fh]\n  char v87; // [esp+97h] [ebp+Fh]\n  char v88; // [esp+97h] [ebp+Fh]\n  unsigned int v89; // [esp+98h] [ebp+10h]\n  unsigned __int8 v90; // [esp+9Bh] [ebp+13h]\n  char v91; // [esp+9Bh] [ebp+13h]\n\n  v75 = 0;\n  sub_406BC9((char *)&v62, 0, 0x34u);\n  v3 = a3;\n  v74 = 0;\n  v72 = 0;\n  v70 = 0i64;\n  v4 = a2;\n  v71 = a2;\n  if ( a3 >= 3 && *a2 == -17 && a2[1] == -69 && a2[2] == -65 )\n  {\n    v4 = a2 + 3;\n    v3 = a3 - 3;\n    v71 = a2 + 3;\n  }\n  v5 = 10.0;\n  v76 = &v4[v3];\n  qmemcpy(v65, a1, sizeof(v65));\n  v63 = -9;\n  v64 = -9;\n  v6 = 1;\n  v66 = 1;\n  while ( 2 )\n  {\n    v78 = 0;\n    v7 = 0;\n    v77 = 0;\n    v8 = 0;\n    v9 = 8;\n    v89 = 0;\n    v80 = 0;\n    v79 = 0;\n    v81 = 8;\n    v68 = 1;\n    while ( 1 )\n    {\n      v67 = v4;\n      if ( v4 == v76 )\n        v10 = 0;\n      else\n        v10 = *v4;\n      v86 = v10;\n      if ( (v9 & 0x20) != 0 )\n      {\n        if ( !v10 || v7 > v63 )\n          goto LABEL_251;\n        if ( (v9 & 0x10) != 0 )\n        {\n          v9 &= ~0x10u;\n          v81 = v9;\n          switch ( v10 )\n          {\n            case 'b':\n              v6 = v66;\n              if ( !v66 )\n                *(_BYTE *)(v7 + v78) = 8;\n              goto LABEL_63;\n            case 'f':\n              v6 = v66;\n              if ( !v66 )\n                *(_BYTE *)(v7 + v78) = 12;\n              goto LABEL_63;\n            case 'n':\n              v6 = v66;\n              if ( !v66 )\n                *(_BYTE *)(v7 + v78) = 10;\n              goto LABEL_63;\n            case 'r':\n              v6 = v66;\n              if ( !v66 )\n                *(_BYTE *)(v7 + v78) = 13;\n              goto LABEL_63;\n            case 't':\n              v6 = v66;\n              if ( !v66 )\n                *(_BYTE *)(v7 + v78) = 9;\n              goto LABEL_63;\n          }\n          if ( v10 != 117 )\n          {\n            v6 = v66;\nLABEL_84:\n            if ( !v6 )\n            {\n              *(_BYTE *)(v7 + v78) = v10;\n              v8 = v80;\n            }\nLABEL_63:\n            v89 = ++v7;\n            goto LABEL_247;\n          }\n          if ( v76 - v4 <= 4 )\n            goto LABEL_251;\n          v11 = v4 + 1;\n          v67 = v11;\n          v87 = sub_40B880(*v11);\n          if ( v87 == -1 )\n            goto LABEL_251;\n          v12 = v11 + 1;\n          v67 = v12;\n          v90 = sub_40B880(*v12);\n          if ( v90 == 0xFF )\n            goto LABEL_251;\n          v13 = v12 + 1;\n          v67 = v13;\n          v84 = sub_40B880(*v13);\n          if ( v84 == -1 )\n            goto LABEL_251;\n          v4 = v13 + 1;\n          v67 = v4;\n          v82 = sub_40B880(*v4);\n          if ( v82 == 0xFF )\n            goto LABEL_251;\n          v14 = v82 | (unsigned __int8)(16 * v84) | ((v90 | (unsigned __int8)(16 * v87)) << 8);\n          HI7CDAD(v73) = v14;\n          if ( ((v82 | (unsigned __int16)((unsigned __int8)(16 * v84) | ((v90 | (unsigned __int16)(unsigned __int8)(16 * v87)) << 8))) & 0xF800) == 55296 )\n          {\n            if ( v76 - v4 <= 6 )\n              goto LABEL_251;\n            v15 = v4 + 1;\n            v67 = v15;\n            if ( *v15 != 92 )\n              goto LABEL_251;\n            v16 = v15 + 1;\n            v67 = v16;\n            if ( *v16 != 117 )\n              goto LABEL_251;\n            v17 = v16 + 1;\n            v67 = v17;\n            if ( sub_40B880(*v17) == -1 )\n              goto LABEL_251;\n            v18 = v17 + 1;\n            v67 = v18;\n            v88 = sub_40B880(*v18);\n            if ( v88 == -1 )\n              goto LABEL_251;\n            v19 = v18 + 1;\n            v67 = v19;\n            v91 = sub_40B880(*v19);\n            if ( v91 == -1 )\n              goto LABEL_251;\n            v4 = v19 + 1;\n            v67 = v4;\n            v85 = sub_40B880(*v4);\n            if ( v85 == 0xFF )\n              goto LABEL_251;\n            v20 = (unsigned __int8)(16 * v91) | ((v88 & 3 | (4 * (WORD2(v73) & 0x3BF | 0x40))) << 8);\n            HI7CDAD(v73) = v88 & 3 | (4 * (WORD2(v73) & 0x3BF | 0x40));\n            v14 = v85 | v20;\n          }\n          v6 = v66;\n          if ( v14 <= 0x7F )\n          {\n            if ( !v66 )\n              *(_BYTE *)(v7 + v78) = v14;\n            ++v7;\n            goto LABEL_40;\n          }\n          if ( v14 > 0x7FF )\n          {\n            if ( v14 > 0xFFFF )\n            {\n              if ( v66 )\n              {\n                v7 += 4;\n                goto LABEL_40;\n              }\n              v23 = v78;\n              *(_BYTE *)(v7 + v78) = (v14 >> 18) | 0xF0;\n              *(_BYTE *)(v7 + v23 + 1) = (v14 >> 12) & 0x3F | 0x80;\n              *(_BYTE *)(v7 + v23 + 2) = (v14 >> 6) & 0x3F | 0x80;\n              *(_BYTE *)(v7 + v23 + 3) = v14 & 0x3F | 0x80;\n              v7 += 4;\n            }\n            else\n            {\n              if ( v66 )\n              {\n                v7 += 3;\n                goto LABEL_40;\n              }\n              v22 = v78;\n              *(_BYTE *)(v7 + v78) = (v14 >> 12) | 0xE0;\n              *(_BYTE *)(v7 + v22 + 1) = (v14 >> 6) & 0x3F | 0x80;\n              *(_BYTE *)(v7 + v22 + 2) = v14 & 0x3F | 0x80;\n              v7 += 3;\n            }\n          }\n          else\n          {\n            if ( v66 )\n            {\n              v7 += 2;\nLABEL_40:\n              v8 = v80;\n              v89 = v7;\n              goto LABEL_247;\n            }\n            v21 = v78;\n            *(_BYTE *)(v7 + v78) = (v14 >> 6) | 0xC0;\n            *(_BYTE *)(v7 + v21 + 1) = v14 & 0x3F | 0x80;\n            v7 += 2;\n          }\n          v89 = v7;\n          goto LABEL_245;\n        }\n        if ( v10 == 92 )\n        {\n          v9 |= 0x10u;\n          v81 = v9;\n          goto LABEL_247;\n        }\n        if ( v10 != 34 )\n          goto LABEL_84;\n        if ( !v6 )\n          *(_BYTE *)(v7 + v78) = 0;\n        v24 = v8[1];\n        v9 &= ~0x20u;\n        v78 = 0;\n        v81 = v9;\n        v25 = v24 - 1;\n        if ( !v25 )\n        {\n          if ( v66 )\n          {\n            v8[3] += v7 + 1;\n          }\n          else\n          {\n            *(_DWORD *)(12 * v8[2] + v8[3]) = v8[4];\n            v9 = v81;\n            *(_DWORD *)(12 * v8[2] + v8[3] + 4) = v7;\n            v8[4] += v7 + 1;\n          }\n          v9 |= 0x48u;\n          goto LABEL_83;\n        }\n        v26 = v25 == 4;\n        v6 = v66;\n        if ( v26 )\n        {\n          v9 |= 1u;\n          v8[2] = v7;\n          v81 = v9;\n        }\n      }\n      if ( (v65[1] & 1) == 0 )\n        goto LABEL_100;\n      if ( (v9 & 0x6000) == 0 )\n        break;\n      if ( (v9 & 0x2000) != 0 )\n      {\n        if ( v10 == 13 || v10 == 10 || !v10 )\n        {\n          v9 &= ~0x2000u;\n          --v4;\n          v81 = v9;\n        }\n      }\n      else\n      {\n        if ( (v9 & 0x4000) == 0 )\n          goto LABEL_100;\n        if ( !v10 )\n          goto LABEL_251;\n        if ( v10 == 42 )\n        {\n          if ( v4 >= v76 - 1 )\n            goto LABEL_246;\n          v6 = v66;\n          if ( v4[1] == 47 )\n          {\n            v9 &= ~0x4000u;\n            ++v4;\n            v81 = v9;\n          }\n        }\n      }\nLABEL_247:\n      v5 = 10.0;\n      ++v4;\n    }\n    if ( v10 == 47 )\n    {\n      if ( (v9 & 0x88) == 0 && v8[1] != 1 )\n        goto LABEL_251;\n      v67 = ++v4;\n      if ( v4 == v76 )\n        goto LABEL_251;\n      if ( *v4 == 42 )\n      {\n        v9 |= 0x4000u;\n      }\n      else\n      {\n        if ( *v4 != 47 )\n          goto LABEL_251;\n        v9 |= 0x2000u;\n      }\nLABEL_83:\n      v81 = v9;\nLABEL_246:\n      v6 = v66;\n      goto LABEL_247;\n    }\nLABEL_100:\n    if ( (v9 & 0x80u) != 0 )\n    {\n      if ( !v10 )\n      {\n        v57 = --v66 < 0;\n        result = v77;\n        v75 = v77;\n        if ( v57 )\n          return result;\n        v6 = v66;\n        v4 = v71;\n        continue;\n      }\n      if ( v10 == 9 )\n        goto LABEL_246;\n      if ( v10 != 10 )\n      {\n        if ( v10 != 13 && v10 != 32 )\n          goto LABEL_251;\n        goto LABEL_246;\n      }\nLABEL_107:\n      ++v68;\n      v69 = 0;\n      goto LABEL_246;\n    }\n    break;\n  }\n  if ( (v9 & 8) == 0 )\n  {\n    v37 = v8 + 1;\n    v38 = v8[1];\n    v83 = v37;\n    if ( v38 == 1 )\n    {\n      switch ( v10 )\n      {\n        case 9:\n          goto LABEL_245;\n        case 10:\n          ++v68;\n          v69 = 0;\n          goto LABEL_245;\n        case 13:\n        case 32:\n          goto LABEL_245;\n        case 34:\n          if ( (v9 & 4) != 0 )\n            goto LABEL_251;\n          v8 = v80;\n          v9 |= 0x20u;\n          v7 = 0;\n          v81 = v9;\n          v89 = 0;\n          v78 = v80[4];\n          goto LABEL_230;\n        case 44:\n          if ( (v9 & 4) == 0 )\n            goto LABEL_251;\n          v9 &= ~4u;\n          break;\n        case 125:\n          v9 = v9 & 0xFF4A3AFA | 1;\n          break;\n        default:\n          goto LABEL_251;\n      }\n      v81 = v9;\n    }\n    else if ( (unsigned int)(v38 - 3) <= 1 )\n    {\n      if ( (unsigned __int8)(v10 - 48) > 9u )\n      {\n        if ( v10 == 43 || v10 == 45 )\n        {\n          if ( (v9 & 0xC00) == 1024 )\n          {\n            v45 = v9 | 0x800;\n            v9 |= 0x1800u;\n            if ( v10 != 45 )\n              v9 = v45;\n            v81 = v9;\n            goto LABEL_245;\n          }\n        }\n        else if ( v10 == 46 && v38 == 3 )\n        {\n          if ( !v74 )\n            goto LABEL_251;\n          v8 = v80;\n          v74 = 0;\n          *v37 = 4;\n          *((double *)v8 + 1) = (double)*((__int64 *)v8 + 1);\n          goto LABEL_246;\n        }\n        if ( (v9 & 0x400) != 0 )\n        {\n          if ( !v74 )\n            goto LABEL_251;\n          v49 = v72;\n          if ( (v9 & 0x1000) != 0 )\n            v49 = -v72;\n          v50 = sub_40D350(v5, v49);\n          v8 = v80;\n          v9 = v81;\n          *((double *)v80 + 1) = v50 * *((double *)v80 + 1);\n        }\n        else\n        {\n          if ( v38 == 4 )\n          {\n            if ( !v74 )\n              goto LABEL_251;\n            v73 = (double)v70;\n            v46 = sub_40D350(v5, v74);\n            v47 = (int)v80;\n            v8 = v79;\n            v4 = v67;\n            v9 = v81;\n            v10 = v86;\n            v80 = v79;\n            *(double *)(v47 + 8) = v73 / v46 + *(double *)(v47 + 8);\n          }\n          else\n          {\n            v8 = v80;\n          }\n          if ( v10 == 101 || v10 == 69 )\n          {\n            v48 = v9 | 0x400;\n            if ( *v83 == 3 )\n            {\n              *v83 = 4;\n              *((double *)v8 + 1) = (double)*((__int64 *)v8 + 1);\n            }\n            v74 = 0;\n            v9 = v48 & 0xFFC368FF;\n            goto LABEL_83;\n          }\n        }\n        if ( (v9 & 0x100) != 0 )\n        {\n          if ( *v83 == 3 )\n          {\n            v51 = v8[3];\n            v52 = v8[2] != 0;\n            v8[2] = -v8[2];\n            v8[3] = -(v52 + v51);\n          }\n          else\n          {\n            *((double *)v8 + 1) = -*((double *)v8 + 1);\n          }\n        }\n        v9 |= 3u;\n        goto LABEL_215;\n      }\n      v39 = ++v74;\n      if ( v38 == 3 )\n      {\n        if ( (v9 & 0x400) == 0 )\n        {\n          if ( (v9 & 0x200) != 0 )\n            goto LABEL_251;\n          if ( v39 == 1 && v10 == 48 )\n            v81 = v9 | 0x200;\n          v40 = (v10 - 48) >> 31;\n          v41 = v10 - 48;\n          v42 = sub_40D407(*((_QWORD *)v80 + 1), 10i64);\n          v43 = v42;\n          LO04A4D(v42) = v80;\n          v44 = (__PA2F09__(v40, v43) + __PA2F09__(HI7CDAD(v42), v41)) >> 32;\n          v9 = v81;\n          v80[2] = v43 + v41;\n          v8 = (_DWORD *)v42;\n          *(_DWORD *)(v42 + 12) = v44;\n          v7 = v89;\n          goto LABEL_246;\n        }\n      }\n      else if ( (v9 & 0x400) == 0 )\n      {\n        v70 = sub_40D407(v70, 10i64) + v10 - 48;\n        v9 = v81;\n        v7 = v89;\nLABEL_245:\n        v8 = v80;\n        goto LABEL_246;\n      }\n      v9 |= 0x800u;\n      v81 = v9;\n      v72 = 10 * v72 + v10 - 48;\n      goto LABEL_245;\n    }\n    v8 = v80;\n    goto LABEL_230;\n  }\n  switch ( v10 )\n  {\n    case 9:\n      goto LABEL_246;\n    case 10:\n      goto LABEL_107;\n    case 13:\n    case 32:\n      goto LABEL_246;\n    case 93:\n      if ( !v8 || v8[1] != 2 )\n        goto LABEL_251;\n      v9 = v9 & 0xFF4A3AF2 | 1;\n      goto LABEL_215;\n  }\n  if ( (v9 & 4) != 0 )\n  {\n    if ( v10 != 44 )\n      goto LABEL_251;\n    v9 &= ~4u;\n    goto LABEL_83;\n  }\n  if ( (v9 & 0x40) != 0 )\n  {\n    if ( v10 != 58 )\n      goto LABEL_251;\n    v9 &= ~0x40u;\n    goto LABEL_83;\n  }\n  v81 = v9 & 0xFF4A3AF7;\n  switch ( v10 )\n  {\n    case '\"':\n      if ( !sub_405EB3(&v62, &v79, &v77, (int)&v75, 5) )\n        goto LABEL_251;\n      v8 = v79;\n      v4 = v67;\n      v9 = v81 | 0x20;\n      v7 = 0;\n      v81 |= 0x20u;\n      v36 = v79[3];\n      v80 = v79;\n      v78 = v36;\n      v89 = 0;\n      goto LABEL_246;\n    case '[':\n      if ( !sub_405EB3(&v62, &v79, &v77, (int)&v75, 2) )\n        goto LABEL_251;\n      v8 = v79;\n      v9 = v81 | 8;\n      v4 = v67;\n      v81 |= 8u;\n      v80 = v79;\n      goto LABEL_246;\n    case 'f':\n      if ( v76 - v4 < 4 )\n        goto LABEL_251;\n      v33 = v4 + 1;\n      v67 = v33;\n      if ( *v33 != 97 )\n        goto LABEL_251;\n      v34 = v33 + 1;\n      v67 = v34;\n      if ( *v34 != 108 )\n        goto LABEL_251;\n      v35 = v34 + 1;\n      v67 = v35;\n      if ( *v35 != 115 )\n        goto LABEL_251;\n      v67 = v35 + 1;\n      if ( v35[1] != 101 )\n        goto LABEL_251;\n      v32 = sub_405EB3(&v62, &v79, &v77, (int)&v75, 6);\n      goto LABEL_164;\n    case 'n':\n      if ( v76 - v4 < 3 )\n        goto LABEL_251;\n      v30 = v4 + 1;\n      v67 = v30;\n      if ( *v30 != 117 )\n        goto LABEL_251;\n      v31 = v30 + 1;\n      v67 = v31;\n      if ( *v31 != 108 )\n        goto LABEL_251;\n      v67 = v31 + 1;\n      if ( v31[1] != 108 )\n        goto LABEL_251;\n      v32 = sub_405EB3(&v62, &v79, &v77, (int)&v75, 7);\nLABEL_164:\n      if ( !v32 )\n        goto LABEL_251;\n      v8 = v79;\n      v9 = v81 | 1;\n      v4 = v67;\n      v81 |= 1u;\n      v80 = v79;\n      goto LABEL_230;\n  }\n  if ( v10 != 116 )\n  {\n    if ( v10 == 123 )\n    {\n      if ( !sub_405EB3(&v62, &v79, &v77, (int)&v75, 1) )\n        goto LABEL_251;\n      v8 = v79;\n      v4 = v67;\n      v9 = v81;\n      v80 = v79;\n      goto LABEL_246;\n    }\n    if ( (v10 < 48 || v10 > 57) && v10 != 45 || !sub_405EB3(&v62, &v79, &v77, (int)&v75, 3) )\n      goto LABEL_251;\n    v4 = v67;\n    if ( !v66 )\n    {\n      for ( i = v86; i >= 48 && i <= 57 || i == 43 || i == 45 || i == 101 || i == 69 || i == 46; i = *v4 )\n      {\n        v67 = ++v4;\n        if ( v4 == v76 )\n          break;\n      }\n      v8 = v79;\n      v9 = v81 | 3;\n      v7 = v89;\n      v81 |= 3u;\n      v80 = v79;\n      goto LABEL_230;\n    }\n    v74 = 0;\n    v70 = 0i64;\n    v72 = 0;\n    v8 = v79;\n    v80 = v79;\n    if ( v86 == 45 )\n    {\n      v9 = v81 & 0xFF4926FF | 0x100;\n      goto LABEL_83;\n    }\n    v9 = v81 & 0xFF4926FD | 2;\nLABEL_215:\n    v81 = v9;\n    goto LABEL_230;\n  }\n  if ( v76 - v4 < 3 )\n    goto LABEL_251;\n  v28 = v4 + 1;\n  v67 = v28;\n  if ( *v28 != 114 )\n    goto LABEL_251;\n  v29 = v28 + 1;\n  v67 = v29;\n  if ( *v29 != 117 )\n    goto LABEL_251;\n  v67 = v29 + 1;\n  if ( v29[1] != 101 || !sub_405EB3(&v62, &v79, &v77, (int)&v75, 6) )\n    goto LABEL_251;\n  v8 = v79;\n  v4 = v67;\n  v9 = v81 | 1;\n  v80 = v79;\n  v79[2] = 1;\n  v81 = v9;\nLABEL_230:\n  if ( (v9 & 2) != 0 )\n  {\n    v9 &= ~2u;\n    --v4;\n    v81 = v9;\n    v67 = v4;\n  }\n  if ( (v9 & 1) == 0 )\n    goto LABEL_246;\n  v53 = (_DWORD *)*v8;\n  v54 = v9 & 0xFF4A3AFA | 4;\n  v55 = v54;\n  if ( !*v8 )\n  {\n    v9 = v54 | 0x80;\n    goto LABEL_83;\n  }\n  v9 = v54 | 8;\n  if ( v53[1] != 2 )\n    v9 = v55;\n  v81 = v9;\n  if ( !v66 )\n  {\n    if ( v53[1] == 1 )\n    {\n      *(_DWORD *)(12 * v53[2] + v53[3] + 8) = v8;\n    }\n    else if ( v53[1] == 2 )\n    {\n      *(_DWORD *)(v53[3] + 4 * v53[2]) = v8;\n    }\n  }\n  v56 = *v8;\n  if ( ++*(_DWORD *)(v56 + 8) <= v63 )\n  {\n    v8 = (_DWORD *)*v8;\n    v80 = v8;\n    v79 = v8;\n    goto LABEL_246;\n  }\nLABEL_251:\n  v59 = v66;\n  v60 = v75;\n  if ( v66 )\n    v60 = v77;\n  if ( v60 )\n  {\n    do\n    {\n      v61 = (_DWORD *)v60[4];\n      ((void (__cdecl *)(_DWORD *))v65[3])(v60);\n      v60 = v61;\n    }\n    while ( v61 );\n  }\n  if ( !v59 )\n    sub_40F121((int)v65, v77);\n  return 0;\n}\n// 40DA68: variable 'v9' is possibly undefined\n// 4037D7: using guessed type double dbl_4037D7;\n\n"
    }
]