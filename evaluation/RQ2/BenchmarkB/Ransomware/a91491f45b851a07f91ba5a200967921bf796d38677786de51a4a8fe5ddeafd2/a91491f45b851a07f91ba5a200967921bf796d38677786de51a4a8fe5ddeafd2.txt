[
    {
        "Function": "sub_404CC3",
        "Total XOR and shift operations": 3,
        "XOR operations": 2,
        "Shift operations": 1,
        "Operation percentage": "18.75%",
        "Function Body": "\nint __usercall sub_404CC3@<eax>(int a1@<eax>, _BYTE *a2@<ecx>, int a3)\n{\n  unsigned int v3; // eax\n\n  v3 = ~a1;\n  while ( a3 )\n  {\n    --a3;\n    v3 = dword_40EB90[(unsigned __int8)(v3 ^ *a2++)] ^ (v3 >> 8);\n  }\n  return ~v3;\n}\n// 40EB90: using guessed type int dword_40EB90[128];\n\n"
    },
    {
        "Function": "sub_404858",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "5.71%",
        "Function Body": "\n_DWORD *__usercall sub_404858@<eax>(size_t a1@<eax>, int a2@<esi>, _DWORD *a3, void *a4)\n{\n  size_t v4; // edi\n  int v5; // eax\n  char v7; // [esp+4h] [ebp-8h]\n  int v8; // [esp+8h] [ebp-4h]\n\n  v4 = a1 - 1;\n  memset(a4, 0, a1);\n  v5 = 0;\n  if ( *(__int16 *)(a2 + 4) > 0 )\n  {\nLABEL_2:\n    v7 = 0;\n    v8 = 0;\n    while ( 1 )\n    {\n      *((_BYTE *)a4 + v4) = (unsigned __int16)((255 << v8) & *(_WORD *)(*(_DWORD *)(a2 + 12) + 2 * v5)) >> (8 * v7);\n      if ( (--v4 & 0x80000000) != 0 )\n        break;\n      v8 += 8;\n      ++v7;\n      if ( v8 >= 16 )\n      {\n        if ( ++v5 < *(__int16 *)(a2 + 4) )\n          goto LABEL_2;\n        return sub_404324(a3, (_DWORD *)a2);\n      }\n    }\n  }\n  return sub_404324(a3, (_DWORD *)a2);\n}\n\n"
    },
    {
        "Function": "sub_4028C8",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "4.44%",
        "Function Body": "\nint __usercall sub_4028C8@<eax>(int a1@<edi>, char *a2)\n{\n  int v2; // esi\n  unsigned int v3; // ebx\n  size_t v5; // ebx\n  int v6; // eax\n  void *v8; // [esp-4h] [ebp-18h]\n  void *v9; // [esp-4h] [ebp-18h]\n  unsigned int v10; // [esp+8h] [ebp-Ch]\n  size_t Size; // [esp+Ch] [ebp-8h] BYREF\n  int v12; // [esp+10h] [ebp-4h]\n\n  v12 = 0;\n  v2 = *(_DWORD *)(a1 + 36);\n  v3 = *(_DWORD *)(v2 + 20);\n  v10 = *(_DWORD *)(v2 + 16);\n  if ( (*(_BYTE *)(a1 + 40) & 5) == 0 && sub_40261B(v2, (char *)&Size, 4u) && sub_40261B(*(_DWORD *)(a1 + 36), a2, Size) )\n  {\n    if ( (*(_DWORD *)(a1 + 44))-- == 1 )\n    {\n      v8 = *(void **)(a1 + 4);\n      *(_DWORD *)(a1 + 40) |= 4u;\n      ResetEvent(v8);\n      SetEvent(*(HANDLE *)(a1 + 8));\n    }\n    if ( v10 < v3 >> 2 )\n    {\n      v5 = v3 >> 1;\n      if ( v5 >= *(_DWORD *)(a1 + 52) )\n        sub_402598(v5, *(_DWORD *)(a1 + 36));\n    }\n    v6 = *(_DWORD *)(a1 + 40);\n    if ( (v6 & 2) != 0 )\n    {\n      v9 = *(void **)a1;\n      *(_DWORD *)(a1 + 40) = v6 & 0xFFFFFFFD;\n      SetEvent(v9);\n    }\n    return 1;\n  }\n  return v12;\n}\n\n"
    },
    {
        "Function": "sub_4050B1",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "4.08%",
        "Function Body": "\nBOOL __cdecl sub_4050B1(HANDLE hFile, int a2, char *lpBuffer)\n{\n  DWORD v3; // esi\n  unsigned int v4; // edi\n  unsigned int i; // ebx\n  unsigned __int64 v7; // [esp+10h] [ebp-24h]\n  LARGE_INTEGER v8; // [esp+18h] [ebp-1Ch]\n  LARGE_INTEGER NewFilePointer; // [esp+20h] [ebp-14h] BYREF\n  DWORD NumberOfBytesRead; // [esp+2Ch] [ebp-8h] BYREF\n\n  v3 = 0;\n  NewFilePointer.QuadPart = 0i64;\n  if ( SetFilePointerEx(hFile, 0i64, &NewFilePointer, 2u) )\n  {\n    v8 = NewFilePointer;\n    if ( NewFilePointer.QuadPart >= 0xC0000ui64 )\n    {\n      v4 = 0;\n      v7 = NewFilePointer.QuadPart / 3ui64;\n      for ( i = 0; i < 3; ++i )\n      {\n        if ( i == 2 )\n        {\n          v4 = (unsigned __int64)(v8.QuadPart - 0x40000) >> 32;\n          v3 = v8.LowPart - 0x40000;\n        }\n        *(_DWORD *)(a2 + 8 * i) = v3;\n        *(_DWORD *)(a2 + 8 * i + 4) = v4;\n        NewFilePointer.QuadPart = __PAIR64__(v4, v3);\n        if ( !SetFilePointerEx(hFile, (LARGE_INTEGER)__PAIR64__(v4, v3), &NewFilePointer, 0) )\n          break;\n        if ( NewFilePointer.QuadPart != __PAIR64__(v4, v3) )\n          break;\n        if ( !ReadFile(hFile, lpBuffer, 0x40000u, &NumberOfBytesRead, 0) )\n          break;\n        if ( NumberOfBytesRead != 0x40000 )\n          break;\n        v4 = (v7 + __PAIR64__(v4, v3)) >> 32;\n        v3 += v7;\n        lpBuffer += 0x40000;\n      }\n      return i == 3;\n    }\n  }\n  return v3;\n}\n\n"
    },
    {
        "Function": "sub_402AEE",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "3.23%",
        "Function Body": "\nint __usercall sub_402AEE@<eax>(_DWORD *a1@<esi>, HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName, LPBYTE lpData)\n{\n  LSTATUS v5; // eax\n  DWORD Type; // [esp+8h] [ebp-10h] BYREF\n  HKEY phkResult; // [esp+Ch] [ebp-Ch] BYREF\n  DWORD cbData; // [esp+10h] [ebp-8h] BYREF\n  int v10; // [esp+14h] [ebp-4h]\n\n  cbData = 2 * *a1 + 2;\n  v10 = 0;\n  Type = 1;\n  if ( !RegOpenKeyExW(hKey, lpSubKey, 0, 0x20119u, &phkResult) )\n  {\n    v5 = RegQueryValueExW(phkResult, lpValueName, 0, &Type, lpData, &cbData);\n    if ( !v5 || v5 == 234 )\n    {\n      v10 = 1;\n      *a1 = (cbData >> 1) - 1;\n    }\n    else\n    {\n      v10 = 0;\n      *a1 = 0;\n    }\n    RegCloseKey(phkResult);\n  }\n  return v10;\n}\n\n"
    },
    {
        "Function": "sub_4047EC",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "3.23%",
        "Function Body": "\nint __usercall sub_4047EC@<eax>(int a1@<eax>, _DWORD *a2@<ecx>, int a3)\n{\n  _DWORD *v4; // esi\n  int v5; // ebx\n  int v6; // edx\n  int v8; // [esp+Ch] [ebp-4h]\n\n  v4 = sub_404A25((a1 + 1) / 2, a2);\n  v5 = 0;\n  memset((void *)v4[3], 0, 2 * *((__int16 *)v4 + 2));\n  v6 = a1 - 1;\n  if ( a1 - 1 >= 0 )\n  {\n    v8 = 0;\n    do\n    {\n      *(_WORD *)(v8 + v4[3]) += *(unsigned __int8 *)(v6 + a3) << (8 * v5++);\n      if ( v5 == 2 )\n      {\n        v5 = 0;\n        v8 += 2;\n      }\n      --v6;\n    }\n    while ( v6 >= 0 );\n  }\n  return sub_404AB8((int)v4);\n}\n\n"
    },
    {
        "Function": "sub_4044E9",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "2.55%",
        "Function Body": "\nint __cdecl sub_4044E9(int a1, int a2, int a3)\n{\n  unsigned __int8 v3; // al\n  int v4; // esi\n  int v5; // edi\n  _DWORD *v7; // ebx\n  int v8; // edi\n  int v9; // ecx\n  int v10; // edx\n  int v11; // eax\n  int v12; // ecx\n  int v13; // eax\n  int v14; // eax\n  bool v15; // zf\n  _WORD *v16; // eax\n  int v17; // eax\n  int v18; // eax\n  unsigned int v19; // ebx\n  int v20; // edi\n  int v21; // ecx\n  unsigned int v22; // eax\n  _WORD *v23; // esi\n  unsigned int v24; // edx\n  int v25; // [esp+Ch] [ebp-30h]\n  int v26; // [esp+10h] [ebp-2Ch] BYREF\n  int v27; // [esp+14h] [ebp-28h]\n  int v28; // [esp+18h] [ebp-24h]\n  size_t Size; // [esp+1Ch] [ebp-20h]\n  int v30; // [esp+20h] [ebp-1Ch]\n  int v31; // [esp+24h] [ebp-18h]\n  int v32; // [esp+28h] [ebp-14h]\n  _DWORD *v33; // [esp+2Ch] [ebp-10h]\n  int v34; // [esp+30h] [ebp-Ch]\n  int v35; // [esp+34h] [ebp-8h]\n  unsigned __int8 v36; // [esp+3Bh] [ebp-1h]\n  int v37; // [esp+4Ch] [ebp+10h]\n\n  v3 = *(_BYTE *)(a1 + 36);\n  v34 = 0;\n  v4 = a2;\n  v5 = *(__int16 *)(a3 + 4);\n  Size = *(__int16 *)(a2 + 4);\n  v36 = v3;\n  v32 = v5;\n  v25 = Size - v5;\n  if ( sub_40498C(a2, a3) > 0 )\n  {\n    sub_404324((_DWORD *)a1, (_DWORD *)a3);\n    return a2;\n  }\n  v33 = sub_404A25(Size - v5 + 1, (_DWORD *)a1);\n  v27 = v5 + 1;\n  v7 = sub_404A25(v5 + 1, (_DWORD *)a1);\n  v8 = sub_404AB8(a3);\n  v37 = v8;\n  v31 = (unsigned __int16)(0x10000\n                         / ((unsigned int)*(unsigned __int16 *)(*(_DWORD *)(v8 + 12) + 2 * *(__int16 *)(v8 + 4) - 2) + 1));\n  memset((void *)v33[3], 0, 2 * *((__int16 *)v33 + 2));\n  if ( (unsigned __int16)v31 > 1u )\n  {\n    a2 = sub_404462((_DWORD *)a1, a2, v31);\n    v4 = a2;\n    v37 = *(_DWORD *)(a1 + 4 * v36 + 16);\n    v8 = v37;\n  }\n  if ( Size == *(__int16 *)(v4 + 4) )\n  {\n    sub_4049DB(Size + 1, v4);\n    v4 = a2;\n    v8 = v37;\n  }\n  Size = 2 * v32 + 2;\n  do\n  {\n    memcpy_0((void *)v7[3], (const void *)(*(_DWORD *)(v4 + 12) + 2 * (*(__int16 *)(v4 + 4) - v34 - v32) - 2), Size);\n    v9 = *(_DWORD *)(v8 + 12);\n    v10 = v7[3];\n    v28 = *(__int16 *)(v8 + 4);\n    v11 = *(unsigned __int16 *)(v9 + 2 * v28 - 2);\n    v12 = *((__int16 *)v7 + 2);\n    v30 = v11;\n    if ( *(_WORD *)(v10 + 2 * v12 - 2) == (_WORD)v11 )\n    {\n      v35 = 0xFFFF;\n    }\n    else\n    {\n      v35 = (unsigned __int16)((*(unsigned __int16 *)(v10 + 2 * *((__int16 *)v7 + 2) - 4)\n                              + (*(unsigned __int16 *)(v10 + 2 * *((__int16 *)v7 + 2) - 2) << 16))\n                             / (unsigned int)(unsigned __int16)v30);\n      if ( *(__int16 *)(v8 + 4) > 1 )\n      {\n        v28 = *(unsigned __int16 *)(*(_DWORD *)(v8 + 12) + 2 * v28 - 4);\n        if ( (_WORD)v28 )\n        {\n          if ( (unsigned __int16)v35 * (unsigned int)(unsigned __int16)v28 > *(unsigned __int16 *)(v7[3]\n                                                                                                 + 2\n                                                                                                 * *((__int16 *)v7 + 2)\n                                                                                                 - 6)\n                                                                           + ((unsigned __int16)(*(_WORD *)(v7[3] + 2 * *((__int16 *)v7 + 2) - 4)\n                                                                                               - v35 * v30) << 16) )\n            v35 += 0xFFFF;\n        }\n      }\n      if ( !(_WORD)v35 )\n      {\n        *(_WORD *)(v33[3] + 2 * (*((__int16 *)v33 + 2) - v34) - 2) = 0;\n        goto LABEL_22;\n      }\n    }\n    v13 = *(_DWORD *)(v8 + 8);\n    if ( v13 != 2147440042 )\n      *(_DWORD *)(v8 + 8) = v13 + 1;\n    v14 = sub_404462((_DWORD *)a1, v8, v35);\n    v7 = (_DWORD *)sub_4043DD((int)v7, (_DWORD *)a1, v14, &v26);\n    sub_4049DB(v27, (int)v7);\n    v15 = v26 == 0;\n    *(_WORD *)(v33[3] + 2 * (*((__int16 *)v33 + 2) - v34) - 2) = v35;\n    if ( !v15 )\n    {\n      v16 = (_WORD *)(v33[3] + 2 * (*((__int16 *)v33 + 2) - v34) - 2);\n      --*v16;\n      v17 = *(_DWORD *)(v37 + 8);\n      if ( v17 != 2147440042 )\n        *(_DWORD *)(v37 + 8) = v17 + 1;\n      v7 = (_DWORD *)sub_40434D((_DWORD *)a1, (int)v7, v37);\n      --*((_WORD *)v7 + 2);\n      --*(_WORD *)(v37 + 4);\n    }\n    v8 = v37;\n    v4 = a2;\nLABEL_22:\n    memcpy_0((void *)(*(_DWORD *)(v4 + 12) + 2 * (*(__int16 *)(v4 + 4) - v34++ - v32) - 2), (const void *)v7[3], Size);\n  }\n  while ( v34 <= v25 );\n  sub_404324((_DWORD *)a1, v7);\n  sub_404324((_DWORD *)a1, (_DWORD *)v8);\n  sub_404324((_DWORD *)a1, v33);\n  v18 = sub_404AB8(v4);\n  v19 = (unsigned __int16)v31;\n  v20 = v18;\n  v21 = *(__int16 *)(v18 + 4) - 1;\n  v22 = 0;\n  do\n  {\n    v23 = (_WORD *)(*(_DWORD *)(v20 + 12) + 2 * v21);\n    v24 = ((unsigned __int16)*v23 + (v22 << 16)) % v19;\n    --v21;\n    *v23 = ((unsigned __int16)*v23 + (v22 << 16)) / v19;\n    v22 = v24;\n  }\n  while ( v21 >= 0 );\n  return sub_404AB8(v20);\n}\n\n"
    },
    {
        "Function": "sub_405A9E",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "2.35%",
        "Function Body": "\nint __cdecl sub_405A9E(\n        const char *Src,\n        char *a2,\n        int a3,\n        int (__cdecl *a4)(const char *, int, char *, unsigned int, int),\n        int a5)\n{\n  unsigned int v5; // ebx\n  char *v6; // edi\n  unsigned int v7; // esi\n  const char *v8; // edi\n  char *v9; // eax\n  unsigned int v10; // eax\n  const char *v11; // edi\n  size_t v12; // eax\n  size_t v13; // esi\n  int result; // eax\n  char *v15; // [esp+Ch] [ebp-Ch]\n  char v16[4]; // [esp+10h] [ebp-8h] BYREF\n  char SubStr[4]; // [esp+14h] [ebp-4h] BYREF\n\n  v5 = a3;\n  strcpy(SubStr, \"<<\");\n  strcpy(v16, \">>\");\n  v6 = strstr(Src, SubStr);\n  if ( v6 )\n  {\n    while ( 1 )\n    {\n      v7 = v6 - Src;\n      if ( v5 < v6 - Src )\n        break;\n      memcpy_0(a2, Src, v6 - Src);\n      a2 += v7;\n      Src = v6;\n      v8 = v6 + 2;\n      v5 -= v7;\n      v9 = strstr(v8, v16);\n      v15 = v9;\n      if ( v9 )\n      {\n        v10 = a4(v8, v9 - v8, a2, v5, a5);\n        v7 = v10;\n        if ( v5 < v10 )\n          return 0;\n        a2 += v10;\n        v5 -= v10;\n        v11 = v15 + 2;\n        if ( !v10 )\n        {\n          v7 = v11 - Src;\n          if ( v5 < v11 - Src )\n            return 0;\n          memcpy_0(a2, Src, v11 - Src);\n          a2 += v7;\n          v5 -= v7;\n        }\n        Src = v15 + 2;\n        v6 = strstr(v11, SubStr);\n        if ( v6 )\n          continue;\n      }\n      if ( v5 < v7 )\n        return 0;\n      goto LABEL_10;\n    }\n  }\n  else\n  {\nLABEL_10:\n    v12 = strlen(Src);\n    v13 = v12;\n    if ( v5 >= v12 )\n    {\n      memcpy_0(a2, Src, v12);\n      result = a3 + v13 - v5;\n      a2[v13] = 0;\n      return result;\n    }\n  }\n  return 0;\n}\n\n"
    },
    {
        "Function": "sub_4016DD",
        "Total XOR and shift operations": 1,
        "XOR operations": 1,
        "Shift operations": 0,
        "Operation percentage": "1.54%",
        "Function Body": "\nchar *__cdecl sub_4016DD(u_long hostlong)\n{\n  unsigned __int16 *v1; // esi\n  int *v2; // ebx\n  void *v3; // eax\n  int v4; // esi\n  int v5; // eax\n  bool v6; // zf\n  int *v7; // ebx\n  BOOL v8; // esi\n  BYTE v10[128]; // [esp+10h] [ebp-CCh] BYREF\n  BYTE pbBuffer[40]; // [esp+90h] [ebp-4Ch] BYREF\n  size_t v12; // [esp+B8h] [ebp-24h] BYREF\n  char *v13; // [esp+BCh] [ebp-20h]\n  int *v14; // [esp+C0h] [ebp-1Ch]\n  void *Block; // [esp+C4h] [ebp-18h]\n  size_t Size; // [esp+C8h] [ebp-14h] BYREF\n  void *v17; // [esp+CCh] [ebp-10h]\n  int *v18; // [esp+D0h] [ebp-Ch] BYREF\n  void *v19; // [esp+D4h] [ebp-8h]\n\n  v13 = 0;\n  v1 = (unsigned __int16 *)sub_403E72(1, 0);\n  Block = sub_403E72(19, &v18);\n  v2 = (int *)sub_403E72(32, 0);\n  v14 = v2;\n  v19 = sub_403E72(2, &Size);\n  v3 = sub_403E72(3, &v12);\n  v17 = v3;\n  if ( v1 && v19 && v3 )\n  {\n    *(_DWORD *)&pbBuffer[32] = htonl(hostlong);\n    *(_DWORD *)&pbBuffer[36] = *v1;\n    qmemcpy(pbBuffer, v19, 0x20u);\n    v4 = *v2;\n    v5 = sub_404CC3(*v2, v19, Size);\n    v6 = (v4 & v5) == *(_DWORD *)Block;\n    *(_DWORD *)Block ^= v4 & v5;\n    *v2 = v6 ? 32 : (int)v18;\n    if ( sub_40403E(pbBuffer, *v2) )\n    {\n      v18 = 0;\n      sub_404079(&v18, (int)v19, Size, (int)v17, v12);\n      v7 = v18;\n      v8 = (int)sub_4041DD(v10, v18, pbBuffer, 0x28u) > 0;\n      sub_40413C(v7);\n      if ( v8 )\n        v13 = sub_404CED(pbBuffer, v10);\n      v2 = v14;\n    }\n  }\n  memset(pbBuffer, 0, sizeof(pbBuffer));\n  if ( Block )\n    sub_402A7B(Block, 4u);\n  if ( v2 )\n    sub_402A7B(v2, 4u);\n  if ( v19 )\n    sub_402A7B(v19, Size);\n  if ( v17 )\n    sub_402A7B(v17, v12);\n  return v13;\n}\n\n"
    },
    {
        "Function": "sub_401932",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "1.47%",
        "Function Body": "\nDWORD __stdcall sub_401932(int *lpThreadParameter)\n{\n  unsigned int v1; // ebx\n  unsigned __int16 *v2; // eax\n  _DWORD *v3; // edi\n  char *v4; // eax\n  HANDLE v5; // eax\n  char *v6; // eax\n  HANDLE v7; // eax\n  int v9; // [esp-8h] [ebp-38h]\n  int v10; // [esp-8h] [ebp-38h]\n  int v11; // [esp-4h] [ebp-34h]\n  int v12; // [esp-4h] [ebp-34h]\n  unsigned __int16 *Block; // [esp+10h] [ebp-20h]\n  DWORD hostlong; // [esp+14h] [ebp-1Ch]\n  DWORD LogicalDrives; // [esp+18h] [ebp-18h]\n  wchar_t String[8]; // [esp+20h] [ebp-10h] BYREF\n\n  v1 = 0;\n  LogicalDrives = GetLogicalDrives();\n  v2 = (unsigned __int16 *)sub_403E72(20, 0);\n  wcscpy(String, asc_40F048);\n  Block = v2;\n  v3 = sub_403539();\n  hostlong = sub_402D88();\n  if ( Block )\n  {\n    if ( !v3 )\n      goto LABEL_14;\n    if ( wcslen(Block) )\n    {\n      do\n      {\n        if ( ((1 << v1) & LogicalDrives) != 0 )\n        {\n          v11 = lpThreadParameter[2];\n          v9 = *lpThreadParameter;\n          String[4] = Block[v1];\n          v4 = sub_4016DD(hostlong);\n          v5 = sub_403CCC((int)v3, String, (int)v4, v9, v11);\n          if ( v5 )\n            CloseHandle(v5);\n          if ( lpThreadParameter[1] )\n          {\n            v12 = lpThreadParameter[2];\n            v10 = lpThreadParameter[1];\n            v6 = sub_4016DD(hostlong);\n            v7 = sub_403CCC((int)v3, String, (int)v6, v10, v12);\n            if ( v7 )\n              CloseHandle(v7);\n          }\n        }\n        ++v1;\n      }\n      while ( v1 < wcslen(Block) );\n    }\n    sub_403658((int)v3);\n  }\n  if ( v3 )\n    sub_40350B((int)v3);\nLABEL_14:\n  sub_402A9E(Block);\n  return 0;\n}\n// 40F048: using guessed type wchar_t asc_40F048[7];\n\n"
    },
    {
        "Function": "sub_401A5D",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "1.32%",
        "Function Body": "\nDWORD __stdcall sub_401A5D(int *lpThreadParameter)\n{\n  _WORD *v1; // eax\n  _DWORD *v2; // eax\n  int v3; // edi\n  DWORD v4; // eax\n  int v5; // ebx\n  int v6; // ecx\n  char *v7; // eax\n  char *v8; // eax\n  int v10; // [esp-8h] [ebp-38h]\n  int v11; // [esp-8h] [ebp-38h]\n  int v12; // [esp-4h] [ebp-34h]\n  int v13; // [esp-4h] [ebp-34h]\n  _WORD *Block; // [esp+10h] [ebp-20h]\n  DWORD LogicalDrives; // [esp+14h] [ebp-1Ch]\n  DWORD hostlong; // [esp+18h] [ebp-18h]\n  int v17; // [esp+1Ch] [ebp-14h]\n  wchar_t String[8]; // [esp+20h] [ebp-10h] BYREF\n\n  LogicalDrives = GetLogicalDrives();\n  hostlong = sub_402D88();\n  v1 = sub_403E72(20, 0);\n  wcscpy(String, asc_40F058);\n  Block = v1;\n  v2 = sub_403539();\n  v3 = (int)v2;\n  if ( Block )\n  {\n    if ( !v2 )\n      goto LABEL_15;\n    while ( !sub_403D73((int *)lpThreadParameter[2]) )\n    {\n      v4 = GetLogicalDrives();\n      if ( v4 != LogicalDrives )\n      {\n        v5 = v4 & ~LogicalDrives;\n        v6 = 0;\n        LogicalDrives = v4;\n        v17 = 0;\n        do\n        {\n          if ( ((1 << v6) & v5) != 0 )\n          {\n            v12 = lpThreadParameter[2];\n            v10 = *lpThreadParameter;\n            String[4] = Block[v6];\n            v7 = sub_4016DD(hostlong);\n            sub_403CCC(v3, String, (int)v7, v10, v12);\n            if ( lpThreadParameter[1] )\n            {\n              v13 = lpThreadParameter[2];\n              v11 = lpThreadParameter[1];\n              v8 = sub_4016DD(hostlong);\n              sub_403CCC(v3, String, (int)v8, v11, v13);\n            }\n          }\n          v6 = v17 + 1;\n          v17 = v6;\n        }\n        while ( v6 < 32 );\n        sub_403658(v3);\n      }\n      Sleep(0x3E8u);\n    }\n  }\n  if ( v3 )\n    sub_40350B(v3);\nLABEL_15:\n  sub_402A9E(Block);\n  return 0;\n}\n// 40F058: using guessed type wchar_t asc_40F058[7];\n\n"
    },
    {
        "Function": "sub_40104E",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "0.97%",
        "Function Body": "\nint sub_40104E()\n{\n  unsigned int v0; // esi\n  DWORD LogicalDrives; // edi\n  unsigned __int16 *v2; // ebx\n  char *v3; // eax\n  unsigned int v4; // esi\n  int v6[2]; // [esp+Ch] [ebp-34h] BYREF\n  unsigned __int16 *v7; // [esp+14h] [ebp-2Ch]\n  void *v8; // [esp+18h] [ebp-28h]\n  void *v9; // [esp+1Ch] [ebp-24h]\n  void *v10; // [esp+20h] [ebp-20h]\n  void *v11; // [esp+24h] [ebp-1Ch]\n  int v12; // [esp+28h] [ebp-18h]\n  void *v13; // [esp+2Ch] [ebp-14h]\n  void *v14; // [esp+30h] [ebp-10h]\n  int v15; // [esp+34h] [ebp-Ch]\n  void *v16; // [esp+38h] [ebp-8h] BYREF\n  void *Block; // [esp+3Ch] [ebp-4h]\n\n  v15 = 0;\n  v0 = sub_402D88();\n  LogicalDrives = GetLogicalDrives();\n  v8 = sub_402D04(15);\n  v10 = sub_403E72(11, 0);\n  v9 = sub_403E72(12, 0);\n  v2 = (unsigned __int16 *)sub_403E72(20, 0);\n  v7 = v2;\n  v11 = sub_403E72(22, 0);\n  v16 = 0;\n  Block = malloc(0x20Au);\n  v6[0] = dword_40F020;\n  v6[1] = dword_40F024;\n  v14 = sub_402D30(13, v0);\n  v3 = sub_402D30(14, v0);\n  v4 = 0;\n  v13 = v3;\n  if ( Block )\n  {\n    if ( v8 )\n      sub_402990((const unsigned __int16 *)v8, (__int16 **)&v16);\n    if ( v2 && wcslen(v2) )\n    {\n      do\n      {\n        if ( ((1 << v4) & LogicalDrives) != 0 )\n        {\n          LOWORD(v6[0]) = v2[v4];\n          if ( !sub_402990((const unsigned __int16 *)v6, (__int16 **)&v16) )\n            break;\n        }\n        ++v4;\n      }\n      while ( v4 < wcslen(v2) );\n    }\n    if ( v16 )\n    {\n      v12 = 0;\n      if ( sub_402962(v16, 0) )\n      {\n        do\n        {\n          if ( v10\n            && v14\n            && sub_4054C3((int)Block, 0x104u, 3)\n            && sub_401000(strlen((const char *)v14), (const WCHAR *)Block, v14) )\n          {\n            if ( v11 )\n              sub_402EB4((const WCHAR *)Block, (const WCHAR *)v11);\n            ++v15;\n          }\n          if ( v9\n            && v13\n            && sub_4054C3((int)Block, 0x104u, 3)\n            && sub_401000(strlen((const char *)v13), (const WCHAR *)Block, v13) )\n          {\n            ++v15;\n          }\n          ++v12;\n        }\n        while ( sub_402962(v16, v12) );\n        v2 = v7;\n      }\n    }\n  }\n  sub_402A9E(v11);\n  sub_402A9E(v8);\n  sub_402A9E(v10);\n  sub_402A9E(v9);\n  sub_402A9E(v2);\n  sub_402AC9(v14);\n  sub_402AC9(v13);\n  if ( Block )\n    free(Block);\n  if ( v16 )\n    free(v16);\n  return v15;\n}\n// 40F020: using guessed type int dword_40F020;\n// 40F024: using guessed type int dword_40F024;\n\n"
    }
]