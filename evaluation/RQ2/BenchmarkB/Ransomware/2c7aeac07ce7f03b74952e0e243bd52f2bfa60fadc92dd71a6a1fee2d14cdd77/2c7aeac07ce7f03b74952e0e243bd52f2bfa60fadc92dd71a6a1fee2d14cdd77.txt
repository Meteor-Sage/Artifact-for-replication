[
    {
        "Function": "sub_44E110",
        "Total XOR and shift operations": 291,
        "XOR operations": 256,
        "Shift operations": 35,
        "Operation percentage": "72.93%",
        "Function Body": "\nunsigned __int8 *__cdecl sub_44E110(int *a1, _DWORD *a2, int a3, unsigned __int8 *a4)\n{\n  int v4; // ebx\n  int v5; // eax\n  unsigned __int8 *v6; // esi\n  unsigned int i; // edi\n  int v8; // ecx\n  int v9; // edx\n  int v10; // edi\n  int v11; // eax\n  int v12; // eax\n  int v13; // ecx\n  int v14; // edi\n  int v15; // ebx\n  int v16; // ecx\n  int v17; // edi\n  int *v18; // ecx\n  int v19; // edx\n  _DWORD *v20; // ecx\n  int v21; // ebx\n  int v22; // edx\n  int v23; // ecx\n  unsigned int v24; // eax\n  int v25; // esi\n  unsigned int v26; // eax\n  int v27; // edi\n  unsigned int v28; // eax\n  int v29; // ebx\n  unsigned int v30; // eax\n  unsigned int v31; // eax\n  unsigned int v32; // esi\n  unsigned int v33; // edi\n  unsigned int v34; // eax\n  unsigned int v35; // ebx\n  unsigned int v36; // eax\n  unsigned int v37; // esi\n  int v38; // eax\n  unsigned int v39; // edi\n  unsigned int v40; // ebx\n  unsigned int v41; // edi\n  unsigned int v42; // ebx\n  unsigned int v43; // edi\n  unsigned int v44; // edi\n  unsigned int v45; // ebx\n  _DWORD *v46; // ecx\n  unsigned int v47; // edi\n  bool v48; // zf\n  int v50; // [esp+Ch] [ebp-D8h]\n  int v51; // [esp+10h] [ebp-D4h]\n  int v52; // [esp+14h] [ebp-D0h]\n  int v53; // [esp+18h] [ebp-CCh]\n  int v54; // [esp+1Ch] [ebp-C8h]\n  int v55; // [esp+20h] [ebp-C4h]\n  int v56; // [esp+24h] [ebp-C0h]\n  int v57; // [esp+28h] [ebp-BCh]\n  int v58; // [esp+2Ch] [ebp-B8h]\n  unsigned __int8 *v59; // [esp+30h] [ebp-B4h]\n  unsigned int v60; // [esp+38h] [ebp-ACh]\n  unsigned int v61; // [esp+3Ch] [ebp-A8h]\n  unsigned int v62; // [esp+40h] [ebp-A4h]\n  unsigned int v63; // [esp+44h] [ebp-A0h]\n  unsigned int v64; // [esp+48h] [ebp-9Ch]\n  unsigned int v65; // [esp+4Ch] [ebp-98h]\n  unsigned int v66; // [esp+50h] [ebp-94h]\n  unsigned int v67; // [esp+54h] [ebp-90h]\n  unsigned int v68; // [esp+58h] [ebp-8Ch]\n  unsigned int v69; // [esp+5Ch] [ebp-88h]\n  unsigned int v70; // [esp+60h] [ebp-84h]\n  unsigned int v71; // [esp+64h] [ebp-80h]\n  int v72; // [esp+68h] [ebp-7Ch]\n  unsigned int v73; // [esp+68h] [ebp-7Ch]\n  unsigned int v74; // [esp+6Ch] [ebp-78h]\n  unsigned int v75; // [esp+70h] [ebp-74h]\n  unsigned int v76; // [esp+74h] [ebp-70h]\n  int v77; // [esp+78h] [ebp-6Ch]\n  unsigned int v78; // [esp+78h] [ebp-6Ch]\n  int v79; // [esp+7Ch] [ebp-68h]\n  unsigned int v80; // [esp+7Ch] [ebp-68h]\n  int *v81; // [esp+80h] [ebp-64h]\n  int v82; // [esp+80h] [ebp-64h]\n  unsigned int v83; // [esp+80h] [ebp-64h]\n  int v84; // [esp+84h] [ebp-60h]\n  int v85; // [esp+84h] [ebp-60h]\n  unsigned int v86; // [esp+84h] [ebp-60h]\n  int v87; // [esp+84h] [ebp-60h]\n  unsigned int v88; // [esp+84h] [ebp-60h]\n  _DWORD *v89; // [esp+88h] [ebp-5Ch]\n  int v90; // [esp+8Ch] [ebp-58h]\n  int v91; // [esp+8Ch] [ebp-58h]\n  int v92; // [esp+8Ch] [ebp-58h]\n  int v93; // [esp+90h] [ebp-54h]\n  int v94; // [esp+90h] [ebp-54h]\n  int v95; // [esp+90h] [ebp-54h]\n  int v96; // [esp+90h] [ebp-54h]\n  int v97; // [esp+94h] [ebp-50h]\n  int v98; // [esp+94h] [ebp-50h]\n  int v99; // [esp+94h] [ebp-50h]\n  int v100; // [esp+94h] [ebp-50h]\n  int v101; // [esp+98h] [ebp-4Ch]\n  int v102; // [esp+98h] [ebp-4Ch]\n  unsigned int v103; // [esp+98h] [ebp-4Ch]\n  unsigned int v104; // [esp+98h] [ebp-4Ch]\n  int v105; // [esp+98h] [ebp-4Ch]\n  unsigned int v106; // [esp+98h] [ebp-4Ch]\n  int v107; // [esp+9Ch] [ebp-48h]\n  int v108; // [esp+9Ch] [ebp-48h]\n  int v109; // [esp+9Ch] [ebp-48h]\n  unsigned int v110; // [esp+9Ch] [ebp-48h]\n  int v111; // [esp+9Ch] [ebp-48h]\n  unsigned int v112; // [esp+9Ch] [ebp-48h]\n  unsigned int v113; // [esp+A0h] [ebp-44h]\n  unsigned int v114; // [esp+A4h] [ebp-40h]\n  int v115[12]; // [esp+A8h] [ebp-3Ch] BYREF\n  unsigned int v116; // [esp+D8h] [ebp-Ch]\n  unsigned int v117; // [esp+DCh] [ebp-8h]\n\n  v4 = *a1;\n  v93 = a1[5];\n  v84 = a1[1];\n  v101 = a1[2];\n  v107 = a1[3];\n  v90 = a1[6];\n  v97 = a1[4];\n  v5 = a1[7];\n  if ( !a3 )\n    return a4;\n  v55 = a1[2];\n  v52 = a1[5];\n  v51 = a1[6];\n  v57 = *a1;\n  v56 = a1[1];\n  v54 = a1[3];\n  v53 = a1[4];\n  v50 = a1[7];\n  v59 = a4;\n  do\n  {\n    v6 = v59;\n    for ( i = 0; i < 0x10; ++i )\n    {\n      v8 = v6[3];\n      v9 = (v6[2] | ((v6[1] | (*v6 << 8)) << 8)) << 8;\n      v6 += 4;\n      *(&v113 + i) = v8 | v9;\n    }\n    v10 = v84;\n    v89 = a2;\n    v59 = v6;\n    v81 = v115;\n    v72 = 2;\n    do\n    {\n      v11 = *v89\n          + *(v81 - 2)\n          + (v90 ^ v97 & (v93 ^ v90))\n          + (__ROR4__(v97, 6) ^ __ROL4__(v97, 7) ^ __ROR4__(v97, 11))\n          + v5;\n      v108 = v11 + v107;\n      v12 = (__ROR4__(v4, 2) ^ __ROL4__(v4, 10) ^ __ROR4__(v4, 13)) + (v4 & v10 ^ v101 & (v4 ^ v10)) + v11;\n      v13 = v89[1]\n          + *(v81 - 1)\n          + (v93 ^ v108 & (v97 ^ v93))\n          + (__ROR4__(v108, 6) ^ __ROL4__(v108, 7) ^ __ROR4__(v108, 11))\n          + v90;\n      v102 = v13 + v101;\n      v91 = (__ROR4__(v12, 2) ^ __ROL4__(v12, 10) ^ __ROR4__(v12, 13)) + (v4 & v12 ^ v10 & (v4 ^ v12)) + v13;\n      v94 = *v81\n          + v89[2]\n          + (v97 ^ v102 & (v108 ^ v97))\n          + (__ROR4__(v102, 6) ^ __ROL4__(v102, 7) ^ __ROR4__(v102, 11))\n          + v93;\n      v14 = v94 + v10;\n      v95 = (__ROR4__(v91, 2) ^ __ROL4__(v91, 10) ^ __ROR4__(v91, 13)) + (v91 & v12 ^ v4 & (v91 ^ v12)) + v94;\n      v98 = v89[3]\n          + v81[1]\n          + (v108 ^ v14 & (v102 ^ v108))\n          + (__ROR4__(v14, 6) ^ __ROL4__(v14, 7) ^ __ROR4__(v14, 11))\n          + v97;\n      v15 = v98 + v4;\n      v99 = (__ROR4__(v95, 2) ^ __ROL4__(v95, 10) ^ __ROR4__(v95, 13)) + (v95 & v91 ^ v12 & (v95 ^ v91)) + v98;\n      v109 = v89[4]\n           + v81[2]\n           + (v102 ^ v15 & (v14 ^ v102))\n           + (__ROR4__(v15, 6) ^ __ROL4__(v15, 7) ^ __ROR4__(v15, 11))\n           + v108;\n      v5 = v109 + v12;\n      v107 = (__ROR4__(v99, 2) ^ __ROL4__(v99, 10) ^ __ROR4__(v99, 13)) + (v99 & v95 ^ v91 & (v99 ^ v95)) + v109;\n      v16 = v89[5] + v81[3] + (v14 ^ v5 & (v15 ^ v14)) + (__ROR4__(v5, 6) ^ __ROL4__(v5, 7) ^ __ROR4__(v5, 11)) + v102;\n      v90 = v16 + v91;\n      v101 = (__ROR4__(v107, 2) ^ __ROL4__(v107, 10) ^ __ROR4__(v107, 13)) + (v107 & v99 ^ v95 & (v107 ^ v99)) + v16;\n      v17 = v89[6] + v81[4] + (v15 ^ v90 & (v15 ^ v5)) + (__ROR4__(v90, 6) ^ __ROL4__(v90, 7) ^ __ROR4__(v90, 11)) + v14;\n      v93 = v17 + v95;\n      v10 = (__ROR4__(v101, 2) ^ __ROL4__(v101, 10) ^ __ROR4__(v101, 13)) + (v101 & v107 ^ v99 & (v101 ^ v107)) + v17;\n      v18 = v81;\n      v81 += 8;\n      v19 = v18[5] + (v5 ^ v93 & (v90 ^ v5)) + (__ROR4__(v93, 6) ^ __ROL4__(v93, 7) ^ __ROR4__(v93, 11));\n      v20 = v89;\n      v89 += 8;\n      v21 = v20[7] + v19 + v15;\n      v97 = v21 + v99;\n      v4 = (__ROR4__(v10, 2) ^ __ROL4__(v10, 10) ^ __ROR4__(v10, 13)) + (v10 & v101 ^ v107 & (v10 ^ v101)) + v21;\n      --v72;\n    }\n    while ( v72 );\n    v65 = v117;\n    v73 = v115[11];\n    v22 = v116;\n    v64 = v115[10];\n    v62 = v115[9];\n    v67 = v115[8];\n    v69 = v115[7];\n    v63 = v115[6];\n    v60 = v115[5];\n    v61 = v115[4];\n    v66 = v115[3];\n    v68 = v115[2];\n    v70 = v115[1];\n    v71 = v115[0];\n    v23 = v114;\n    v85 = v10;\n    v77 = v4;\n    v58 = 3;\n    v75 = v116;\n    v74 = v114;\n    v76 = v113;\n    while ( 1 )\n    {\n      v76 += v69\n           + ((v74 >> 3) ^ __ROR4__(v23, 7) ^ __ROL4__(v23, 14))\n           + ((v75 >> 10) ^ __ROL4__(v75, 13) ^ __ROL4__(v22, 15));\n      v24 = v76 + *v89 + (v90 ^ v97 & (v93 ^ v90)) + (__ROR4__(v97, 6) ^ __ROL4__(v97, 7) ^ __ROR4__(v97, 11)) + v5;\n      v110 = v24 + v107;\n      v25 = v24 + (v4 & v10 ^ v101 & (v4 ^ v10)) + (__ROR4__(v4, 2) ^ __ROL4__(v4, 10) ^ __ROR4__(v4, 13));\n      v74 += v67\n           + ((v71 >> 3) ^ __ROR4__(v71, 7) ^ __ROL4__(v71, 14))\n           + ((v65 >> 10) ^ __ROL4__(v65, 13) ^ __ROL4__(v65, 15));\n      v26 = v74\n          + v89[1]\n          + (v93 ^ v110 & (v97 ^ v93))\n          + (__ROR4__(v110, 6) ^ __ROL4__(v110, 7) ^ __ROR4__(v110, 11))\n          + v90;\n      v103 = v26 + v101;\n      v27 = (__ROR4__(v25, 2) ^ __ROL4__(v25, 10) ^ __ROR4__(v25, 13)) + v26 + (v4 & v25 ^ (v4 ^ v25) & v10);\n      v71 += v62\n           + ((v70 >> 3) ^ __ROR4__(v70, 7) ^ __ROL4__(v70, 14))\n           + ((v76 >> 10) ^ __ROL4__(v76, 13) ^ __ROL4__(v76, 15));\n      v28 = v71\n          + v89[2]\n          + (v97 ^ v103 & (v110 ^ v97))\n          + (__ROR4__(v103, 6) ^ __ROL4__(v103, 7) ^ __ROR4__(v103, 11))\n          + v93;\n      v86 = v28 + v85;\n      v29 = (__ROR4__(v27, 2) ^ __ROL4__(v27, 10) ^ __ROR4__(v27, 13)) + v28 + (v27 & v25 ^ (v27 ^ v25) & v4);\n      v70 += v64\n           + ((v68 >> 3) ^ __ROR4__(v68, 7) ^ __ROL4__(v68, 14))\n           + ((v74 >> 10) ^ __ROL4__(v74, 13) ^ __ROL4__(v74, 15));\n      v30 = v70\n          + v89[3]\n          + (v110 ^ v86 & (v103 ^ v110))\n          + (__ROR4__(v86, 6) ^ __ROL4__(v86, 7) ^ __ROR4__(v86, 11))\n          + v97;\n      v78 = v30 + v77;\n      v82 = (__ROR4__(v29, 2) ^ __ROL4__(v29, 10) ^ __ROR4__(v29, 13)) + v30 + (v25 & (v29 ^ v27) ^ v29 & v27);\n      v68 += v73\n           + ((v66 >> 3) ^ __ROR4__(v66, 7) ^ __ROL4__(v66, 14))\n           + ((v71 >> 10) ^ __ROL4__(v71, 13) ^ __ROL4__(v71, 15));\n      v31 = v68\n          + v89[4]\n          + (v103 ^ v78 & (v86 ^ v103))\n          + (__ROR4__(v78, 6) ^ __ROL4__(v78, 7) ^ __ROR4__(v78, 11))\n          + v110;\n      v32 = v31 + v25;\n      v111 = (__ROR4__(v82, 2) ^ __ROL4__(v82, 10) ^ __ROR4__(v82, 13)) + v31 + (v27 & (v82 ^ v29) ^ v82 & v29);\n      v66 += v75\n           + ((v61 >> 3) ^ __ROR4__(v61, 7) ^ __ROL4__(v61, 14))\n           + ((v70 >> 10) ^ __ROL4__(v70, 13) ^ __ROL4__(v70, 15));\n      v104 = v66 + v89[5] + (v86 ^ v32 & (v78 ^ v86)) + (__ROR4__(v32, 6) ^ __ROL4__(v32, 7) ^ __ROR4__(v32, 11)) + v103;\n      v33 = v104 + v27;\n      v105 = (__ROR4__(v111, 2) ^ __ROL4__(v111, 10) ^ __ROR4__(v111, 13)) + v104 + (v29 & (v111 ^ v82) ^ v111 & v82);\n      v61 += v65\n           + ((v60 >> 3) ^ __ROR4__(v60, 7) ^ __ROL4__(v60, 14))\n           + ((v68 >> 10) ^ __ROL4__(v68, 13) ^ __ROL4__(v68, 15));\n      v34 = v61 + v89[6] + (v78 ^ v33 & (v78 ^ v32)) + (__ROR4__(v33, 6) ^ __ROL4__(v33, 7) ^ __ROR4__(v33, 11)) + v86;\n      v35 = v34 + v29;\n      v79 = (__ROR4__(v105, 2) ^ __ROL4__(v105, 10) ^ __ROR4__(v105, 13)) + v34 + (v82 & (v105 ^ v111) ^ v105 & v111);\n      v60 += v76\n           + ((v63 >> 3) ^ __ROR4__(v63, 7) ^ __ROL4__(v63, 14))\n           + ((v66 >> 10) ^ __ROL4__(v66, 13) ^ __ROL4__(v66, 15));\n      v36 = v60 + v89[7] + (v32 ^ v35 & (v33 ^ v32)) + (__ROR4__(v35, 6) ^ __ROL4__(v35, 7) ^ __ROR4__(v35, 11)) + v78;\n      v83 = v36 + v82;\n      v87 = (__ROR4__(v79, 2) ^ __ROL4__(v79, 10) ^ __ROR4__(v79, 13)) + v36 + (v111 & (v79 ^ v105) ^ v79 & v105);\n      v63 += v74\n           + ((v61 >> 10) ^ __ROL4__(v61, 13) ^ __ROL4__(v61, 15))\n           + ((v69 >> 3) ^ __ROR4__(v69, 7) ^ __ROL4__(v69, 14));\n      v37 = v63 + v89[8] + (v33 ^ v83 & (v35 ^ v33)) + (__ROR4__(v83, 6) ^ __ROL4__(v83, 7) ^ __ROR4__(v83, 11)) + v32;\n      v112 = v37 + v111;\n      v38 = (__ROR4__(v87, 2) ^ __ROL4__(v87, 10) ^ __ROR4__(v87, 13)) + v37 + (v105 & (v87 ^ v79) ^ v87 & v79);\n      v69 += v71\n           + ((v60 >> 10) ^ __ROL4__(v60, 13) ^ __ROL4__(v60, 15))\n           + ((v67 >> 3) ^ __ROR4__(v67, 7) ^ __ROL4__(v67, 14));\n      v39 = v69\n          + v89[9]\n          + (v35 ^ v112 & (v83 ^ v35))\n          + (__ROR4__(v112, 6) ^ __ROL4__(v112, 7) ^ __ROR4__(v112, 11))\n          + v33;\n      v106 = v39 + v105;\n      v92 = (__ROR4__(v38, 2) ^ __ROL4__(v38, 10) ^ __ROR4__(v38, 13)) + v39 + (v79 & (v87 ^ v38) ^ v87 & v38);\n      v67 += v70\n           + ((v63 >> 10) ^ __ROL4__(v63, 13) ^ __ROL4__(v63, 15))\n           + ((v62 >> 3) ^ __ROR4__(v62, 7) ^ __ROL4__(v62, 14));\n      v40 = v67\n          + v89[10]\n          + (v83 ^ v106 & (v112 ^ v83))\n          + (__ROR4__(v106, 6) ^ __ROL4__(v106, 7) ^ __ROR4__(v106, 11))\n          + v35;\n      v80 = v40 + v79;\n      v96 = (__ROR4__(v92, 2) ^ __ROL4__(v92, 10) ^ __ROR4__(v92, 13)) + v40 + (v87 & (v92 ^ v38) ^ v92 & v38);\n      v62 += v68\n           + ((v64 >> 3) ^ __ROR4__(v64, 7) ^ __ROL4__(v64, 14))\n           + ((v69 >> 10) ^ __ROL4__(v69, 13) ^ __ROL4__(v69, 15));\n      v41 = v62\n          + v89[11]\n          + (v112 ^ v80 & (v106 ^ v112))\n          + (__ROR4__(v80, 6) ^ __ROL4__(v80, 7) ^ __ROR4__(v80, 11))\n          + v83;\n      v88 = v41 + v87;\n      v100 = (__ROR4__(v96, 2) ^ __ROL4__(v96, 10) ^ __ROR4__(v96, 13)) + v41 + (v38 & (v96 ^ v92) ^ v96 & v92);\n      v64 += v66\n           + ((v73 >> 3) ^ __ROR4__(v73, 7) ^ __ROL4__(v73, 14))\n           + ((v67 >> 10) ^ __ROL4__(v67, 13) ^ __ROL4__(v67, 15));\n      v42 = v64\n          + v89[12]\n          + (v106 ^ v88 & (v80 ^ v106))\n          + (__ROR4__(v88, 6) ^ __ROL4__(v88, 7) ^ __ROR4__(v88, 11))\n          + v112;\n      v5 = v42 + v38;\n      v107 = (__ROR4__(v100, 2) ^ __ROL4__(v100, 10) ^ __ROR4__(v100, 13)) + v42 + (v92 & (v100 ^ v96) ^ v100 & v96);\n      v73 += v61\n           + ((v62 >> 10) ^ __ROL4__(v62, 13) ^ __ROL4__(v62, 15))\n           + ((v75 >> 3) ^ __ROR4__(v75, 7) ^ __ROL4__(v75, 14));\n      v43 = v73 + v89[13] + (v80 ^ v5 & (v88 ^ v80)) + (__ROR4__(v5, 6) ^ __ROL4__(v5, 7) ^ __ROR4__(v5, 11)) + v106;\n      v90 = v43 + v92;\n      v101 = (__ROR4__(v107, 2) ^ __ROL4__(v107, 10) ^ __ROR4__(v107, 13)) + v43 + (v96 & (v107 ^ v100) ^ v107 & v100);\n      v44 = v88;\n      v75 += v60\n           + ((v64 >> 10) ^ __ROL4__(v64, 13) ^ __ROL4__(v64, 15))\n           + ((v65 >> 3) ^ __ROR4__(v65, 7) ^ __ROL4__(v65, 14));\n      v45 = v75 + v89[14] + (v88 ^ v90 & (v88 ^ v5)) + (__ROR4__(v90, 6) ^ __ROL4__(v90, 7) ^ __ROR4__(v90, 11)) + v80;\n      v93 = v45 + v96;\n      v85 = (__ROR4__(v101, 2) ^ __ROL4__(v101, 10) ^ __ROR4__(v101, 13)) + (v101 & v107 ^ v100 & (v101 ^ v107)) + v45;\n      v65 += v63\n           + ((v73 >> 10) ^ __ROL4__(v73, 13) ^ __ROL4__(v73, 15))\n           + ((v76 >> 3) ^ __ROR4__(v76, 7) ^ __ROL4__(v76, 14));\n      v46 = v89;\n      v89 += 16;\n      v47 = v65 + v46[15] + (v5 ^ v93 & (v90 ^ v5)) + (__ROR4__(v93, 6) ^ __ROL4__(v93, 7) ^ __ROR4__(v93, 11)) + v44;\n      v97 = v47 + v100;\n      v22 = v75;\n      v23 = v74;\n      v4 = (__ROR4__(v85, 2) ^ __ROL4__(v85, 10) ^ __ROR4__(v85, 13)) + v47 + (v107 & (v85 ^ v101) ^ v101 & v85);\n      v48 = v58-- == 1;\n      v77 = v4;\n      if ( v48 )\n        break;\n      v10 = v85;\n    }\n    v4 += v57;\n    v57 = v4;\n    v56 += v85;\n    v84 = v56;\n    v55 += v101;\n    v101 = v55;\n    a1[2] = v55;\n    v54 += v107;\n    v107 = v54;\n    v53 += v97;\n    v97 = v53;\n    a1[4] = v53;\n    v52 += v93;\n    v93 = v52;\n    a1[5] = v52;\n    v51 += v90;\n    v90 = v51;\n    a1[6] = v51;\n    *a1 = v4;\n    v48 = a3-- == 1;\n    v5 += v50;\n    a1[1] = v56;\n    a1[3] = v54;\n    v50 = v5;\n    a1[7] = v5;\n  }\n  while ( !v48 );\n  return v59;\n}\n// 44E110: too many cbuild loops\n\n"
    },
    {
        "Function": "sub_448CD0",
        "Total XOR and shift operations": 31,
        "XOR operations": 28,
        "Shift operations": 3,
        "Operation percentage": "45.59%",
        "Function Body": "\nint __stdcall sub_448CD0(unsigned int a1)\n{\n  unsigned __int8 v1; // bl\n  char v2; // al\n  int v3; // eax\n  int v4; // ebx\n  char v5; // cl\n  char v6; // cl\n  char v7; // bl\n  unsigned __int8 v8; // bl\n  char v9; // cl\n  char v10; // dl\n  unsigned __int8 v11; // cl\n  char v12; // al\n  unsigned __int8 v13; // dl\n  unsigned __int8 v15; // [esp+8h] [ebp-Ch]\n  char v16; // [esp+Ch] [ebp-8h]\n  char v17; // [esp+Ch] [ebp-8h]\n  unsigned __int16 v18; // [esp+Ch] [ebp-8h]\n  unsigned __int8 v19; // [esp+11h] [ebp-3h]\n  unsigned __int8 v20; // [esp+12h] [ebp-2h]\n  unsigned __int8 v21; // [esp+13h] [ebp-1h]\n  char v22; // [esp+1Ch] [ebp+8h]\n  unsigned __int8 v23; // [esp+1Fh] [ebp+Bh]\n\n  v21 = RijnDael_AES_LONG_4CC000[(unsigned __int8)a1];\n  v1 = RijnDael_AES_LONG_4CC000[BYTE1(a1)];\n  v19 = v1;\n  v20 = RijnDael_AES_LONG_4CC000[BYTE2(a1)];\n  v23 = RijnDael_AES_LONG_4CC000[HIBYTE(a1)];\n  v2 = 2 * v21;\n  if ( ((2 * v21) & 0x100) != 0 )\n    v2 ^= 0x1Bu;\n  v16 = ~v2;\n  v3 = v1;\n  v4 = 2 * v1;\n  v5 = v3 ^ v4;\n  if ( ((v3 ^ v4) & 0x100) != 0 )\n    v5 ^= 0x1Bu;\n  v15 = v20 ^ v23 ^ v16 ^ ~v5;\n  if ( (v4 & 0x100) != 0 )\n    LOBYTE(v4) = v4 ^ 0x1B;\n  v17 = ~(_BYTE)v4;\n  v6 = 2 * v20;\n  v7 = v20 ^ (2 * v20);\n  if ( ((v20 ^ (unsigned __int16)(2 * v20)) & 0x100) != 0 )\n    v7 ^= 0x1Bu;\n  v8 = v21 ^ v23 ^ v17 ^ ~v7;\n  if ( ((2 * v20) & 0x100) != 0 )\n    v6 ^= 0x1Bu;\n  v22 = ~v6;\n  v18 = 2 * v23;\n  v9 = v23 ^ v18;\n  if ( ((v23 ^ v18) & 0x100) != 0 )\n    v9 ^= 0x1Bu;\n  v10 = v21 ^ (2 * v21);\n  v11 = v21 ^ v19 ^ v22 ^ ~v9;\n  if ( ((v21 ^ (unsigned __int16)(2 * v21)) & 0x100) != 0 )\n    v10 ^= 0x1Bu;\n  v12 = 2 * v23;\n  v13 = ~v10;\n  if ( ((2 * v23) & 0x100) != 0 )\n    v12 = v18 ^ 0x1B;\n  return ((v8 | ((v11 | ((v19 ^ v20 ^ v13 ^ (unsigned __int8)~v12) << 8)) << 8)) << 8) | v15;\n}\n\n"
    },
    {
        "Function": "sub_44DD50",
        "Total XOR and shift operations": 44,
        "XOR operations": 24,
        "Shift operations": 20,
        "Operation percentage": "42.72%",
        "Function Body": "\nvoid __cdecl sub_44DD50(unsigned int a1, _DWORD *a2, int a3, int a4, int a5, int a6)\n{\n  unsigned __int16 *v6; // edi\n  int v7; // esi\n  int v8; // ebx\n  int v9; // ecx\n  _DWORD *v10; // esi\n  int v11; // ebx\n  int v12; // edx\n  int v13; // ecx\n  _DWORD *v14; // edi\n  int v15; // edi\n  int v16; // esi\n  int v17; // edx\n  bool v18; // zf\n  int v19; // edi\n  int v20; // ebx\n  int v21; // edx\n  int v22; // [esp+4h] [ebp-24h]\n  int v23; // [esp+8h] [ebp-20h]\n  int v24; // [esp+8h] [ebp-20h]\n  unsigned int v25; // [esp+Ch] [ebp-1Ch]\n  int v26; // [esp+Ch] [ebp-1Ch]\n  int v27; // [esp+10h] [ebp-18h]\n  unsigned int v28; // [esp+14h] [ebp-14h]\n  _DWORD *v29; // [esp+18h] [ebp-10h]\n  unsigned int v30; // [esp+1Ch] [ebp-Ch]\n  unsigned int v31; // [esp+20h] [ebp-8h]\n  unsigned int v32; // [esp+24h] [ebp-4h]\n\n  if ( a4 )\n  {\n    v6 = (unsigned __int16 *)(a6 + 2);\n    v7 = a5 + 2;\n    v22 = a6 + 2;\n    v27 = a5 + 2;\n    v8 = a6 - a5 - 2;\n    do\n    {\n      v23 = 1;\n      v9 = *(unsigned __int8 *)(v7 + v8);\n      v10 = a2;\n      v31 = *a2 ^ (v9 | ((*((unsigned __int8 *)v6 - 1) | (*v6 << 8)) << 8));\n      v11 = a2[1] ^ (*((unsigned __int8 *)v6 + 2) | ((*((unsigned __int8 *)v6 + 3) | (v6[2] << 8)) << 8));\n      v28 = v11;\n      v12 = a2[2] ^ (*((unsigned __int8 *)v6 + 6) | ((*((unsigned __int8 *)v6 + 7) | (v6[4] << 8)) << 8));\n      v13 = a2[3] ^ (*((unsigned __int8 *)v6 + 10) | ((*((unsigned __int8 *)v6 + 11) | (v6[6] << 8)) << 8));\n      v30 = v12;\n      v32 = v13;\n      if ( a1 > 1 )\n      {\n        v14 = a2 + 6;\n        v29 = a2 + 6;\n        v25 = a1 - 1;\n        v23 = a1;\n        do\n        {\n          v11 = *(v14 - 1) ^ *(_DWORD *)(a3 + 4 * (unsigned __int8)v28 + 256) ^ *(_DWORD *)(a3 + 4 * HIBYTE(v31) + 3328) ^ *(_DWORD *)(a3 + 4 * BYTE1(v30) + 1280) ^ *(_DWORD *)(a3 + 4 * BYTE2(v13) + 2304);\n          v15 = *v29 ^ *(_DWORD *)(a3 + 4 * (unsigned __int8)v30 + 256) ^ *(_DWORD *)(a3 + 4 * HIBYTE(v28) + 3328) ^ *(_DWORD *)(a3 + 4 * BYTE1(v32) + 1280) ^ *(_DWORD *)(a3 + 4 * BYTE2(v31) + 2304);\n          v16 = v29[1] ^ *(_DWORD *)(a3 + 4 * (unsigned __int8)v32 + 256) ^ *(_DWORD *)(a3 + 4 * HIBYTE(v30) + 3328) ^ *(_DWORD *)(a3 + 4 * BYTE1(v31) + 1280) ^ *(_DWORD *)(a3 + 4 * BYTE2(v28) + 2304);\n          v13 = BYTE1(v28);\n          v28 = v11;\n          v17 = *(v29 - 2) ^ *(_DWORD *)(a3 + 4 * (unsigned __int8)v31 + 256) ^ *(_DWORD *)(a3 + 4 * HIBYTE(v32) + 3328) ^ *(_DWORD *)(a3 + 4 * v13 + 1280) ^ *(_DWORD *)(a3 + 4 * BYTE2(v30) + 2304);\n          BYTE2(v13) = BYTE2(v16);\n          v31 = v17;\n          v12 = v15;\n          v14 = v29 + 4;\n          v30 = v12;\n          v18 = v25-- == 1;\n          v32 = v16;\n          v29 += 4;\n        }\n        while ( !v18 );\n        v10 = a2;\n      }\n      v19 = 2 * v23;\n      v24 = v10[4 * v23] ^ (*(unsigned __int8 *)((unsigned __int8)v31 + a3) | ((*(unsigned __int8 *)(BYTE1(v11) + a3) | (((*(unsigned __int8 *)(HIBYTE(v32) + a3) << 8) | *(unsigned __int8 *)(BYTE2(v12) + a3)) << 8)) << 8));\n      v26 = v10[2 * v19 + 1] ^ (*(unsigned __int8 *)((unsigned __int8)v11 + a3) | ((*(unsigned __int8 *)(BYTE1(v30) + a3) | (((*(unsigned __int8 *)(HIBYTE(v31) + a3) << 8) | *(unsigned __int8 *)(BYTE2(v32) + a3)) << 8)) << 8));\n      v20 = v10[2 * v19 + 2] ^ (*(unsigned __int8 *)((unsigned __int8)v30 + a3) | ((*(unsigned __int8 *)(BYTE1(v32) + a3) | (((*(unsigned __int8 *)(HIBYTE(v28) + a3) << 8) | *(unsigned __int8 *)(BYTE2(v31) + a3)) << 8)) << 8));\n      v21 = v10[2 * v19 + 3] ^ (*(unsigned __int8 *)((unsigned __int8)v32 + a3) | ((*(unsigned __int8 *)(BYTE1(v31) + a3) | (((*(unsigned __int8 *)(HIBYTE(v30) + a3) << 8) | *(unsigned __int8 *)(BYTE2(v28) + a3)) << 8)) << 8));\n      *(_DWORD *)(v27 - 2) = v24;\n      *(_DWORD *)(v27 + 2) = v26;\n      v6 = (unsigned __int16 *)(v22 + 16);\n      v22 += 16;\n      *(_BYTE *)(v27 + 9) = HIBYTE(v20);\n      *(_BYTE *)(v27 + 8) = BYTE2(v20);\n      *(_BYTE *)(v27 + 7) = BYTE1(v20);\n      *(_BYTE *)(v27 + 13) = HIBYTE(v21);\n      *(_BYTE *)(v27 + 12) = BYTE2(v21);\n      *(_BYTE *)(v27 + 11) = BYTE1(v21);\n      *(_BYTE *)(v27 + 6) = v20;\n      v8 = a6 - a5 - 2;\n      *(_BYTE *)(v27 + 10) = v21;\n      v7 = v27 + 16;\n      a4 -= 16;\n      v27 += 16;\n    }\n    while ( a4 );\n  }\n}\n\n"
    },
    {
        "Function": "sub_4489C0",
        "Total XOR and shift operations": 15,
        "XOR operations": 12,
        "Shift operations": 3,
        "Operation percentage": "27.78%",
        "Function Body": "\nint __thiscall sub_4489C0(_DWORD *this, _DWORD *a2, int a3, _DWORD *a4, int a5)\n{\n  int result; // eax\n  unsigned int v7; // esi\n  int v8; // eax\n  int v9; // ecx\n  int v10; // eax\n  int v11; // esi\n  int v12; // eax\n  int v13; // edx\n  int v14; // ecx\n  int v15; // edx\n  int v16; // eax\n\n  if ( !a2 )\n    return -5;\n  if ( !a4 )\n    return -6;\n  if ( a3 != 4 )\n    return -7;\n  if ( a5 != 4 )\n    return -8;\n  this[16] = *a4;\n  this[17] = a4[1];\n  this[18] = a4[2];\n  this[19] = a4[3];\n  this[20] = *a2;\n  this[21] = a2[1];\n  this[22] = a2[2];\n  v7 = a2[3];\n  this[23] = v7;\n  v8 = this[20] ^ sub_448CD0((v7 << 8) ^ HIBYTE(v7)) ^ 0x1000000;\n  v9 = v8 ^ this[21];\n  this[24] = v8;\n  v10 = v9 ^ this[22];\n  this[25] = v9;\n  v11 = v10 ^ v7;\n  this[26] = v10;\n  this[27] = v11;\n  v12 = this[24] ^ sub_448CD0((v11 << 8) ^ ((unsigned __int64)(unsigned int)v11 >> 24)) ^ 0x2000000;\n  v13 = this[26];\n  v14 = v12 ^ this[25];\n  this[28] = v12;\n  v15 = v14 ^ v13;\n  v16 = v15 ^ this[27];\n  this[29] = v14;\n  this[31] = v16;\n  result = 0;\n  this[30] = v15;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_456A89",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "27.27%",
        "Function Body": "\n_DWORD *__thiscall sub_456A89(_DWORD *this, std::_Locinfo *a2, int a3)\n{\n  this[1] = a3;\n  *this = &std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::`vftable';\n  std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Init(a2);\n  return this;\n}\n// 4AA604: using guessed type void *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::`vftable';\n\n"
    },
    {
        "Function": "sub_4148F0",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "26.92%",
        "Function Body": "\n__int16 __fastcall sub_4148F0(__m128i *a1, char a2, __int64 a3)\n{\n  unsigned __int64 v4; // kr10_8\n  unsigned __int64 v5; // rax\n  unsigned int v6; // ecx\n  unsigned __int64 v7; // kr20_8\n  int v10; // [esp+24h] [ebp-Ch]\n  int v11; // [esp+28h] [ebp-8h]\n\n  v11 = _mm_cvtsi128_si32(*a1);\n  v10 = _mm_cvtsi128_si32(_mm_srli_si128(*a1, 4));\n  v4 = (unsigned int)v11 * (unsigned __int64)HIDWORD(a3);\n  v5 = (unsigned int)v11 * (unsigned __int64)(unsigned int)a3;\n  v6 = ((unsigned int)v4 + (unsigned __int64)HIDWORD(v5) + (unsigned int)(v10 * a3)) >> 32;\n  HIDWORD(v5) = (a3 * __PAIR64__(v10, v11)) >> 32;\n  v7 = HIDWORD(v4)\n     + v6\n     + __PAIR64__(_mm_cvtsi128_si32(_mm_srli_si128(*a1, 12)), _mm_cvtsi128_si32(_mm_srli_si128(*a1, 8))) * a3\n     + (unsigned int)v10 * (unsigned __int64)HIDWORD(a3);\n  HIBYTE(v11) = (((v7 + (((unsigned int)v10 * (unsigned __int64)(unsigned int)a3) >> 32)) << a2) | (v5 >> (64 - a2))) == 0;\n  BYTE2(v11) = (((v7 + (((unsigned int)v10 * (unsigned __int64)(unsigned int)a3) >> 32)) >> (64 - a2)) & 1) != 0;\n  return HIWORD(v11);\n}\n\n"
    },
    {
        "Function": "sub_46FBAB",
        "Total XOR and shift operations": 4,
        "XOR operations": 4,
        "Shift operations": 0,
        "Operation percentage": "26.67%",
        "Function Body": "\nint __thiscall sub_46FBAB(int *this, _DWORD *a2)\n{\n  int result; // eax\n\n  *this ^= (*this ^ *a2) & 0xFFFFFFF;\n  *this = *a2 ^ (*this ^ *a2) & 0xFFFFFFF;\n  this[2] = a2[2];\n  this[1] = a2[1];\n  result = a2[3];\n  this[3] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_44CE30",
        "Total XOR and shift operations": 51,
        "XOR operations": 48,
        "Shift operations": 3,
        "Operation percentage": "26.02%",
        "Function Body": "\nint __thiscall sub_44CE30(int *this, int a2)\n{\n  int v2; // ebx\n  unsigned __int8 *v3; // eax\n  int *v4; // esi\n  int v5; // edi\n  int v6; // edx\n  int v7; // ecx\n  int v8; // edx\n  int v9; // esi\n  int v10; // edi\n  int v11; // ebx\n  int v12; // edx\n  int v13; // esi\n  int v14; // edi\n  int v15; // ebx\n  int v16; // edx\n  int v17; // esi\n  int v18; // edi\n  int v19; // edx\n  int v20; // edi\n  int v21; // ebx\n  int v22; // edi\n  int v23; // esi\n  int v24; // edx\n  int v25; // ebx\n  int v26; // edi\n  int v27; // esi\n  int v28; // edx\n  int v29; // ebx\n  int v30; // edi\n  int v31; // esi\n  int v32; // edx\n  int v33; // ebx\n  int v34; // edi\n  int v35; // edx\n  int v36; // esi\n  int v37; // edi\n  int v38; // ebx\n  int v39; // edx\n  int v40; // esi\n  int v41; // edi\n  int v42; // ebx\n  int v43; // edx\n  int v44; // esi\n  int v45; // edi\n  int v46; // ebx\n  int v47; // edx\n  int v48; // esi\n  int v49; // eax\n  int v50; // edi\n  int v51; // edx\n  int v52; // ecx\n  int v53; // esi\n  int v54; // edi\n  int v55; // edx\n  int v56; // ecx\n  int v57; // esi\n  int v58; // edi\n  int v59; // edx\n  int v60; // ecx\n  int v61; // esi\n  int v62; // edi\n  int v63; // edx\n  int v64; // ecx\n  int v65; // ebx\n  int v66; // edi\n  int v67; // edx\n  int v68; // esi\n  int v69; // edx\n  int v70; // ecx\n  int result; // eax\n  int v73; // [esp+10h] [ebp-58h]\n  int v74; // [esp+14h] [ebp-54h]\n  int v75; // [esp+14h] [ebp-54h]\n  int v76; // [esp+18h] [ebp-50h]\n  int v77; // [esp+18h] [ebp-50h]\n  int v78; // [esp+1Ch] [ebp-4Ch]\n  int v79; // [esp+1Ch] [ebp-4Ch]\n  int v80; // [esp+20h] [ebp-48h]\n  int v81; // [esp+20h] [ebp-48h]\n  int v82; // [esp+20h] [ebp-48h]\n  int v83; // [esp+24h] [ebp-44h] BYREF\n  int v84; // [esp+28h] [ebp-40h]\n  int v85; // [esp+2Ch] [ebp-3Ch]\n  int v86; // [esp+30h] [ebp-38h]\n  int v87; // [esp+34h] [ebp-34h]\n  int v88; // [esp+38h] [ebp-30h]\n  int v89; // [esp+3Ch] [ebp-2Ch]\n  int v90; // [esp+40h] [ebp-28h]\n  int v91; // [esp+44h] [ebp-24h]\n  int v92; // [esp+48h] [ebp-20h]\n  int v93; // [esp+4Ch] [ebp-1Ch]\n  int v94; // [esp+50h] [ebp-18h]\n  int v95; // [esp+54h] [ebp-14h]\n  int v96; // [esp+58h] [ebp-10h]\n  int v97; // [esp+5Ch] [ebp-Ch]\n  int v98; // [esp+60h] [ebp-8h]\n\n  v2 = this[1];\n  v78 = this[3];\n  v76 = this[2];\n  v3 = (unsigned __int8 *)(a2 + 2);\n  v73 = *this;\n  v4 = &v83;\n  v5 = 16;\n  do\n  {\n    v6 = v3[1];\n    ++v4;\n    v7 = *v3;\n    v3 += 4;\n    *(v4 - 1) = *(v3 - 6) | ((*(v3 - 5) | ((v7 | (v6 << 8)) << 8)) << 8);\n    --v5;\n  }\n  while ( v5 );\n  v8 = v2 + __ROL4__(v83 + (v2 & v76 | v78 & ~v2) + v73 - 680876936, 7);\n  v9 = v8 + __ROL4__(v84 + (v8 & v2 | v76 & ~v8) + v78 - 389564586, 12);\n  v10 = v9 + __ROR4__(v85 + (v8 & v9 | v2 & ~v9) + v76 + 606105819, 15);\n  v11 = v10 + __ROR4__(v86 + (v10 & v9 | v8 & ~v10) + v2 - 1044525330, 10);\n  v12 = v11 + __ROL4__(v87 + (v11 & v10 | v9 & ~v11) - 176418897 + v8, 7);\n  v13 = v12 + __ROL4__(v88 + (v12 & v11 | v10 & ~v12) + 1200080426 + v9, 12);\n  v14 = v13 + __ROR4__(v89 + (v12 & v13 | v11 & ~v13) - 1473231341 + v10, 15);\n  v15 = v14 + __ROR4__(v90 + (v14 & v13 | v12 & ~v14) - 45705983 + v11, 10);\n  v16 = v15 + __ROL4__(v91 + (v15 & v14 | v13 & ~v15) + 1770035416 + v12, 7);\n  v17 = v16 + __ROL4__(v92 + (v16 & v15 | v14 & ~v16) - 1958414417 + v13, 12);\n  v18 = __ROR4__(v93 + (v16 & v17 | v15 & ~v17) - 42063 + v14, 15);\n  v77 = v17 + v18;\n  v74 = v17 + v18 + __ROR4__(v94 + (v77 & v17 | v16 & ~v77) - 1990404162 + v15, 10);\n  v19 = __ROL4__(v95 + (v74 & (v17 + v18) | v17 & ~v74) + 1804603682 + v16, 7);\n  v79 = v74 + v19;\n  v20 = __ROL4__(v96 + (v79 & v74 | (v17 + v18) & ~v79) + v17 - 40341101, 12);\n  v80 = v74 + v19 + v20;\n  v21 = v80 + __ROR4__(v97 + (v79 & (v79 + v20) | v74 & ~(v79 + v20)) + v77 - 1502002290, 15);\n  v22 = v21 + __ROR4__(v98 + (v21 & v80 | (v74 + v19) & ~v21) + v74 + 1236535329, 10);\n  v23 = v22 + __ROL4__(v74 + v19 - 165796510 + v84 + (v22 & v80 | v21 & ~v80), 5);\n  v24 = v23 + __ROL4__(v80 - 1069501632 + v89 + (v23 & v21 | v22 & ~v21), 9);\n  v25 = v24 + __ROL4__(v94 + (v22 & v24 | v23 & ~v22) + 643717713 + v21, 14);\n  v26 = v25 + __ROR4__(v83 + (v23 & v25 | v24 & ~v23) - 373897302 + v22, 12);\n  v27 = v26 + __ROL4__(v88 + (v26 & v24 | v25 & ~v24) - 701558691 + v23, 5);\n  v28 = v27 + __ROL4__(v93 + (v27 & v25 | v26 & ~v25) + 38016083 + v24, 9);\n  v29 = v28 + __ROL4__(v98 + (v26 & v28 | v27 & ~v26) - 660478335 + v25, 14);\n  v30 = v29 + __ROR4__(v87 + (v27 & v29 | v28 & ~v27) - 405537848 + v26, 12);\n  v31 = v30 + __ROL4__(v92 + (v30 & v28 | v29 & ~v28) + 568446438 + v27, 5);\n  v32 = __ROL4__(v97 + (v31 & v29 | v30 & ~v29) - 1019803690 + v28, 9);\n  v81 = v31 + v32;\n  v33 = v31 + v32 + __ROL4__(v86 + (v30 & (v31 + v32) | v31 & ~v30) - 187363961 + v29, 14);\n  v34 = __ROR4__(v91 + (v31 & v33 | (v31 + v32) & ~v31) + 1163531501 + v30, 12);\n  v75 = v33 + v34;\n  v35 = v33 + v34 + __ROL4__(v96 + ((v33 + v34) & v81 | v33 & ~v81) + v31 - 1444681467, 5);\n  v36 = v35 + __ROL4__(v85 + (v35 & v33 | (v33 + v34) & ~v33) + v81 - 51403784, 9);\n  v37 = v36 + __ROL4__(v90 + ((v33 + v34) & v36 | v35 & ~(v33 + v34)) + v33 + 1735328473, 14);\n  v38 = v37 + __ROR4__(v95 + (v35 & v37 | v36 & ~v35) + v75 - 1926607734, 12);\n  v39 = v38 + __ROL4__(v88 + (v38 ^ v37 ^ v36) - 378558 + v35, 4);\n  v40 = v39 + __ROL4__(v91 + (v39 ^ v38 ^ v37) - 2022574463 + v36, 11);\n  v41 = v40 + __ROL4__(v94 + (v39 ^ v38 ^ v40) + 1839030562 + v37, 16);\n  v42 = v41 + __ROR4__(v97 + (v39 ^ v41 ^ v40) - 35309556 + v38, 9);\n  v43 = v42 + __ROL4__(v84 + (v42 ^ v41 ^ v40) - 1530992060 + v39, 4);\n  v44 = v43 + __ROL4__(v87 + (v43 ^ v42 ^ v41) + 1272893353 + v40, 11);\n  v45 = v44 + __ROL4__(v90 + (v43 ^ v42 ^ v44) - 155497632 + v41, 16);\n  v46 = v45 + __ROR4__(v93 + (v43 ^ v45 ^ v44) - 1094730640 + v42, 9);\n  v47 = v46 + __ROL4__(v96 + (v46 ^ v45 ^ v44) + 681279174 + v43, 4);\n  v48 = v47 + __ROL4__(v83 + (v47 ^ v46 ^ v45) - 358537222 + v44, 11);\n  v49 = v47 - 640364487;\n  v50 = v48 + __ROL4__(v86 + (v47 ^ v46 ^ v48) - 722521979 + v45, 16);\n  v51 = v50 + __ROR4__(v46 + v89 + (v50 ^ v48 ^ v47) + 76029189, 9);\n  v52 = v51 + __ROL4__(v49 + v92 + (v51 ^ v50 ^ v48), 4);\n  v53 = v52 + __ROL4__(v95 + (v52 ^ v51 ^ v50) - 421815835 + v48, 11);\n  v54 = v53 + __ROL4__(v98 + (v52 ^ v51 ^ v53) + 530742520 + v50, 16);\n  v55 = v54 + __ROR4__(v85 + (v52 ^ v54 ^ v53) - 995338651 + v51, 9);\n  v56 = v55 + __ROL4__(v83 + (v54 ^ (v55 | ~v53)) - 198630844 + v52, 6);\n  v57 = v56 + __ROL4__(v90 + (v55 ^ (v56 | ~v54)) + 1126891415 + v53, 10);\n  v58 = v57 + __ROL4__(v97 + (v56 ^ (v57 | ~v55)) - 1416354905 + v54, 15);\n  v59 = v58 + __ROR4__(v88 + (v57 ^ (v58 | ~v56)) - 57434055 + v55, 11);\n  v60 = v59 + __ROL4__(v95 + (v58 ^ (v59 | ~v57)) + 1700485571 + v56, 6);\n  v61 = v60 + __ROL4__(v86 + (v59 ^ (v60 | ~v58)) - 1894986606 + v57, 10);\n  v62 = v61 + __ROL4__(v93 + (v60 ^ (v61 | ~v59)) - 1051523 + v58, 15);\n  v63 = v62 + __ROR4__(v84 + (v61 ^ (v62 | ~v60)) - 2054922799 + v59, 11);\n  v64 = v63 + __ROL4__(v91 + (v62 ^ (v63 | ~v61)) + 1873313359 + v60, 6);\n  v65 = v64 + __ROL4__(v98 + (v63 ^ (v64 | ~v62)) + v61 - 30611744, 10);\n  v66 = v65 + __ROL4__(v89 + (v64 ^ (v65 | ~v63)) - 1560198380 + v62, 15);\n  v67 = __ROR4__(v96 + (v65 ^ (v66 | ~v64)) + 1309151649 + v63, 11);\n  v82 = v66 + v67;\n  v68 = v66 + v67 + __ROL4__(v87 + (v66 ^ ((v66 + v67) | ~v65)) + v64 - 145523070, 6);\n  v69 = v68 + __ROL4__(v94 + ((v66 + v67) ^ (v68 | ~v66)) + v65 - 1120210379, 10);\n  v70 = v69 + __ROL4__(v85 + (v68 ^ (v69 | ~v82)) + v66 + 718787259, 15);\n  *this = v68 + v73;\n  this[2] += v70;\n  result = v70 + this[1] + __ROR4__(v92 + (v69 ^ (v70 | ~v68)) + v82 - 343485551, 11);\n  this[3] += v69;\n  this[1] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_46C22B",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "25.00%",
        "Function Body": "\n_DWORD *__thiscall sub_46C22B(_DWORD *this, int a2)\n{\n  void *v3; // eax\n  unsigned int v4; // ecx\n\n  *this = a2;\n  v3 = (void *)unknown_libname_80((unsigned __int64)((unsigned int)(a2 + 31) >> 5) >> 30 != 0 ? -1 : 4 * ((unsigned int)(a2 + 31) >> 5));\n  v4 = *this + 31;\n  this[1] = v3;\n  memset(v3, 0, 4 * (v4 >> 5));\n  return this;\n}\n// 49E11F: using guessed type int __cdecl unknown_libname_80(_DWORD);\n\n"
    },
    {
        "Function": "sub_475809",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "23.08%",
        "Function Body": "\nint __cdecl sub_475809(int a1)\n{\n  unsigned int v1; // edx\n  int v3; // edx\n  int v4; // ecx\n\n  v1 = (a1 + 7) & 0xFFFFFFF8;\n  if ( v1 > 0x1000 )\n    return -1;\n  v3 = v1 >> 3;\n  if ( (unsigned int)v3 > 0x20 )\n  {\n    v4 = 5;\n    if ( v3 >> 5 )\n    {\n      do\n        ++v4;\n      while ( v3 >> v4 > 0 );\n    }\n    v3 = 16 * (v4 - 5) + ((~((1 << (v4 - 5)) - 1) & ((1 << (v4 - 5)) - 1 + v3)) >> (v4 - 5));\n  }\n  return v3 - 1;\n}\n\n"
    },
    {
        "Function": "sub_448AB0",
        "Total XOR and shift operations": 17,
        "XOR operations": 14,
        "Shift operations": 3,
        "Operation percentage": "20.24%",
        "Function Body": "\nint __thiscall sub_448AB0(_DWORD *this, int a2)\n{\n  int v3; // eax\n  unsigned int v4; // edi\n  int v5; // ebx\n  int v6; // ecx\n  unsigned __int64 v7; // kr00_8\n  int v8; // edx\n  int v9; // eax\n  int v10; // ecx\n  int v11; // edx\n  int v12; // eax\n  int v13; // eax\n  int result; // eax\n  int v15; // [esp+Ch] [ebp-20h]\n  int v16; // [esp+10h] [ebp-1Ch]\n  int v17; // [esp+14h] [ebp-18h]\n  int v18; // [esp+18h] [ebp-14h]\n  int v19; // [esp+1Ch] [ebp-10h]\n  int v20; // [esp+20h] [ebp-Ch]\n  int v21; // [esp+24h] [ebp-8h]\n  int v22; // [esp+28h] [ebp-4h]\n\n  v18 = sub_448CD0(this[9] + this[38]);\n  v17 = sub_448CD0(this[37] + this[14]);\n  v16 = sub_448CD0(this[35]);\n  v3 = sub_448CD0(this[36]);\n  v4 = this[13];\n  v15 = v3;\n  v22 = this[1];\n  v21 = this[2];\n  v20 = this[3];\n  v19 = this[4];\n  v5 = v20 ^ dword_4CC100[HIBYTE(*this)] ^ (*this << 8);\n  if ( !a2 )\n    v5 ^= this[4] ^ this[36] ^ (this[38] + this[5]);\n  v6 = this[2];\n  v7 = (unsigned __int64)(unsigned int)this[5] << 8;\n  if ( (v6 & 0x40000000) != 0 )\n    v8 = dword_4CC500[HIDWORD(v7)] ^ v7;\n  else\n    v8 = dword_4CC900[HIDWORD(v7)] ^ v7;\n  if ( v6 < 0 )\n    v4 = dword_4CCD00[HIBYTE(v4)] ^ (v4 << 8);\n  v9 = this[6];\n  v10 = v8 ^ v4 ^ v9 ^ this[11];\n  v11 = this[15];\n  if ( !a2 )\n  {\n    v10 ^= this[35] ^ *this ^ (v11 + this[37]);\n    v9 = this[6];\n  }\n  this[5] = v9;\n  this[6] = this[7];\n  this[7] = this[8];\n  this[8] = this[9];\n  this[9] = this[10];\n  this[10] = this[11];\n  this[11] = this[12];\n  v12 = this[13];\n  *this = v22;\n  this[12] = v12;\n  v13 = this[14];\n  this[1] = v21;\n  this[13] = v13;\n  this[2] = v20;\n  this[3] = v19;\n  this[4] = v5;\n  this[14] = v11;\n  this[15] = v10;\n  this[35] = v18;\n  this[36] = v17;\n  this[37] = v16;\n  result = v15;\n  this[38] = v15;\n  return result;\n}\n// 4CC100: using guessed type int dword_4CC100[256];\n// 4CC500: using guessed type int dword_4CC500[256];\n// 4CC900: using guessed type int dword_4CC900[256];\n// 4CCD00: using guessed type int dword_4CCD00[256];\n\n"
    },
    {
        "Function": "sub_42F570",
        "Total XOR and shift operations": 44,
        "XOR operations": 0,
        "Shift operations": 44,
        "Operation percentage": "19.30%",
        "Function Body": "\n__int128 *__usercall sub_42F570@<eax>(__int64 a1@<xmm1>, __int128 *a2)\n{\n  int v2; // ebx\n  int v3; // esi\n  int v4; // edi\n  int v5; // ebx\n  __m128i v6; // xmm0\n  unsigned __int64 v7; // rax\n  unsigned int v8; // esi\n  int v9; // eax\n  unsigned __int64 v10; // kr18_8\n  unsigned int v11; // ecx\n  unsigned int v12; // edx\n  __int128 v13; // xmm0\n  int v14; // eax\n  int v15; // esi\n  unsigned int v16; // ebx\n  int v17; // ecx\n  unsigned __int64 v18; // kr28_8\n  unsigned __int64 v19; // kr50_8\n  unsigned __int64 v20; // kr58_8\n  unsigned __int64 v21; // kr60_8\n  int v22; // ecx\n  unsigned __int64 v23; // kr68_8\n  unsigned int v24; // esi\n  unsigned int v25; // edi\n  unsigned int v26; // ebx\n  unsigned int v27; // eax\n  __int16 v28; // ax\n  int v29; // eax\n  int v30; // ebx\n  unsigned __int64 v31; // kr98_8\n  unsigned __int16 v32; // cx\n  __int128 *result; // eax\n  unsigned __int64 v34; // [esp+8h] [ebp-64h]\n  char v35; // [esp+10h] [ebp-5Ch]\n  __int64 v36; // [esp+14h] [ebp-58h]\n  int v37; // [esp+1Ch] [ebp-50h]\n  unsigned int v38; // [esp+20h] [ebp-4Ch]\n  char v39; // [esp+24h] [ebp-48h]\n  unsigned int v40; // [esp+30h] [ebp-3Ch]\n  int v41; // [esp+34h] [ebp-38h]\n  unsigned int v42; // [esp+38h] [ebp-34h]\n  unsigned int v43; // [esp+38h] [ebp-34h]\n  char v44; // [esp+3Fh] [ebp-2Dh]\n  __int128 v45; // [esp+40h] [ebp-2Ch] BYREF\n  __int128 v46; // [esp+50h] [ebp-1Ch] BYREF\n\n  *((_QWORD *)&v46 + 1) = a1;\n  v2 = HIDWORD(a1) & 0xFFFFF;\n  if ( ((HIDWORD(a1) >> 20) & 0x7FF) != 0 )\n  {\n    v3 = ((HIDWORD(a1) >> 20) & 0x7FF) - 1075;\n    v41 = v3;\n    if ( !(v2 | (unsigned int)a1) )\n    {\n      v4 = (631305 * v3 - 261663) >> 21;\n      v5 = v3 + ((-1741647 * v4) >> 19);\n      sub_4146B0(&v45, -v4);\n      v6 = _mm_loadl_epi64((const __m128i *)((char *)&v45 + 8));\n      *((_QWORD *)&v46 + 1) = _mm_sub_epi64(v6, _mm_srli_epi64(v6, 0x36u)).m128i_u64[0] >> _mm_cvtsi32_si128(11 - v5).m128i_i8[0];\n      v34 = _mm_add_epi64(_mm_srli_epi64(_mm_loadl_epi64((const __m128i *)((char *)&v45 + 8)), 0x35u), v6).m128i_u64[0] >> (11 - (unsigned __int8)v5);\n      if ( ((HIDWORD(a1) >> 20) & 0x7FF) - 1077 <= 1 )\n      {\n        v40 = HIDWORD(v46);\n        v42 = DWORD2(v46);\n      }\n      else\n      {\n        v42 = DWORD2(v46) + 1;\n        v40 = (unsigned __int64)(*((_QWORD *)&v46 + 1) + 1i64) >> 32;\n      }\n      *(_QWORD *)&v46 = v34 / 0xA;\n      v7 = 10 * (v34 / 0xA);\n      if ( HIDWORD(v7) < v40 )\n      {\n        v8 = v42;\n      }\n      else if ( HIDWORD(v7) > v40 || (v8 = v42, (unsigned int)v7 >= v42) )\n      {\n        DWORD2(v46) = v4 + 1;\n        v9 = sub_414A80((unsigned int *)&v46);\n        DWORD2(v46) += v9;\nLABEL_38:\n        v13 = v46;\n        goto LABEL_39;\n      }\n      DWORD2(v46) = v4;\n      v10 = (*((_QWORD *)&v45 + 1) >> (10 - (unsigned __int8)v5)) + 1i64;\n      v11 = v10 >> 1;\n      v12 = HIDWORD(v10) >> 1;\n      *(_QWORD *)&v46 = v10 >> 1;\n      if ( ((HIDWORD(a1) >> 20) & 0x7FF) == 998 )\n      {\n        if ( (v10 & 2) != 0 )\n          *(_QWORD *)&v46 = __PAIR64__(v12, v11) - 1;\n      }\n      else if ( __PAIR64__(v12, v11) < __PAIR64__(v40, v8) )\n      {\n        *(_QWORD *)&v46 = __PAIR64__(v12, v11) + 1;\n      }\n      goto LABEL_38;\n    }\n    v2 |= 0x100000u;\nLABEL_20:\n    if ( (a1 & 1) != 0 )\n    {\n      v44 = 0;\n      v39 = 1;\n    }\n    else\n    {\n      v44 = 1;\n      v39 = a1 & 1;\n    }\n    v14 = (315653 * v3) >> 20;\n    v15 = 2 - v14;\n    v37 = v14;\n    sub_4146B0(&v45, 2 - v14);\n    v16 = __PAIR64__(v2, a1) >> 31;\n    v36 = __PAIR64__(v16, 2 * (int)a1);\n    v17 = v41 + ((1741647 * v15) >> 19);\n    v35 = v17;\n    v38 = _mm_cvtsi128_si32(_mm_srli_epi64(_mm_loadl_epi64((const __m128i *)((char *)&v45 + 8)), 63 - v17));\n    v18 = (__PAIR64__(v16, 2 * (int)a1) | 1) << v17;\n    HIDWORD(v46) = DWORD2(v45) * v18;\n    v19 = (unsigned int)v45 * (unsigned __int64)HIDWORD(v18);\n    v20 = (unsigned int)v19 + (((unsigned int)v45 * (unsigned __int64)(unsigned int)v18) >> 32);\n    v21 = ((DWORD1(v45) * (unsigned __int64)(unsigned int)v18) >> 32)\n        + HIDWORD(v19)\n        + DWORD1(v45) * (unsigned __int64)HIDWORD(v18)\n        + (unsigned int)__CFADD__(DWORD1(v45) * v18, (_DWORD)v20)\n        + HIDWORD(v20)\n        + v18 * *((_QWORD *)&v45 + 1);\n    if ( v21 >= ((DWORD1(v45) * (unsigned __int64)(unsigned int)v18) >> 32)\n              + HIDWORD(v19)\n              + DWORD1(v45) * (unsigned __int64)HIDWORD(v18)\n              + (unsigned int)__CFADD__(DWORD1(v45) * v18, (_DWORD)v20)\n              + HIDWORD(v20) )\n    {\n      *((_QWORD *)&v46 + 1) = 0i64;\n      v22 = 0;\n    }\n    else\n    {\n      v22 = 1;\n    }\n    v43 = v22\n        + ((HIDWORD(v45) * (unsigned __int64)(unsigned int)v18) >> 32)\n        + ((DWORD2(v45) * (unsigned __int64)HIDWORD(v18)) >> 32)\n        + (((unsigned int)(DWORD2(v45) * HIDWORD(v18))\n          + ((DWORD2(v45) * (unsigned __int64)(unsigned int)v18) >> 32)\n          + (unsigned int)(HIDWORD(v45) * v18)) >> 32)\n        + HIDWORD(v45) * HIDWORD(v18);\n    v23 = ((HIDWORD(v45) * (unsigned __int64)(unsigned int)v18) >> 32)\n        + ((DWORD2(v45) * (unsigned __int64)HIDWORD(v18)) >> 32)\n        + (((unsigned int)(DWORD2(v45) * HIDWORD(v18))\n          + ((DWORD2(v45) * (unsigned __int64)(unsigned int)v18) >> 32)\n          + (unsigned int)(HIDWORD(v45) * v18)) >> 32)\n        + HIDWORD(v45) * (unsigned __int64)HIDWORD(v18)\n        + (unsigned int)v22;\n    HIDWORD(v46) = (549755813 * (unsigned __int64)(unsigned int)v23) >> 32;\n    v24 = (HIDWORD(v46)\n         + 549755813i64 * HIDWORD(v23)\n         + (unsigned int)(__CFADD__(549755813 * v23, (3813930959u * __PAIR64__(HIDWORD(v23), v43)) >> 32)\n                        + (((unsigned int)(-481036337 * HIDWORD(v23)) + ((3813930959u * (unsigned __int64)v43) >> 32)) >> 32))\n         + ((3813930959u * (unsigned __int64)HIDWORD(v23)) >> 32)) >> 7;\n    v25 = (unsigned int)((HIDWORD(v46)\n                        + 549755813i64 * HIDWORD(v23)\n                        + (unsigned int)(__CFADD__(549755813 * v23, (3813930959u * __PAIR64__(HIDWORD(v23), v43)) >> 32)\n                                       + (((unsigned int)(-481036337 * HIDWORD(v23))\n                                         + ((3813930959u * (unsigned __int64)v43) >> 32)) >> 32))\n                        + ((3813930959u * (unsigned __int64)HIDWORD(v23)) >> 32)) >> 32) >> 7;\n    *(_QWORD *)&v46 = __PAIR64__(v25, v24);\n    v26 = v43 - 1000 * v24;\n    v27 = v38;\n    if ( v26 >= v38 )\n    {\n      if ( v26 > v38 )\n        goto LABEL_34;\n      v28 = sub_4148F0((__m128i *)&v45, v35, v36 - 1);\n      if ( !((unsigned __int8)v28 | (unsigned __int8)(v44 & HIBYTE(v28))) )\n      {\n        v27 = v38;\n        goto LABEL_34;\n      }\n    }\n    else if ( !v26 && ((unsigned __int8)v39 & (v21 == 0)) != 0 )\n    {\n      v26 = 1000;\n      v25 = (__PAIR64__(v25, v24--) - 1) >> 32;\nLABEL_34:\n      v30 = v26 - (v27 >> 1) + 50;\n      LODWORD(v46) = 10 * v24 + ((unsigned int)(656 * v30) >> 16);\n      v31 = ((unsigned int)(656 * v30) >> 16) + 10 * __PAIR64__(v25, v24);\n      *(_QWORD *)((char *)&v46 + 4) = __PAIR64__(v37, HIDWORD(v31));\n      if ( (unsigned __int16)(656 * v30) < 0x290u )\n      {\n        v32 = sub_4148F0((__m128i *)&v45, v35, v36);\n        if ( (_BYTE)v32 != (v30 & 1) || (HIBYTE(v32) & ((v31 & 1) != 0)) != 0 )\n        {\n          LODWORD(v46) = v31 - 1;\n          DWORD1(v46) = ((_DWORD)v31 != 0) + HIDWORD(v31) - 1;\n        }\n      }\n      goto LABEL_38;\n    }\n    DWORD2(v46) = v37 + 1;\n    v29 = sub_414A80((unsigned int *)&v46);\n    DWORD2(v46) += v29;\n    goto LABEL_38;\n  }\n  if ( v2 | (unsigned int)a1 )\n  {\n    v3 = -1074;\n    v41 = -1074;\n    goto LABEL_20;\n  }\n  memset(&v45, 0, 12);\n  v13 = v45;\nLABEL_39:\n  result = a2;\n  *a2 = v13;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4049E0",
        "Total XOR and shift operations": 24,
        "XOR operations": 0,
        "Shift operations": 24,
        "Operation percentage": "19.05%",
        "Function Body": "\nchar __fastcall sub_4049E0(int *a1, int a2)\n{\n  _OWORD *v3; // eax\n  unsigned int *v4; // ecx\n  __int64 v5; // xmm0_8\n  unsigned int *v6; // esi\n  unsigned int v7; // edx\n  char v8; // al\n  int v9; // edi\n  char *v10; // eax\n  unsigned int v11; // ecx\n  void *v12; // esi\n  int v14; // edi\n  _BYTE *v15; // esi\n  _WORD *Block; // [esp+14h] [ebp-270h]\n  __int128 *v19; // [esp+18h] [ebp-26Ch]\n  void *Src; // [esp+1Ch] [ebp-268h] BYREF\n  size_t Size; // [esp+20h] [ebp-264h] BYREF\n  __int64 v22; // [esp+24h] [ebp-260h] BYREF\n  __int16 v23; // [esp+2Ch] [ebp-258h]\n  char v24; // [esp+2Eh] [ebp-256h]\n  char v25; // [esp+2Fh] [ebp-255h] BYREF\n  unsigned int v26; // [esp+5Fh] [ebp-225h]\n  unsigned int v27; // [esp+63h] [ebp-221h]\n  unsigned int v28; // [esp+67h] [ebp-21Dh]\n  unsigned int v29; // [esp+6Bh] [ebp-219h]\n  unsigned int v30; // [esp+6Fh] [ebp-215h]\n  unsigned int v31; // [esp+73h] [ebp-211h]\n  unsigned int v32; // [esp+77h] [ebp-20Dh]\n  unsigned int v33; // [esp+7Bh] [ebp-209h]\n  __int128 v34[2]; // [esp+224h] [ebp-60h] BYREF\n  __int128 v35; // [esp+244h] [ebp-40h] BYREF\n  int v36[4]; // [esp+254h] [ebp-30h] BYREF\n  int v37[4]; // [esp+264h] [ebp-20h] BYREF\n  int v38; // [esp+280h] [ebp-4h]\n\n  if ( !a1 )\n    return 0;\n  if ( !*a1 )\n    return 0;\n  v3 = operator new(0x20u);\n  *v3 = 0i64;\n  v3[1] = 0i64;\n  v38 = -1;\n  Block = sub_447020(v3);\n  if ( !Block )\n    return 0;\n  memset(v34, 0, sizeof(v34));\n  v35 = 0i64;\n  *(_OWORD *)v36 = 0i64;\n  *(_OWORD *)v37 = 0i64;\n  sub_447230(0x20u, (char *)v34);\n  sub_447230(0x10u, (char *)&v35);\n  sub_447230(0x10u, (char *)v36);\n  sub_447230(0x10u, (char *)v37);\n  v4 = (unsigned int *)&v35;\n  v5 = *(_QWORD *)a2;\n  v6 = (unsigned int *)v34;\n  v23 = *(_WORD *)(a2 + 8);\n  v7 = 0;\n  v8 = *(_BYTE *)(a2 + 10);\n  v9 = 2;\n  v24 = v8;\n  v10 = &v25;\n  v22 = v5;\n  v19 = &v35;\n  do\n  {\n    if ( v7 == v9 )\n    {\n      *(_DWORD *)v10 = _byteswap_ulong(*v4);\n      v4 = (unsigned int *)v19 + 1;\n      v9 += 3;\n      v19 = (__int128 *)((char *)v19 + 4);\n    }\n    else\n    {\n      v11 = *v6++;\n      *(_DWORD *)v10 = _byteswap_ulong(v11);\n      v4 = (unsigned int *)v19;\n    }\n    ++v7;\n    v10 += 4;\n  }\n  while ( v7 < 0xC );\n  v26 = ((v36[0] & 0xFF00 | (v36[0] << 16)) << 8) | ((unsigned int)(HIWORD(v36[0]) | v36[0] & 0xFF0000) >> 8);\n  v27 = ((v37[0] & 0xFF00 | (v37[0] << 16)) << 8) | ((unsigned int)(HIWORD(v37[0]) | v37[0] & 0xFF0000) >> 8);\n  v28 = ((v36[1] & 0xFF00 | (v36[1] << 16)) << 8) | ((unsigned int)(HIWORD(v36[1]) | v36[1] & 0xFF0000) >> 8);\n  v29 = ((v37[1] & 0xFF00 | (v37[1] << 16)) << 8) | ((unsigned int)(HIWORD(v37[1]) | v37[1] & 0xFF0000) >> 8);\n  v30 = ((v36[2] & 0xFF00 | (v36[2] << 16)) << 8) | ((unsigned int)(HIWORD(v36[2]) | v36[2] & 0xFF0000) >> 8);\n  Size = 512;\n  v31 = ((v37[2] & 0xFF00 | (v37[2] << 16)) << 8) | ((unsigned int)(HIWORD(v37[2]) | v37[2] & 0xFF0000) >> 8);\n  v32 = ((v36[3] & 0xFF00 | (v36[3] << 16)) << 8) | ((unsigned int)(HIWORD(v36[3]) | v36[3] & 0xFF0000) >> 8);\n  v33 = ((v37[3] & 0xFF00 | (v37[3] << 16)) << 8) | ((unsigned int)(HIWORD(v37[3]) | v37[3] & 0xFF0000) >> 8);\n  v12 = Block;\n  if ( sub_447880(*a1, 0x5Bu, &v22, &Size, (char **)&Src) )\n    goto LABEL_15;\n  if ( Size != 512 )\n  {\n    sub_464810(Block);\n    sub_447EC0(Src, Size);\n    return 0;\n  }\n  sub_404DC0(0x200u, (__m128i *)Src);\n  v14 = Size;\n  v15 = Src;\n  memmove_0((void *)(a2 + 52), Src, Size);\n  sub_447EC0(v15, v14);\n  v12 = Block;\n  if ( sub_447140(Block, 32, v34, 16, &v35) )\n  {\nLABEL_15:\n    sub_464810(v12);\n    return 0;\n  }\n  if ( sub_447490((int)Block, (void *)0x10, (unsigned int *)v36, 16, (unsigned int *)v37) )\n  {\n    sub_447110(Block);\n    goto LABEL_15;\n  }\n  *(_DWORD *)(a2 + 48) = Block;\n  return 1;\n}\n\n"
    },
    {
        "Function": "sub_42F270",
        "Total XOR and shift operations": 20,
        "XOR operations": 1,
        "Shift operations": 19,
        "Operation percentage": "16.67%",
        "Function Body": "\n__int32 __usercall sub_42F270@<eax>(unsigned int a1@<xmm0>)\n{\n  int v1; // ecx\n  int v2; // edi\n  int v3; // esi\n  int v4; // ebx\n  int v5; // edx\n  unsigned int v6; // eax\n  __m128i v7; // xmm1\n  unsigned int v9; // ecx\n  unsigned int *v10; // ecx\n  unsigned int v11; // ebx\n  unsigned __int32 v12; // esi\n  unsigned int v13; // ebx\n  int v14; // kr00_4\n  unsigned int v15; // edi\n  unsigned int v16; // ebx\n  int v17; // ebx\n  unsigned int v18; // edi\n  __int16 v19; // ax\n  __int16 v20; // ax\n  unsigned __int64 v21; // [esp+10h] [ebp-30h] BYREF\n  int v22; // [esp+18h] [ebp-28h]\n  int v23; // [esp+1Ch] [ebp-24h]\n  __m128i v24; // [esp+20h] [ebp-20h] BYREF\n  unsigned int v25; // [esp+30h] [ebp-10h]\n  unsigned __int8 v26; // [esp+37h] [ebp-9h]\n  int v27; // [esp+38h] [ebp-8h]\n\n  v1 = a1 & 0x7FFFFF;\n  v27 = a1 & 0x7FFFFF;\n  if ( !(unsigned __int8)(a1 >> 23) )\n  {\n    if ( !v1 )\n      return 0;\n    v2 = -149;\nLABEL_17:\n    v26 = (v1 & 1) == 0;\n    v22 = (315653 * v2) >> 20;\n    v10 = (unsigned int *)((char *)&unk_4BA148 - 8 * v22);\n    v11 = *v10;\n    v25 = v10[1];\n    v21 = __PAIR64__(v25, v11);\n    v23 = v2 + ((1741647 - 1741647 * v22) >> 19);\n    v24.m128i_i32[1] = __PAIR64__(v25, v11) >> (63\n                                              - ((unsigned __int8)v2\n                                               + (unsigned __int8)((1741647 - 1741647 * v22) >> 19)));\n    v27 *= 2;\n    v12 = v24.m128i_u32[1];\n    v14 = (__PAIR64__(v25, v11) * ((v27 | 1u) << v23)) >> 32;\n    v13 = (v25 * (unsigned __int64)((v27 | 1u) << v23) + ((v11 * (unsigned __int64)((v27 | 1u) << v23)) >> 32)) >> 32;\n    v15 = v13 / 0x64;\n    v24.m128i_i32[3] = v13 / 0x64;\n    v16 = v13 % 0x64;\n    if ( v16 >= v24.m128i_i32[1] )\n    {\n      if ( v16 > v24.m128i_i32[1] )\n        goto LABEL_21;\n      v20 = sub_414640(v27 - 1, (unsigned int *)&v21, v23);\n      if ( !((unsigned __int8)v20 | (unsigned __int8)(v26 & HIBYTE(v20))) )\n        goto LABEL_21;\n    }\n    else if ( !v16 && ((v26 ^ 1) & (v14 == 0)) != 0 )\n    {\n      --v15;\n      v16 = 100;\nLABEL_21:\n      v17 = v16 - (v12 >> 1) + 5;\n      v26 = (v17 & 1) == 0;\n      v18 = ((unsigned int)(6554 * v17) >> 16) + 10 * v15;\n      if ( (unsigned __int16)(6554 * v17) < 0x199Au )\n      {\n        v19 = sub_414640(v27, (unsigned int *)&v21, v23);\n        if ( (_BYTE)v19 != v26 || ((unsigned __int8)v18 & HIBYTE(v19) & 1) != 0 )\n          --v18;\n      }\n      return v18;\n    }\n    v25 = v22 + 1;\n    sub_414A30(&v24.m128i_u32[3]);\n    return v24.m128i_i32[3];\n  }\n  v2 = (unsigned __int8)(a1 >> 23) - 150;\n  if ( v1 )\n  {\n    v1 |= 0x800000u;\n    v27 = v1;\n    goto LABEL_17;\n  }\n  v3 = (631305 * v2 - 261663) >> 21;\n  v4 = v2 + ((-1741647 * v3) >> 19);\n  v24.m128i_i64[0] = *((_QWORD *)&unk_4BA140 - v3);\n  v5 = _mm_cvtsi128_si32(_mm_srli_epi64(_mm_sub_epi64(_mm_loadl_epi64(&v24), _mm_srli_epi64(_mm_loadl_epi64(&v24), 0x19u)), 40 - v4));\n  v6 = v5 + 1;\n  v7 = _mm_srli_epi64(_mm_add_epi64(_mm_srli_epi64(_mm_loadl_epi64(&v24), 0x18u), _mm_loadl_epi64(&v24)), 40 - v4);\n  if ( (unsigned int)(unsigned __int8)(a1 >> 23) - 152 <= 1 )\n    v6 = v5;\n  v27 = v6;\n  v24.m128i_i32[3] = _mm_cvtsi128_si32(v7) / 0xAu;\n  if ( 10 * v24.m128i_i32[3] >= v6 )\n  {\n    v25 = v3 + 1;\n    sub_414A30(&v24.m128i_u32[3]);\n    return v24.m128i_i32[3];\n  }\n  v9 = (unsigned int)(_mm_cvtsi128_si32(_mm_srli_epi64(_mm_loadl_epi64(&v24), 39 - v4)) + 1) >> 1;\n  if ( (unsigned __int8)(a1 >> 23) == 115 )\n  {\n    if ( (v9 & 1) != 0 )\n      return v9 - 1;\n  }\n  else if ( v9 < v6 )\n  {\n    ++v9;\n  }\n  return v9;\n}\n\n"
    },
    {
        "Function": "sub_448150",
        "Total XOR and shift operations": 48,
        "XOR operations": 48,
        "Shift operations": 0,
        "Operation percentage": "14.50%",
        "Function Body": "\n_DWORD *__cdecl sub_448150(_DWORD *a1, char *a2, char *a3, unsigned int a4)\n{\n  _DWORD *result; // eax\n  char *v5; // esi\n  unsigned int v6; // edi\n  int v7; // edx\n  char *v8; // ebx\n  unsigned int v9; // eax\n  int v10; // ebx\n  char *v11; // edx\n  int v12; // edi\n  int v13; // ebx\n  int v14; // esi\n  int v15; // ecx\n  int v16; // edi\n  int v17; // ecx\n  int v18; // ebx\n  int v19; // eax\n  int v20; // edx\n  int v21; // ebx\n  int v22; // edi\n  int v23; // eax\n  int v24; // esi\n  int v25; // ecx\n  int v26; // eax\n  int v27; // esi\n  int v28; // esi\n  int v29; // edx\n  int v30; // eax\n  int v31; // esi\n  int v32; // esi\n  int v33; // eax\n  int v34; // esi\n  int v35; // eax\n  int v36; // ecx\n  int v37; // ebx\n  int v38; // eax\n  int v39; // edx\n  int v40; // eax\n  int v41; // edx\n  int v42; // esi\n  int v43; // eax\n  int v44; // edi\n  bool v45; // zf\n  int v46; // edi\n  int v47; // esi\n  int v48; // edx\n  int v49; // ecx\n  int v50; // eax\n  char *v51; // eax\n  unsigned int v52; // edi\n  char *v53; // ecx\n  char *v54; // eax\n  char v55; // al\n  int v56; // [esp+Ch] [ebp-C8h]\n  char *v57; // [esp+10h] [ebp-C4h]\n  int v58; // [esp+14h] [ebp-C0h]\n  int v59; // [esp+18h] [ebp-BCh]\n  int v60; // [esp+1Ch] [ebp-B8h]\n  int v61; // [esp+20h] [ebp-B4h]\n  int v62; // [esp+24h] [ebp-B0h]\n  int v63; // [esp+28h] [ebp-ACh]\n  int v64; // [esp+2Ch] [ebp-A8h]\n  int v65; // [esp+30h] [ebp-A4h]\n  int v66; // [esp+34h] [ebp-A0h]\n  int v67; // [esp+38h] [ebp-9Ch]\n  int v68; // [esp+3Ch] [ebp-98h]\n  int v69; // [esp+40h] [ebp-94h]\n  int v70; // [esp+44h] [ebp-90h]\n  int v71; // [esp+48h] [ebp-8Ch]\n  int v72; // [esp+48h] [ebp-8Ch]\n  int v73; // [esp+4Ch] [ebp-88h]\n  int v74; // [esp+4Ch] [ebp-88h]\n  int v75; // [esp+50h] [ebp-84h]\n  int v76; // [esp+54h] [ebp-80h]\n  int v77; // [esp+54h] [ebp-80h]\n  int v78; // [esp+58h] [ebp-7Ch]\n  int v79; // [esp+58h] [ebp-7Ch]\n  int v80; // [esp+5Ch] [ebp-78h]\n  int v81; // [esp+5Ch] [ebp-78h]\n  int v82; // [esp+60h] [ebp-74h]\n  int v83; // [esp+60h] [ebp-74h]\n  int v84; // [esp+64h] [ebp-70h]\n  char *v85; // [esp+68h] [ebp-6Ch]\n  char *v86; // [esp+68h] [ebp-6Ch]\n  int v87; // [esp+6Ch] [ebp-68h]\n  int v88; // [esp+6Ch] [ebp-68h]\n  int v89; // [esp+6Ch] [ebp-68h]\n  int v90; // [esp+70h] [ebp-64h]\n  int v91; // [esp+70h] [ebp-64h]\n  int v92; // [esp+70h] [ebp-64h]\n  int v93; // [esp+70h] [ebp-64h]\n  int v94; // [esp+74h] [ebp-60h]\n  int v95; // [esp+74h] [ebp-60h]\n  int v96; // [esp+74h] [ebp-60h]\n  int v97; // [esp+78h] [ebp-5Ch]\n  int v98; // [esp+78h] [ebp-5Ch]\n  int v99; // [esp+78h] [ebp-5Ch]\n  int v100; // [esp+7Ch] [ebp-58h]\n  int v101; // [esp+7Ch] [ebp-58h]\n  int v102; // [esp+7Ch] [ebp-58h]\n  int v103; // [esp+7Ch] [ebp-58h]\n  int v104; // [esp+7Ch] [ebp-58h]\n  int v105; // [esp+80h] [ebp-54h]\n  int v106; // [esp+80h] [ebp-54h]\n  int v107; // [esp+80h] [ebp-54h]\n  int v108; // [esp+84h] [ebp-50h]\n  int v109; // [esp+84h] [ebp-50h]\n  int v110; // [esp+84h] [ebp-50h]\n  int v111; // [esp+84h] [ebp-50h]\n  int v112; // [esp+84h] [ebp-50h]\n  int v113; // [esp+88h] [ebp-4Ch]\n  int v114; // [esp+88h] [ebp-4Ch]\n  int v115; // [esp+88h] [ebp-4Ch]\n  int v116; // [esp+88h] [ebp-4Ch]\n  int v117; // [esp+88h] [ebp-4Ch]\n  int v118; // [esp+8Ch] [ebp-48h]\n  int v119; // [esp+8Ch] [ebp-48h]\n  int v120; // [esp+8Ch] [ebp-48h]\n  int v121; // [esp+8Ch] [ebp-48h]\n  int v122; // [esp+8Ch] [ebp-48h]\n  char v123[64]; // [esp+90h] [ebp-44h] BYREF\n\n  result = 0;\n  v5 = a3;\n  v6 = a4;\n  v85 = a3;\n  v57 = 0;\n  if ( a4 )\n  {\n    v58 = *a1;\n    v56 = a1[1];\n    v70 = a1[2];\n    v7 = a1[13];\n    v69 = a1[3];\n    v68 = a1[4];\n    v67 = a1[5];\n    v66 = a1[6];\n    v65 = a1[7];\n    v64 = a1[8];\n    v63 = a1[9];\n    v62 = a1[10];\n    v61 = a1[11];\n    v75 = a1[12];\n    v60 = a1[14];\n    v8 = a2;\n    v84 = v7;\n    v59 = a1[15];\n    while ( 1 )\n    {\n      if ( v6 < 0x40 )\n      {\n        v9 = 0;\n        if ( v6 )\n        {\n          v10 = v8 - v123;\n          do\n          {\n            v11 = &v123[v9++];\n            *v11 = v11[v10];\n          }\n          while ( v9 < v6 );\n          v7 = v84;\n        }\n        v57 = v5;\n        a2 = v123;\n        v85 = v123;\n      }\n      v12 = v58;\n      v13 = v75;\n      v14 = v60;\n      v90 = v70;\n      v105 = v69;\n      v94 = v68;\n      v113 = v63;\n      v82 = v67;\n      v118 = v62;\n      v80 = v66;\n      v108 = v61;\n      v78 = v65;\n      v87 = v59;\n      v15 = v56;\n      v100 = v64;\n      v73 = 4;\n      while ( 1 )\n      {\n        v16 = v94 + v12;\n        v17 = v82 + v15;\n        v18 = __ROL4__(v16 ^ v13, 16);\n        v101 = v18 + v100;\n        v19 = __ROL4__(v94 ^ v101, 12);\n        v20 = __ROL4__(v17 ^ v7, 16);\n        v97 = v19 + v16;\n        v21 = __ROL4__((v19 + v16) ^ v18, 8);\n        v102 = v21 + v101;\n        v22 = __ROL4__(v19 ^ v102, 7);\n        v114 = v20 + v113;\n        v23 = __ROL4__(v82 ^ v114, 12);\n        v76 = v23 + v17;\n        v95 = __ROL4__((v23 + v17) ^ v20, 8);\n        v115 = v95 + v114;\n        v24 = __ROL4__((v80 + v90) ^ v14, 16);\n        v25 = __ROL4__(v23 ^ v115, 7);\n        v119 = v24 + v118;\n        v26 = __ROL4__(v80 ^ v119, 12);\n        v98 = v25 + v97;\n        v27 = (v26 + v80 + v90) ^ v24;\n        v91 = v26 + v80 + v90;\n        v71 = __ROL4__(v27, 8);\n        v120 = v71 + v119;\n        v28 = __ROL4__((v78 + v105) ^ v87, 16);\n        v29 = __ROL4__(v26 ^ v120, 7);\n        v109 = v28 + v108;\n        v30 = __ROL4__(v78 ^ v109, 12);\n        v106 = v30 + v78 + v105;\n        v31 = __ROL4__(v106 ^ v28, 8);\n        v110 = v31 + v109;\n        v88 = v31;\n        v32 = v30 ^ v110;\n        v33 = __ROL4__(v98 ^ v88, 16);\n        v34 = __ROL4__(v32, 7);\n        v121 = v33 + v120;\n        v89 = v33;\n        v35 = __ROL4__(v25 ^ v121, 12);\n        v99 = v35 + v98;\n        v36 = __ROL4__(v99 ^ v89, 8);\n        v118 = v36 + v121;\n        v87 = v36;\n        v82 = __ROL4__(v35 ^ v118, 7);\n        v37 = __ROL4__((v29 + v76) ^ v21, 16);\n        v111 = v37 + v110;\n        v38 = __ROL4__(v29 ^ v111, 12);\n        v15 = v38 + v29 + v76;\n        v77 = __ROL4__(v15 ^ v37, 8);\n        v108 = v77 + v111;\n        v92 = v34 + v91;\n        v80 = __ROL4__(v38 ^ v108, 7);\n        v39 = __ROL4__(v92 ^ v95, 16);\n        v103 = v39 + v102;\n        v40 = __ROL4__(v34 ^ v103, 12);\n        v41 = (v40 + v92) ^ v39;\n        v90 = v40 + v92;\n        v7 = __ROL4__(v41, 8);\n        v100 = v7 + v103;\n        v42 = __ROL4__((v22 + v106) ^ v71, 16);\n        v78 = __ROL4__(v40 ^ v100, 7);\n        v116 = v42 + v115;\n        v43 = __ROL4__(v22 ^ v116, 12);\n        v44 = v43 + v22 + v106;\n        v105 = v44;\n        v14 = __ROL4__(v44 ^ v42, 8);\n        v113 = v14 + v116;\n        v72 = v14;\n        v94 = __ROL4__(v43 ^ v113, 7);\n        v45 = v73-- == 1;\n        v13 = v77;\n        if ( v45 )\n          break;\n        v12 = v99;\n      }\n      v74 = *((_DWORD *)a2 + 1) ^ (v15 + v56);\n      v93 = *((_DWORD *)a2 + 2) ^ (v70 + v90);\n      v107 = *((_DWORD *)a2 + 3) ^ (v44 + v69);\n      v96 = *((_DWORD *)a2 + 4) ^ (v68 + v94);\n      v83 = *((_DWORD *)a2 + 5) ^ (v67 + v82);\n      v81 = *((_DWORD *)a2 + 6) ^ (v66 + v80);\n      v79 = *((_DWORD *)a2 + 7) ^ (v65 + v78);\n      v104 = *((_DWORD *)a2 + 8) ^ (v100 + v64);\n      v117 = *((_DWORD *)a2 + 9) ^ (v63 + v113);\n      v122 = *((_DWORD *)a2 + 10) ^ (v62 + v118);\n      v46 = *((_DWORD *)a2 + 12) ^ (v75 + v77);\n      v47 = *((_DWORD *)a2 + 13) ^ (v7 + v84);\n      v48 = *((_DWORD *)a2 + 14) ^ (v72 + v60);\n      v49 = *((_DWORD *)a2 + 15) ^ (v59 + v87);\n      v45 = v75++ == -1;\n      v112 = *((_DWORD *)a2 + 11) ^ (v61 + v108);\n      v50 = v84 + 1;\n      if ( !v45 )\n        v50 = v84;\n      v84 = v50;\n      *(_DWORD *)v85 = *(_DWORD *)a2 ^ (v58 + v99);\n      *((_DWORD *)v85 + 1) = v74;\n      *((_DWORD *)v85 + 2) = v93;\n      *((_DWORD *)v85 + 3) = v107;\n      *((_DWORD *)v85 + 4) = v96;\n      *((_DWORD *)v85 + 5) = v83;\n      *((_DWORD *)v85 + 6) = v81;\n      *((_DWORD *)v85 + 7) = v79;\n      *((_DWORD *)v85 + 8) = v104;\n      *((_DWORD *)v85 + 9) = v117;\n      *((_DWORD *)v85 + 10) = v122;\n      v51 = v85;\n      *((_DWORD *)v85 + 12) = v46;\n      v52 = a4;\n      *((_DWORD *)v85 + 11) = v112;\n      *((_DWORD *)v85 + 13) = v47;\n      *((_DWORD *)v85 + 14) = v48;\n      *((_DWORD *)v85 + 15) = v49;\n      if ( a4 <= 0x40 )\n        break;\n      v7 = v84;\n      v6 = a4 - 64;\n      v8 = a2 + 64;\n      a4 -= 64;\n      v85 += 64;\n      v5 = v51 + 64;\n      a2 += 64;\n    }\n    if ( a4 < 0x40 && a4 )\n    {\n      v53 = v57;\n      v54 = (char *)(v85 - v57);\n      v86 = (char *)(v85 - v57);\n      do\n      {\n        v55 = (v53++)[(_DWORD)v54];\n        *(v53 - 1) = v55;\n        v54 = v86;\n        --v52;\n      }\n      while ( v52 );\n    }\n    result = a1;\n    a1[12] = v75;\n    a1[13] = v84;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_45DDB0",
        "Total XOR and shift operations": 16,
        "XOR operations": 0,
        "Shift operations": 16,
        "Operation percentage": "6.15%",
        "Function Body": "\nint *__thiscall sub_45DDB0(\n        void *this,\n        int *a2,\n        int a3,\n        int a4,\n        int a5,\n        int a6,\n        int a7,\n        int *a8,\n        _DWORD *a9,\n        char a10,\n        int a11)\n{\n  int v12; // ebx\n  struct std::_Facet_base *v13; // eax\n  int *v14; // esi\n  int v15; // ecx\n  int *v16; // eax\n  int v17; // ecx\n  int v18; // ecx\n  int v19; // eax\n  int v20; // ecx\n  int v21; // ecx\n  int v22; // eax\n  int v23; // ecx\n  int *result; // eax\n  int v25; // [esp-Ch] [ebp-38h]\n  int v26; // [esp-Ch] [ebp-38h]\n  _DWORD *v27; // [esp-8h] [ebp-34h]\n  _DWORD *v28; // [esp-8h] [ebp-34h]\n  int v29; // [esp-4h] [ebp-30h]\n  int v30; // [esp-4h] [ebp-30h]\n  int v31; // [esp+10h] [ebp-1Ch] BYREF\n  int v32; // [esp+14h] [ebp-18h] BYREF\n  char v33[4]; // [esp+18h] [ebp-14h] BYREF\n  struct std::_Facet_base *v34; // [esp+1Ch] [ebp-10h]\n  int v35; // [esp+28h] [ebp-4h]\n\n  v12 = a7;\n  sub_405EC0(&v31, *(_DWORD *)(a7 + 48));\n  v35 = 0;\n  v13 = sub_455D21(&v31);\n  v35 = -1;\n  v34 = v13;\n  sub_405F10(&v31);\n  v14 = a8;\n  v15 = a10 - 65;\n  v32 = 0;\n  *a8 = 0;\n  switch ( v15 )\n  {\n    case 0:\n    case 32:\n      v16 = (int *)unknown_libname_69(&v31, a3, a4, a5, a6, v12, v14, a9);\n      goto LABEL_3;\n    case 1:\n    case 33:\n    case 39:\n      v16 = (int *)unknown_libname_68(&v31, a3, a4, a5, a6, v12, v14, a9);\n      goto LABEL_3;\n    case 2:\n      v17 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getint(this, &a3, &a5, 0, 99, &v32, v34) | *v14;\n      *v14 = v17;\n      if ( (v17 & 2) != 0 )\n        break;\n      v18 = 100 * (v32 - 19);\n      goto LABEL_9;\n    case 3:\n      v16 = (int *)std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getfmt(\n                     &v31,\n                     a3,\n                     a4,\n                     a5,\n                     a6,\n                     v12,\n                     v14,\n                     a9,\n                     \"%m / %d / %y\");\n      goto LABEL_3;\n    case 7:\n      v30 = (int)v34;\n      v28 = a9 + 2;\n      v26 = 23;\n      goto LABEL_15;\n    case 8:\n      v20 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getint(this, &a3, &a5, 1, 12, &v32, v34) | *v14;\n      *v14 = v20;\n      if ( (v20 & 2) == 0 )\n        a9[2] = v32 != 12 ? v32 : 0;\n      break;\n    case 12:\n      v30 = (int)v34;\n      v28 = a9 + 1;\n      v26 = 59;\n      goto LABEL_15;\n    case 17:\n      v16 = (int *)std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getfmt(\n                     &v31,\n                     a3,\n                     a4,\n                     a5,\n                     a6,\n                     v12,\n                     v14,\n                     a9,\n                     \"%H : %M\");\n      goto LABEL_3;\n    case 18:\n      v30 = (int)v34;\n      v28 = a9;\n      v26 = 60;\n      goto LABEL_15;\n    case 19:\n    case 23:\n      v16 = (int *)std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getfmt(\n                     &v31,\n                     a3,\n                     a4,\n                     a5,\n                     a6,\n                     v12,\n                     v14,\n                     a9,\n                     \"%H : %M : %S\");\n      goto LABEL_3;\n    case 20:\n    case 22:\n      v30 = (int)v34;\n      v28 = a9 + 7;\n      v26 = 53;\n      goto LABEL_15;\n    case 24:\n      v16 = (int *)unknown_libname_70(v33, a3, a4, a5, a6, v12, v14, a9);\n      goto LABEL_3;\n    case 34:\n      v16 = (int *)std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getfmt(\n                     &v31,\n                     a3,\n                     a4,\n                     a5,\n                     a6,\n                     v12,\n                     v14,\n                     a9,\n                     \"%b %d %H : %M : %S %Y\");\n      goto LABEL_3;\n    case 35:\n    case 36:\n      v29 = (int)v34;\n      v27 = a9 + 3;\n      v25 = 31;\n      goto LABEL_11;\n    case 41:\n      v29 = (int)v34;\n      v27 = a9 + 7;\n      v25 = 366;\nLABEL_11:\n      v19 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getint(this, &a3, &a5, 1, v25, v27, v29);\n      goto LABEL_12;\n    case 44:\n      v21 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getint(this, &a3, &a5, 1, 12, &v32, v34) | *v14;\n      *v14 = v21;\n      if ( (v21 & 2) == 0 )\n        a9[4] = v32 - 1;\n      break;\n    case 45:\n    case 51:\n      v16 = (int *)std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getfmt(\n                     &v31,\n                     a3,\n                     a4,\n                     a5,\n                     a6,\n                     v12,\n                     v14,\n                     a9,\n                     L\" \");\n      goto LABEL_3;\n    case 47:\n      v22 = std::_Getloctxt<char,std::istreambuf_iterator<wchar_t>>((int)&a3, (int)&a5, 0, (int)\":AM:am:PM:pm\");\n      if ( v22 >= 0 )\n      {\n        if ( v22 > 1 )\n          a9[2] += 12;\n      }\n      else\n      {\n        *v14 |= 2u;\n      }\n      break;\n    case 49:\n      v16 = (int *)std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getfmt(\n                     &v31,\n                     a3,\n                     a4,\n                     a5,\n                     a6,\n                     v12,\n                     v14,\n                     a9,\n                     \"%I : %M : %S %p\");\n      goto LABEL_3;\n    case 54:\n      v30 = (int)v34;\n      v28 = a9 + 6;\n      v26 = 6;\nLABEL_15:\n      v19 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getint(this, &a3, &a5, 0, v26, v28, v30);\nLABEL_12:\n      *v14 |= v19;\n      break;\n    case 55:\n      v16 = (int *)std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getfmt(\n                     &v31,\n                     a3,\n                     a4,\n                     a5,\n                     a6,\n                     v12,\n                     v14,\n                     a9,\n                     \"%d / %m / %y\");\nLABEL_3:\n      a3 = *v16;\n      a4 = v16[1];\n      break;\n    case 56:\n      v23 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getint(this, &a3, &a5, 0, 99, &v32, v34) | *v14;\n      *v14 = v23;\n      if ( (v23 & 2) == 0 )\n      {\n        v18 = v32;\n        if ( v32 < 69 )\n          v18 = v32 + 100;\nLABEL_9:\n        a9[5] = v18;\n      }\n      break;\n    default:\n      *v14 = 2;\n      break;\n  }\n  if ( (unsigned __int8)std::istreambuf_iterator<wchar_t>::equal(&a5) )\n    *v14 |= 1u;\n  result = a2;\n  *a2 = a3;\n  a2[1] = a4;\n  return result;\n}\n// 458FA9: using guessed type _DWORD __stdcall std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getfmt(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);\n// 459631: using guessed type _DWORD __cdecl std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::_Getint(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);\n// 460A70: using guessed type _DWORD __stdcall std::istreambuf_iterator<wchar_t>::equal(_DWORD);\n// 460AC2: using guessed type _DWORD __stdcall unknown_libname_68(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);\n// 460AFA: using guessed type _DWORD __stdcall unknown_libname_69(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);\n// 460B32: using guessed type _DWORD __stdcall unknown_libname_70(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);\n// 4BB230: using guessed type wchar_t asc_4BB230[2];\n// 45DDB0: using guessed type char var_14[4];\n\n"
    }
]