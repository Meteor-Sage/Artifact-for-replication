[
    {
        "Function": "sub_403FC5",
        "Total XOR and shift operations": 4,
        "XOR operations": 4,
        "Shift operations": 0,
        "Operation percentage": "8.89%",
        "Function Body": "\nunsigned __int64 sub_403FC5()\n{\n  unsigned __int64 result; // rax\n  struct _FIE416ME v1; // r12\n  __int64 CurrentProcessId; // rbp\n  DWORD CurrentThreadId; // edi\n  DWORD TickCount; // esi\n  LOFE2CNG v5; // rsi\n  struct _FIE416ME SystemTimeAsFileTime; // [rsp+20h] [rbp-48h] BYREF\n  LARGE_IN123ER PerformanceCount; // [rsp+30h] [rbp-38h] BYREF\n\n  result = 0x2B7842DF68A7i64;\n  SystemTimeAsFileTime = 0i64;\n  if ( qword_404987 == 0x2B7842DF68A7i64 )\n  {\n    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);\n    v1 = SystemTimeAsFileTime;\n    CurrentProcessId = GetCurrentProcessId();\n    CurrentThreadId = GetCurrentThreadId();\n    TickCount = GetTickCount();\n    QueryPerformanceCounter(&PerformanceCount);\n    v5 = (TickCount ^ CurrentThreadId ^ PerformanceCount.QuadPart ^ *(_QWORD *)&v1 ^ CurrentProcessId) & 0xFF9F59FF9F59i64;\n    if ( v5 == 0x2B7842DF68A7i64 )\n    {\n      result = 0xFFF1D1663EC55DCCui64;\n      v5 = 0x2B7842DF6563i64;\n    }\n    else\n    {\n      result = ~v5;\n    }\n    qword_404987 = v5;\n    qword_40D366 = result;\n  }\n  else\n  {\n    qword_40D366 = ~qword_404987;\n  }\n  return result;\n}\n// 404987: using guessed type __int64 qword_404987;\n// 40D366: using guessed type __int64 qword_40D366;\n\n"
    },
    {
        "Function": "sub_40F0AF",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n// write access to const memory has been detected, the output may be wrong!\n__int64 sub_40F0AF()\n{\n  BOOL v0; // edx\n  __int16 v2; // cx\n\n  v0 = 0;\n  unk_402C83 = 1;\n  unk_40643A = 1;\n  unk_407CE3 = 1;\n  unk_4030F0 = 1;\n  if ( ME7909[0x40F0D8] == 23117 && *(_DWORD *)(ME7909[0x40B15B] + 0x40F0D8i64) == 17744 )\n  {\n    v2 = *(_WORD *)(ME7909[0x40B15B] + 0x40D2CCi64);\n    if ( v2 == 267 )\n    {\n      if ( *(_DWORD *)(ME7909[0x40B15B] + 0x40F067i64) > 0xEu )\n        v0 = *(_DWORD *)(ME7909[0x40B15B] + 0x40DE97i64) != 0;\n    }\n    else if ( v2 == 523 && *(_DWORD *)(ME7909[0x40B15B] + 0x4066F1i64) > 0xEu )\n    {\n      v0 = *(_DWORD *)(ME7909[0x40B15B] + 0x406AA7i64) != 0;\n    }\n  }\n  dword_40F97B = v0;\n  if ( unk_4019E8 )\n    _set_app_type(_crt_gui_app);\n  else\n    _set_app_type(_crt_console_app);\n  qword_4060B0 = sub_40B1CA(-1i64);\n  qword_40EFD2 = qword_4060B0;\n  _fmode = unk_4053DE;\n  sub_4066A6();\n  if ( unk_404591 == 1 )\n    sub_40A43F((_UserMathErrorFunctionPointer)sub_40A7A1);\n  return 0i64;\n}\n// 4023EB: write access to const memory at 40649A has been detected\n// 40F0AF: using guessed type __int64 sub_40F0AF();\n// 4066A6: using guessed type __int64 sub_4066A6(void);\n// 40F97B: using guessed type int dword_40F97B;\n// 40EFD2: using guessed type __int64 qword_40EFD2;\n// 4060B0: using guessed type __int64 qword_4060B0;\n\n"
    },
    {
        "Function": "sub_408E00",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_408E00()\n{\n  __int64 result; // rax\n\n  dword_40C10C = unk_407E4A;\n  result = _getmainargs(&argc, &argv, &envp, unk_40CBEE, &dword_40C10C);\n  dword_40C775 = result;\n  return result;\n}\n// 408E00: using guessed type __int64 sub_408E00();\n// 406892: using guessed type __int64 __fastcall _getmainargs(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);\n// 40C10C: using guessed type int dword_40C10C;\n// 40C775: using guessed type int dword_40C775;\n\n"
    },
    {
        "Function": "sub_40F27E",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_40F27E()\n{\n  unk_4019E8 = 0;\n  sub_403FC5();\n  return sub_401FD0();\n}\n// 401FD0: using guessed type __int64 sub_401FD0(void);\n// 40F27E: using guessed type __int64 sub_40F27E();\n\n"
    },
    {
        "Function": "sub_4078A5",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid sub_4078A5()\n{\n  ;\n}\n\n"
    },
    {
        "Function": "sub_4028CA",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_4028CA()\n{\n  HME51CE ModuleHandleA; // rax\n  FAFB8CC ProcAddress; // rax\n\n  if ( qword_4067E9 )\n  {\n    ModuleHandleA = GetModuleHandleA(\"libgcj-16.dll\");\n    if ( ModuleHandleA )\n    {\n      ProcAddress = GetProcAddress(ModuleHandleA, \"_Jv_RegisterClasses\");\n      if ( ProcAddress )\n        ((void (__fastcall *)(__int64 *))ProcAddress)(&qword_4067E9);\n    }\n    else\n    {\n      ((void (__fastcall *)(__int64 *))sub_4078A5)(&qword_4067E9);\n    }\n  }\n  return sub_4010E7((int (__cdecl *)())sub_40733E);\n}\n// 4028CA: using guessed type __int64 sub_4028CA();\n// 4067E9: using guessed type __int64 qword_4067E9;\n\n"
    },
    {
        "Function": "sub_40733E",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid sub_40733E()\n{\n  ;\n}\n\n"
    },
    {
        "Function": "sub_40025D",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 __fastcall sub_40025D(__int64 a1, _DWORD *a2)\n{\n  __int64 type; // rax\n  __int64 v5; // rax\n  __int64 result; // rax\n\n  type = gimp_chain_button_get_type();\n  v5 = g_type_check_instance_cast(a1, type);\n  result = gimp_chain_button_get_active(v5);\n  *a2 = result;\n  return result;\n}\n// 40C68E: using guessed type __int64 gimp_chain_button_get_type(void);\n// 40143F: using guessed type __int64 __fastcall gimp_chain_button_get_active(_QWORD);\n// 401935: using guessed type __int64 __fastcall g_type_check_instance_cast(_QWORD, _QWORD);\n\n"
    },
    {
        "Function": "sub_409C55",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid __fastcall sub_409C55(__int64 a1, _QWORD *a2)\n{\n  __int64 v2; // rsi\n  __int64 v4; // rsi\n  __int64 type; // rdi\n  __int64 v6; // rax\n  __int64 v7; // rcx\n  __int64 v8; // rax\n  __int64 v9; // rbp\n  __int64 v10; // rax\n\n  v2 = a2[1];\n  if ( v2 == a1 )\n  {\n    v9 = *a2;\n    type = gtk_adjustment_get_type();\n    v10 = g_type_check_instance_cast(v2, type);\n    gimp_int_adjustment_update(v10, v9);\n    if ( *(_DWORD *)(*a2 + 8i64) )\n    {\n      v7 = a2[2];\n      goto LABEL_6;\n    }\n  }\n  else if ( a1 == a2[2] )\n  {\n    v4 = *a2 + 4i64;\n    type = gtk_adjustment_get_type();\n    v6 = g_type_check_instance_cast(a1, type);\n    gimp_int_adjustment_update(v6, v4);\n    if ( *(_DWORD *)(*a2 + 8i64) )\n    {\n      v7 = a2[1];\nLABEL_6:\n      v8 = g_type_check_instance_cast(v7, type);\n      gtk_adjustment_set_value(v8);\n    }\n  }\n}\n// 409ACB: using guessed type __int64 __fastcall gimp_int_adjustment_update(_QWORD, _QWORD);\n// 4070DE: using guessed type __int64 __fastcall gtk_adjustment_set_value(_QWORD);\n// 4043FE: using guessed type __int64 gtk_adjustment_get_type(void);\n// 401935: using guessed type __int64 __fastcall g_type_check_instance_cast(_QWORD, _QWORD);\n\n"
    },
    {
        "Function": "sub_404166",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 __fastcall sub_404166(unsigned int *a1, __int64 a2)\n{\n  unsigned int v2; // eax\n  int v3; // ebx\n  __int64 v4; // rdi\n  __int64 v5; // rsi\n  int v6; // ebp\n  int v7; // r12d\n  int v8; // eax\n  __int64 v9; // r9\n  int v10; // edx\n  __int64 v11; // r8\n  unsigned int v12; // r14d\n  int v13; // r11d\n  int v14; // r9d\n  int v15; // r10d\n  int v16; // edx\n  int v17; // ecx\n  __int64 v18; // rax\n  __int64 v19; // rcx\n  __int64 i; // rdx\n  __int64 type; // rax\n  __int64 v22; // rax\n  __int64 v24; // rax\n  __int64 v25; // rdx\n  __int64 v26; // rcx\n  int v27; // [rsp+44h] [rbp-F4h]\n  int v28; // [rsp+48h] [rbp-F0h]\n  int v29; // [rsp+4Ch] [rbp-ECh]\n  unsigned int v30; // [rsp+58h] [rbp-E0h]\n  int v31; // [rsp+5Ch] [rbp-DCh]\n  int v32; // [rsp+68h] [rbp-D0h]\n  int v33; // [rsp+6Ch] [rbp-CCh]\n  unsigned int v34; // [rsp+78h] [rbp-C0h] BYREF\n  int v35; // [rsp+7Ch] [rbp-BCh] BYREF\n  unsigned int v36; // [rsp+80h] [rbp-B8h] BYREF\n  unsigned int v37; // [rsp+84h] [rbp-B4h] BYREF\n  unsigned int v38; // [rsp+88h] [rbp-B0h] BYREF\n  int v39; // [rsp+8Ch] [rbp-ACh] BYREF\n  char v40[48]; // [rsp+90h] [rbp-A8h] BYREF\n  char v41[120]; // [rsp+C0h] [rbp-78h] BYREF\n\n  if ( a2 )\n  {\n    gimp_preview_get_position(a2, &v36, &v37);\n    gimp_preview_get_size(a2, &v34, &v35);\n    v2 = v34;\n    v38 = v34 + v36;\n    v39 = v37 + v35;\n  }\n  else\n  {\n    gimp_drawable_mask_bounds(*a1, &v36, &v37, &v38, &v39);\n    v2 = v38 - v36;\n    v34 = v38 - v36;\n    v35 = v39 - v37;\n  }\n  v3 = a1[3];\n  v4 = g_malloc((int)(v3 * v2));\n  v5 = g_malloc((int)(v3 * v34));\n  gimp_pixel_rgn_init(v40, a1, v36, v37, v34, v35, 0, 0);\n  v6 = 0;\n  gimp_pixel_rgn_init(v41, a1, v36, v37, v34, v35, a2 == 0, 1);\n  v28 = dword_407786;\n  v32 = dword_405890;\n  v7 = dword_407786 / 2;\n  v31 = dword_405890 / 2;\n  v29 = dword_407786 / 2 + dword_407786 % 2;\n  v33 = dword_405890 / 2 + dword_405890 % 2;\n  v30 = v37;\n  v8 = v39;\n  v27 = v37;\n  if ( (int)v37 < v39 )\n  {\n    while ( 1 )\n    {\n      v9 = (unsigned int)(v8 - 1);\n      v10 = v30 + 2 * v6;\n      if ( v10 < v8 )\n      {\n        if ( v10 < 0 )\n          v10 = 0;\n        v9 = (unsigned int)v10;\n      }\n      ++v6;\n      gimp_pixel_rgn_get_row(v40, v4, v36, v9, v34);\n      if ( v31 == v6 )\n      {\n        v30 += v32;\n        v6 = -v33;\n      }\n      v11 = v36;\n      v12 = v38 - v36;\n      if ( (int)(v38 - v36) > 0 )\n        break;\nLABEL_17:\n      gimp_pixel_rgn_set_row(v41, v5, v11, (unsigned int)v27, v34);\n      if ( !a2 && v27 == 5 * (v27 / 5) )\n        gimp_progress_update();\n      ++v27;\n      v8 = v39;\n      if ( v39 <= v27 )\n        goto LABEL_19;\n    }\n    v13 = 0;\n    v14 = 0;\n    v15 = 0;\n    while ( 1 )\n    {\n      v16 = (v14 + v13) * v3;\n      v17 = v3 * (v14 + v14 + v13);\n      if ( v17 < (int)(v12 * v3) )\n      {\n        if ( v17 < 0 )\n          v17 = 0;\n        if ( v3 > 0 )\n        {\n          v24 = 0i64;\n          v25 = v5 + v16;\n          v26 = v4 + v17;\n          do\n          {\n            *(_BYTE *)(v25 + v24) = *(_BYTE *)(v26 + v24);\n            ++v24;\n          }\n          while ( v3 > (int)v24 );\n          if ( v7 != ++v14 )\n            goto LABEL_16;\nLABEL_28:\n          v13 += v28;\n          v14 = -v29;\n          goto LABEL_16;\n        }\n      }\n      else\n      {\n        v18 = 0i64;\n        v19 = v5 + v16;\n        for ( i = v4 + v16; v3 > (int)v18; ++v18 )\n          *(_BYTE *)(v19 + v18) = *(_BYTE *)(i + v18);\n      }\n      if ( v7 == ++v14 )\n        goto LABEL_28;\nLABEL_16:\n      if ( ++v15 == v12 )\n        goto LABEL_17;\n    }\n  }\nLABEL_19:\n  if ( a2 )\n  {\n    type = gimp_drawable_preview_get_type();\n    v22 = g_type_check_instance_cast(a2, type);\n    _IAT_start__(v22, v41);\n  }\n  else\n  {\n    gimp_progress_update();\n    gimp_drawable_flush(a1);\n    gimp_drawable_merge_shadow(*a1, 1i64);\n    gimp_drawable_update(*a1, v36, v37, v34, v35);\n  }\n  g_free(v4);\n  return g_free(v5);\n}\n// 409855: using guessed type __int64 gimp_drawable_preview_get_type(void);\n// 40C6DA: using guessed type __int64 __fastcall _IAT_start__(_QWORD, _QWORD);\n// 409854: using guessed type __int64 gimp_progress_update(void);\n// 40C8F3: using guessed type __int64 __fastcall gimp_pixel_rgn_set_row(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 406AD9: using guessed type __int64 __fastcall gimp_pixel_rgn_init(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD, _DWORD, _DWORD);\n// 401BD6: using guessed type __int64 __fastcall gimp_pixel_rgn_get_row(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 407DF3: using guessed type __int64 __fastcall gimp_drawable_update(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 40DBAB: using guessed type __int64 __fastcall gimp_drawable_merge_shadow(_QWORD, _QWORD);\n// 4015CD: using guessed type __int64 __fastcall gimp_drawable_mask_bounds(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);\n// 40BAB5: using guessed type __int64 __fastcall gimp_drawable_flush(_QWORD);\n// 40D3A3: using guessed type __int64 __fastcall gimp_preview_get_size(_QWORD, _QWORD, _QWORD);\n// 40673B: using guessed type __int64 __fastcall gimp_preview_get_position(_QWORD, _QWORD, _QWORD);\n// 401935: using guessed type __int64 __fastcall g_type_check_instance_cast(_QWORD, _QWORD);\n// 404897: using guessed type __int64 __fastcall g_malloc(_QWORD);\n// 403186: using guessed type __int64 __fastcall g_free(_QWORD);\n// 407786: using guessed type int dword_407786;\n// 405890: using guessed type int dword_405890;\n\n"
    }
]