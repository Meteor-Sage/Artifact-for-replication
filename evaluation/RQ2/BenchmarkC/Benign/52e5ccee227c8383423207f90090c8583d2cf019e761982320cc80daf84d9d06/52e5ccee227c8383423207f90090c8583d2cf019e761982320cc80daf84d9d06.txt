[
    {
        "Function": "sub_40CABB",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nHLBE1B sub_40CABB()\n{\n  HLBE1B result; // eax\n\n  result = TlsGetValue(TlsIndex);\n  if ( result )\n    return LocalFree(result);\n  return result;\n}\n\n"
    },
    {
        "Function": "WinMain",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nint __stdcall WinMain(HI3EF5NCE hInstance, HI3EF5NCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)\n{\n  while ( *lpCmdLine == 32 )\n    ++lpCmdLine;\n  return MoveFileExA(lpCmdLine, 0, 4u);\n}\n\n"
    },
    {
        "Function": "sub_4083F9",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nint __cdecl sub_4083F9(signed int *a1)\n{\n  signed int v1; // eax\n  UINT *v2; // edx\n  char *v4; // esi\n  char v5; // cl\n  int v6; // edx\n  int *i; // [esp+4h] [ebp-8h]\n  signed int v8; // [esp+8h] [ebp-4h]\n\n  v1 = uNumber;\n  v2 = &uNumber + uNumber;\n  if ( uNumber )\n  {\n    do\n    {\n      if ( *v2 )\n        break;\n      --v1;\n      --v2;\n    }\n    while ( v1 );\n  }\n  if ( a1 )\n  {\n    *a1 = v1;\n    v8 = 0;\n    v4 = (char *)(a1 + 1);\n    for ( i = (int *)&unk_40D348; v1 > v8; ++i )\n    {\n      v5 = 1;\n      v6 = *i;\n      if ( (*i & 0x800) != 0 )\n        v5 = 33;\n      if ( (v6 & 0x8000) == 0 )\n        v5 |= 0x80u;\n      if ( (v6 & 0x2000) != 0 )\n        v5 |= 0x40u;\n      *v4++ = v5;\n      ++v8;\n    }\n    memcpy(v4, &hFile, 4 * v1);\n    return 0;\n  }\n  else if ( v1 )\n  {\n    return 5 * v1 + 4;\n  }\n  else\n  {\n    return 0;\n  }\n}\n\n"
    },
    {
        "Function": "sub_4095AE",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid __noreturn sub_4095AE()\n{\n  _ErrorExit(aScanfFloatingP);\n}\n// 4095AE: using guessed type void __noreturn sub_4095AE();\n\n"
    },
    {
        "Function": "sub_408F9B",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid __noreturn sub_408F9B()\n{\n  _ErrorExit(aScanfFloatingP_0);\n}\n// 408F9B: using guessed type void __noreturn sub_408F9B();\n\n"
    },
    {
        "Function": "sub_40AB10",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nchar *__cdecl sub_40AB10(int a1, int a2, char *a3, char a4, char a5, int a6)\n{\n  size_t v6; // edi\n  int v7; // eax\n  int v8; // edx\n  int v9; // ecx\n  int v10; // esi\n  char *i; // ebx\n  const char *v12; // eax\n  char *result; // eax\n  int v14; // eax\n  _BYTE *v15; // ebx\n  int v16; // edi\n  int v17; // edi\n  size_t v18; // edi\n  char *v19; // ebx\n  char v20; // dl\n  char *v21; // eax\n  _BYTE *v22; // ebx\n  int v23; // esi\n  _BYTE *v24; // ebx\n  int v25; // edi\n  _BYTE *v26; // ebx\n  char v27; // [esp+Ch] [ebp-38h] BYREF\n  char v28; // [esp+Dh] [ebp-37h]\n  __int16 v29; // [esp+Eh] [ebp-36h] BYREF\n  char v30; // [esp+3Ah] [ebp-Ah]\n  char v31; // [esp+3Bh] [ebp-9h]\n  int v32; // [esp+3Ch] [ebp-8h]\n  int v33; // [esp+40h] [ebp-4h] BYREF\n\n  v30 = *(_BYTE *)_getLocaleNumericInfo(14);\n  if ( a2 > 40 )\n    a2 = 40;\n  v32 = a2;\n  v31 = a4 & 0xDF;\n  if ( (a4 & 0xDF) == 70 )\n  {\n    v6 = -v32;\n    if ( -v32 >= 0 && v32 != 0 )\n    {\n      v6 = 0;\n      a2 = 0;\n    }\n  }\n  else\n  {\n    v6 = v32;\n    if ( v32 > 0 )\n    {\n      if ( v31 == 69 )\n      {\n        v6 = v32 + 1;\n        ++a2;\n      }\n    }\n    else\n    {\n      v6 = 1;\n    }\n  }\n  v7 = __xcvt(a1, v6, (int)&v33, &v27, a6);\n  v10 = v7;\n  i = a3;\n  if ( v7 == 0x7FFF )\n  {\n    if ( v33 )\n      v12 = aInf;\n    else\n      v12 = aInf_0;\n    return strcpy(a3, v12);\n  }\n  if ( v7 == 32766 )\n  {\n    if ( v33 )\n      v12 = aNan;\n    else\n      v12 = aNan_0;\n    return strcpy(a3, v12);\n  }\n  if ( v33 )\n  {\n    *a3 = 45;\n    i = a3 + 1;\n  }\n  if ( (v31 == 70 || v31 == 71 && v7 >= -3 && (a2 ? (v14 = a2) : (v14 = 1), v10 <= v14)) && v10 <= 40 )\n  {\n    if ( v10 <= 0 )\n    {\n      *i = 48;\n      v15 = i + 1;\n      *v15 = v30;\n      for ( i = v15 + 1; v10; ++v10 )\n        *i++ = 48;\n    }\n    v16 = 0;\n    for ( result = &v27; *result; ++result )\n    {\n      *i++ = *result;\n      if ( !--v10 )\n      {\n        *i++ = v30;\n        ++v16;\n      }\n    }\n    v17 = v32 + v16;\n    if ( v17 >= a2 )\n    {\n      if ( v10 != 1 && !a5 )\n      {\n        LOD261(v8) = a4;\n        result = (char *)sub_405570(v8, a3, i);\n        i = result;\n      }\n    }\n    else\n    {\n      v18 = a2 - v17;\n      result = (char *)memset(i, 48, v18);\n      i += v18;\n    }\n    if ( i == a3 )\n      *i++ = 48;\n    *i = 0;\n  }\n  else\n  {\n    *i = v27;\n    v19 = i + 1;\n    v20 = v28;\n    v21 = (char *)&v29;\n    if ( v28 )\n    {\n      *v19++ = v30;\n      do\n      {\n        *v19++ = v20;\n        v20 = *v21++;\n      }\n      while ( v20 );\n      if ( !a5 )\n      {\n        LOD261(v9) = a4;\n        v19 = (char *)sub_405570(v9, a3, v19);\n      }\n    }\n    else if ( a5 )\n    {\n      *v19++ = v30;\n    }\n    *v19 = a4 & 0x20 | 0x45;\n    v22 = v19 + 1;\n    v23 = v10 - 1;\n    if ( v23 >= 0 )\n    {\n      *v22 = 43;\n    }\n    else\n    {\n      v23 = -v23;\n      *v22 = 45;\n    }\n    v24 = v22 + 1;\n    if ( v23 < 1000 )\n    {\n      if ( v23 < 100 )\n        v25 = 2;\n      else\n        v25 = 3;\n    }\n    else\n    {\n      v25 = 4;\n    }\n    v24[v25] = 0;\n    v26 = &v24[v25];\n    do\n    {\n      *--v26 = v23 % 10 + 48;\n      --v25;\n      result = (char *)(v23 / 10);\n      v23 /= 10;\n    }\n    while ( v25 );\n  }\n  return result;\n}\n// 40BAA7: conditional instruction was optimized away because edi.4 is in (2..4)\n// 40A435: variable 'v8' is possibly undefined\n// 40623C: variable 'v9' is possibly undefined\n// 40B199: using guessed type _DWORD __cdecl _getLocaleNumericInfo(_DWORD);\n// 405570: using guessed type _DWORD __cdecl sub_405570(_DWORD, _DWORD, _DWORD);\n\n"
    },
    {
        "Function": "sub_40D7AE",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nint __cdecl sub_40D7AE(int a1, int a2)\n{\n  if ( a2 )\n    return a1 + 12;\n  else\n    return a1 + 8;\n}\n\n"
    },
    {
        "Function": "sub_4043DB",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nwchar_t *__cdecl sub_4043DB(int a1, int a2, wchar_t *Destination, __int16 a4, __int16 a5, int a6)\n{\n  size_t v6; // edi\n  int v7; // eax\n  int v8; // edx\n  int v9; // ecx\n  int v10; // esi\n  wchar_t *i; // ebx\n  const wchar_t *v12; // eax\n  wchar_t *result; // eax\n  const wchar_t *v14; // edx\n  int v15; // eax\n  wchar_t *v16; // ebx\n  int v17; // edi\n  int v18; // edi\n  size_t v19; // edi\n  __int16 *v20; // ebx\n  __int16 v21; // dx\n  __int16 *v22; // eax\n  _WORD *v23; // ebx\n  int v24; // esi\n  _WORD *v25; // ebx\n  int v26; // edi\n  _WORD *v27; // ebx\n  wchar_t s; // [esp+Ch] [ebp-64h] BYREF\n  __int16 v29; // [esp+Eh] [ebp-62h]\n  int v30; // [esp+10h] [ebp-60h] BYREF\n  wchar_t v31; // [esp+64h] [ebp-Ch]\n  __int16 v32; // [esp+66h] [ebp-Ah]\n  int v33; // [esp+68h] [ebp-8h]\n  int v34; // [esp+6Ch] [ebp-4h] BYREF\n\n  v31 = *(_WORD *)_getLocaleNumericInfo(14);\n  if ( a2 > 40 )\n    a2 = 40;\n  v33 = a2;\n  v32 = a4 & 0xDF;\n  if ( v32 == 70 )\n  {\n    v6 = -v33;\n    if ( -v33 >= 0 && v33 != 0 )\n    {\n      v6 = 0;\n      a2 = 0;\n    }\n  }\n  else\n  {\n    v6 = v33;\n    if ( v33 > 0 )\n    {\n      if ( v32 == 69 )\n      {\n        v6 = v33 + 1;\n        ++a2;\n      }\n    }\n    else\n    {\n      v6 = 1;\n    }\n  }\n  v7 = __xcvtw(a1, v6, (int)&v34, &s, a6);\n  v10 = v7;\n  i = Destination;\n  if ( v7 == 0x7FFF )\n  {\n    if ( v34 )\n      v12 = Source;\n    else\n      v12 = (const wchar_t *)asc_40740D;\n    return wcscpy(Destination, v12);\n  }\n  else if ( v7 == 32766 )\n  {\n    if ( v34 )\n      v14 = aNan_1;\n    else\n      v14 = (const wchar_t *)asc_4063D4;\n    return wcscpy(Destination, v14);\n  }\n  else\n  {\n    if ( v34 )\n    {\n      *Destination = 45;\n      i = Destination + 1;\n    }\n    if ( (v32 == 70 || v32 == 71 && v7 >= -3 && (a2 ? (v15 = a2) : (v15 = 1), v10 <= v15)) && v10 <= 40 )\n    {\n      if ( v10 <= 0 )\n      {\n        *i = 48;\n        v16 = i + 1;\n        *v16 = v31;\n        for ( i = v16 + 1; v10; ++v10 )\n          *i++ = 48;\n      }\n      v17 = 0;\n      for ( result = &s; *result; ++result )\n      {\n        *i++ = *result;\n        if ( !--v10 )\n        {\n          *i++ = v31;\n          ++v17;\n        }\n      }\n      v18 = v33 + v17;\n      if ( v18 >= a2 )\n      {\n        if ( v10 != 1 && !a5 )\n        {\n          LO02E1(v8) = a4;\n          result = (wchar_t *)sub_409756(v8, Destination, i);\n          i = result;\n        }\n      }\n      else\n      {\n        v19 = a2 - v18;\n        result = (wchar_t *)memset(i, 48, v19);\n        i += v19;\n      }\n      if ( i == Destination )\n        *i++ = 48;\n      *i = 0;\n    }\n    else\n    {\n      *i = s;\n      v20 = (__int16 *)(i + 1);\n      v21 = v29;\n      v22 = (__int16 *)&v30;\n      if ( v29 )\n      {\n        *v20++ = v31;\n        do\n        {\n          *v20++ = v21;\n          v21 = *v22++;\n        }\n        while ( v21 );\n        if ( !a5 )\n        {\n          LO02E1(v9) = a4;\n          v20 = (__int16 *)sub_409756(v9, Destination, v20);\n        }\n      }\n      else if ( a5 )\n      {\n        *v20++ = v31;\n      }\n      *v20 = a4 & 0x20 | 0x45;\n      v23 = v20 + 1;\n      v24 = v10 - 1;\n      if ( v24 >= 0 )\n      {\n        *v23 = 43;\n      }\n      else\n      {\n        v24 = -v24;\n        *v23 = 45;\n      }\n      v25 = v23 + 1;\n      if ( v24 < 1000 )\n      {\n        if ( v24 < 100 )\n          v26 = 2;\n        else\n          v26 = 3;\n      }\n      else\n      {\n        v26 = 4;\n      }\n      v25[v26] = 0;\n      v27 = &v25[v26];\n      do\n      {\n        *--v27 = v24 % 10 + 48;\n        --v26;\n        result = (wchar_t *)(v24 / 10);\n        v24 /= 10;\n      }\n      while ( v26 );\n    }\n  }\n  return result;\n}\n// 40A605: conditional instruction was optimized away because edi.4 is in (2..4)\n// 407C24: variable 'v8' is possibly undefined\n// 40016D: variable 'v9' is possibly undefined\n// 40B199: using guessed type _DWORD __cdecl _getLocaleNumericInfo(_DWORD);\n// 409756: using guessed type _DWORD __cdecl sub_409756(_DWORD, _DWORD, _DWORD);\n\n"
    },
    {
        "Function": "sub_405246",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nint __cdecl sub_405246(int a1, int a2)\n{\n  if ( a2 )\n    return a1 + 12;\n  else\n    return a1 + 8;\n}\n\n"
    },
    {
        "Function": "sub_40267D",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int16 __cdecl sub_40267D(\n        int a1,\n        int (__cdecl *a2)(int),\n        void (__cdecl *a3)(int, int),\n        int a4,\n        int a5,\n        _DWORD *a6,\n        _DWORD *a7)\n{\n  int v7; // esi\n  unsigned int v8; // eax\n  int v9; // ebx\n  int v10; // edx\n  int v11; // ebx\n  int v12; // edi\n  int v13; // eax\n  int v14; // edx\n  int v15; // edi\n  int v16; // eax\n  __int16 result; // ax\n  int v18; // eax\n  int v19; // eax\n  int v20; // eax\n  int v21; // eax\n  int v22; // [esp+Ch] [ebp-44h]\n  char v23; // [esp+13h] [ebp-3Dh]\n  __int64 v24; // [esp+14h] [ebp-3Ch] BYREF\n  long double *v25; // [esp+1Ch] [ebp-34h]\n  long double v26; // [esp+20h] [ebp-30h]\n  long double v27; // [esp+2Ch] [ebp-24h] BYREF\n  int v28; // [esp+38h] [ebp-18h]\n  int v29; // [esp+3Ch] [ebp-14h]\n  char v30; // [esp+43h] [ebp-Dh]\n  char v31; // [esp+44h] [ebp-Ch]\n  char v32; // [esp+45h] [ebp-Bh]\n  char v33; // [esp+46h] [ebp-Ah]\n  char v34; // [esp+47h] [ebp-9h]\n  int v35; // [esp+48h] [ebp-8h]\n  int v36; // [esp+4Ch] [ebp-4h]\n\n  v36 = 0x8000;\n  v35 = 19;\n  v34 = 0;\n  v33 = 1;\n  v32 = 0;\n  v31 = 0;\n  v30 = 0;\n  v29 = 0;\n  v7 = -2;\n  v28 = 1;\n  v27 = 0.0;\n  v25 = &v27;\n  v23 = *(_BYTE *)_getLocaleNumericInfo(14);\n  do\n  {\n    ++v29;\n    v8 = a2(a4);\n    v9 = v8;\n    if ( v8 == -1 )\n    {\n      v28 = -1;\n      goto LABEL_76;\n    }\n  }\n  while ( (v8 & 0x80u) == 0 && _ismbcspace(v8) );\n  if ( --a5 < 0 )\n  {\nLABEL_36:\n    v9 = 101;\nLABEL_37:\n    if ( v7 == -2 )\n      goto LABEL_75;\n    if ( v36 == 0x8000 )\n      v36 = v7;\n    v12 = 0;\n    if ( v9 != 101 && v9 != 69 )\n    {\nLABEL_52:\n      a3(v9, a4);\n      --v29;\nLABEL_53:\n      if ( v31 )\n      {\n        v12 = -v12;\n        v30 = -v30;\n      }\n      if ( v7 >= 0 )\n      {\n        if ( v30 )\n        {\n          if ( v30 == 1 )\n          {\n            *((_WORD *)v25 + 3) = -1;\n            *((_WORD *)v25 + 2) = -1;\n            *((_WORD *)v25 + 1) = -1;\n            *(_WORD *)v25 = -1;\n            *((_WORD *)v25 + 4) = 32766;\n          }\n          else\n          {\n            v27 = 0.0;\n          }\n          v28 = 2;\n        }\n        else\n        {\n          if ( v7 <= v35 )\n            v14 = v7;\n          else\n            v14 = v35;\n          v15 = v36 - v14 + v12;\n          v27 = _fuildq(&v27);\n          if ( v15 )\n          {\n            if ( v15 <= 0 )\n              v16 = -v15;\n            else\n              v16 = v15;\n            v26 = _pow10(v16);\n            if ( v15 >= 0 )\n              v27 = v27 * v26;\n            else\n              v27 = v27 / v26;\n          }\n        }\n      }\n      else\n      {\n        v27 = 0.0;\n      }\n      goto LABEL_72;\n    }\n    v22 = 1;\n    while ( 1 )\n    {\n      if ( --a5 < 0 )\n        goto LABEL_53;\n      ++v29;\n      v13 = a2(a4);\n      v9 = v13;\n      if ( v22 )\n      {\n        v22 = 0;\n        if ( v13 == 45 )\n        {\n          v31 = 1;\n        }\n        else if ( v13 != 43 )\n        {\n          goto LABEL_48;\n        }\n      }\n      else\n      {\nLABEL_48:\n        if ( v13 < 48 || v13 > 57 )\n          goto LABEL_52;\n        v12 = 10 * v12 + v13 - 48;\n        if ( v12 > 4932 )\n          v30 = 1;\n      }\n    }\n  }\n  if ( v9 == 43 )\n  {\n    v32 = 1;\n  }\n  else\n  {\n    if ( v9 != 45 )\n      goto LABEL_13;\n    v32 = 1;\n    v34 = 1;\n  }\n  while ( 1 )\n  {\n    if ( --a5 < 0 )\n      goto LABEL_36;\n    ++v29;\n    v9 = a2(a4);\nLABEL_13:\n    if ( v33 != 1 || !v32 )\n      goto LABEL_17;\n    if ( v9 == 73 )\n      break;\n    if ( v9 == 78 )\n    {\n      ++v29;\n      v20 = a2(a4);\n      v9 = v20;\n      if ( --a5 >= 0 && v20 == 65 )\n      {\n        ++v29;\n        v21 = a2(a4);\n        v9 = v21;\n        if ( --a5 >= 0 && v21 == 78 )\n        {\n          if ( v34 )\n            v27 = tbyte_4048BF;\n          else\n            v27 = tbyte_40DF92;\n          goto LABEL_74;\n        }\n      }\n      goto LABEL_75;\n    }\nLABEL_17:\n    v33 = 0;\n    if ( v9 == v23 )\n    {\n      if ( v36 != 0x8000 )\n        goto LABEL_37;\n      if ( v7 <= 0 )\n        v10 = 0;\n      else\n        v10 = v7;\n      v36 = v10;\n    }\n    else\n    {\n      if ( v9 < 48 || v9 > 57 )\n        goto LABEL_37;\n      v11 = v9 - 48;\n      if ( ++v7 > 0 )\n      {\n        if ( v7 > 9 )\n        {\n          if ( v7 <= v35 )\n          {\n            v24 = *(_QWORD *)&v27;\n            if ( _qmul10(&v24, v11) )\n              v35 = v7 - 1;\n            else\n              *(_QWORD *)&v27 = v24;\n          }\n        }\n        else\n        {\n          LOFA4CD(v27) = v11 + 10 * LOFA4CD(v27);\n        }\n      }\n      else\n      {\n        *(_WORD *)v25 = v11;\n        if ( v11 )\n        {\n          v7 = 1;\n        }\n        else\n        {\n          v7 = -1;\n          if ( v36 != 0x8000 )\n            --v36;\n        }\n      }\n    }\n  }\n  ++v29;\n  v18 = a2(a4);\n  v9 = v18;\n  if ( --a5 >= 0 && v18 == 78 )\n  {\n    ++v29;\n    v19 = a2(a4);\n    v9 = v19;\n    if ( --a5 >= 0 && v19 == 70 )\n    {\n      if ( v34 )\n        v27 = tbyte_404E82;\n      else\n        v27 = tbyte_40BE3A;\n      goto LABEL_74;\n    }\n  }\nLABEL_75:\n  v28 = 0;\nLABEL_76:\n  if ( a5 >= 0 )\n  {\n    a3(v9, a4);\n    --v29;\n  }\n  v27 = 0.0;\nLABEL_72:\n  if ( v34 )\n    v27 = -v27;\nLABEL_74:\n  *a6 += v29;\n  *a7 = v28;\n  *(_QWORD *)a1 = *(_QWORD *)&v27;\n  result = HI015A(v27);\n  *(_WORD *)(a1 + 8) = HI015A(v27);\n  return result;\n}\n// 40B199: using guessed type _DWORD __cdecl _getLocaleNumericInfo(_DWORD);\n// 407E4C: using guessed type double __cdecl _fuildq(_DWORD);\n// 40DBA1: using guessed type _DWORD __cdecl _qmul10(_DWORD, _DWORD);\n// 4045F1: using guessed type double __cdecl _pow10(_DWORD);\n// 40BE3A: using guessed type long double tbyte_40BE3A;\n// 404E82: using guessed type long double tbyte_404E82;\n// 40DF92: using guessed type long double tbyte_40DF92;\n// 4048BF: using guessed type long double tbyte_4048BF;\n\n"
    }
]