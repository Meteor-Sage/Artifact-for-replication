[
    {
        "Function": "sub_401694",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "28.57%",
        "Function Body": "\nint __usercall sub_401694@<eax>(FILE *a1@<esi>)\n{\n  struct _ME7909ST63C5 Buffer; // [esp+4h] [ebp-24h] BYREF\n\n  memset(&Buffer, 0, sizeof(Buffer));\n  Buffer.dwLength = 32;\n  GlobalMemoryStatus(&Buffer);\n  return fwprintf_s(\n           a1,\n           L\"Memory Info: %u%% Load (%u/%u MB Physical) (%u/%u MB Page File) (%u/%u MB Virtual)\\r\\n\",\n           Buffer.dwMemoryLoad,\n           Buffer.dwAvailPhys >> 20,\n           Buffer.dwTotalPhys >> 20,\n           Buffer.dwAvailPageFile >> 20,\n           Buffer.dwTotalPageFile >> 20,\n           Buffer.dwAvailVirtual >> 20,\n           Buffer.dwTotalVirtual >> 20);\n}\n\n"
    },
    {
        "Function": "sub_403639",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "10.00%",
        "Function Body": "\n_BYTE *__usercall sub_403639@<eax>(_BYTE *a1@<eax>, unsigned int a2@<ecx>)\n{\n  *a1 = 37;\n  a1[1] = byte_423C1E[a2 >> 4];\n  a1[2] = byte_423C1E[a2 & 0xF];\n  return a1 + 3;\n}\n\n"
    },
    {
        "Function": "sub_406919",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "8.33%",
        "Function Body": "\nHRSRC __cdecl sub_406919(HME51CE hModule, unsigned int a2)\n{\n  HRSRC result; // eax\n\n  result = FindResourceW(hModule, (LP71D7R)(unsigned __int16)((a2 >> 4) + 1), (LP71D7R)6);\n  if ( result )\n    return (HRSRC)sub_40AA90(a2, hModule, result);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40C030",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "7.69%",
        "Function Body": "\n__int64 __usercall sub_40F7F6@<edx:eax>(int a1@<eax>, unsigned int a2@<ecx>)\n{\n  if ( a2 >= 0x64 )\n    return dword_42FCBE[3 * a2 - 300] & (unsigned int)((unsigned __int64)sub_40C030(a1, dword_423FD4[3 * a2 - 300]) >> dword_424E07[3 * a2 - 300]);\n  else\n    return sub_40C030(a1, a2);\n}\n// 423FD4: using guessed type int dword_423FD4[];\n// 424E07: using guessed type int dword_424E07[];\n// 42FCBE: using guessed type int dword_42FCBE[88];\n\n"
    },
    {
        "Function": "sub_408D43",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "6.67%",
        "Function Body": "\nint __thiscall sub_408D43(void *this, char a2, int (__thiscall ***a3)(_DWORD, int *, char *))\n{\n  unsigned int v4; // esi\n  int v5; // edi\n  int v7; // [esp+4h] [ebp-Ch] BYREF\n  int v8; // [esp+8h] [ebp-8h]\n  unsigned int v9; // [esp+Ch] [ebp-4h]\n\n  v8 = 0;\n  v9 = (*(int (__thiscall **)(void *))(*(_DWORD *)this + 8))(this);\n  while ( v9 )\n  {\n    v4 = v9 >> 1;\n    v5 = (v9 >> 1) + v8;\n    v7 = (*(int (__thiscall **)(void *, int))(*(_DWORD *)this + 24))(this, v5);\n    if ( (**a3)(a3, &v7, &a2) == -1 )\n    {\n      v9 += -1 - v4;\n      v8 = v5 + 1;\n    }\n    else\n    {\n      v9 = v4;\n    }\n  }\n  return v8;\n}\n\n"
    },
    {
        "Function": "sub_41EBE2",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.59%",
        "Function Body": "\nint __cdecl sub_41EBE2(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // edi\n  int *v9; // esi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // edi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  int v20; // edx\n  int *v21; // ecx\n  int v22; // esi\n  int v23; // eax\n  int *v24; // ebx\n  bool n; // zf\n  int v26; // eax\n  unsigned int v27; // edx\n  int *v28; // ecx\n  unsigned int v29; // edi\n  int ii; // ecx\n  int *v31; // ecx\n  unsigned int v32; // esi\n  int v33; // edi\n  int v34; // eax\n  int v35; // edx\n  int *v36; // ebx\n  int v37; // edx\n  int *v38; // ecx\n  int v39; // eax\n  int v40; // edx\n  int *v41; // ebx\n  int v42; // edx\n  int *v43; // ecx\n  int v44; // eax\n  int v45; // edx\n  int v46; // edx\n  int *v47; // ecx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // [esp+8h] [ebp-38h]\n  char v51; // [esp+10h] [ebp-30h]\n  int v52; // [esp+10h] [ebp-30h]\n  int v53; // [esp+14h] [ebp-2Ch]\n  int v54; // [esp+14h] [ebp-2Ch]\n  char v55; // [esp+14h] [ebp-2Ch]\n  int v56; // [esp+14h] [ebp-2Ch]\n  int v57; // [esp+14h] [ebp-2Ch]\n  int v58; // [esp+14h] [ebp-2Ch]\n  int v59; // [esp+18h] [ebp-28h]\n  int v60; // [esp+18h] [ebp-28h]\n  int v61; // [esp+18h] [ebp-28h]\n  int v62; // [esp+18h] [ebp-28h]\n  int v63; // [esp+18h] [ebp-28h]\n  int v64; // [esp+18h] [ebp-28h]\n  int v65; // [esp+1Ch] [ebp-24h]\n  unsigned int v66; // [esp+20h] [ebp-20h]\n  int m; // [esp+20h] [ebp-20h]\n  int jj; // [esp+20h] [ebp-20h]\n  int k; // [esp+20h] [ebp-20h]\n  int j; // [esp+20h] [ebp-20h]\n  int v71; // [esp+24h] [ebp-1Ch]\n  int v72; // [esp+28h] [ebp-18h]\n  int v73; // [esp+2Ch] [ebp-14h]\n  int v74; // [esp+30h] [ebp-10h] BYREF\n  int v75; // [esp+34h] [ebp-Ch]\n  int v76; // [esp+38h] [ebp-8h] BYREF\n\n  v2 = a1[5];\n  v50 = v2 & 0x8000;\n  v74 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v75 = *(_DWORD *)(a1 + 1);\n  v76 = v4;\n  if ( v3 != -16383 )\n  {\n    v65 = 0;\n    v71 = v74;\n    v72 = v75;\n    v73 = v76;\n    v8 = dword_42A695 - 1;\n    v53 = v3;\n    v59 = dword_42A695 / 32;\n    v9 = &v74 + dword_42A695 / 32;\n    v51 = 31 - dword_42A695 % 32;\n    if ( ((1 << v51) & *v9) != 0 )\n    {\n      v10 = dword_42A695 / 32;\n      for ( i = (~(-1 << (31 - dword_42A695 % 32)) & *(&v74 + v59)) == 0; i; i = *(&v74 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_21;\n      }\n      v12 = v8 / 32;\n      v65 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v74 + v8 / 32;\n      v66 = v13 + *v14;\n      if ( v66 >= *v14 )\n      {\n        v15 = v66 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v65 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v66;\n        if ( v12 < 0 || !v65 )\n          break;\n        v65 = 0;\n        v14 = &v74 + v12;\n        v16 = *v14 + 1;\n        v66 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n    }\nLABEL_21:\n    *v9 &= -1 << v51;\n    if ( v59 + 1 < 3 )\n      memset(&v74 + v59 + 1, 0, 4 * (3 - (v59 + 1)));\n    if ( v65 )\n      ++v3;\n    if ( v3 >= dword_426315 - dword_42A695 )\n    {\n      if ( v3 > dword_426315 )\n      {\n        if ( v3 < dword_420D31 )\n        {\n          v5 = dword_4270D4 + v3;\n          v74 &= ~0x80169E00;\n          v44 = dword_42F3B1 / 32;\n          v45 = dword_42F3B1 % 32;\n          v64 = 0;\n          for ( j = 0; j < 3; ++j )\n          {\n            v58 = ~(-1 << v45) & *(&v74 + j);\n            *(&v74 + j) = v64 | ((unsigned int)*(&v74 + j) >> v45);\n            v64 = v58 << (32 - v45);\n          }\n          v46 = 2;\n          v47 = &v76 - v44;\n          do\n          {\n            if ( v46 < v44 )\n              *(&v74 + v46) = 0;\n            else\n              *(&v74 + v46) = *v47;\n            --v47;\n            --v46;\n          }\n          while ( v46 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v75 = 0;\n          v76 = 0;\n          v74 = 0x80169E00;\n          v39 = dword_42F3B1 / 32;\n          v40 = dword_42F3B1 % 32;\n          v63 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v41 = &v74 + k;\n            v57 = ~(-1 << v40) & *v41;\n            *v41 = v63 | ((unsigned int)*v41 >> v40);\n            v63 = v57 << (32 - v40);\n          }\n          v42 = 2;\n          v43 = &v76 - v39;\n          do\n          {\n            if ( v42 < v39 )\n              *(&v74 + v42) = 0;\n            else\n              *(&v74 + v42) = *v43;\n            --v43;\n            --v42;\n          }\n          while ( v42 >= 0 );\n          v5 = dword_420D31 + dword_4270D4;\n          result = 1;\n        }\n        goto LABEL_78;\n      }\n      v74 = v71;\n      v75 = v72;\n      v17 = (dword_426315 - v53) / 32;\n      v76 = v73;\n      v18 = (dword_426315 - v53) % 32;\n      v60 = 0;\n      for ( m = 0; m < 3; ++m )\n      {\n        v19 = &v74 + m;\n        v54 = ~(-1 << v18) & *v19;\n        *v19 = v60 | ((unsigned int)*v19 >> v18);\n        v60 = v54 << (32 - v18);\n      }\n      v20 = 2;\n      v21 = &v76 - v17;\n      do\n      {\n        if ( v20 < v17 )\n          *(&v74 + v20) = 0;\n        else\n          *(&v74 + v20) = *v21;\n        --v21;\n        --v20;\n      }\n      while ( v20 >= 0 );\n      v22 = dword_42A695 - 1;\n      v23 = dword_42A695 / 32;\n      v52 = dword_42A695 / 32;\n      v24 = &v74 + dword_42A695 / 32;\n      v55 = 31 - dword_42A695 % 32;\n      if ( ((1 << v55) & *v24) != 0 )\n      {\n        for ( n = (~(-1 << (31 - dword_42A695 % 32)) & *(&v74 + v23)) == 0; n; n = *(&v74 + v23) == 0 )\n        {\n          if ( ++v23 >= 3 )\n            goto LABEL_51;\n        }\n        v26 = v22 / 32;\n        v61 = 0;\n        v27 = 1 << (31 - v22 % 32);\n        v28 = &v74 + v22 / 32;\n        v29 = *v28 + v27;\n        if ( v29 < *v28 || v29 < v27 )\n          v61 = 1;\n        *v28 = v29;\n        for ( ii = v61; --v26 >= 0 && ii; ii = v33 )\n        {\n          v31 = &v74 + v26;\n          v32 = *v31 + 1;\n          v33 = 0;\n          if ( v32 < *v31 || *v31 == -1 )\n            v33 = 1;\n          *v31 = v32;\n        }\n      }\nLABEL_51:\n      *v24 &= -1 << v55;\n      if ( v52 + 1 < 3 )\n        memset(&v74 + v52 + 1, 0, 4 * (3 - (v52 + 1)));\n      v34 = (dword_42F3B1 + 1) / 32;\n      v35 = (dword_42F3B1 + 1) % 32;\n      v62 = 0;\n      for ( jj = 0; jj < 3; ++jj )\n      {\n        v36 = &v74 + jj;\n        v56 = ~(-1 << v35) & *v36;\n        *v36 = v62 | ((unsigned int)*v36 >> v35);\n        v62 = v56 << (32 - v35);\n      }\n      v37 = 2;\n      v38 = &v76 - v34;\n      do\n      {\n        if ( v37 < v34 )\n          *(&v74 + v37) = 0;\n        else\n          *(&v74 + v37) = *v38;\n        --v38;\n        --v37;\n      }\n      while ( v37 >= 0 );\n    }\n    else\n    {\n      v74 = 0;\n      v75 = 0;\n      v76 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_78;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v74 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_78;\n    }\n  }\n  v74 = 0;\n  v75 = 0;\n  v76 = 0;\n  result = 2;\nLABEL_78:\n  v48 = v74 | (v50 != 0 ? 0x80169E00 : 0) | (v5 << (31 - dword_42F3B1));\n  if ( dword_42EF0B == 64 )\n  {\n    v49 = v75;\n    a2[1] = v48;\n    *a2 = v49;\n  }\n  else if ( dword_42EF0B == 32 )\n  {\n    *a2 = v48;\n  }\n  return result;\n}\n// 420D31: using guessed type int dword_420D31;\n// 426315: using guessed type int dword_426315;\n// 42A695: using guessed type int dword_42A695;\n// 42F3B1: using guessed type int dword_42F3B1;\n// 42EF0B: using guessed type int dword_42EF0B;\n// 4270D4: using guessed type int dword_4270D4;\n\n"
    },
    {
        "Function": "sub_41C439",
        "Total XOR and shift operations": 22,
        "XOR operations": 0,
        "Shift operations": 22,
        "Operation percentage": "6.59%",
        "Function Body": "\nint __cdecl sub_41C439(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned __int16 v2; // bx\n  int v3; // ebx\n  int v4; // eax\n  int v5; // ebx\n  int v6; // eax\n  int result; // eax\n  int v8; // edi\n  int *v9; // esi\n  int v10; // eax\n  bool i; // zf\n  int v12; // eax\n  unsigned int v13; // edx\n  int *v14; // ecx\n  bool v15; // cf\n  unsigned int v16; // edi\n  int v17; // eax\n  int v18; // edx\n  int *v19; // ebx\n  int v20; // edx\n  int *v21; // ecx\n  int v22; // esi\n  int v23; // eax\n  int *v24; // ebx\n  bool n; // zf\n  int v26; // eax\n  unsigned int v27; // edx\n  int *v28; // ecx\n  unsigned int v29; // edi\n  int ii; // ecx\n  int *v31; // ecx\n  unsigned int v32; // esi\n  int v33; // edi\n  int v34; // eax\n  int v35; // edx\n  int *v36; // ebx\n  int v37; // edx\n  int *v38; // ecx\n  int v39; // eax\n  int v40; // edx\n  int *v41; // ebx\n  int v42; // edx\n  int *v43; // ecx\n  int v44; // eax\n  int v45; // edx\n  int v46; // edx\n  int *v47; // ecx\n  unsigned int v48; // ebx\n  int v49; // edx\n  int v50; // [esp+8h] [ebp-38h]\n  char v51; // [esp+10h] [ebp-30h]\n  int v52; // [esp+10h] [ebp-30h]\n  int v53; // [esp+14h] [ebp-2Ch]\n  int v54; // [esp+14h] [ebp-2Ch]\n  char v55; // [esp+14h] [ebp-2Ch]\n  int v56; // [esp+14h] [ebp-2Ch]\n  int v57; // [esp+14h] [ebp-2Ch]\n  int v58; // [esp+14h] [ebp-2Ch]\n  int v59; // [esp+18h] [ebp-28h]\n  int v60; // [esp+18h] [ebp-28h]\n  int v61; // [esp+18h] [ebp-28h]\n  int v62; // [esp+18h] [ebp-28h]\n  int v63; // [esp+18h] [ebp-28h]\n  int v64; // [esp+18h] [ebp-28h]\n  int v65; // [esp+1Ch] [ebp-24h]\n  unsigned int v66; // [esp+20h] [ebp-20h]\n  int m; // [esp+20h] [ebp-20h]\n  int jj; // [esp+20h] [ebp-20h]\n  int k; // [esp+20h] [ebp-20h]\n  int j; // [esp+20h] [ebp-20h]\n  int v71; // [esp+24h] [ebp-1Ch]\n  int v72; // [esp+28h] [ebp-18h]\n  int v73; // [esp+2Ch] [ebp-14h]\n  int v74; // [esp+30h] [ebp-10h] BYREF\n  int v75; // [esp+34h] [ebp-Ch]\n  int v76; // [esp+38h] [ebp-8h] BYREF\n\n  v2 = a1[5];\n  v50 = v2 & 0x8000;\n  v74 = *(_DWORD *)(a1 + 3);\n  v3 = (v2 & 0x7FFF) - 0x3FFF;\n  v4 = *a1 << 16;\n  v75 = *(_DWORD *)(a1 + 1);\n  v76 = v4;\n  if ( v3 != -16383 )\n  {\n    v65 = 0;\n    v71 = v74;\n    v72 = v75;\n    v73 = v76;\n    v8 = dword_42E803 - 1;\n    v53 = v3;\n    v59 = dword_42E803 / 32;\n    v9 = &v74 + dword_42E803 / 32;\n    v51 = 31 - dword_42E803 % 32;\n    if ( ((1 << v51) & *v9) != 0 )\n    {\n      v10 = dword_42E803 / 32;\n      for ( i = (~(-1 << (31 - dword_42E803 % 32)) & *(&v74 + v59)) == 0; i; i = *(&v74 + v10) == 0 )\n      {\n        if ( ++v10 >= 3 )\n          goto LABEL_21;\n      }\n      v12 = v8 / 32;\n      v65 = 0;\n      v13 = 1 << (31 - v8 % 32);\n      v14 = &v74 + v8 / 32;\n      v66 = v13 + *v14;\n      if ( v66 >= *v14 )\n      {\n        v15 = v66 < v13;\n        goto LABEL_18;\n      }\nLABEL_19:\n      v65 = 1;\n      while ( 1 )\n      {\n        --v12;\n        *v14 = v66;\n        if ( v12 < 0 || !v65 )\n          break;\n        v65 = 0;\n        v14 = &v74 + v12;\n        v16 = *v14 + 1;\n        v66 = v16;\n        if ( v16 >= *v14 )\n        {\n          v15 = v16 == 0;\nLABEL_18:\n          if ( !v15 )\n            continue;\n        }\n        goto LABEL_19;\n      }\n    }\nLABEL_21:\n    *v9 &= -1 << v51;\n    if ( v59 + 1 < 3 )\n      memset(&v74 + v59 + 1, 0, 4 * (3 - (v59 + 1)));\n    if ( v65 )\n      ++v3;\n    if ( v3 >= dword_424A00 - dword_42E803 )\n    {\n      if ( v3 > dword_424A00 )\n      {\n        if ( v3 < dword_427E6B )\n        {\n          v5 = dword_42D915 + v3;\n          v74 &= ~0x80169E00;\n          v44 = dword_42ED5E / 32;\n          v45 = dword_42ED5E % 32;\n          v64 = 0;\n          for ( j = 0; j < 3; ++j )\n          {\n            v58 = ~(-1 << v45) & *(&v74 + j);\n            *(&v74 + j) = v64 | ((unsigned int)*(&v74 + j) >> v45);\n            v64 = v58 << (32 - v45);\n          }\n          v46 = 2;\n          v47 = &v76 - v44;\n          do\n          {\n            if ( v46 < v44 )\n              *(&v74 + v46) = 0;\n            else\n              *(&v74 + v46) = *v47;\n            --v47;\n            --v46;\n          }\n          while ( v46 >= 0 );\n          result = 0;\n        }\n        else\n        {\n          v75 = 0;\n          v76 = 0;\n          v74 = 0x80169E00;\n          v39 = dword_42ED5E / 32;\n          v40 = dword_42ED5E % 32;\n          v63 = 0;\n          for ( k = 0; k < 3; ++k )\n          {\n            v41 = &v74 + k;\n            v57 = ~(-1 << v40) & *v41;\n            *v41 = v63 | ((unsigned int)*v41 >> v40);\n            v63 = v57 << (32 - v40);\n          }\n          v42 = 2;\n          v43 = &v76 - v39;\n          do\n          {\n            if ( v42 < v39 )\n              *(&v74 + v42) = 0;\n            else\n              *(&v74 + v42) = *v43;\n            --v43;\n            --v42;\n          }\n          while ( v42 >= 0 );\n          v5 = dword_427E6B + dword_42D915;\n          result = 1;\n        }\n        goto LABEL_78;\n      }\n      v74 = v71;\n      v75 = v72;\n      v17 = (dword_424A00 - v53) / 32;\n      v76 = v73;\n      v18 = (dword_424A00 - v53) % 32;\n      v60 = 0;\n      for ( m = 0; m < 3; ++m )\n      {\n        v19 = &v74 + m;\n        v54 = ~(-1 << v18) & *v19;\n        *v19 = v60 | ((unsigned int)*v19 >> v18);\n        v60 = v54 << (32 - v18);\n      }\n      v20 = 2;\n      v21 = &v76 - v17;\n      do\n      {\n        if ( v20 < v17 )\n          *(&v74 + v20) = 0;\n        else\n          *(&v74 + v20) = *v21;\n        --v21;\n        --v20;\n      }\n      while ( v20 >= 0 );\n      v22 = dword_42E803 - 1;\n      v23 = dword_42E803 / 32;\n      v52 = dword_42E803 / 32;\n      v24 = &v74 + dword_42E803 / 32;\n      v55 = 31 - dword_42E803 % 32;\n      if ( ((1 << v55) & *v24) != 0 )\n      {\n        for ( n = (~(-1 << (31 - dword_42E803 % 32)) & *(&v74 + v23)) == 0; n; n = *(&v74 + v23) == 0 )\n        {\n          if ( ++v23 >= 3 )\n            goto LABEL_51;\n        }\n        v26 = v22 / 32;\n        v61 = 0;\n        v27 = 1 << (31 - v22 % 32);\n        v28 = &v74 + v22 / 32;\n        v29 = *v28 + v27;\n        if ( v29 < *v28 || v29 < v27 )\n          v61 = 1;\n        *v28 = v29;\n        for ( ii = v61; --v26 >= 0 && ii; ii = v33 )\n        {\n          v31 = &v74 + v26;\n          v32 = *v31 + 1;\n          v33 = 0;\n          if ( v32 < *v31 || *v31 == -1 )\n            v33 = 1;\n          *v31 = v32;\n        }\n      }\nLABEL_51:\n      *v24 &= -1 << v55;\n      if ( v52 + 1 < 3 )\n        memset(&v74 + v52 + 1, 0, 4 * (3 - (v52 + 1)));\n      v34 = (dword_42ED5E + 1) / 32;\n      v35 = (dword_42ED5E + 1) % 32;\n      v62 = 0;\n      for ( jj = 0; jj < 3; ++jj )\n      {\n        v36 = &v74 + jj;\n        v56 = ~(-1 << v35) & *v36;\n        *v36 = v62 | ((unsigned int)*v36 >> v35);\n        v62 = v56 << (32 - v35);\n      }\n      v37 = 2;\n      v38 = &v76 - v34;\n      do\n      {\n        if ( v37 < v34 )\n          *(&v74 + v37) = 0;\n        else\n          *(&v74 + v37) = *v38;\n        --v38;\n        --v37;\n      }\n      while ( v37 >= 0 );\n    }\n    else\n    {\n      v74 = 0;\n      v75 = 0;\n      v76 = 0;\n    }\n    v5 = 0;\n    result = 2;\n    goto LABEL_78;\n  }\n  v5 = 0;\n  v6 = 0;\n  while ( !*(&v74 + v6) )\n  {\n    if ( ++v6 >= 3 )\n    {\n      result = 0;\n      goto LABEL_78;\n    }\n  }\n  v74 = 0;\n  v75 = 0;\n  v76 = 0;\n  result = 2;\nLABEL_78:\n  v48 = v74 | (v50 != 0 ? 0x80169E00 : 0) | (v5 << (31 - dword_42ED5E));\n  if ( dword_423136 == 64 )\n  {\n    v49 = v75;\n    a2[1] = v48;\n    *a2 = v49;\n  }\n  else if ( dword_423136 == 32 )\n  {\n    *a2 = v48;\n  }\n  return result;\n}\n// 427E6B: using guessed type int dword_427E6B;\n// 424A00: using guessed type int dword_424A00;\n// 42E803: using guessed type int dword_42E803;\n// 42ED5E: using guessed type int dword_42ED5E;\n// 423136: using guessed type int dword_423136;\n// 42D915: using guessed type int dword_42D915;\n\n"
    },
    {
        "Function": "sub_40A319",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "4.17%",
        "Function Body": "\nint __userpurge sub_40A319@<eax>(int *a1@<eax>, int a2@<ebx>, void *Source)\n{\n  unsigned int v5; // edi\n  char *v6; // eax\n  rsize_t v7; // [esp-8h] [ebp-10h]\n  unsigned int v8; // [esp+4h] [ebp-4h]\n\n  if ( !a2 )\n    return sub_408EED(a1);\n  if ( !Source )\n    sub_401B33(-21F1CB4809);\n  v8 = *(_DWORD *)(*a1 - 12);\n  v5 = ((int)Source - *a1) >> 1;\n  v6 = (char *)sub_40D627((const void **)a1, a2);\n  v7 = 2 * a2;\n  if ( v5 > v8 )\n    memcpy_s(v6, 2 * *(_DWORD *)(*a1 - 8), Source, v7);\n  else\n    memmove_s(v6, 2 * *(_DWORD *)(*a1 - 8), &v6[2 * v5], v7);\n  return sub_40FAFA(a2, a1);\n}\n\n"
    },
    {
        "Function": "sub_4087A2",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "4.17%",
        "Function Body": "\nvoid __thiscall sub_4087A2(\n        void *this,\n        signed int a2,\n        signed int a3,\n        unsigned __int8 (__thiscall ***a4)(_DWORD, int *, int *))\n{\n  unsigned int v4; // esi\n  int v5; // edi\n\n  v4 = a2;\n  if ( a3 > a2 )\n  {\n    do\n    {\n      v5 = sub_40FDC0(v4, (int)this, a3, (v4 + a3) >> 1, a4);\n      sub_4087A2(v4, v5 - 1, a4);\n      v4 = v5 + 1;\n    }\n    while ( a3 > v5 + 1 );\n  }\n}\n\n"
    },
    {
        "Function": "sub_408AE4",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "3.70%",
        "Function Body": "\nHME51CE __cdecl sub_408AE4(unsigned int a1)\n{\n  HME51CE v1; // eax\n  HRSRC Resource; // eax\n  HME51CE v3; // esi\n  int i; // [esp+Ch] [ebp-4h]\n\n  v1 = (HME51CE)sub_40AE9E((int)&unk_427DFA, 0);\n  for ( i = 1; ; ++i )\n  {\n    v3 = v1;\n    if ( !v1 )\n      return 0;\n    Resource = FindResourceExW(v1, (LP71D7R)6, (LP71D7R)(unsigned __int16)((a1 >> 4) + 1), 0);\n    if ( Resource )\n    {\n      if ( sub_40AA90(a1, v3, Resource) )\n        break;\n    }\n    v1 = (HME51CE)sub_40AE9E((int)&unk_427DFA, i);\n  }\n  return v3;\n}\n// 4086A4: conditional instruction was optimized away because ebx.4==0\n\n"
    },
    {
        "Function": "sub_40F37A",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "2.63%",
        "Function Body": "\nint __userpurge sub_40F37A@<eax>(const void **a1@<eax>, wchar_t *Source, int MaxCount)\n{\n  char *v4; // eax\n  unsigned int v5; // ebx\n  int v6; // edi\n  size_t v7; // eax\n  unsigned int v8; // edi\n  char *v9; // eax\n  bool v10; // cc\n  wchar_t *v11; // edi\n  int v13; // [esp+Ch] [ebp-4h]\n  size_t MaxCounta; // [esp+1Ch] [ebp+Ch]\n\n  v4 = (char *)*a1;\n  v5 = *((_DWORD *)v4 - 3);\n  v6 = (char *)Source - v4;\n  v7 = 0;\n  v8 = v6 >> 1;\n  if ( MaxCount < 0 )\n    goto LABEL_2;\n  if ( Source )\n    v7 = wcsnlen(Source, MaxCount);\n  MaxCounta = v7;\n  if ( (int)(0x7F3E44FF - v7) < (int)v5 )\nLABEL_2:\n    sub_401B33(-21F1CB4809);\n  v13 = v5 + v7;\n  v9 = (char *)sub_40D627(a1, v5 + v7);\n  v10 = v8 <= v5;\n  v11 = (wchar_t *)&v9[2 * v8];\n  if ( !v10 )\n    v11 = Source;\n  memcpy_s(&v9[2 * v5], 2 * MaxCounta, v11, 2 * MaxCounta);\n  return sub_40FAFA(v13, a1);\n}\n\n"
    },
    {
        "Function": "sub_402B0F",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "1.35%",
        "Function Body": "\nint __cdecl sub_402B0F(FILE *a1, int a2)\n{\n  const void *v2; // edi\n  UINT_PTR v3; // ebx\n  int result; // eax\n  UINT_PTR v5; // ebx\n  unsigned __int8 *v6; // esi\n  int v7; // edi\n  int v8; // ebx\n  int v9; // edi\n  int v10; // eax\n  int v11; // [esp+10h] [ebp-650h]\n  int v12; // [esp+14h] [ebp-64Ch]\n  UINT_PTR v13; // [esp+18h] [ebp-648h]\n  int v14; // [esp+1Ch] [ebp-644h]\n  int v15; // [esp+20h] [ebp-640h]\n  int v16; // [esp+24h] [ebp-63Ch]\n  int v17; // [esp+28h] [ebp-638h]\n  int v18; // [esp+2Ch] [ebp-634h]\n  int v19; // [esp+30h] [ebp-630h]\n  int v20; // [esp+34h] [ebp-62Ch]\n  int v21; // [esp+38h] [ebp-628h]\n  int v22; // [esp+3Ch] [ebp-624h]\n  int v23; // [esp+40h] [ebp-620h]\n  int v24; // [esp+44h] [ebp-61Ch]\n  int v25; // [esp+48h] [ebp-618h]\n  int v26; // [esp+4Ch] [ebp-614h]\n  int v27; // [esp+50h] [ebp-610h]\n  char v28[1540]; // [esp+58h] [ebp-608h] BYREF\n\n  v2 = *(const void **)(*(_DWORD *)(a2 + 4) + 196);\n  memset(v28, 0, 0x600u);\n  v3 = 1536;\n  for ( result = IsBadReadPtr(v2, 0x600u); result; result = IsBadReadPtr(v2, v3) )\n  {\n    if ( v3 < 0xA )\n      return result;\n    v3 >>= 1;\n  }\n  memcpy_0(v28, v2, v3);\n  fwprintf_s(a1, L\"\\r\\nSTACK DUMP\\r\\n_________________________________________________________________\\r\\n\");\n  v5 = v3 >> 4;\n  if ( v5 )\n  {\n    v6 = (unsigned __int8 *)&v28[14];\n    v27 = (_BYTE *)v2 - &v28[14];\n    v13 = v5;\n    do\n    {\n      v7 = v6[1];\n      if ( isprint(v7) )\n        v12 = v7;\n      else\n        v12 = 46;\n      v11 = *v6;\n      if ( !isprint(v11) )\n        v11 = 46;\n      v24 = *(v6 - 1);\n      if ( !isprint(v24) )\n        v24 = 46;\n      v14 = *(v6 - 2);\n      if ( !isprint(v14) )\n        v14 = 46;\n      v22 = *(v6 - 3);\n      if ( !isprint(v22) )\n        v22 = 46;\n      v16 = *(v6 - 4);\n      if ( !isprint(v16) )\n        v16 = 46;\n      v20 = *(v6 - 5);\n      if ( !isprint(v20) )\n        v20 = 46;\n      v26 = *(v6 - 6);\n      if ( !isprint(v26) )\n        v26 = 46;\n      v18 = *(v6 - 7);\n      if ( !isprint(v18) )\n        v18 = 46;\n      v25 = *(v6 - 8);\n      if ( !isprint(v25) )\n        v25 = 46;\n      v23 = *(v6 - 9);\n      if ( !isprint(v23) )\n        v23 = 46;\n      v21 = *(v6 - 10);\n      if ( !isprint(v21) )\n        v21 = 46;\n      v19 = *(v6 - 11);\n      if ( !isprint(v19) )\n        v19 = 46;\n      v17 = *(v6 - 12);\n      if ( !isprint(v17) )\n        v17 = 46;\n      v8 = *(v6 - 13);\n      v15 = v8;\n      if ( !isprint(v8) )\n        v15 = 46;\n      v9 = *(v6 - 14);\n      if ( isprint(v9) )\n        v10 = v9;\n      else\n        v10 = 46;\n      fwprintf_s(\n        a1,\n        L\"%08x  %02x %02x %02x %02x %02x %02x %02x %02x - %02x %02x %02x %02x %02x %02x %02x %02x  %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\\r\\n\",\n        (__int64)(int)&v6[v27],\n        v9,\n        v8,\n        *(v6 - 12),\n        *(v6 - 11),\n        *(v6 - 10),\n        *(v6 - 9),\n        *(v6 - 8),\n        *(v6 - 7),\n        *(v6 - 6),\n        *(v6 - 5),\n        *(v6 - 4),\n        *(v6 - 3),\n        *(v6 - 2),\n        *(v6 - 1),\n        *v6,\n        v6[1],\n        v10,\n        v15,\n        v17,\n        v19,\n        v21,\n        v23,\n        v25,\n        v18,\n        v26,\n        v20,\n        v16,\n        v22,\n        v14,\n        v24,\n        v11,\n        v12);\n      v6 += 16;\n      --v13;\n    }\n    while ( v13 );\n  }\n  return fwprintf_s(a1, L\"\\r\\n\");\n}\n\n"
    }
]