[
    {
        "Function": "sub_4000A2",
        "Total XOR and shift operations": 4,
        "XOR operations": 4,
        "Shift operations": 0,
        "Operation percentage": "8.89%",
        "Function Body": "\nunsigned __int64 sub_4000A2()\n{\n  unsigned __int64 result; // rax\n  struct _FIE416ME v1; // r12\n  __int64 CurrentProcessId; // rbp\n  DWORD CurrentThreadId; // edi\n  DWORD TickCount; // esi\n  LOFE2CNG v5; // rsi\n  struct _FIE416ME SystemTimeAsFileTime; // [rsp+20h] [rbp-48h] BYREF\n  LARGE_IN123ER PerformanceCount; // [rsp+30h] [rbp-38h] BYREF\n\n  result = 0x2B7842DF68A7i64;\n  SystemTimeAsFileTime = 0i64;\n  if ( qword_40786C == 0x2B7842DF68A7i64 )\n  {\n    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);\n    v1 = SystemTimeAsFileTime;\n    CurrentProcessId = GetCurrentProcessId();\n    CurrentThreadId = GetCurrentThreadId();\n    TickCount = GetTickCount();\n    QueryPerformanceCounter(&PerformanceCount);\n    v5 = (TickCount ^ CurrentThreadId ^ PerformanceCount.QuadPart ^ *(_QWORD *)&v1 ^ CurrentProcessId) & 0xFF9F59FF9F59i64;\n    if ( v5 == 0x2B7842DF68A7i64 )\n    {\n      result = 0xFFF1D1663EC55DCCui64;\n      v5 = 0x2B7842DF6563i64;\n    }\n    else\n    {\n      result = ~v5;\n    }\n    qword_40786C = v5;\n    qword_402566 = result;\n  }\n  else\n  {\n    qword_402566 = ~qword_40786C;\n  }\n  return result;\n}\n// 40786C: using guessed type __int64 qword_40786C;\n// 402566: using guessed type __int64 qword_402566;\n\n"
    },
    {
        "Function": "sub_40FAD5",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "0.25%",
        "Function Body": "\n__int64 __fastcall sub_40FAD5(__int64 a1, int a2, _DWORD *a3, _DWORD *a4, _QWORD *a5)\n{\n  __int64 v8; // rax\n  __int64 v9; // rcx\n  int v10; // eax\n  int v11; // r10d\n  int v12; // eax\n  unsigned int v13; // edx\n  int v14; // eax\n  __int64 v15; // rdx\n  __int64 v16; // rt2\n  int v17; // r9d\n  int v18; // eax\n  __int64 v20; // rax\n  signed int v21; // r15d\n  int v22; // ecx\n  int v23; // r8d\n  int v24; // eax\n  int v25; // edx\n  _BYTE *v26; // rbx\n  int v27; // r13d\n  int v28; // r9d\n  int v29; // r8d\n  double v30; // xmm0_8\n  double v31; // xmm1_8\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  int is_gray; // eax\n  int v35; // ecx\n  int v36; // esi\n  int v37; // r14d\n  int v38; // r9d\n  __int64 v39; // r11\n  int v40; // r8d\n  int v41; // r10d\n  int v42; // r13d\n  int v43; // r12d\n  int v44; // ebp\n  __int64 v45; // rcx\n  __int64 v46; // r15\n  int v47; // eax\n  int v48; // edx\n  __int64 v49; // rax\n  __int64 v50; // r12\n  __int64 type; // rbx\n  __int64 v52; // rax\n  __int64 v53; // rax\n  __int64 v54; // rax\n  __int64 v55; // rdi\n  __int64 v56; // r14\n  __int64 v57; // rax\n  __int64 v58; // rsi\n  __int64 v59; // rax\n  __int64 content_area; // rax\n  __int64 v61; // rax\n  __int64 v62; // rbx\n  __int64 v63; // rax\n  __int64 v64; // rbp\n  __int64 v65; // rax\n  __int64 v66; // rdi\n  __int64 v67; // rax\n  __int64 v68; // rax\n  __int64 v69; // rax\n  __int64 v70; // rax\n  __int64 v71; // rax\n  __int64 v72; // rbp\n  __int64 v73; // rax\n  __int64 v74; // rax\n  __int64 v75; // rdi\n  __int64 v76; // rax\n  __int64 v77; // r15\n  __int64 v78; // rax\n  __int64 v79; // rbx\n  __int64 v80; // rax\n  __int64 v81; // rax\n  __int64 v82; // rax\n  __int64 v83; // rdi\n  __int64 v84; // rax\n  __int64 v85; // rax\n  __int64 v86; // rdi\n  __int64 v87; // rax\n  __int64 v88; // rdi\n  __int64 v89; // rax\n  __int64 v90; // rdi\n  __int64 v91; // rbx\n  __int64 v92; // rax\n  __int64 v93; // rax\n  __int64 v94; // rax\n  __int64 v95; // rax\n  __int64 v96; // rbp\n  __int64 v97; // r13\n  __int64 v98; // rax\n  __int64 group; // r14\n  __int64 v100; // rax\n  __int64 v101; // rax\n  __int64 v102; // rax\n  __int64 v103; // rbp\n  __int64 v104; // rax\n  __int64 v105; // r14\n  __int64 v106; // rax\n  __int64 v107; // rax\n  __int64 v108; // rax\n  __int64 v109; // rbp\n  __int64 v110; // rax\n  __int64 v111; // rax\n  __int64 v112; // rax\n  __int64 v113; // r13\n  __int64 v114; // rax\n  __int64 v115; // rax\n  __int64 v116; // r14\n  __int64 v117; // rax\n  __int64 v118; // rax\n  __int64 v119; // rax\n  __int64 v120; // r13\n  __int64 v121; // rax\n  __int64 v122; // rax\n  __int64 v123; // r14\n  __int64 v124; // rax\n  __int64 v125; // rax\n  __int64 v126; // rax\n  __int64 v127; // r13\n  __int64 v128; // rax\n  __int64 v129; // rdi\n  __int64 v130; // rax\n  __int64 v131; // rax\n  double v132; // xmm9_8\n  __int64 v133; // rbp\n  __int64 v134; // rax\n  __int64 v135; // rax\n  __int64 v136; // rax\n  __int64 v137; // rbp\n  __int64 v138; // rax\n  __int64 v139; // rsi\n  __int64 v140; // rax\n  __int64 v141; // rax\n  double v142; // xmm9_8\n  __int64 v143; // rax\n  __int64 v144; // rax\n  __int64 v145; // rax\n  __int64 v146; // rax\n  int v147; // eax\n  int v148; // eax\n  unsigned int v149; // edx\n  int v150; // eax\n  __int64 v151; // rt2\n  __int64 v152; // rax\n  int v153; // [rsp+90h] [rbp-118h]\n  int v154; // [rsp+90h] [rbp-118h]\n  __int64 v155; // [rsp+90h] [rbp-118h]\n  int v156; // [rsp+98h] [rbp-110h]\n  __int64 v157; // [rsp+A0h] [rbp-108h]\n  __int64 v158; // [rsp+A0h] [rbp-108h]\n  __int64 v159; // [rsp+A0h] [rbp-108h]\n  int v160; // [rsp+A8h] [rbp-100h]\n  __int64 v161; // [rsp+A8h] [rbp-100h]\n  __int64 v162; // [rsp+B0h] [rbp-F8h]\n  __int64 v163; // [rsp+B8h] [rbp-F0h]\n  int v164; // [rsp+C4h] [rbp-E4h]\n  unsigned int *v165; // [rsp+C8h] [rbp-E0h]\n  __int64 v166; // [rsp+D0h] [rbp-D8h]\n  int v167; // [rsp+D8h] [rbp-D0h]\n  int v168; // [rsp+DCh] [rbp-CCh]\n  char v169[16]; // [rsp+E0h] [rbp-C8h] BYREF\n  __int64 v170[2]; // [rsp+F0h] [rbp-B8h] BYREF\n  int v171; // [rsp+100h] [rbp-A8h]\n  int v172; // [rsp+104h] [rbp-A4h]\n  int v173; // [rsp+108h] [rbp-A0h]\n  int v174; // [rsp+10Ch] [rbp-9Ch]\n  int v175; // [rsp+110h] [rbp-98h]\n  int v176; // [rsp+114h] [rbp-94h]\n\n  v168 = a3[2];\n  v8 = gimp_locale_directory();\n  libintl_bindtextdomain(\"gimp20-std-plug-ins\", v8);\n  libintl_bind_textdomain_codeset(\"gimp20-std-plug-ins\", \"UTF-8\");\n  libintl_textdomain(\"gimp20-std-plug-ins\");\n  *a4 = 1;\n  *a5 = &dword_40D67F;\n  v9 = (unsigned int)a3[22];\n  dword_40D67F = 21;\n  dword_40DE18 = 3;\n  v165 = (unsigned int *)gimp_drawable_get(v9);\n  qword_4034A5 = (__int64)v165;\n  gimp_tile_cache_ntiles(v165[5] + 1);\n  dword_404BB3 = gimp_drawable_has_alpha(*(unsigned int *)qword_4034A5);\n  if ( (unsigned int)gimp_drawable_mask_intersect(*v165, &dword_40DC33, &dword_402DE5, &dword_40DF0B, &dword_403263) )\n  {\n    if ( dword_40DF0B <= dword_403263 )\n    {\n      v147 = 128;\n      if ( dword_403263 <= 128 )\n        v147 = dword_403263;\n      v17 = v147;\n      v149 = (v147 * dword_40DF0B) >> 31;\n      v148 = v147 * dword_40DF0B;\n      v15 = v149;\n      v151 = __SPCC304__(v149, v148) % dword_403263;\n      v150 = __SPCC304__(v149, v148) / dword_403263;\n      LOFA4CD(v15) = v151;\n      v11 = v150;\n    }\n    else\n    {\n      v10 = 128;\n      if ( dword_40DF0B <= 128 )\n        v10 = dword_40DF0B;\n      v11 = v10;\n      v13 = (v10 * dword_403263) >> 31;\n      v12 = v10 * dword_403263;\n      v15 = v13;\n      v16 = __SPCC304__(v13, v12) % dword_40DF0B;\n      v14 = __SPCC304__(v13, v12) / dword_40DF0B;\n      LOFA4CD(v15) = v16;\n      v17 = v14;\n    }\n    v18 = 2;\n    if ( v11 < 2 )\n      v11 = 2;\n    if ( v17 >= 2 )\n      v18 = v17;\n    dword_404ED0 = v11;\n    dword_402C7B = v18;\n    if ( v168 == 1 )\n    {\n      v164 = 1;\n      if ( a2 == 4 )\n      {\n        v164 = 3;\n        dword_403BED = a3[32];\n      }\n    }\n    else if ( v168 == 2 )\n    {\n      gimp_procedural_db_get_data(\"plug-in-small-tiles\", &dword_403BED);\n      v164 = 3;\n    }\n    else\n    {\n      if ( !v168 )\n      {\n        gimp_procedural_db_get_data(\"plug-in-small-tiles\", &dword_403BED);\n        _IAT_start__(\"tile-small\", 1i64);\n        gimp_pixel_rgn_init(\n          v170,\n          qword_4034A5,\n          (unsigned int)dword_40DC33,\n          (unsigned int)dword_402DE5,\n          dword_40DF0B,\n          dword_403263,\n          0,\n          0);\n        v33 = g_malloc(4 * dword_40DF0B);\n        v158 = g_malloc(4 * dword_402C7B * dword_404ED0);\n        qword_40296B = v158;\n        dword_40EB3E = gimp_drawable_bpp(*(unsigned int *)qword_4034A5);\n        if ( dword_40EB3E <= 2 )\n          dword_40EB3E = 4 - (dword_404BB3 == 0);\n        is_gray = gimp_drawable_is_gray(*(unsigned int *)qword_4034A5);\n        v35 = dword_402C7B;\n        v36 = is_gray;\n        if ( dword_402C7B > 0 )\n        {\n          v154 = 0;\n          v37 = is_gray == 0 ? 3 : 1;\n          do\n          {\n            gimp_pixel_rgn_get_row(\n              v170,\n              v33,\n              (unsigned int)dword_40DC33,\n              (unsigned int)(dword_402DE5 + dword_403263 * v154 / v35),\n              dword_40DF0B);\n            v38 = dword_404ED0;\n            if ( dword_404ED0 <= 0 )\n            {\n              v160 = dword_40EB3E;\n            }\n            else\n            {\n              v39 = dword_40EB3E;\n              v40 = 0;\n              v41 = 0;\n              v42 = v171;\n              v43 = dword_404BB3;\n              v44 = dword_40DF0B;\n              v45 = v158;\n              v160 = dword_40EB3E;\n              do\n              {\n                v46 = 0i64;\n                v47 = v42 * (v40 / v38);\n                do\n                {\n                  v48 = 0;\n                  if ( !v36 )\n                    v48 = v46;\n                  *(_BYTE *)(v45 + v46++) = *(_BYTE *)(v33 + v47 + v48);\n                }\n                while ( v46 != 3 );\n                if ( v43 )\n                  *(_BYTE *)(v45 + 3) = *(_BYTE *)(v33 + v37 + v47);\n                ++v41;\n                v40 += v44;\n                v45 += v39;\n              }\n              while ( v41 != v38 );\n            }\n            ++v154;\n            v35 = dword_402C7B;\n            v158 += v38 * v160;\n          }\n          while ( dword_402C7B > v154 );\n        }\n        g_free(v33);\n        v49 = libintl_gettext(\"Small Tiles\");\n        v50 = gimp_dialog_new(\n                v49,\n                \"gimp-tile-small\",\n                0i64,\n                0i64,\n                &gimp_standard_help_func,\n                \"plug-in-small-tiles\",\n                \"gtk-cancel\",\n                -6,\n                \"gtk-ok\",\n                -5,\n                0i64);\n        type = gtk_dialog_get_type();\n        v52 = g_type_check_instance_cast(v50, type);\n        gtk_dialog_set_alternative_button_order(v52, 4205B07291i64, 4205B07290i64, 0xFF9F59FFi64);\n        v53 = gtk_window_get_type();\n        v54 = g_type_check_instance_cast(v50, v53);\n        gimp_window_set_transient(v54);\n        v55 = gtk_box_new(1i64, 12i64);\n        v56 = gtk_container_get_type();\n        v57 = g_type_check_instance_cast(v55, v56);\n        gtk_container_set_border_width(v57, 12i64);\n        v58 = gtk_box_get_type();\n        v59 = g_type_check_instance_cast(v50, type);\n        content_area = gtk_dialog_get_content_area(v59);\n        v61 = g_type_check_instance_cast(content_area, v58);\n        gtk_box_pack_start(v61, v55, 1i64, 1i64, 0);\n        gtk_widget_show(v55);\n        v155 = v55;\n        v62 = gtk_box_new(0i64, 12i64);\n        v63 = g_type_check_instance_cast(v55, v58);\n        gtk_box_pack_start(v63, v62, 0i64, 0i64, 0);\n        gtk_widget_show(v62);\n        v64 = gtk_box_new(1i64, 0i64);\n        v65 = g_type_check_instance_cast(v62, v58);\n        gtk_box_pack_start(v65, v64, 0i64, 0i64, 0);\n        gtk_widget_show(v64);\n        v66 = gtk_frame_new(0i64);\n        v67 = gtk_frame_get_type();\n        v68 = g_type_check_instance_cast(v66, v67);\n        gtk_frame_set_shadow_type(v68, 1i64);\n        v69 = g_type_check_instance_cast(v64, v58);\n        gtk_box_pack_start(v69, v66, 0i64, 0i64, 0);\n        gtk_widget_show(v66);\n        qword_40F618 = gimp_preview_area_new();\n        gtk_widget_set_size_request(qword_40F618, (unsigned int)dword_404ED0, (unsigned int)dword_402C7B);\n        v70 = gtk_widget_get_type();\n        v71 = g_type_check_instance_cast(qword_40F618, v70);\n        gtk_widget_set_events(v71, 274i64);\n        v72 = qword_40F618;\n        v73 = g_type_check_instance_cast(v66, v56);\n        gtk_container_add(v73, v72);\n        gtk_widget_show(qword_40F618);\n        g_signal_connect_data(qword_40F618, \"expose-event\", sub_407966, 0i64, 0i64, 1);\n        g_signal_connect_data(qword_40F618, \"event\", sub_402EAD, 0i64, 0i64, 0);\n        v74 = libintl_gettext(\"Flip\");\n        v75 = gimp_frame_new(v74);\n        v76 = g_type_check_instance_cast(v62, v58);\n        gtk_box_pack_start(v76, v75, 1i64, 1i64, 0);\n        gtk_widget_show(v75);\n        v159 = v56;\n        v77 = gtk_box_new(1i64, 12i64);\n        v78 = g_type_check_instance_cast(v75, v56);\n        gtk_container_add(v78, v77);\n        gtk_widget_show(v77);\n        v79 = gtk_box_new(0i64, 6i64);\n        v80 = g_type_check_instance_cast(v79, v58);\n        gtk_box_set_homogeneous(v80, 1i64);\n        v81 = g_type_check_instance_cast(v77, v58);\n        gtk_box_pack_start(v81, v79, 0i64, 0i64, 0);\n        gtk_widget_show(v79);\n        v82 = libintl_gettext(\"_Horizontal\");\n        v83 = gtk_check_button_new_with_mnemonic(v82);\n        v84 = g_type_check_instance_cast(v79, v58);\n        gtk_box_pack_start(v84, v83, 1i64, 1i64, 0);\n        gtk_widget_show(v83);\n        g_signal_connect_data(v83, \"toggled\", sub_40F09D, &dword_40E7CD, 0i64, 0);\n        qword_4083C8 = v83;\n        v85 = libintl_gettext(\"_Vertical\");\n        v86 = gtk_check_button_new_with_mnemonic(v85);\n        v87 = g_type_check_instance_cast(v79, v58);\n        gtk_box_pack_start(v87, v86, 1i64, 1i64, 0);\n        gtk_widget_show(v86);\n        g_signal_connect_data(v86, \"toggled\", sub_40F09D, &dword_40D0DF, 0i64, 0);\n        qword_405DDA = v86;\n        v88 = gtk_button_new_from_stock(\"gimp-reset\");\n        v89 = g_type_check_instance_cast(v79, v58);\n        gtk_box_pack_start(v89, v88, 1i64, 1i64, 0);\n        gtk_widget_show(v88);\n        g_signal_connect_data(v88, \"clicked\", sub_401E96, &qword_4083C8, 0i64, 0);\n        v90 = gtk_table_new(4i64, 4i64, 0i64);\n        v91 = gtk_table_get_type();\n        v92 = g_type_check_instance_cast(v90, v91);\n        gtk_table_set_col_spacings(v92, 6i64);\n        v93 = g_type_check_instance_cast(v90, v91);\n        gtk_table_set_row_spacings(v93, 6i64);\n        v94 = g_type_check_instance_cast(v77, v58);\n        gtk_box_pack_start(v94, v90, 0i64, 0i64, 0);\n        gtk_widget_show(v90);\n        v95 = libintl_gettext(\"A_ll tiles\");\n        v96 = gtk_radio_button_new_with_mnemonic(0i64, v95);\n        v97 = gtk_radio_button_get_type();\n        v98 = g_type_check_instance_cast(v96, v97);\n        group = gtk_radio_button_get_group(v98);\n        v100 = g_type_check_instance_cast(v90, v91);\n        gtk_table_attach(v100, v96, 0i64, 4i64, 0, 1, 5, 4, 0, 0);\n        gtk_widget_show(v96);\n        v101 = g_type_check_instance_cast(v96, 80i64);\n        g_object_set_data(v101, \"gimp-item-data\", 0i64);\n        g_signal_connect_data(v96, \"toggled\", sub_40FB4E, &dword_40D4DF, 0i64, 0);\n        v102 = libintl_gettext(\"Al_ternate tiles\");\n        v103 = gtk_radio_button_new_with_mnemonic(group, v102);\n        v104 = g_type_check_instance_cast(v103, v97);\n        v105 = gtk_radio_button_get_group(v104);\n        v106 = g_type_check_instance_cast(v90, v91);\n        gtk_table_attach(v106, v103, 0i64, 4i64, 1, 2, 5, 4, 0, 0);\n        gtk_widget_show(v103);\n        v107 = g_type_check_instance_cast(v103, 80i64);\n        g_object_set_data(v107, \"gimp-item-data\", 1i64);\n        g_signal_connect_data(v103, \"toggled\", sub_40FB4E, &dword_40D4DF, 0i64, 0);\n        v108 = libintl_gettext(\"_Explicit tile\");\n        v109 = gtk_radio_button_new_with_mnemonic(v105, v108);\n        v110 = g_type_check_instance_cast(v109, v97);\n        gtk_radio_button_get_group(v110);\n        v111 = g_type_check_instance_cast(v90, v91);\n        gtk_table_attach(v111, v109, 0i64, 1i64, 2, 4, 6, 4, 0, 0);\n        gtk_widget_show(v109);\n        v112 = libintl_gettext(\"Ro_w:\");\n        v113 = gtk_label_new_with_mnemonic(v112);\n        v162 = gtk_misc_get_type();\n        v114 = g_type_check_instance_cast(v113, v162);\n        gtk_misc_set_alignment(v114);\n        v115 = g_type_check_instance_cast(v90, v91);\n        gtk_table_attach(v115, v113, 1i64, 2i64, 2, 3, 6, 4, 0, 0);\n        gtk_widget_show(v113);\n        g_object_bind_property(v109, \"active\", v113, \"sensitive\", 2);\n        v116 = gimp_spin_button_new(v170);\n        v161 = gtk_label_get_type();\n        v117 = g_type_check_instance_cast(v113, v161);\n        gtk_label_set_mnemonic_widget(v117, v116);\n        v118 = g_type_check_instance_cast(v90, v91);\n        gtk_table_attach(v118, v116, 2i64, 3i64, 2, 3, 6, 4, 0, 0);\n        gtk_widget_show(v116);\n        g_signal_connect_data(v170[0], \"value-changed\", sub_409E8A, &dword_40D4DF, 0i64, 0);\n        qword_404544 = v170[0];\n        g_object_bind_property(v109, \"active\", v116, \"sensitive\", 2);\n        v119 = libintl_gettext(\"Col_umn:\");\n        v120 = gtk_label_new_with_mnemonic(v119);\n        v121 = g_type_check_instance_cast(v120, v162);\n        gtk_misc_set_alignment(v121);\n        gtk_widget_show(v120);\n        v122 = g_type_check_instance_cast(v90, v91);\n        gtk_table_attach(v122, v120, 1i64, 2i64, 3, 4, 4, 4, 0, 0);\n        g_object_bind_property(v109, \"active\", v120, \"sensitive\", 2);\n        v123 = gimp_spin_button_new(v170);\n        v124 = g_type_check_instance_cast(v120, v161);\n        gtk_label_set_mnemonic_widget(v124, v123);\n        v125 = g_type_check_instance_cast(v90, v91);\n        gtk_table_attach(v125, v123, 2i64, 3i64, 3, 4, 5, 4, 0, 0);\n        gtk_widget_show(v123);\n        g_signal_connect_data(v170[0], \"value-changed\", sub_409E8A, &dword_40D4DF, 0i64, 0);\n        qword_409BA3 = v170[0];\n        g_object_bind_property(v109, \"active\", v123, \"sensitive\", 2);\n        v126 = g_type_check_instance_cast(v109, 80i64);\n        g_object_set_data(v126, \"gimp-item-data\", 2i64);\n        g_signal_connect_data(v109, \"toggled\", sub_40FB4E, &dword_40D4DF, 0i64, 0);\n        v127 = gtk_button_new_from_stock(\"gtk-apply\");\n        v128 = g_type_check_instance_cast(v90, v91);\n        gtk_table_attach(v128, v127, 3i64, 4i64, 2, 4, 0, 0, 0, 0);\n        gtk_widget_show(v127);\n        g_signal_connect_data(v127, \"clicked\", sub_401D14, &dword_40D4DF, 0i64, 0);\n        qword_40338B = v127;\n        g_object_bind_property(v109, \"active\", v123, \"sensitive\", 2);\n        v129 = gtk_table_new(1i64, 3i64, 0i64);\n        v130 = g_type_check_instance_cast(v129, v91);\n        gtk_table_set_col_spacings(v130, 6i64);\n        v131 = g_type_check_instance_cast(v77, v58);\n        gtk_box_pack_start(v131, v129, 0i64, 0i64, 0);\n        gtk_widget_show(v129);\n        v132 = (double)dword_407459;\n        v133 = libintl_gettext(\"O_pacity:\");\n        v134 = g_type_check_instance_cast(v129, v91);\n        v135 = gimp_scale_entry_new(\n                 v134,\n                 0i64,\n                 0i64,\n                 v133,\n                 80,\n                 -1,\n                 *(_QWORD *)&v132,\n                 0i64,\n                 0x40BC7500A5820000i64,\n                 0x3FF00A58200A5820i64,\n                 0x409668A58200A582i64,\n                 0,\n                 1,\n                 0i64,\n                 0i64,\n                 0i64,\n                 0i64);\n        g_signal_connect_data(v135, \"value-changed\", sub_4051F2, &dword_407459, 0i64, 0);\n        v136 = libintl_gettext(\"Number of Segments\");\n        v137 = gimp_frame_new(v136);\n        v138 = g_type_check_instance_cast(v155, v58);\n        gtk_box_pack_start(v138, v137, 0i64, 0i64, 0);\n        gtk_widget_show(v137);\n        v139 = gtk_table_new(1i64, 3i64, 0i64);\n        v140 = g_type_check_instance_cast(v139, v91);\n        gtk_table_set_col_spacings(v140, 6i64);\n        v141 = g_type_check_instance_cast(v137, v159);\n        gtk_container_add(v141, v139);\n        gtk_widget_show(v139);\n        gtk_widget_set_sensitive(v129, (unsigned int)dword_404BB3);\n        v142 = (double)dword_403BED;\n        v143 = g_type_check_instance_cast(v139, v91);\n        v144 = gimp_scale_entry_new(\n                 v143,\n                 0i64,\n                 0i64,\n                 \"_n\u00b2\",\n                 80,\n                 -1,\n                 *(_QWORD *)&v142,\n                 0x400A58200A582000i64,\n                 0x409BECA58200A582i64,\n                 0x3FF00A58200A5820i64,\n                 0x3FF00A58200A5820i64,\n                 0,\n                 1,\n                 0i64,\n                 0i64,\n                 0i64,\n                 0i64);\n        g_signal_connect_data(v144, \"value-changed\", sub_4051F2, &dword_403BED, 0i64, 0);\n        gtk_widget_show(v50);\n        sub_405680();\n        v145 = gimp_dialog_get_type();\n        v146 = g_type_check_instance_cast(v50, v145);\n        LOFA4CD(v91) = gimp_dialog_run(v146);\n        gtk_widget_destroy(v50);\n        if ( (_DWORD)v91 != -5 )\n          return gimp_drawable_detach(v165);\n      }\n      v164 = 3;\n    }\n    if ( (unsigned int)gimp_drawable_is_rgb(*v165, v15) || (unsigned int)gimp_drawable_is_gray(*v165) )\n    {\n      v20 = libintl_gettext(\"Tiling\");\n      gimp_progress_init(v20);\n      v157 = gimp_pixel_fetcher_new(qword_4034A5, 0i64);\n      gimp_pixel_rgn_init(\n        v170,\n        qword_4034A5,\n        (unsigned int)dword_40DC33,\n        (unsigned int)dword_402DE5,\n        dword_40DF0B,\n        dword_403263,\n        1,\n        1);\n      v21 = (dword_404BB3 == 0) + (unsigned int)gimp_drawable_bpp(*(unsigned int *)qword_4034A5) - 1;\n      v166 = gimp_pixel_rgns_register(1i64, v170);\n      if ( v166 )\n      {\n        v167 = 0;\n        do\n        {\n          v22 = v174;\n          v23 = v176;\n          v156 = v174;\n          v163 = v170[0];\n          v24 = v175;\n          if ( v176 + v174 > v174 )\n          {\n            v25 = v173;\n            do\n            {\n              if ( v25 < v25 + v24 )\n              {\n                v26 = (_BYTE *)v163;\n                v27 = v25;\n                do\n                {\n                  v153 = (v156 - dword_402DE5) * dword_403BED % dword_403263;\n                  v28 = (v27 - dword_40DC33) * dword_403BED % dword_40DF0B;\n                  v29 = dword_407A2D[6 * ((v27 - dword_40DC33) * dword_403BED / dword_40DF0B)\n                                   + (v156 - dword_402DE5) * dword_403BED / dword_403263];\n                  if ( v29 )\n                  {\n                    v30 = (double)dword_403BED;\n                    v31 = 1.0 - 1.0 / (double)dword_403BED + 0.01;\n                    if ( (v29 & 2) != 0 )\n                      v153 = (int)(((double)(dword_403263 - (v156 - dword_402DE5) - 1) + v31) * v30) % dword_403263;\n                    if ( (v29 & 1) != 0 )\n                      v28 = (int)(v30 * (v31 + (double)(dword_40DF0B - (v27 - dword_40DC33) - 1))) % dword_40DF0B;\n                  }\n                  gimp_pixel_fetcher_get_pixel(\n                    v157,\n                    (unsigned int)(dword_40DC33 + v28),\n                    (unsigned int)(dword_402DE5 + v153),\n                    v169);\n                  if ( v21 > 0 )\n                  {\n                    v32 = 0i64;\n                    do\n                    {\n                      v26[v32] = v169[v32];\n                      ++v32;\n                    }\n                    while ( v21 > (int)v32 );\n                    v26 += (unsigned int)(v21 - 1) + 1;\n                  }\n                  if ( dword_404BB3 )\n                    *v26++ = (char)(dword_407459 * v169[v21]) / 100;\n                  v24 = v175;\n                  ++v27;\n                  v25 = v173;\n                }\n                while ( v27 < v175 + v173 );\n                v22 = v174;\n                v23 = v176;\n              }\n              ++v156;\n              v163 += v172;\n            }\n            while ( v156 < v23 + v22 );\n          }\n          v167 += v23 * v24;\n          gimp_progress_update();\n          v166 = gimp_pixel_rgns_process(v166);\n        }\n        while ( v166 );\n      }\n      gimp_progress_update();\n      gimp_pixel_fetcher_destroy(v157);\n      gimp_drawable_flush(qword_4034A5);\n      gimp_drawable_merge_shadow(*(unsigned int *)qword_4034A5, 1i64);\n      gimp_drawable_update(\n        *(unsigned int *)qword_4034A5,\n        (unsigned int)dword_40DC33,\n        (unsigned int)dword_402DE5,\n        (unsigned int)dword_40DF0B,\n        dword_403263);\n      if ( v168 != 1 )\n      {\n        gimp_displays_flush();\n        if ( !v168 )\n          gimp_procedural_db_set_data(\"plug-in-small-tiles\", &dword_403BED, 4i64);\n      }\n    }\n    else\n    {\n      v164 = 0;\n    }\n    dword_40DE18 = v164;\n    return gimp_drawable_detach(v165);\n  }\n  v152 = libintl_gettext(\"Region selected for filter is empty.\");\n  return g_log(0i64, 32i64, v152);\n}\n// 401052: variable 'v15' is possibly undefined\n// 407966: using guessed type __int64 sub_407966();\n// 405680: using guessed type __int64 sub_405680(void);\n// 4051F2: using guessed type __int64 sub_4051F2();\n// 401D14: using guessed type __int64 sub_401D14();\n// 409E8A: using guessed type __int64 sub_409E8A();\n// 40F09D: using guessed type __int64 sub_40F09D();\n// 40AB6E: using guessed type __int64 __fastcall gimp_window_set_transient(_QWORD);\n// 404D44: using guessed type __int64 __fastcall _IAT_start__(_QWORD, _QWORD);\n// 4046F6: using guessed type __int64 __fastcall gimp_tile_cache_ntiles(_QWORD);\n// 40E457: using guessed type __int64 gimp_progress_update(void);\n// 409E34: using guessed type __int64 __fastcall gimp_progress_init(_QWORD);\n// 402B5B: using guessed type __int64 __fastcall gimp_procedural_db_set_data(_QWORD, _QWORD, _QWORD);\n// 40E024: using guessed type __int64 __fastcall gimp_procedural_db_get_data(_QWORD, _QWORD);\n// 40FE76: using guessed type __int64 __fastcall gimp_pixel_rgns_register(_QWORD, _QWORD);\n// 40E7E9: using guessed type __int64 __fastcall gimp_pixel_rgns_process(_QWORD);\n// 40CC1D: using guessed type __int64 __fastcall gimp_pixel_rgn_init(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD, _DWORD, _DWORD);\n// 40C2C8: using guessed type __int64 __fastcall gimp_pixel_rgn_get_row(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 40BC82: using guessed type __int64 __fastcall gimp_pixel_fetcher_new(_QWORD, _QWORD);\n// 40892B: using guessed type __int64 __fastcall gimp_pixel_fetcher_get_pixel(_QWORD, _QWORD, _QWORD, _QWORD);\n// 40A697: using guessed type __int64 __fastcall gimp_pixel_fetcher_destroy(_QWORD);\n// 40DB11: using guessed type __int64 __fastcall gimp_drawable_update(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 4000D4: using guessed type __int64 __fastcall gimp_drawable_merge_shadow(_QWORD, _QWORD);\n// 400C28: using guessed type __int64 __fastcall gimp_drawable_mask_intersect(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);\n// 4028E4: using guessed type __int64 __fastcall gimp_drawable_is_rgb(_QWORD, _QWORD);\n// 40C391: using guessed type __int64 __fastcall gimp_drawable_is_gray(_QWORD);\n// 40F880: using guessed type __int64 __fastcall gimp_drawable_has_alpha(_QWORD);\n// 409317: using guessed type __int64 __fastcall gimp_drawable_get(_QWORD);\n// 405766: using guessed type __int64 __fastcall gimp_drawable_flush(_QWORD);\n// 40F35D: using guessed type __int64 __fastcall gimp_drawable_detach(_QWORD);\n// 40C011: using guessed type __int64 __fastcall gimp_drawable_bpp(_QWORD);\n// 401630: using guessed type __int64 gimp_displays_flush(void);\n// 4002EC: using guessed type __int64 __fastcall gtk_box_new(_QWORD, _QWORD);\n// 405F73: using guessed type __int64 __fastcall gimp_spin_button_new(_QWORD);\n// 40AC54: using guessed type __int64 __fastcall gimp_scale_entry_new(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD);\n// 408B8F: using guessed type __int64 gimp_preview_area_new(void);\n// 40972F: using guessed type __int64 __fastcall gimp_frame_new(_QWORD);\n// 40FE82: using guessed type __int64 __fastcall gimp_dialog_run(_QWORD);\n// 40785A: using guessed type __int64 __fastcall gimp_dialog_new(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD, _DWORD, _QWORD);\n// 40A69C: using guessed type __int64 gimp_dialog_get_type(void);\n// 40F4C5: using guessed type __int64 gimp_locale_directory(void);\n// 401FFB: using guessed type __int64 gtk_window_get_type(void);\n// 406892: using guessed type __int64 __fastcall gtk_widget_show(_QWORD);\n// 40492D: using guessed type __int64 __fastcall gtk_widget_set_size_request(_QWORD, _QWORD, _QWORD);\n// 40B6E7: using guessed type __int64 __fastcall gtk_widget_set_sensitive(_QWORD, _QWORD);\n// 40D0B2: using guessed type __int64 __fastcall gtk_widget_set_events(_QWORD, _QWORD);\n// 40463A: using guessed type __int64 gtk_widget_get_type(void);\n// 40E2DE: using guessed type __int64 __fastcall gtk_widget_destroy(_QWORD);\n// 409CC1: using guessed type __int64 __fastcall gtk_table_set_row_spacings(_QWORD, _QWORD);\n// 40D8D8: using guessed type __int64 __fastcall gtk_table_set_col_spacings(_QWORD, _QWORD);\n// 40EBDE: using guessed type __int64 __fastcall gtk_table_new(_QWORD, _QWORD, _QWORD);\n// 40E10A: using guessed type __int64 gtk_table_get_type(void);\n// 406943: using guessed type __int64 __fastcall gtk_table_attach(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);\n// 405E93: using guessed type __int64 __fastcall gtk_radio_button_new_with_mnemonic(_QWORD, _QWORD);\n// 40392A: using guessed type __int64 gtk_radio_button_get_type(void);\n// 40E298: using guessed type __int64 __fastcall gtk_radio_button_get_group(_QWORD);\n// 409BC0: using guessed type __int64 __fastcall gtk_misc_set_alignment(_QWORD);\n// 40AAF4: using guessed type __int64 gtk_misc_get_type(void);\n// 4045B7: using guessed type __int64 __fastcall gtk_label_set_mnemonic_widget(_QWORD, _QWORD);\n// 401B15: using guessed type __int64 __fastcall gtk_label_new_with_mnemonic(_QWORD);\n// 40B4DA: using guessed type __int64 gtk_label_get_type(void);\n// 40BF73: using guessed type __int64 __fastcall gtk_frame_set_shadow_type(_QWORD, _QWORD);\n// 40A94A: using guessed type __int64 __fastcall gtk_frame_new(_QWORD);\n// 4063EF: using guessed type __int64 gtk_frame_get_type(void);\n// 40FCFD: using guessed type __int64 __fastcall gtk_dialog_set_alternative_button_order(_QWORD, _QWORD, _QWORD, _QWORD);\n// 40149C: using guessed type __int64 gtk_dialog_get_type(void);\n// 40E531: using guessed type __int64 __fastcall gtk_dialog_get_content_area(_QWORD);\n// 40CD15: using guessed type __int64 __fastcall gtk_container_set_border_width(_QWORD, _QWORD);\n// 40FAAE: using guessed type __int64 gtk_container_get_type(void);\n// 40CE80: using guessed type __int64 __fastcall gtk_container_add(_QWORD, _QWORD);\n// 40E4C7: using guessed type __int64 __fastcall gtk_check_button_new_with_mnemonic(_QWORD);\n// 408242: using guessed type __int64 __fastcall gtk_button_new_from_stock(_QWORD);\n// 40AAD4: using guessed type __int64 __fastcall gtk_box_set_homogeneous(_QWORD, _QWORD);\n// 40BC05: using guessed type __int64 __fastcall gtk_box_pack_start(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 40465F: using guessed type __int64 gtk_box_get_type(void);\n// 40EF43: using guessed type __int64 __fastcall g_type_check_instance_cast(_QWORD, _QWORD);\n// 408C90: using guessed type __int64 __fastcall g_signal_connect_data(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 40AAE9: using guessed type __int64 __fastcall g_object_set_data(_QWORD, _QWORD, _QWORD);\n// 408F60: using guessed type double __fastcall g_object_bind_property(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 403528: using guessed type __int64 __fastcall g_malloc(_QWORD);\n// 40E1CB: using guessed type __int64 __fastcall g_log(_QWORD, _QWORD, _QWORD);\n// 4072B8: using guessed type __int64 __fastcall g_free(_QWORD);\n// 407165: using guessed type __int64 __fastcall libintl_textdomain(_QWORD);\n// 40D366: using guessed type __int64 __fastcall libintl_gettext(_QWORD);\n// 40FCE7: using guessed type __int64 __fastcall libintl_bindtextdomain(_QWORD, _QWORD);\n// 4054D2: using guessed type __int64 __fastcall libintl_bind_textdomain_codeset(_QWORD, _QWORD);\n// 407459: using guessed type int dword_407459;\n// 40D4DF: using guessed type int dword_40D4DF;\n// 404544: using guessed type __int64 qword_404544;\n// 409BA3: using guessed type __int64 qword_409BA3;\n// 40338B: using guessed type __int64 qword_40338B;\n// 403BED: using guessed type int dword_403BED;\n// 40F618: using guessed type __int64 qword_40F618;\n// 40EB3E: using guessed type int dword_40EB3E;\n// 40296B: using guessed type __int64 qword_40296B;\n// 40D67F: using guessed type int dword_40D67F;\n// 40DE18: using guessed type int dword_40DE18;\n// 404BB3: using guessed type int dword_404BB3;\n// 402C7B: using guessed type int dword_402C7B;\n// 404ED0: using guessed type int dword_404ED0;\n// 403263: using guessed type int dword_403263;\n// 40DF0B: using guessed type int dword_40DF0B;\n// 402DE5: using guessed type int dword_402DE5;\n// 40DC33: using guessed type int dword_40DC33;\n// 40D0DF: using guessed type int dword_40D0DF;\n// 40E7CD: using guessed type int dword_40E7CD;\n// 407A2D: using guessed type _DWORD dword_407A2D[36];\n// 4083C8: using guessed type __int64 qword_4083C8;\n// 405DDA: using guessed type __int64 qword_405DDA;\n// 4034A5: using guessed type __int64 qword_4034A5;\n// 40FAD5: using guessed type char var_C8[16];\n\n"
    },
    {
        "Function": "sub_40F0AF",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n// write access to const memory has been detected, the output may be wrong!\n__int64 sub_40F0AF()\n{\n  BOOL v0; // edx\n  __int16 v2; // cx\n\n  v0 = 0;\n  unk_406EE7 = 1;\n  unk_403B90 = 1;\n  unk_40D790 = 1;\n  unk_401827 = 1;\n  if ( ME7909[0x40F0D8] == 23117 && *(_DWORD *)(ME7909[0x40B15B] + 0x40F0D8i64) == 17744 )\n  {\n    v2 = *(_WORD *)(ME7909[0x40B15B] + 0x40D2CCi64);\n    if ( v2 == 267 )\n    {\n      if ( *(_DWORD *)(ME7909[0x40B15B] + 0x40F067i64) > 0xEu )\n        v0 = *(_DWORD *)(ME7909[0x40B15B] + 0x40DE97i64) != 0;\n    }\n    else if ( v2 == 523 && *(_DWORD *)(ME7909[0x40B15B] + 0x4066F1i64) > 0xEu )\n    {\n      v0 = *(_DWORD *)(ME7909[0x40B15B] + 0x406AA7i64) != 0;\n    }\n  }\n  dword_40D41E = v0;\n  if ( unk_406D3B )\n    _set_app_type(_crt_gui_app);\n  else\n    _set_app_type(_crt_console_app);\n  qword_40286F = sub_40A4BC(-1i64);\n  qword_4092BB = qword_40286F;\n  _fmode = unk_400F6D;\n  sub_4063AE();\n  if ( unk_403991 == 1 )\n    sub_40324E((_UserMathErrorFunctionPointer)sub_4024B7);\n  return 0i64;\n}\n// 4023EB: write access to const memory at 4046F5 has been detected\n// 40F0AF: using guessed type __int64 sub_40F0AF();\n// 4063AE: using guessed type __int64 sub_4063AE(void);\n// 40D41E: using guessed type int dword_40D41E;\n// 4092BB: using guessed type __int64 qword_4092BB;\n// 40286F: using guessed type __int64 qword_40286F;\n\n"
    },
    {
        "Function": "sub_408E00",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_408E00()\n{\n  __int64 result; // rax\n\n  dword_4099E8 = unk_406F52;\n  result = _getmainargs(&argc, &argv, &envp, unk_406EF5, &dword_4099E8);\n  dword_40A41A = result;\n  return result;\n}\n// 408E00: using guessed type __int64 sub_408E00();\n// 40EC64: using guessed type __int64 __fastcall _getmainargs(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);\n// 4099E8: using guessed type int dword_4099E8;\n// 40A41A: using guessed type int dword_40A41A;\n\n"
    },
    {
        "Function": "sub_40F27E",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_40F27E()\n{\n  unk_406D3B = 0;\n  sub_4000A2();\n  return sub_401FD0();\n}\n// 401FD0: using guessed type __int64 sub_401FD0(void);\n// 40F27E: using guessed type __int64 sub_40F27E();\n\n"
    },
    {
        "Function": "sub_4078A5",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid sub_4078A5()\n{\n  ;\n}\n\n"
    },
    {
        "Function": "sub_4028CA",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_4028CA()\n{\n  HME51CE ModuleHandleA; // rax\n  FAFB8CC ProcAddress; // rax\n\n  if ( qword_40156D )\n  {\n    ModuleHandleA = GetModuleHandleA(\"libgcj-16.dll\");\n    if ( ModuleHandleA )\n    {\n      ProcAddress = GetProcAddress(ModuleHandleA, \"_Jv_RegisterClasses\");\n      if ( ProcAddress )\n        ((void (__fastcall *)(__int64 *))ProcAddress)(&qword_40156D);\n    }\n    else\n    {\n      ((void (__fastcall *)(__int64 *))sub_4078A5)(&qword_40156D);\n    }\n  }\n  return sub_404638((int (__cdecl *)())sub_40733E);\n}\n// 4028CA: using guessed type __int64 sub_4028CA();\n// 40156D: using guessed type __int64 qword_40156D;\n\n"
    },
    {
        "Function": "sub_40733E",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid sub_40733E()\n{\n  ;\n}\n\n"
    },
    {
        "Function": "sub_40025D",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_40025D()\n{\n  _DWORD *v0; // r10\n  int v1; // r8d\n  int v2; // r9d\n  __int64 result; // rax\n  _DWORD *v4; // rdx\n\n  v0 = &unk_407A2D;\n  v1 = 0;\n  v2 = (dword_40E7CD != 0) | (dword_40D0DF != 0 ? 2 : 0);\n  do\n  {\n    LOFA4CD(result) = v1;\n    v4 = v0;\n    do\n    {\n      if ( (result & 1) == 0 )\n        *v4 |= v2;\n      result = (unsigned int)(result + 1);\n      ++v4;\n    }\n    while ( (_DWORD)result != v1 + 6 );\n    ++v1;\n    v0 += 6;\n  }\n  while ( v1 != 6 );\n  return result;\n}\n// 40025D: using guessed type __int64 sub_40025D();\n// 40D0DF: using guessed type int dword_40D0DF;\n// 40E7CD: using guessed type int dword_40E7CD;\n\n"
    },
    {
        "Function": "sub_406295",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 __fastcall sub_406295(int a1)\n{\n  __int64 type; // rsi\n  __int64 v3; // rax\n  int v4; // ebx\n  __int64 v5; // rax\n  __int64 result; // rax\n  int v7; // edx\n\n  type = gtk_adjustment_get_type();\n  v3 = g_type_check_instance_cast(qword_404544, type);\n  v4 = (int)(gtk_adjustment_get_value(v3) + 0.5);\n  if ( v4 <= 0 || v4 > dword_403BED )\n    v4 = dword_403BED;\n  v5 = g_type_check_instance_cast(qword_409BA3, type);\n  result = (unsigned int)(int)(gtk_adjustment_get_value(v5) + 0.5);\n  if ( (int)result <= 0 || (int)result > dword_403BED )\n    result = (unsigned int)dword_403BED;\n  if ( a1 )\n  {\n    v7 = dword_40D0DF;\n    if ( dword_40D0DF )\n      v7 = 2;\n    dword_407A2D[6 * (int)result - 7 + v4] = (dword_40E7CD != 0) | v7;\n  }\n  dword_40BAD3 = result;\n  dword_401ABC = v4;\n  return result;\n}\n// 407D7D: using guessed type double __fastcall gtk_adjustment_get_value(_QWORD);\n// 40FA71: using guessed type __int64 gtk_adjustment_get_type(void);\n// 40EF43: using guessed type __int64 __fastcall g_type_check_instance_cast(_QWORD, _QWORD);\n// 40BAD3: using guessed type int dword_40BAD3;\n// 401ABC: using guessed type int dword_401ABC;\n// 404544: using guessed type __int64 qword_404544;\n// 409BA3: using guessed type __int64 qword_409BA3;\n// 403BED: using guessed type int dword_403BED;\n// 40D0DF: using guessed type int dword_40D0DF;\n// 40E7CD: using guessed type int dword_40E7CD;\n// 407A2D: using guessed type _DWORD dword_407A2D[36];\n\n"
    }
]