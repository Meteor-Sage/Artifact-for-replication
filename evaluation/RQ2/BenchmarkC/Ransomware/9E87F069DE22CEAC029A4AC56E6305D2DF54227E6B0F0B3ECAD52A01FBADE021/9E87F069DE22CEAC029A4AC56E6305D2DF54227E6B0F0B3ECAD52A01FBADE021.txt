[
    {
        "Function": "sub_40CB80",
        "Total XOR and shift operations": 30,
        "XOR operations": 21,
        "Shift operations": 9,
        "Operation percentage": "44.78%",
        "Function Body": "\nunsigned int __thiscall sub_40CB80(_DWORD *this)\n{\n  _DWORD *v2; // edx\n  int v3; // esi\n  int v4; // ecx\n  unsigned int v5; // ecx\n  _DWORD *v6; // esi\n  int v7; // ebx\n  int v8; // ecx\n  unsigned int v9; // ecx\n  int *v10; // esi\n  int v11; // ebx\n  int v12; // ecx\n  unsigned int v13; // ecx\n  unsigned int v14; // edx\n  int v15; // edx\n  unsigned int v16; // edx\n\n  if ( *this == 624 )\n  {\n    v2 = this + 2;\n    v3 = 624;\n    do\n    {\n      v4 = *(v2++ - 1);\n      v5 = *(v2 - 2) ^ (*(v2 - 1) ^ v4) & 0x7FFFFFFF;\n      v2[622] = (v5 >> 1) ^ v2[395] ^ ((v5 & 1) != 0 ? 0x9908B0DF : 0);\n      --v3;\n    }\n    while ( v3 );\n  }\n  else if ( *this >= 0x4E0u )\n  {\n    v6 = this + 625;\n    v7 = 227;\n    do\n    {\n      v8 = v6[1];\n      ++v6;\n      v9 = *(v6 - 1) ^ (*(v6 - 1) ^ v8) & 0x7FFFFFFF;\n      *(v6 - 625) = (v9 >> 1) ^ v6[396] ^ ((v9 & 1) != 0 ? 0x9908B0DF : 0);\n      --v7;\n    }\n    while ( v7 );\n    v10 = this + 852;\n    v11 = 396;\n    do\n    {\n      v12 = *v10++;\n      v13 = *(v10 - 1) ^ (*v10 ^ v12) & 0x7FFFFFFF;\n      *(v10 - 625) = (v13 >> 1) ^ *(v10 - 852) ^ ((v13 & 1) != 0 ? 0x9908B0DF : 0);\n      --v11;\n    }\n    while ( v11 );\n    this[624] = ((this[1248] ^ (this[1] ^ this[1248]) & 0x7FFFFFFFu) >> 1) ^ this[397] ^ ((this[1] & 1) != 0\n                                                                                        ? 0x9908B0DF\n                                                                                        : 0);\n    *this = 0;\n  }\n  v14 = this[++*this];\n  v15 = (v14 >> 11) & this[1249] ^ v14;\n  v16 = (((((v15 & 0xFF3A58AD) << 7) ^ v15) & 0xFFFFDF8C) << 15) ^ ((v15 & 0xFF3A58AD) << 7) ^ v15;\n  return v16 ^ (v16 >> 18);\n}\n\n"
    },
    {
        "Function": "sub_4127F0",
        "Total XOR and shift operations": 78,
        "XOR operations": 28,
        "Shift operations": 50,
        "Operation percentage": "36.62%",
        "Function Body": "\nvoid __thiscall sub_4127F0(_DWORD *this, int a2, int a3)\n{\n  unsigned __int8 *v3; // ebx\n  int i; // edi\n  unsigned __int64 v5; // rt0\n  __int64 v6; // rax\n  char *v7; // eax\n  unsigned __int64 v8; // rcx\n  __int64 v9; // rdi\n  unsigned __int64 v10; // rt0\n  unsigned int v11; // edx\n  unsigned int v12; // edx\n  unsigned int v13; // edx\n  unsigned int v14; // kr08_4\n  unsigned __int64 v15; // kr18_8\n  bool v16; // zf\n  int v17; // edx\n  unsigned int v18; // esi\n  unsigned int v19; // ecx\n  unsigned int v20; // edx\n  unsigned int v21; // ecx\n  unsigned __int64 v22; // kr10_8\n  unsigned int v23; // ebx\n  unsigned int v24; // edi\n  unsigned int v25; // eax\n  _DWORD *v26; // ecx\n  int v27; // esi\n  bool v28; // cf\n  unsigned int v29; // eax\n  int v30[28]; // [esp+10h] [ebp-2D8h]\n  char v31; // [esp+80h] [ebp-268h] BYREF\n  unsigned __int8 *v32; // [esp+290h] [ebp-58h]\n  int v33; // [esp+294h] [ebp-54h]\n  unsigned int v34; // [esp+298h] [ebp-50h]\n  unsigned int v35; // [esp+29Ch] [ebp-4Ch]\n  unsigned int v36; // [esp+2A0h] [ebp-48h]\n  _DWORD *v37; // [esp+2A4h] [ebp-44h]\n  int v38; // [esp+2A8h] [ebp-40h]\n  unsigned int v39; // [esp+2ACh] [ebp-3Ch]\n  unsigned int j; // [esp+2B0h] [ebp-38h]\n  unsigned int v41; // [esp+2B4h] [ebp-34h]\n  unsigned int v42; // [esp+2B8h] [ebp-30h]\n  unsigned int v43; // [esp+2BCh] [ebp-2Ch]\n  unsigned int v44; // [esp+2C0h] [ebp-28h]\n  unsigned int v45; // [esp+2C4h] [ebp-24h]\n  int v46; // [esp+2C8h] [ebp-20h]\n  unsigned int v47; // [esp+2CCh] [ebp-1Ch]\n  int v48; // [esp+2D0h] [ebp-18h]\n  unsigned int v49; // [esp+2D4h] [ebp-14h]\n  unsigned int v50; // [esp+2D8h] [ebp-10h]\n  __int64 v51; // [esp+2DCh] [ebp-Ch]\n  unsigned int v52; // [esp+2E4h] [ebp-4h]\n  unsigned int v53; // [esp+2F0h] [ebp+8h]\n  unsigned int v54; // [esp+2F0h] [ebp+8h]\n\n  v37 = this;\n  if ( a3 > 0 )\n  {\n    v3 = (unsigned __int8 *)(a2 + 2);\n    do\n    {\n      for ( i = 0; i < 16; ++i )\n      {\n        HIDWORD(v5) = (unsigned __int64)*(v3 - 2) >> 24;\n        LODWORD(v5) = *(v3 - 1) | (*(v3 - 2) << 8);\n        HIDWORD(v5) = v5 >> 24;\n        LODWORD(v5) = *v3 | ((_DWORD)v5 << 8);\n        HIDWORD(v5) = v5 >> 24;\n        LODWORD(v5) = v3[1] | ((_DWORD)v5 << 8);\n        HIDWORD(v5) = v5 >> 24;\n        LODWORD(v5) = v3[2] | ((_DWORD)v5 << 8);\n        HIDWORD(v5) = v5 >> 24;\n        LODWORD(v5) = v3[3] | ((_DWORD)v5 << 8);\n        HIDWORD(v5) = v5 >> 24;\n        LODWORD(v5) = v3[4] | ((_DWORD)v5 << 8);\n        v6 = v3[5];\n        v3 += 8;\n        v30[2 * i + 1] = HIDWORD(v6) | (v5 >> 24);\n        v30[2 * i] = v6 | ((_DWORD)v5 << 8);\n      }\n      v32 = v3;\n      v7 = &v31;\n      v49 = 64;\n      do\n      {\n        v8 = *(_QWORD *)v7;\n        v9 = *(_QWORD *)v7 << 13;\n        v52 = (*((_DWORD *)v7 + 1) >> 19) | v9;\n        LODWORD(v10) = *(_DWORD *)v7;\n        HIDWORD(v10) = HIDWORD(v8);\n        v53 = (v10 >> 6) ^ (__SPAIR64__(v8, HIDWORD(v8)) >> 29) ^ HIDWORD(v9);\n        v11 = *((_DWORD *)v7 - 25);\n        v52 ^= (HIDWORD(v8) >> 6) ^ (v8 >> 29);\n        LODWORD(v10) = *((_DWORD *)v7 - 26);\n        HIDWORD(v10) = v11;\n        HIDWORD(v9) = (v11 >> 8) | ((_DWORD)v10 << 24);\n        v12 = *((_DWORD *)v7 - 25);\n        LODWORD(v8) = *((_QWORD *)v7 - 13) >> 1;\n        v45 = HIDWORD(v9);\n        HIDWORD(v8) = (*((_QWORD *)v7 - 14)\n                     + __PAIR64__(\n                         (*((_DWORD *)v7 - 25) >> 7) ^ ((v12 >> 1) | ((_DWORD)v10 << 31)) ^ HIDWORD(v9),\n                         (*((_QWORD *)v7 - 13) >> 7) ^ v8 ^ (v10 >> 8))\n                     + __PAIR64__(v52, v53)) >> 32;\n        v13 = *((_DWORD *)v7 - 28) + ((*((_QWORD *)v7 - 13) >> 7) ^ v8 ^ (v10 >> 8)) + v53;\n        v14 = *((_DWORD *)v7 - 10);\n        *((_DWORD *)v7 + 4) = v14 + v13;\n        v15 = __PAIR64__(HIDWORD(v8), v14) + __PAIR64__(*((_DWORD *)v7 - 9), v13);\n        v7 += 8;\n        v16 = v49-- == 1;\n        *((_DWORD *)v7 + 3) = HIDWORD(v15);\n      }\n      while ( !v16 );\n      v17 = v37[67];\n      v18 = v37[75];\n      v34 = v37[66];\n      v44 = v37[68];\n      v48 = v37[69];\n      v47 = v37[70];\n      v46 = v37[71];\n      v39 = v37[72];\n      v38 = v37[73];\n      v43 = v37[76];\n      v42 = v37[77];\n      v41 = v37[78];\n      v19 = v37[79];\n      v33 = v17;\n      v51 = __PAIR64__(v34, v17);\n      v20 = v37[74];\n      v52 = v19;\n      v21 = v37[80];\n      v49 = v37[81];\n      v50 = v20;\n      v54 = v18;\n      v45 = v21;\n      for ( j = 0; (int)j < 640; j += 8 )\n      {\n        v22 = __PAIR64__(v49, v45)\n            + __PAIR64__(v30[j / 4 + 1], v30[j / 4])\n            + __PAIR64__(SHA512_Constants_4428BC[j / 4], SHA512_Constants_4428B8[j / 4])\n            + __PAIR64__(v54 & v42 ^ v52 & ~v54, v50 & v43 ^ v41 & ~v50)\n            + __PAIR64__(\n                ((v54 >> 14) | (v50 << 18)) ^ ((v54 >> 18) | (v20 << 14)) ^ (__PAIR64__(v18, v20) >> 9),\n                (__PAIR64__(v54, v50) >> 14) ^ (__PAIR64__(v54, v50) >> 18) ^ ((v20 << 23) | (v18 >> 9)));\n        v35 = HIDWORD(v22);\n        v36 = v22;\n        v45 = v41;\n        v49 = v52;\n        v18 = v35 + __CFADD__(v36, v39) + v38;\n        v41 = v43;\n        v23 = (__PAIR64__(v35, v36)\n             + __PAIR64__(\n                 (__PAIR64__(v51, HIDWORD(v51)) >> 7) ^ (__PAIR64__(v51, HIDWORD(v51)) >> 2) ^ (v51 >> 28),\n                 v47 & v44 ^ HIDWORD(v51) & (v47 ^ v44))\n             + __PAIR64__(\n                 v46 & v48 ^ (unsigned int)v51 & (v46 ^ v48),\n                 (v51 >> 7) ^ (v51 >> 2) ^ (__PAIR64__(v51, HIDWORD(v51)) >> 28))) >> 32;\n        v24 = v36\n            + (v47 & v44 ^ HIDWORD(v51) & (v47 ^ v44))\n            + ((v51 >> 7) ^ (v51 >> 2) ^ (__PAIR64__(v51, HIDWORD(v51)) >> 28));\n        v52 = v42;\n        v25 = v50;\n        v50 = v36 + v39;\n        v39 = v47;\n        v38 = v46;\n        v43 = v25;\n        v47 = v44;\n        v42 = v54;\n        v46 = v48;\n        v44 = HIDWORD(v51);\n        v48 = v51;\n        v20 = v50;\n        v54 = v18;\n        v51 = __PAIR64__(v24, v23);\n      }\n      v26 = v37;\n      v27 = v33;\n      v28 = __CFADD__(v24, v34);\n      v37[66] = v24 + v34;\n      v29 = v44;\n      v26[67] = v23 + v28 + v27;\n      v28 = __CFADD__(v29, v26[68]);\n      v26[68] += v29;\n      v26[69] += v48 + v28;\n      v28 = __CFADD__(v47, v26[70]);\n      v26[70] += v47;\n      v26[71] += v46 + v28;\n      v28 = __CFADD__(v39, v26[72]);\n      v26[72] += v39;\n      v26[73] += v38 + v28;\n      v28 = __CFADD__(v20, v26[74]);\n      v26[74] += v20;\n      v26[75] += v54 + v28;\n      v28 = __CFADD__(v43, v26[76]);\n      v26[76] += v43;\n      v26[77] += v42 + v28;\n      v28 = __CFADD__(v41, v26[78]);\n      v26[78] += v41;\n      v26[79] += v52 + v28;\n      v28 = __CFADD__(v45, v26[80]);\n      v26[80] += v45;\n      v26[81] += v49 + v28;\n      v16 = a3-- == 1;\n      v3 = v32;\n    }\n    while ( !v16 );\n  }\n}\n// 4428B8: using guessed type int SHA512_Constants_4428B8[];\n// 4428BC: using guessed type int SHA512_Constants_4428BC[];\n\n"
    },
    {
        "Function": "sub_4113C0",
        "Total XOR and shift operations": 51,
        "XOR operations": 48,
        "Shift operations": 3,
        "Operation percentage": "26.02%",
        "Function Body": "\nint __thiscall sub_4113C0(_DWORD *this, int a2)\n{\n  int v2; // ebx\n  unsigned __int8 *v3; // eax\n  int *v4; // esi\n  int v5; // edi\n  int v6; // edx\n  int v7; // ecx\n  int v8; // edx\n  int v9; // esi\n  int v10; // edi\n  int v11; // ebx\n  int v12; // edx\n  int v13; // esi\n  int v14; // edi\n  int v15; // ebx\n  int v16; // edx\n  int v17; // esi\n  int v18; // edi\n  int v19; // edx\n  int v20; // edi\n  int v21; // ebx\n  int v22; // edi\n  int v23; // esi\n  int v24; // edx\n  int v25; // ebx\n  int v26; // edi\n  int v27; // esi\n  int v28; // edx\n  int v29; // ebx\n  int v30; // edi\n  int v31; // esi\n  int v32; // edx\n  int v33; // ebx\n  int v34; // edi\n  int v35; // edx\n  int v36; // esi\n  int v37; // edi\n  int v38; // ebx\n  int v39; // edx\n  int v40; // esi\n  int v41; // edi\n  int v42; // ebx\n  int v43; // edx\n  int v44; // esi\n  int v45; // edi\n  int v46; // ebx\n  int v47; // edx\n  int v48; // esi\n  int v49; // eax\n  int v50; // edi\n  int v51; // edx\n  int v52; // ecx\n  int v53; // esi\n  int v54; // edi\n  int v55; // edx\n  int v56; // ecx\n  int v57; // esi\n  int v58; // edi\n  int v59; // edx\n  int v60; // ecx\n  int v61; // esi\n  int v62; // edi\n  int v63; // edx\n  int v64; // ecx\n  int v65; // ebx\n  int v66; // edi\n  int v67; // edx\n  int v68; // esi\n  int v69; // edx\n  int v70; // ecx\n  int result; // eax\n  int v73; // [esp+10h] [ebp-58h]\n  int v74; // [esp+14h] [ebp-54h]\n  int v75; // [esp+14h] [ebp-54h]\n  int v76; // [esp+18h] [ebp-50h]\n  int v77; // [esp+18h] [ebp-50h]\n  int v78; // [esp+1Ch] [ebp-4Ch]\n  int v79; // [esp+1Ch] [ebp-4Ch]\n  int v80; // [esp+20h] [ebp-48h]\n  int v81; // [esp+20h] [ebp-48h]\n  int v82; // [esp+20h] [ebp-48h]\n  int v83; // [esp+24h] [ebp-44h] BYREF\n  int v84; // [esp+28h] [ebp-40h]\n  int v85; // [esp+2Ch] [ebp-3Ch]\n  int v86; // [esp+30h] [ebp-38h]\n  int v87; // [esp+34h] [ebp-34h]\n  int v88; // [esp+38h] [ebp-30h]\n  int v89; // [esp+3Ch] [ebp-2Ch]\n  int v90; // [esp+40h] [ebp-28h]\n  int v91; // [esp+44h] [ebp-24h]\n  int v92; // [esp+48h] [ebp-20h]\n  int v93; // [esp+4Ch] [ebp-1Ch]\n  int v94; // [esp+50h] [ebp-18h]\n  int v95; // [esp+54h] [ebp-14h]\n  int v96; // [esp+58h] [ebp-10h]\n  int v97; // [esp+5Ch] [ebp-Ch]\n  int v98; // [esp+60h] [ebp-8h]\n\n  v2 = this[20];\n  v78 = this[22];\n  v76 = this[21];\n  v3 = (unsigned __int8 *)(a2 + 2);\n  v73 = this[19];\n  v4 = &v83;\n  v5 = 16;\n  do\n  {\n    v6 = v3[1];\n    ++v4;\n    v7 = *v3;\n    v3 += 4;\n    *(v4 - 1) = *(v3 - 6) | ((*(v3 - 5) | ((v7 | (v6 << 8)) << 8)) << 8);\n    --v5;\n  }\n  while ( v5 );\n  v8 = v2 + __ROL4__(v83 + (v2 & v76 | v78 & ~v2) + v73 - 680876936, 7);\n  v9 = v8 + __ROL4__(v84 + (v8 & v2 | v76 & ~v8) + v78 - 389564586, 12);\n  v10 = v9 + __ROR4__(v85 + (v8 & v9 | v2 & ~v9) + v76 + 606105819, 15);\n  v11 = v10 + __ROR4__(v86 + (v10 & v9 | v8 & ~v10) + v2 - 1044525330, 10);\n  v12 = v11 + __ROL4__(v87 + (v11 & v10 | v9 & ~v11) - 176418897 + v8, 7);\n  v13 = v12 + __ROL4__(v88 + (v12 & v11 | v10 & ~v12) + 1200080426 + v9, 12);\n  v14 = v13 + __ROR4__(v89 + (v12 & v13 | v11 & ~v13) - 1473231341 + v10, 15);\n  v15 = v14 + __ROR4__(v90 + (v14 & v13 | v12 & ~v14) - 45705983 + v11, 10);\n  v16 = v15 + __ROL4__(v91 + (v15 & v14 | v13 & ~v15) + 1770035416 + v12, 7);\n  v17 = v16 + __ROL4__(v92 + (v16 & v15 | v14 & ~v16) - 1958414417 + v13, 12);\n  v18 = __ROR4__(v93 + (v16 & v17 | v15 & ~v17) - 42063 + v14, 15);\n  v77 = v17 + v18;\n  v74 = v17 + v18 + __ROR4__(v94 + (v77 & v17 | v16 & ~v77) - 1990404162 + v15, 10);\n  v19 = __ROL4__(v95 + (v74 & (v17 + v18) | v17 & ~v74) + 1804603682 + v16, 7);\n  v79 = v74 + v19;\n  v20 = __ROL4__(v96 + (v79 & v74 | (v17 + v18) & ~v79) + v17 - 40341101, 12);\n  v80 = v74 + v19 + v20;\n  v21 = v80 + __ROR4__(v97 + (v79 & (v79 + v20) | v74 & ~(v79 + v20)) + v77 - 1502002290, 15);\n  v22 = v21 + __ROR4__(v98 + (v21 & v80 | (v74 + v19) & ~v21) + v74 + 1236535329, 10);\n  v23 = v22 + __ROL4__(v74 + v19 - 165796510 + v84 + (v22 & v80 | v21 & ~v80), 5);\n  v24 = v23 + __ROL4__(v80 - 1069501632 + v89 + (v23 & v21 | v22 & ~v21), 9);\n  v25 = v24 + __ROL4__(v94 + (v22 & v24 | v23 & ~v22) + 643717713 + v21, 14);\n  v26 = v25 + __ROR4__(v83 + (v23 & v25 | v24 & ~v23) - 373897302 + v22, 12);\n  v27 = v26 + __ROL4__(v88 + (v26 & v24 | v25 & ~v24) - 701558691 + v23, 5);\n  v28 = v27 + __ROL4__(v93 + (v27 & v25 | v26 & ~v25) + 38016083 + v24, 9);\n  v29 = v28 + __ROL4__(v98 + (v26 & v28 | v27 & ~v26) - 660478335 + v25, 14);\n  v30 = v29 + __ROR4__(v87 + (v27 & v29 | v28 & ~v27) - 405537848 + v26, 12);\n  v31 = v30 + __ROL4__(v92 + (v30 & v28 | v29 & ~v28) + 568446438 + v27, 5);\n  v32 = __ROL4__(v97 + (v31 & v29 | v30 & ~v29) - 1019803690 + v28, 9);\n  v81 = v31 + v32;\n  v33 = v31 + v32 + __ROL4__(v86 + (v30 & (v31 + v32) | v31 & ~v30) - 187363961 + v29, 14);\n  v34 = __ROR4__(v91 + (v31 & v33 | (v31 + v32) & ~v31) + 1163531501 + v30, 12);\n  v75 = v33 + v34;\n  v35 = v33 + v34 + __ROL4__(v96 + ((v33 + v34) & v81 | v33 & ~v81) + v31 - 1444681467, 5);\n  v36 = v35 + __ROL4__(v85 + (v35 & v33 | (v33 + v34) & ~v33) + v81 - 51403784, 9);\n  v37 = v36 + __ROL4__(v90 + ((v33 + v34) & v36 | v35 & ~(v33 + v34)) + v33 + 1735328473, 14);\n  v38 = v37 + __ROR4__(v95 + (v35 & v37 | v36 & ~v35) + v75 - 1926607734, 12);\n  v39 = v38 + __ROL4__(v88 + (v38 ^ v37 ^ v36) - 378558 + v35, 4);\n  v40 = v39 + __ROL4__(v91 + (v39 ^ v38 ^ v37) - 2022574463 + v36, 11);\n  v41 = v40 + __ROL4__(v94 + (v39 ^ v38 ^ v40) + 1839030562 + v37, 16);\n  v42 = v41 + __ROR4__(v97 + (v39 ^ v41 ^ v40) - 35309556 + v38, 9);\n  v43 = v42 + __ROL4__(v84 + (v42 ^ v41 ^ v40) - 1530992060 + v39, 4);\n  v44 = v43 + __ROL4__(v87 + (v43 ^ v42 ^ v41) + 1272893353 + v40, 11);\n  v45 = v44 + __ROL4__(v90 + (v43 ^ v42 ^ v44) - 155497632 + v41, 16);\n  v46 = v45 + __ROR4__(v93 + (v43 ^ v45 ^ v44) - 1094730640 + v42, 9);\n  v47 = v46 + __ROL4__(v96 + (v46 ^ v45 ^ v44) + 681279174 + v43, 4);\n  v48 = v47 + __ROL4__(v83 + (v47 ^ v46 ^ v45) - 358537222 + v44, 11);\n  v49 = v47 - 640364487;\n  v50 = v48 + __ROL4__(v86 + (v47 ^ v46 ^ v48) - 722521979 + v45, 16);\n  v51 = v50 + __ROR4__(v46 + v89 + (v50 ^ v48 ^ v47) + 76029189, 9);\n  v52 = v51 + __ROL4__(v49 + v92 + (v51 ^ v50 ^ v48), 4);\n  v53 = v52 + __ROL4__(v95 + (v52 ^ v51 ^ v50) - 421815835 + v48, 11);\n  v54 = v53 + __ROL4__(v98 + (v52 ^ v51 ^ v53) + 530742520 + v50, 16);\n  v55 = v54 + __ROR4__(v85 + (v52 ^ v54 ^ v53) - 995338651 + v51, 9);\n  v56 = v55 + __ROL4__(v83 + (v54 ^ (v55 | ~v53)) - 198630844 + v52, 6);\n  v57 = v56 + __ROL4__(v90 + (v55 ^ (v56 | ~v54)) + 1126891415 + v53, 10);\n  v58 = v57 + __ROL4__(v97 + (v56 ^ (v57 | ~v55)) - 1416354905 + v54, 15);\n  v59 = v58 + __ROR4__(v88 + (v57 ^ (v58 | ~v56)) - 57434055 + v55, 11);\n  v60 = v59 + __ROL4__(v95 + (v58 ^ (v59 | ~v57)) + 1700485571 + v56, 6);\n  v61 = v60 + __ROL4__(v86 + (v59 ^ (v60 | ~v58)) - 1894986606 + v57, 10);\n  v62 = v61 + __ROL4__(v93 + (v60 ^ (v61 | ~v59)) - 1051523 + v58, 15);\n  v63 = v62 + __ROR4__(v84 + (v61 ^ (v62 | ~v60)) - 2054922799 + v59, 11);\n  v64 = v63 + __ROL4__(v91 + (v62 ^ (v63 | ~v61)) + 1873313359 + v60, 6);\n  v65 = v64 + __ROL4__(v98 + (v63 ^ (v64 | ~v62)) + v61 - 30611744, 10);\n  v66 = v65 + __ROL4__(v89 + (v64 ^ (v65 | ~v63)) - 1560198380 + v62, 15);\n  v67 = __ROR4__(v96 + (v65 ^ (v66 | ~v64)) + 1309151649 + v63, 11);\n  v82 = v66 + v67;\n  v68 = v66 + v67 + __ROL4__(v87 + (v66 ^ ((v66 + v67) | ~v65)) + v64 - 145523070, 6);\n  v69 = v68 + __ROL4__(v94 + ((v66 + v67) ^ (v68 | ~v66)) + v65 - 1120210379, 10);\n  v70 = v69 + __ROL4__(v85 + (v68 ^ (v69 | ~v82)) + v66 + 718787259, 15);\n  this[19] = v68 + v73;\n  this[21] += v70;\n  result = v70 + this[20] + __ROR4__(v92 + (v69 ^ (v70 | ~v68)) + v82 - 343485551, 11);\n  this[22] += v69;\n  this[20] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_412200",
        "Total XOR and shift operations": 16,
        "XOR operations": 11,
        "Shift operations": 5,
        "Operation percentage": "13.45%",
        "Function Body": "\nvoid __thiscall sub_412200(_DWORD *this, int a2, int a3)\n{\n  unsigned __int8 *v3; // eax\n  int i; // esi\n  int v5; // ecx\n  int v6; // edx\n  char *v7; // ebx\n  int v8; // eax\n  unsigned int v9; // edx\n  int v10; // esi\n  int v11; // ecx\n  int v12; // eax\n  int v13; // ebx\n  int v14; // edi\n  int v15; // edx\n  int v16; // ebx\n  _DWORD *v17; // ebx\n  int v18; // ecx\n  int v19[14]; // [esp+0h] [ebp-12Ch]\n  char v20; // [esp+38h] [ebp-F4h] BYREF\n  int v21; // [esp+100h] [ebp-2Ch]\n  unsigned __int8 *v22; // [esp+104h] [ebp-28h]\n  _DWORD *v23; // [esp+108h] [ebp-24h]\n  int v24; // [esp+10Ch] [ebp-20h]\n  int v25; // [esp+110h] [ebp-1Ch]\n  int v26; // [esp+114h] [ebp-18h]\n  unsigned int v27; // [esp+118h] [ebp-14h]\n  int v28; // [esp+11Ch] [ebp-10h]\n  int v29; // [esp+120h] [ebp-Ch]\n  int v30; // [esp+124h] [ebp-8h]\n  int v31; // [esp+128h] [ebp-4h]\n  int v32; // [esp+134h] [ebp+8h]\n\n  v23 = this;\n  if ( a3 > 0 )\n  {\n    v3 = (unsigned __int8 *)(a2 + 2);\n    do\n    {\n      for ( i = 0; i < 16; ++i )\n      {\n        v5 = v3[1];\n        v6 = (*v3 | ((*(v3 - 1) | (*(v3 - 2) << 8)) << 8)) << 8;\n        v3 += 4;\n        v19[i] = v5 | v6;\n      }\n      v22 = v3;\n      v7 = &v20;\n      v8 = 48;\n      do\n      {\n        v9 = *((_DWORD *)v7 - 13);\n        v7 += 4;\n        *((_DWORD *)v7 + 1) = *((_DWORD *)v7 - 6)\n                            + *((_DWORD *)v7 - 15)\n                            + ((*((_DWORD *)v7 - 1) >> 10) ^ __ROL4__(*((_DWORD *)v7 - 1), 13) ^ __ROL4__(\n                                                                                                   *((_DWORD *)v7 - 1),\n                                                                                                   15))\n                            + ((v9 >> 3) ^ __ROR4__(v9, 7) ^ __ROL4__(v9, 14));\n        --v8;\n      }\n      while ( v8 );\n      v27 = 0;\n      v10 = v23[34];\n      v11 = v23[35];\n      v21 = v10;\n      v32 = v23[36];\n      v26 = v23[37];\n      v30 = v23[39];\n      v29 = v23[40];\n      v12 = v23[41];\n      v28 = v11;\n      v13 = v23[38];\n      v24 = v12;\n      v3 = v22;\n      v31 = v10;\n      v25 = v13;\n      do\n      {\n        v14 = v24\n            + v19[v27 / 4]\n            + SHA512_Constants_4427B8[v27 / 4]\n            + (v13 & v30 ^ v29 & ~v13)\n            + (__ROR4__(v13, 6) ^ __ROL4__(v13, 7) ^ __ROR4__(v13, 11));\n        v24 = v29;\n        v10 = v14 + (v32 & v28 ^ v31 & (v32 ^ v28)) + (__ROR4__(v31, 2) ^ __ROL4__(v31, 10) ^ __ROR4__(v10, 13));\n        v15 = v31;\n        v29 = v30;\n        v30 = v13;\n        v16 = v26;\n        v26 = v32;\n        v13 = v14 + v16;\n        v32 = v28;\n        v28 = v31;\n        v31 = v10;\n        v27 += 4;\n      }\n      while ( (int)v27 < 256 );\n      v25 = v13;\n      v17 = v23;\n      v23[34] = v10 + v21;\n      v17[36] += v32;\n      v17[37] += v26;\n      v17[38] += v25;\n      v17[39] += v30;\n      v17[40] += v29;\n      v18 = v24;\n      v17[35] += v15;\n      v17[41] += v18;\n      --a3;\n    }\n    while ( a3 );\n  }\n}\n// 4427B8: using guessed type int SHA512_Constants_4427B8[];\n// 412200: using guessed type int var_12C[14];\n\n"
    },
    {
        "Function": "sub_40EA50",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "8.00%",
        "Function Body": "\nvoid __thiscall sub_40EA50(_BYTE *this)\n{\n  struct std::ios_base *v1; // esi\n\n  v1 = (struct std::ios_base *)(this + 104);\n  *(_DWORD *)((char *)v1 + *(_DWORD *)(*(_DWORD *)this + 4) - 104) = &std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vftable';\n  *(_DWORD *)((char *)v1 + *(_DWORD *)(*(_DWORD *)this + 4) - 108) = *(_DWORD *)(*(_DWORD *)this + 4) - 104;\n  sub_40F0B0(this + 24);\n  *(_DWORD *)((char *)v1 + *(_DWORD *)(*((_DWORD *)v1 - 26) + 4) - 104) = &std::iostream::`vftable';\n  *(_DWORD *)((char *)v1 + *(_DWORD *)(*((_DWORD *)v1 - 26) + 4) - 108) = *(_DWORD *)(*((_DWORD *)v1 - 26) + 4) - 32;\n  *(_DWORD *)((char *)v1 + *(_DWORD *)(*((_DWORD *)v1 - 22) + 4) - 88) = &std::ostream::`vftable';\n  *(_DWORD *)((char *)v1 + *(_DWORD *)(*((_DWORD *)v1 - 22) + 4) - 92) = *(_DWORD *)(*((_DWORD *)v1 - 22) + 4) - 8;\n  *(_DWORD *)((char *)v1 + *(_DWORD *)(*((_DWORD *)v1 - 26) + 4) - 104) = &std::istream::`vftable';\n  *(_DWORD *)((char *)v1 + *(_DWORD *)(*((_DWORD *)v1 - 26) + 4) - 108) = *(_DWORD *)(*((_DWORD *)v1 - 26) + 4) - 24;\n  *(_DWORD *)v1 = &std::ios_base::`vftable';\n  std::ios_base::_Ios_base_dtor(v1);\n}\n// 435FE0: using guessed type void *std::ios_base::`vftable';\n// 436070: using guessed type void *std::ostream::`vftable';\n// 442338: using guessed type void *std::iostream::`vftable';\n// 442350: using guessed type void *std::istream::`vftable';\n// 4423B8: using guessed type void *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vftable';\n\n"
    },
    {
        "Function": "sub_411AD0",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "5.26%",
        "Function Body": "\nvoid *__thiscall sub_411AD0(_DWORD *this, char *Src, unsigned int a3)\n{\n  unsigned int v4; // ecx\n  int v5; // esi\n  unsigned int v6; // edx\n  int v7; // edi\n  unsigned int i; // esi\n\n  v4 = a3;\n  v5 = (this[17] >> 3) & 0x3F;\n  v6 = this[17] + 8 * a3;\n  this[17] = v6;\n  if ( v6 < 8 * a3 )\n    ++this[18];\n  v7 = 64 - v5;\n  this[18] += a3 >> 29;\n  if ( a3 < 64 - v5 )\n  {\n    v7 = 0;\n  }\n  else\n  {\n    memmove_0((char *)this + v5 + 1, Src, 64 - v5);\n    sub_4113C0(this, (int)this + 1);\n    v4 = a3;\n    for ( i = v7 + 64; i <= a3; v7 += 64 )\n    {\n      sub_4113C0(this, (int)&Src[i - 64]);\n      v4 = a3;\n      i += 64;\n    }\n    v5 = 0;\n  }\n  return memmove_0((char *)this + v5 + 1, &Src[v7], v4 - v7);\n}\n\n"
    },
    {
        "Function": "sub_40AB30",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "5.00%",
        "Function Body": "\nunsigned int __thiscall sub_40AB30(_DWORD **this, unsigned __int8 *Src, __int64 a3)\n{\n  int v3; // edi\n  size_t v4; // esi\n  __int64 v5; // rax\n  size_t v6; // ebx\n  bool v7; // cf\n  unsigned int v9; // [esp+Ch] [ebp-14h]\n  unsigned int v10; // [esp+10h] [ebp-10h]\n  _DWORD **v11; // [esp+14h] [ebp-Ch]\n  int v12; // [esp+18h] [ebp-8h]\n\n  v3 = HIDWORD(a3);\n  v11 = this;\n  if ( a3 < 0 )\n    return 0;\n  v4 = a3;\n  if ( a3 <= 0 )\n    return 0;\n  v9 = 0;\n  v10 = 0;\n  do\n  {\n    v5 = sub_40BCE0(this);\n    v12 = HIDWORD(v5);\n    v6 = v5;\n    if ( v5 <= 0 )\n    {\n      if ( ((int (__thiscall *)(_DWORD **, _DWORD))(*v11)[3])(v11, *Src) == -1 )\n        return v10;\n      this = v11;\n      ++Src;\n      v9 = (__PAIR64__(v9, v10++) + 1) >> 32;\n      v3 = (__PAIR64__(v3, v4--) - 1) >> 32;\n    }\n    else\n    {\n      if ( __SPAIR64__(v3, v4) < v5 )\n      {\n        v6 = v4;\n        v12 = v3;\n      }\n      memmove_0((void *)*v11[8], Src, v6);\n      Src += v6;\n      v7 = __CFADD__(v6, v10);\n      v10 += v6;\n      v9 += v12 + v7;\n      this = v11;\n      v3 = (__PAIR64__(v3, v4) - __PAIR64__(v12, v6)) >> 32;\n      v4 -= v6;\n      *v11[12] -= v6;\n      *v11[8] += v6;\n    }\n  }\n  while ( v3 > 0 || v3 >= 0 && v4 );\n  return v10;\n}\n\n"
    },
    {
        "Function": "sub_40EC50",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "3.20%",
        "Function Body": "\nint __thiscall sub_40EC50(int this, int a2, __int64 a3, int a4, char a5)\n{\n  unsigned int *v6; // edx\n  unsigned int v7; // eax\n  int v8; // esi\n  int v9; // edi\n  int v10; // esi\n  int v11; // ecx\n  int v12; // ecx\n  int v13; // edx\n  int v14; // ecx\n  unsigned int v15; // edx\n  int v16; // ecx\n  int v17; // ecx\n  int result; // eax\n  int v19; // [esp+Ch] [ebp-4h]\n  int v20; // [esp+28h] [ebp+18h]\n\n  v6 = *(unsigned int **)(this + 32);\n  v7 = *v6;\n  if ( *v6 && *(_DWORD *)(this + 56) < v7 )\n    *(_DWORD *)(this + 56) = v7;\n  if ( (a5 & 1) == 0 || (v8 = **(_DWORD **)(this + 28), (v19 = v8) == 0) )\n  {\n    if ( (a5 & 2) != 0 && (v15 = *v6) != 0 )\n    {\n      if ( a4 == 2 )\n      {\n        v9 = (unsigned __int64)(*(_DWORD *)(this + 56) - **(_DWORD **)(this + 12) + a3) >> 32;\n        v10 = *(_DWORD *)(this + 56) - **(_DWORD **)(this + 12) + a3;\n      }\n      else if ( a4 == 1 )\n      {\n        v9 = (unsigned __int64)((int)(v15 - **(_DWORD **)(this + 12)) + a3) >> 32;\n        v10 = v15 - **(_DWORD **)(this + 12) + a3;\n      }\n      else if ( a4 )\n      {\n        v10 = -1;\n        v9 = -1;\n      }\n      else\n      {\n        v9 = HIDWORD(a3);\n        v10 = a3;\n      }\n      if ( v9 >= 0 )\n      {\n        v16 = **(_DWORD **)(this + 12);\n        if ( __SPAIR64__(v9, v10) <= *(_DWORD *)(this + 56) - v16 )\n        {\n          v17 = v10 + v16 - v15;\n          **(_DWORD **)(this + 48) -= v17;\n          **(_DWORD **)(this + 32) += v17;\n          goto LABEL_33;\n        }\n      }\n    }\n    else\n    {\n      v9 = HIDWORD(a3);\n      v10 = a3;\n      if ( !a3 )\n        goto LABEL_33;\n    }\nLABEL_32:\n    v10 = -1;\n    v9 = -1;\n    goto LABEL_33;\n  }\n  if ( a4 != 2 )\n  {\n    if ( a4 == 1 )\n    {\n      if ( (a5 & 2) == 0 )\n      {\n        v9 = (unsigned __int64)(v8 - **(_DWORD **)(this + 12) + a3) >> 32;\n        v10 = v8 - **(_DWORD **)(this + 12) + a3;\n        goto LABEL_14;\n      }\n    }\n    else if ( !a4 )\n    {\n      v9 = HIDWORD(a3);\n      v10 = a3;\n      goto LABEL_14;\n    }\n    v10 = -1;\n    v9 = -1;\n    goto LABEL_14;\n  }\n  v9 = (unsigned __int64)(*(_DWORD *)(this + 56) - **(_DWORD **)(this + 12) + a3) >> 32;\n  v10 = *(_DWORD *)(this + 56) - **(_DWORD **)(this + 12) + a3;\nLABEL_14:\n  if ( v9 < 0 )\n    goto LABEL_32;\n  v11 = **(_DWORD **)(this + 12);\n  if ( __SPAIR64__(v9, v10) > *(_DWORD *)(this + 56) - v11 )\n    goto LABEL_32;\n  v12 = v10 + v11 - v19;\n  **(_DWORD **)(this + 44) -= v12;\n  **(_DWORD **)(this + 28) += v12;\n  if ( (a5 & 2) != 0 )\n  {\n    v20 = **(_DWORD **)(this + 32);\n    if ( v20 )\n    {\n      v13 = **(_DWORD **)(this + 28);\n      v14 = v20 + **(_DWORD **)(this + 48) - v13;\n      **(_DWORD **)(this + 32) = v13;\n      **(_DWORD **)(this + 48) = v14;\n    }\n  }\nLABEL_33:\n  result = a2;\n  *(_DWORD *)(a2 + 4) = v9;\n  *(_DWORD *)a2 = v10;\n  *(_DWORD *)(a2 + 8) = 0;\n  *(_DWORD *)(a2 + 12) = 0;\n  *(_QWORD *)(a2 + 16) = 0i64;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40AC40",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "3.17%",
        "Function Body": "\nunsigned int __thiscall sub_40AC40(_DWORD **this, char *a2, __int64 a3)\n{\n  int v3; // edi\n  size_t v4; // esi\n  __int64 v5; // rax\n  size_t v6; // ebx\n  bool v7; // cf\n  int v8; // eax\n  unsigned int v10; // [esp+Ch] [ebp-14h]\n  unsigned int v11; // [esp+10h] [ebp-10h]\n  _DWORD **v12; // [esp+14h] [ebp-Ch]\n  int v13; // [esp+18h] [ebp-8h]\n\n  v3 = HIDWORD(a3);\n  v12 = this;\n  if ( a3 < 0 )\n    return 0;\n  v4 = a3;\n  if ( a3 <= 0 )\n    return 0;\n  v10 = 0;\n  v11 = 0;\n  do\n  {\n    v5 = sub_40BD00(this);\n    v13 = HIDWORD(v5);\n    v6 = v5;\n    if ( v5 <= 0 )\n    {\n      v8 = ((int (__thiscall *)(_DWORD **))(*v12)[7])(v12);\n      if ( v8 == -1 )\n        return v11;\n      *a2++ = v8;\n      v10 = (__PAIR64__(v10, v11++) + 1) >> 32;\n      v7 = v4-- != 0;\n      this = v12;\n      v3 = v7 + v3 - 1;\n    }\n    else\n    {\n      if ( __SPAIR64__(v3, v4) < v5 )\n      {\n        v6 = v4;\n        v13 = v3;\n      }\n      memmove_0(a2, (const void *)*v12[7], v6);\n      a2 += v6;\n      v7 = __CFADD__(v6, v11);\n      v11 += v6;\n      v10 += v13 + v7;\n      this = v12;\n      v3 = (__PAIR64__(v3, v4) - __PAIR64__(v13, v6)) >> 32;\n      v4 -= v6;\n      *v12[11] -= v6;\n      *v12[7] += v6;\n    }\n  }\n  while ( v3 > 0 || v3 >= 0 && v4 );\n  return v11;\n}\n\n"
    },
    {
        "Function": "sub_413130",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "2.97%",
        "Function Body": "\nvoid **__cdecl sub_413130(_DWORD *Src, int a2, int a3, int a4, size_t Size, unsigned int a6)\n{\n  int v6; // ecx\n  int v7; // ebx\n  size_t v8; // esi\n  _DWORD **p_Src; // eax\n  size_t v10; // edi\n  unsigned int v11; // edi\n  int *v12; // edi\n  unsigned int i; // esi\n  _DWORD *v14; // ecx\n  unsigned int v15; // eax\n  size_t v17; // [esp+14h] [ebp-22Ch]\n  _DWORD **v18; // [esp+18h] [ebp-228h]\n  char v19; // [esp+1Ch] [ebp-224h]\n  int v20[82]; // [esp+20h] [ebp-220h] BYREF\n  char v21[136]; // [esp+168h] [ebp-D8h] BYREF\n  char v22[64]; // [esp+1F0h] [ebp-50h] BYREF\n  int v23; // [esp+23Ch] [ebp-4h]\n\n  v7 = v6;\n  v23 = 0;\n  memset(v22, 0, sizeof(v22));\n  memset(v20, 0, sizeof(v20));\n  v8 = Size;\n  p_Src = &Src;\n  v20[66] = -205731576;\n  v10 = 128;\n  v20[67] = 1779033703;\n  if ( a6 >= 0x10 )\n    p_Src = (_DWORD **)Src;\n  v18 = p_Src;\n  if ( Size < 0x80 )\n    v10 = Size;\n  v20[68] = -2067093701;\n  v20[69] = -1150833019;\n  v20[70] = -23791573;\n  v20[71] = 1013904242;\n  v20[72] = 1595750129;\n  v20[73] = -1521486534;\n  v20[74] = -1377402159;\n  v20[75] = 1359893119;\n  v20[76] = 725511199;\n  v20[77] = -1694144372;\n  v20[78] = -79577749;\n  v20[79] = 528734635;\n  v20[80] = 327033209;\n  v20[81] = 1541459225;\n  v20[1] = 0;\n  v20[0] = 0;\n  v17 = v10;\n  memmove_0(&v20[2], p_Src, v10);\n  if ( v8 + v20[1] >= 0x80 )\n  {\n    v19 = v8 - v10;\n    sub_4127F0(v20, (int)&v20[2], 1);\n    sub_4127F0(v20, (int)v18 + v10, (v8 - v10) >> 7);\n    v11 = (v8 - v10) >> 7 << 7;\n    memmove_0(&v20[2], (char *)v18 + v17 + v11, v19 & 0x7F);\n    v20[1] = v19 & 0x7F;\n    v20[0] += v11 + 128;\n  }\n  else\n  {\n    v20[1] += v8;\n  }\n  sub_412C50((int)v20, v22);\n  v21[128] = 0;\n  v12 = (int *)v21;\n  for ( i = 0; i < 0x40; ++i )\n  {\n    sub_411270(v12, (int)\"%02x\", (unsigned __int8)v22[i]);\n    v12 = (int *)((char *)v12 + 2);\n  }\n  *(_DWORD *)(v7 + 16) = 0;\n  *(_DWORD *)(v7 + 20) = 15;\n  *(_BYTE *)v7 = 0;\n  sub_401D10((char **)v7, v21, strlen(v21));\n  if ( a6 >= 0x10 )\n  {\n    v14 = Src;\n    if ( a6 + 1 >= 0x1000 )\n    {\n      if ( ((unsigned __int8)Src & 0x1F) != 0\n        || (v15 = *(Src - 1), v15 >= (unsigned int)Src)\n        || (unsigned int)Src - v15 < 4\n        || (unsigned int)Src - v15 > 0x23 )\n      {\n        _invalid_parameter_noinfo_noreturn();\n      }\n      v14 = (_DWORD *)*(Src - 1);\n    }\n    j__free(v14);\n  }\n  return (void **)v7;\n}\n// 41315E: variable 'v6' is possibly undefined\n// 413130: using guessed type char var_50[64];\n\n"
    },
    {
        "Function": "sub_412400",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "2.35%",
        "Function Body": "\nint __usercall sub_412400@<eax>(\n        int a1@<ecx>,\n        int a2@<ebp>,\n        _DWORD *a3,\n        int a4,\n        int a5,\n        int a6,\n        unsigned int a7,\n        unsigned int a8)\n{\n  unsigned int v8; // edi\n  _DWORD **v9; // eax\n  size_t v10; // esi\n  int v11; // ecx\n  int v12; // edx\n  unsigned int v13; // eax\n  int v14; // esi\n  int v15; // edi\n  int v16; // edi\n  int v17; // esi\n  int *v18; // edi\n  unsigned int v19; // esi\n  _DWORD *v20; // ecx\n  unsigned int v21; // eax\n  char v24; // [esp-134h] [ebp-140h]\n  int v25; // [esp-134h] [ebp-140h]\n  _DWORD **v26; // [esp-130h] [ebp-13Ch]\n  int v27; // [esp-130h] [ebp-13Ch]\n  _DWORD v28[42]; // [esp-128h] [ebp-134h] BYREF\n  char v29; // [esp-80h] [ebp-8Ch] BYREF\n  _BYTE v30[75]; // [esp-7Fh] [ebp-8Bh] BYREF\n  __int128 v31; // [esp-34h] [ebp-40h]\n  __int128 v32; // [esp-24h] [ebp-30h]\n  int *v33; // [esp-10h] [ebp-1Ch]\n  struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList; // [esp-Ch] [ebp-18h]\n  void *v35; // [esp-8h] [ebp-14h]\n  int v36; // [esp-4h] [ebp-10h]\n  int v37; // [esp+0h] [ebp-Ch]\n  int v38; // [esp+4h] [ebp-8h]\n  int v39; // [esp+8h] [ebp-4h] BYREF\n  int retaddr; // [esp+Ch] [ebp+0h]\n\n  v37 = a2;\n  v38 = retaddr;\n  v36 = -1;\n  v35 = &loc_43456B;\n  ExceptionList = NtCurrentTeb()->NtTib.ExceptionList;\n  v33 = &v39;\n  v36 = 0;\n  v31 = 0i64;\n  v32 = 0i64;\n  memset(v28, 0, sizeof(v28));\n  v8 = a7;\n  v9 = &a3;\n  v28[34] = 1779033703;\n  v10 = 64;\n  v28[35] = -1150833019;\n  if ( a8 >= 0x10 )\n    v9 = (_DWORD **)a3;\n  v26 = v9;\n  if ( a7 < 0x40 )\n    v10 = a7;\n  v28[36] = 1013904242;\n  v28[37] = -1521486534;\n  v28[38] = 1359893119;\n  v28[39] = -1694144372;\n  v28[40] = 528734635;\n  v28[41] = 1541459225;\n  v28[1] = 0;\n  v28[0] = 0;\n  memmove_0(&v28[2], v9, v10);\n  v11 = v8 + v28[1];\n  if ( v8 + v28[1] >= 0x40 )\n  {\n    v13 = v8 - v10;\n    v14 = (int)v26 + v10;\n    v24 = v13;\n    v15 = v13 >> 6;\n    sub_412200(v28, (int)&v28[2], 1);\n    sub_412200(v28, v14, v15);\n    v15 <<= 6;\n    v25 = v24 & 0x3F;\n    memmove_0(&v28[2], (const void *)(v14 + v15), v25);\n    v11 = v25;\n    v12 = v15 + v28[0] + 64;\n    v28[0] = v12;\n  }\n  else\n  {\n    v12 = v28[0];\n  }\n  v28[1] = v11;\n  v27 = 8 * (v12 + v11);\n  v16 = ((v11 & 0x3Fu) > 0x37) + 1;\n  v17 = v16 << 6;\n  memset((char *)&v28[2] + v11, 0, (v16 << 6) - v11);\n  *((_BYTE *)&v28[2] + v28[1]) = 0x80;\n  *((_BYTE *)&v28[1] + v17 + 3) = v27;\n  *((_BYTE *)&v28[1] + v17 + 2) = BYTE1(v27);\n  *((_BYTE *)&v28[1] + v17 + 1) = BYTE2(v27);\n  *((_BYTE *)&v28[1] + v17) = HIBYTE(v27);\n  sub_412200(v28, (int)&v28[2], v16);\n  BYTE2(v31) = BYTE1(v28[34]);\n  BYTE3(v31) = v28[34];\n  LOBYTE(v31) = HIBYTE(v28[34]);\n  BYTE1(v31) = BYTE2(v28[34]);\n  BYTE6(v31) = BYTE1(v28[35]);\n  BYTE7(v31) = v28[35];\n  BYTE4(v31) = HIBYTE(v28[35]);\n  BYTE5(v31) = BYTE2(v28[35]);\n  BYTE10(v31) = BYTE1(v28[36]);\n  BYTE11(v31) = v28[36];\n  BYTE8(v31) = HIBYTE(v28[36]);\n  BYTE9(v31) = BYTE2(v28[36]);\n  BYTE14(v31) = BYTE1(v28[37]);\n  HIBYTE(v31) = v28[37];\n  BYTE12(v31) = HIBYTE(v28[37]);\n  BYTE13(v31) = BYTE2(v28[37]);\n  BYTE3(v32) = v28[38];\n  v30[63] = 0;\n  v18 = (int *)&v29;\n  BYTE1(v32) = BYTE2(v28[38]);\n  BYTE2(v32) = BYTE1(v28[38]);\n  LOBYTE(v32) = HIBYTE(v28[38]);\n  BYTE6(v32) = BYTE1(v28[39]);\n  BYTE7(v32) = v28[39];\n  BYTE4(v32) = HIBYTE(v28[39]);\n  BYTE5(v32) = BYTE2(v28[39]);\n  BYTE10(v32) = BYTE1(v28[40]);\n  BYTE11(v32) = v28[40];\n  BYTE8(v32) = HIBYTE(v28[40]);\n  BYTE9(v32) = BYTE2(v28[40]);\n  BYTE14(v32) = BYTE1(v28[41]);\n  HIBYTE(v32) = v28[41];\n  v19 = 0;\n  BYTE12(v32) = HIBYTE(v28[41]);\n  BYTE13(v32) = BYTE2(v28[41]);\n  do\n  {\n    sub_411270(v18, (int)\"%02x\", *((unsigned __int8 *)&v31 + v19++));\n    v18 = (int *)((char *)v18 + 2);\n  }\n  while ( v19 < 0x20 );\n  *(_DWORD *)(a1 + 16) = 0;\n  *(_DWORD *)(a1 + 20) = 15;\n  *(_BYTE *)a1 = 0;\n  sub_401D10((char **)a1, &v29, &v30[strlen(&v29)] - v30);\n  if ( a8 >= 0x10 )\n  {\n    v20 = a3;\n    if ( a8 + 1 >= 0x1000 )\n    {\n      if ( ((unsigned __int8)a3 & 0x1F) != 0\n        || (v21 = *(a3 - 1), v21 >= (unsigned int)a3)\n        || (unsigned int)a3 - v21 < 4\n        || (unsigned int)a3 - v21 > 0x23 )\n      {\n        _invalid_parameter_noinfo_noreturn();\n      }\n      v20 = (_DWORD *)*(a3 - 1);\n    }\n    j__free(v20);\n  }\n  return a1;\n}\n// 412400: could not find valid save-restore pair for ebp\n// 412400: using guessed type _DWORD *anonymous_0;\n\n"
    },
    {
        "Function": "sub_40EEE0",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "2.01%",
        "Function Body": "\nint __thiscall sub_40EEE0(int this, int a2)\n{\n  int v3; // eax\n  int result; // eax\n  unsigned int v5; // edx\n  unsigned int v6; // edi\n  unsigned int v7; // ecx\n  unsigned int v8; // edi\n  int *v9; // edx\n  int v10; // ecx\n  _DWORD *v11; // edx\n  _BYTE *v12; // esi\n  size_t v13; // edi\n  unsigned int v14; // ecx\n  _BYTE *v15; // eax\n  _BYTE *v16; // ebx\n  _DWORD *v17; // eax\n  bool v18; // zf\n  _DWORD *v19; // eax\n  char *v20; // edx\n  char *v21; // ecx\n  int v22; // edx\n  _DWORD *v23; // eax\n  _DWORD *v24; // ecx\n  _BYTE *v25; // edx\n  unsigned int v26; // [esp+4h] [ebp-8h]\n  _DWORD *Block; // [esp+8h] [ebp-4h]\n\n  v3 = *(_DWORD *)(this + 60);\n  if ( (v3 & 2) != 0 )\n    return -1;\n  if ( a2 == -1 )\n    return 0;\n  if ( (v3 & 8) != 0 )\n  {\n    v5 = **(_DWORD **)(this + 32);\n    if ( v5 )\n    {\n      v6 = *(_DWORD *)(this + 56);\n      if ( v5 < v6 )\n      {\n        v7 = v5 + **(_DWORD **)(this + 48) - v6;\n        **(_DWORD **)(this + 32) = v6;\n        **(_DWORD **)(this + 48) = v7;\n      }\n    }\n  }\n  v8 = **(_DWORD **)(this + 32);\n  if ( v8 )\n  {\n    v9 = *(int **)(this + 48);\n    v10 = *v9;\n    if ( v8 < v8 + *v9 )\n    {\n      result = a2;\n      *v9 = v10 - 1;\n      v11 = *(_DWORD **)(this + 32);\n      v12 = (_BYTE *)(*v11)++;\n      *v12 = a2;\n      return result;\n    }\n    v13 = v10 + v8 - **(_DWORD **)(this + 12);\n  }\n  else\n  {\n    v13 = 0;\n  }\n  v14 = v13 >> 1;\n  if ( v13 >> 1 >= 0x20 )\n  {\n    if ( !v14 )\n      return -1;\n  }\n  else\n  {\n    v14 = 32;\n  }\n  do\n  {\n    if ( 0x7FFFFFFF - v14 >= v13 )\n      break;\n    v14 >>= 1;\n  }\n  while ( v14 );\n  if ( !v14 )\n    return -1;\n  v26 = v14 + v13;\n  v15 = sub_401C70(v14 + v13);\n  v16 = v15;\n  Block = **(_DWORD ***)(this + 12);\n  if ( v13 )\n  {\n    memmove_0(v15, **(const void ***)(this + 12), v13);\n    *(_DWORD *)(this + 56) += v16 - (_BYTE *)Block;\n    v20 = &v16[**(_DWORD **)(this + 32) - (_DWORD)Block];\n    **(_DWORD **)(this + 16) += v16 - (_BYTE *)Block;\n    **(_DWORD **)(this + 32) = v20;\n    **(_DWORD **)(this + 48) = v26 + v16 - v20;\n    if ( (*(_BYTE *)(this + 60) & 4) != 0 )\n    {\n      **(_DWORD **)(this + 12) = v16;\n      **(_DWORD **)(this + 28) = 0;\n      **(_DWORD **)(this + 44) = v16;\n    }\n    else\n    {\n      v21 = &v16[**(_DWORD **)(this + 28) - (_DWORD)Block];\n      v22 = **(_DWORD **)(this + 32) - (_DWORD)v21;\n      **(_DWORD **)(this + 12) = v16;\n      **(_DWORD **)(this + 28) = v21;\n      **(_DWORD **)(this + 44) = v22 + 1;\n    }\n  }\n  else\n  {\n    v17 = *(_DWORD **)(this + 16);\n    *(_DWORD *)(this + 56) = v16;\n    *v17 = v16;\n    **(_DWORD **)(this + 32) = v16;\n    **(_DWORD **)(this + 48) = v26;\n    v18 = (*(_BYTE *)(this + 60) & 4) == 0;\n    **(_DWORD **)(this + 12) = v16;\n    v19 = *(_DWORD **)(this + 28);\n    if ( v18 )\n    {\n      *v19 = v16;\n      **(_DWORD **)(this + 44) = 1;\n    }\n    else\n    {\n      *v19 = 0;\n      **(_DWORD **)(this + 44) = v16;\n    }\n  }\n  if ( (*(_BYTE *)(this + 60) & 1) != 0 )\n    sub_401CD0(Block, v13);\n  v23 = *(_DWORD **)(this + 48);\n  *(_DWORD *)(this + 60) |= 1u;\n  --*v23;\n  v24 = *(_DWORD **)(this + 32);\n  v25 = (_BYTE *)(*v24)++;\n  result = a2;\n  *v25 = a2;\n  return result;\n}\n// 40EFCF: conditional instruction was optimized away because edi.4!=0\n\n"
    },
    {
        "Function": "sub_410910",
        "Total XOR and shift operations": 3,
        "XOR operations": 0,
        "Shift operations": 3,
        "Operation percentage": "1.62%",
        "Function Body": "\nchar *__fastcall sub_410910(char *a1, const char *a2)\n{\n  unsigned int v3; // ecx\n  int v4; // eax\n  int v5; // eax\n  int v6; // edi\n  unsigned int v7; // esi\n  int v8; // edi\n  unsigned int v9; // esi\n  int v10; // ecx\n  int v11; // eax\n  char *v12; // ecx\n  int v13; // ecx\n  int v14; // ecx\n  int v15; // eax\n  _DWORD *v16; // ecx\n  int *v17; // edx\n  _DWORD *v18; // ecx\n  unsigned __int8 *v19; // edx\n  int v20; // eax\n  int v21; // ecx\n  int v22; // eax\n  int v23; // edx\n  int v24; // eax\n  int v25; // ecx\n  unsigned __int8 v26; // dl\n  int v27; // eax\n  _DWORD *v28; // ecx\n  unsigned __int8 *v29; // edx\n  int v30; // eax\n  int v31; // eax\n  char *v32; // esi\n  char v33; // al\n  char v34; // al\n  int v35; // esi\n  int v36; // ecx\n  _DWORD v38[7]; // [esp+0h] [ebp-40h] BYREF\n  unsigned int v39; // [esp+1Ch] [ebp-24h]\n  __int64 v40; // [esp+20h] [ebp-20h]\n  const char *v41; // [esp+28h] [ebp-18h]\n  unsigned __int8 v42; // [esp+2Fh] [ebp-11h]\n  _DWORD *v43; // [esp+30h] [ebp-10h]\n  int v44; // [esp+3Ch] [ebp-4h]\n\n  v43 = v38;\n  v41 = a2;\n  v38[6] = a1;\n  v38[5] = 0;\n  v3 = strlen(a2);\n  v4 = *(_DWORD *)a1;\n  v39 = v3;\n  v5 = *(_DWORD *)(v4 + 4);\n  v6 = *(_DWORD *)&a1[v5 + 36];\n  v7 = *(_DWORD *)&a1[v5 + 32];\n  if ( v6 >= 0 && (v6 > 0 || v7 && v7 > v3) )\n  {\n    v8 = (__PAIR64__(v6, v7) - v3) >> 32;\n    v9 = v7 - v3;\n  }\n  else\n  {\n    v40 = 0i64;\n    v8 = 0;\n    v9 = 0;\n  }\n  v10 = *(_DWORD *)&a1[v5 + 56];\n  LODWORD(v40) = a1;\n  if ( v10 )\n    (*(void (__thiscall **)(int))(*(_DWORD *)v10 + 4))(v10);\n  v44 = 0;\n  v11 = *(_DWORD *)(*(_DWORD *)a1 + 4);\n  if ( !*(_DWORD *)&a1[v11 + 12] )\n  {\n    v12 = *(char **)&a1[v11 + 60];\n    if ( v12 )\n    {\n      if ( v12 != a1 )\n        sub_40BE10(v12);\n    }\n  }\n  v13 = *(_DWORD *)(*(_DWORD *)a1 + 4);\n  BYTE4(v40) = *(_DWORD *)&a1[v13 + 12] == 0;\n  v44 = 1;\n  if ( BYTE4(v40) )\n  {\n    LOBYTE(v44) = 2;\n    if ( (*(_DWORD *)&a1[v13 + 20] & 0x1C0) != 64 )\n    {\n      while ( v8 >= 0 && (v8 > 0 || v9) )\n      {\n        v15 = *(_DWORD *)(*(_DWORD *)a1 + 4);\n        v42 = a1[v15 + 64];\n        v16 = *(_DWORD **)&a1[v15 + 56];\n        if ( *(_DWORD *)v16[8] && (v17 = (int *)v16[12], *v17 > 0) )\n        {\n          --*v17;\n          v18 = (_DWORD *)v16[8];\n          v19 = (unsigned __int8 *)(*v18)++;\n          LOBYTE(v20) = v42;\n          *v19 = v42;\n          v20 = (unsigned __int8)v20;\n        }\n        else\n        {\n          v20 = (*(int (__thiscall **)(_DWORD *, _DWORD))(*v16 + 12))(v16, v42);\n        }\n        if ( v20 == -1 )\n        {\n          v14 = 4;\n          goto LABEL_39;\n        }\n        v8 = (__PAIR64__(v8, v9--) - 1) >> 32;\n      }\n    }\n    v21 = *(_DWORD *)&a1[*(_DWORD *)(*(_DWORD *)a1 + 4) + 56];\n    v22 = (*(int (__thiscall **)(int, const char *, unsigned int, _DWORD))(*(_DWORD *)v21 + 36))(v21, v41, v39, 0);\n    if ( v22 != v39 || v23 )\n    {\nLABEL_36:\n      v14 = 4;\n    }\n    else\n    {\n      while ( v8 >= 0 && (v8 > 0 || v9) )\n      {\n        v24 = *(_DWORD *)(*(_DWORD *)a1 + 4);\n        v25 = *(_DWORD *)&a1[v24 + 56];\n        v26 = a1[v24 + 64];\n        v42 = v26;\n        if ( **(_DWORD **)(v25 + 32) && (v27 = **(_DWORD **)(v25 + 48), v27 > 0) )\n        {\n          **(_DWORD **)(v25 + 48) = v27 - 1;\n          v28 = *(_DWORD **)(v25 + 32);\n          v29 = (unsigned __int8 *)(*v28)++;\n          LOBYTE(v30) = v42;\n          *v29 = v42;\n          v30 = (unsigned __int8)v30;\n        }\n        else\n        {\n          v30 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)v25 + 12))(v25, v26);\n        }\n        if ( v30 == -1 )\n          goto LABEL_36;\n        v8 = (__PAIR64__(v8, v9--) - 1) >> 32;\n      }\n      v14 = 0;\n    }\nLABEL_39:\n    v31 = *(_DWORD *)(*(_DWORD *)a1 + 4);\n    *(_DWORD *)&a1[v31 + 32] = 0;\n    *(_DWORD *)&a1[v31 + 36] = 0;\n    v44 = 1;\n  }\n  else\n  {\n    v14 = 4;\n  }\n  v32 = &a1[*(_DWORD *)(*(_DWORD *)a1 + 4)];\n  if ( v14 )\n  {\n    v33 = v14 | v32[12] | 4;\n    if ( *((_DWORD *)v32 + 14) )\n      v33 = v14 | v32[12];\n    sub_4043E0(&a1[*(_DWORD *)(*(_DWORD *)a1 + 4)], v33, 0);\n  }\n  v44 = 4;\n  v34 = j____uncaught_exception(v14);\n  v35 = v40;\n  if ( !v34 )\n    sub_40BEE0((_BYTE *)v40);\n  LOBYTE(v44) = 5;\n  v36 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v35 + 4) + v35 + 56);\n  if ( v36 )\n    (*(void (__thiscall **)(int))(*(_DWORD *)v36 + 8))(v36);\n  return a1;\n}\n// 410976: conditional instruction was optimized away because edi.4==0\n// 410978: conditional instruction was optimized away because edi.4==0\n// 410A88: variable 'v23' is possibly undefined\n// 410B6F: variable 'v14' is possibly undefined\n// 41398B: using guessed type int __fastcall j____uncaught_exception(_DWORD);\n\n"
    }
]