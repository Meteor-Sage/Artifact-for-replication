[
    {
        "Function": "sub_41F54F",
        "Total XOR and shift operations": 35,
        "XOR operations": 24,
        "Shift operations": 11,
        "Operation percentage": "76.09%",
        "Function Body": "\nint sub_41F54F()\n{\n  int v0; // edx\n  int v1; // ecx\n  int v2; // ebx\n  int v3; // esi\n  int v4; // edx\n  int v5; // ebp\n  int v6; // eax\n  int v7; // esi\n  int v8; // ebp\n  int result; // eax\n  unsigned int v10; // [esp+10h] [ebp-10h]\n  int v11; // [esp+14h] [ebp-Ch]\n  int v12; // [esp+1Ch] [ebp-4h]\n\n  v0 = 0;\n  v12 = 0;\n  do\n  {\n    v10 = (unsigned __int8)RijnDael_AES_inv_LONG_46E7E8[v0];\n    v1 = v10 ^ (2 * v10);\n    v11 = (v10 >> 5) & 1;\n    v2 = (v10 >> 5) & 2;\n    v3 = (v10 >> 6) & 1;\n    v4 = (v10 >> 6) & 2;\n    v5 = (452984832 * ((v10 >> 5) & 4)) ^ (452984832 * v4) ^ (452984832 * v3) ^ (452984832 * v2) ^ (452984832 * v11) ^ (452984832 * (v10 >> 7)) ^ ((v10 ^ (2 * v1)) << 25);\n    v6 = 72448 * v3;\n    v7 = (v10 >> 5) & 4;\n    v8 = (18546688 * v7) ^ (18546688 * v2) ^ (18546688 * v11) ^ ((v10 ^ (8 * v10)) << 16) | (72448 * v7) ^ (72448 * v4) ^ v6 ^ (72448 * v2) ^ (72448 * v11) ^ ((v10 ^ (4 * v1)) << 8) | v5;\n    result = v8 | v10;\n    dword_491500[2 * v12] = v8 | v10;\n    dword_491504[2 * v12] = v8 | v10 ^ (283 * v7) ^ (283 * v2) ^ (283 * v11) ^ (283 * (v10 >> 7)) ^ (2 * (v10 ^ (4 * v10)));\n    v0 = v12 + 1;\n    v12 = v0;\n  }\n  while ( v0 < 256 );\n  byte_491D01 = 1;\n  return result;\n}\n// 491500: using guessed type int dword_491500[];\n// 491504: using guessed type int dword_491504[511];\n// 491D01: using guessed type char byte_491D01;\n\n"
    },
    {
        "Function": "sub_421FFE",
        "Total XOR and shift operations": 240,
        "XOR operations": 208,
        "Shift operations": 32,
        "Operation percentage": "59.70%",
        "Function Body": "\nint __cdecl sub_421FFE(_DWORD *a1, unsigned int *a2)\n{\n  unsigned int v2; // ecx\n  int v3; // edi\n  int v4; // ebx\n  int v5; // esi\n  int v6; // ebp\n  unsigned int v7; // eax\n  int v8; // edi\n  unsigned int v9; // eax\n  int v10; // esi\n  unsigned int v11; // eax\n  int v12; // ebp\n  unsigned int v13; // eax\n  int v14; // ebx\n  unsigned int v15; // eax\n  unsigned int v16; // edx\n  unsigned int v17; // eax\n  unsigned int v18; // esi\n  unsigned int v19; // eax\n  unsigned int v20; // ebp\n  unsigned int v21; // eax\n  unsigned int v22; // ebx\n  unsigned int v23; // eax\n  unsigned int v24; // edi\n  int v25; // edi\n  unsigned int v26; // eax\n  unsigned int v27; // eax\n  int v28; // ebx\n  unsigned int v29; // eax\n  unsigned int v30; // edx\n  int v31; // ebp\n  unsigned int v32; // eax\n  unsigned int v33; // eax\n  int v34; // ebx\n  unsigned int v35; // eax\n  unsigned int v36; // esi\n  int v37; // esi\n  unsigned int v38; // eax\n  unsigned int v39; // eax\n  unsigned int v40; // eax\n  unsigned int v41; // eax\n  unsigned int v42; // edx\n  int v43; // eax\n  int result; // eax\n  unsigned int v45; // [esp+10h] [ebp-C4h]\n  int v46; // [esp+14h] [ebp-C0h]\n  int v47; // [esp+14h] [ebp-C0h]\n  int v48; // [esp+14h] [ebp-C0h]\n  unsigned int v49; // [esp+14h] [ebp-C0h]\n  int v50; // [esp+14h] [ebp-C0h]\n  int v51; // [esp+18h] [ebp-BCh]\n  int v52; // [esp+18h] [ebp-BCh]\n  int v53; // [esp+18h] [ebp-BCh]\n  unsigned int v54; // [esp+18h] [ebp-BCh]\n  int v55; // [esp+18h] [ebp-BCh]\n  int v56; // [esp+1Ch] [ebp-B8h]\n  int v57; // [esp+1Ch] [ebp-B8h]\n  int v58; // [esp+1Ch] [ebp-B8h]\n  unsigned int v59; // [esp+1Ch] [ebp-B8h]\n  int v60; // [esp+20h] [ebp-B4h]\n  int v61; // [esp+20h] [ebp-B4h]\n  int v62; // [esp+20h] [ebp-B4h]\n  unsigned int v63; // [esp+20h] [ebp-B4h]\n  int v64; // [esp+24h] [ebp-B0h]\n  unsigned int v65; // [esp+24h] [ebp-B0h]\n  int v66; // [esp+28h] [ebp-ACh]\n  unsigned int v67; // [esp+28h] [ebp-ACh]\n  int v68; // [esp+2Ch] [ebp-A8h]\n  unsigned int v69; // [esp+2Ch] [ebp-A8h]\n  unsigned int v70; // [esp+2Ch] [ebp-A8h]\n  int v71; // [esp+30h] [ebp-A4h]\n  unsigned int v72; // [esp+30h] [ebp-A4h]\n  int v73; // [esp+30h] [ebp-A4h]\n  unsigned int v74; // [esp+34h] [ebp-A0h]\n  unsigned int v75; // [esp+38h] [ebp-9Ch]\n  unsigned int v76; // [esp+3Ch] [ebp-98h]\n  unsigned int v77; // [esp+40h] [ebp-94h]\n  unsigned int v78; // [esp+44h] [ebp-90h]\n  unsigned int v79; // [esp+48h] [ebp-8Ch]\n  unsigned int v80; // [esp+4Ch] [ebp-88h]\n  unsigned int v81; // [esp+50h] [ebp-84h]\n  unsigned int v82; // [esp+54h] [ebp-80h]\n  unsigned int v83; // [esp+58h] [ebp-7Ch]\n  unsigned int v84; // [esp+5Ch] [ebp-78h]\n  unsigned int v85; // [esp+60h] [ebp-74h]\n  unsigned int v86; // [esp+64h] [ebp-70h]\n  unsigned int v87; // [esp+68h] [ebp-6Ch]\n  unsigned int v88; // [esp+6Ch] [ebp-68h]\n  unsigned int v89; // [esp+70h] [ebp-64h]\n  int v90[24]; // [esp+74h] [ebp-60h] BYREF\n\n  v45 = 0;\n  memset(&v90[8], 0, 0x40u);\n  v77 = v90[23];\n  v82 = v90[22];\n  v88 = v90[21];\n  v75 = v90[20];\n  v81 = v90[19];\n  v79 = v90[18];\n  v85 = v90[17];\n  v89 = v90[16];\n  v87 = v90[15];\n  v86 = v90[14];\n  v80 = v90[13];\n  v74 = v90[12];\n  v78 = v90[11];\n  v84 = v90[10];\n  v83 = v90[9];\n  v76 = v90[8];\n  qmemcpy(v90, a1, 0x20u);\n  v2 = 0;\n  v3 = v90[7];\n  v4 = v90[4];\n  v5 = v90[2];\n  v6 = v90[1];\n  v46 = v90[6];\n  v51 = v90[5];\n  v56 = v90[3];\n  v60 = v90[0];\n  do\n  {\n    if ( v2 )\n      v7 = v85\n         + ((v83 >> 3) ^ __ROR4__(v83, 7) ^ __ROL4__(v83, 14))\n         + ((v82 >> 10) ^ __ROL4__(v82, 13) ^ __ROL4__(v82, 15))\n         + v76;\n    else\n      v7 = *a2;\n    v76 = v7;\n    v8 = v7\n       + SHA512_Constants_46DB90[v45]\n       + (v46 ^ v4 & (v46 ^ v51))\n       + (__ROR4__(v4, 6) ^ __ROL4__(v4, 7) ^ __ROR4__(v4, 11))\n       + v3;\n    v57 = v8 + v56;\n    v71 = (__ROR4__(v60, 2) ^ __ROL4__(v60, 10) ^ __ROR4__(v60, 13)) + v8 + (v6 ^ (v60 ^ v6) & (v5 ^ v6));\n    if ( v45 )\n      v9 = v79\n         + ((v84 >> 3) ^ __ROR4__(v84, 7) ^ __ROL4__(v84, 14))\n         + ((v77 >> 10) ^ __ROL4__(v77, 13) ^ __ROL4__(v77, 15))\n         + v83;\n    else\n      v9 = a2[1];\n    v83 = v9;\n    v47 = v9\n        + SHA512_Constants_46DB94[v45]\n        + (v51 ^ v57 & (v4 ^ v51))\n        + (__ROR4__(v57, 6) ^ __ROL4__(v57, 7) ^ __ROR4__(v57, 11))\n        + v46;\n    v10 = v47 + v5;\n    v48 = (__ROR4__(v71, 2) ^ __ROL4__(v71, 10) ^ __ROR4__(v71, 13)) + v47 + (v60 ^ (v60 ^ v6) & (v71 ^ v60));\n    if ( v45 )\n      v11 = v81\n          + ((v78 >> 3) ^ __ROR4__(v78, 7) ^ __ROL4__(v78, 14))\n          + ((v76 >> 10) ^ __ROL4__(v76, 13) ^ __ROL4__(v76, 15))\n          + v84;\n    else\n      v11 = a2[2];\n    v84 = v11;\n    v52 = v11\n        + SHA512_Constants_46DB98[v45]\n        + (v4 ^ v10 & (v4 ^ v57))\n        + (__ROR4__(v10, 6) ^ __ROL4__(v10, 7) ^ __ROR4__(v10, 11))\n        + v51;\n    v12 = v52 + v6;\n    v53 = (__ROR4__(v48, 2) ^ __ROL4__(v48, 10) ^ __ROR4__(v48, 13)) + v52 + (v71 ^ (v71 ^ v60) & (v71 ^ v48));\n    if ( v45 )\n      v13 = v75\n          + ((v83 >> 10) ^ __ROL4__(v83, 13) ^ __ROL4__(v83, 15))\n          + ((v74 >> 3) ^ __ROR4__(v74, 7) ^ __ROL4__(v74, 14))\n          + v78;\n    else\n      v13 = a2[3];\n    v78 = v13;\n    v14 = v13\n        + SHA512_Constants_46DB9C[v45]\n        + (v57 ^ v12 & (v57 ^ v10))\n        + (__ROR4__(v12, 6) ^ __ROL4__(v12, 7) ^ __ROR4__(v12, 11))\n        + v4;\n    v61 = v14 + v60;\n    v66 = (__ROR4__(v53, 2) ^ __ROL4__(v53, 10) ^ __ROR4__(v53, 13)) + v14 + (v48 ^ (v48 ^ v53) & (v71 ^ v48));\n    if ( v45 )\n      v15 = v88\n          + ((v84 >> 10) ^ __ROL4__(v84, 13) ^ __ROL4__(v84, 15))\n          + ((v80 >> 3) ^ __ROR4__(v80, 7) ^ __ROL4__(v80, 14))\n          + v74;\n    else\n      v15 = a2[4];\n    v74 = v15;\n    v16 = v15\n        + dword_46DBA0[v45]\n        + (v10 ^ v61 & (v10 ^ v12))\n        + (__ROR4__(v61, 6) ^ __ROL4__(v61, 7) ^ __ROR4__(v61, 11))\n        + v57;\n    v72 = v16 + v71;\n    v58 = (__ROR4__(v66, 2) ^ __ROL4__(v66, 10) ^ __ROR4__(v66, 13)) + v16 + (v53 ^ (v48 ^ v53) & (v66 ^ v53));\n    if ( v45 )\n      v17 = v82\n          + ((v86 >> 3) ^ __ROR4__(v86, 7) ^ __ROL4__(v86, 14))\n          + ((v78 >> 10) ^ __ROL4__(v78, 13) ^ __ROL4__(v78, 15))\n          + v80;\n    else\n      v17 = a2[5];\n    v80 = v17;\n    v18 = v17\n        + dword_46DBA4[v45]\n        + (v12 ^ v72 & (v61 ^ v12))\n        + (__ROR4__(v72, 6) ^ __ROL4__(v72, 7) ^ __ROR4__(v72, 11))\n        + v10;\n    v49 = v18 + v48;\n    v64 = (__ROR4__(v58, 2) ^ __ROL4__(v58, 10) ^ __ROR4__(v58, 13)) + v18 + (v66 ^ (v66 ^ v53) & (v66 ^ v58));\n    if ( v45 )\n      v19 = v77\n          + ((v87 >> 3) ^ __ROR4__(v87, 7) ^ __ROL4__(v87, 14))\n          + ((v74 >> 10) ^ __ROL4__(v74, 13) ^ __ROL4__(v74, 15))\n          + v86;\n    else\n      v19 = a2[6];\n    v86 = v19;\n    v20 = v19\n        + dword_46DBA8[v45]\n        + (v61 ^ v49 & (v72 ^ v61))\n        + (__ROR4__(v49, 6) ^ __ROL4__(v49, 7) ^ __ROR4__(v49, 11))\n        + v12;\n    v54 = v20 + v53;\n    v68 = (__ROR4__(v64, 2) ^ __ROL4__(v64, 10) ^ __ROR4__(v64, 13)) + v20 + (v58 ^ (v66 ^ v58) & (v58 ^ v64));\n    if ( v45 )\n      v21 = v76\n          + ((v89 >> 3) ^ __ROR4__(v89, 7) ^ __ROL4__(v89, 14))\n          + ((v80 >> 10) ^ __ROL4__(v80, 13) ^ __ROL4__(v80, 15))\n          + v87;\n    else\n      v21 = a2[7];\n    v87 = v21;\n    v22 = v21\n        + dword_46DBAC[v45]\n        + (v72 ^ v54 & (v72 ^ v49))\n        + (__ROR4__(v54, 6) ^ __ROL4__(v54, 7) ^ __ROR4__(v54, 11))\n        + v61;\n    v67 = v22 + v66;\n    v62 = (__ROR4__(v68, 2) ^ __ROL4__(v68, 10) ^ __ROR4__(v68, 13)) + v22 + (v64 ^ (v64 ^ v68) & (v58 ^ v64));\n    if ( v45 )\n      v23 = v83\n          + ((v85 >> 3) ^ __ROR4__(v85, 7) ^ __ROL4__(v85, 14))\n          + ((v86 >> 10) ^ __ROL4__(v86, 13) ^ __ROL4__(v86, 15))\n          + v89;\n    else\n      v23 = a2[8];\n    v89 = v23;\n    v24 = v23\n        + dword_46DBB0[v45]\n        + (v49 ^ v67 & (v49 ^ v54))\n        + (__ROR4__(v67, 6) ^ __ROL4__(v67, 7) ^ __ROR4__(v67, 11))\n        + v72;\n    v59 = v24 + v58;\n    v25 = (__ROR4__(v62, 2) ^ __ROL4__(v62, 10) ^ __ROR4__(v62, 13)) + (v68 ^ (v64 ^ v68) & (v62 ^ v68)) + v24;\n    if ( v45 )\n      v26 = v84\n          + ((v87 >> 10) ^ __ROL4__(v87, 13) ^ __ROL4__(v87, 15))\n          + ((v79 >> 3) ^ __ROR4__(v79, 7) ^ __ROL4__(v79, 14))\n          + v85;\n    else\n      v26 = a2[9];\n    v85 = v26;\n    v27 = v26\n        + dword_46DBB4[v45]\n        + (v54 ^ v59 & (v67 ^ v54))\n        + (__ROR4__(v59, 6) ^ __ROL4__(v59, 7) ^ __ROR4__(v59, 11))\n        + v49;\n    v65 = v27 + v64;\n    v28 = (__ROR4__(v25, 2) ^ __ROL4__(v25, 10) ^ __ROR4__(v25, 13)) + v27 + (v62 ^ (v25 ^ v62) & (v62 ^ v68));\n    v50 = v28;\n    if ( v45 )\n      v29 = v78\n          + ((v89 >> 10) ^ __ROL4__(v89, 13) ^ __ROL4__(v89, 15))\n          + ((v81 >> 3) ^ __ROR4__(v81, 7) ^ __ROL4__(v81, 14))\n          + v79;\n    else\n      v29 = a2[10];\n    v79 = v29;\n    v30 = v29\n        + dword_46DBB8[v45]\n        + (v67 ^ v65 & (v67 ^ v59))\n        + (__ROR4__(v65, 6) ^ __ROL4__(v65, 7) ^ __ROR4__(v65, 11))\n        + v54;\n    v69 = v30 + v68;\n    v31 = (__ROR4__(v28, 2) ^ __ROL4__(v28, 10) ^ __ROR4__(v28, 13)) + v30 + (v25 ^ (v25 ^ v28) & (v25 ^ v62));\n    if ( v45 )\n      v32 = v74\n          + ((v85 >> 10) ^ __ROL4__(v85, 13) ^ __ROL4__(v85, 15))\n          + ((v75 >> 3) ^ __ROR4__(v75, 7) ^ __ROL4__(v75, 14))\n          + v81;\n    else\n      v32 = a2[11];\n    v81 = v32;\n    v33 = v32\n        + dword_46DBBC[v45]\n        + (v59 ^ v69 & (v59 ^ v65))\n        + (__ROR4__(v69, 6) ^ __ROL4__(v69, 7) ^ __ROR4__(v69, 11))\n        + v67;\n    v63 = v33 + v62;\n    v55 = v28 ^ v31;\n    v34 = (__ROR4__(v31, 2) ^ __ROL4__(v31, 10) ^ __ROR4__(v31, 13)) + v33 + ((v28 ^ v31) & (v25 ^ v28) ^ v28);\n    if ( v45 )\n      v35 = v80\n          + ((v88 >> 3) ^ __ROR4__(v88, 7) ^ __ROL4__(v88, 14))\n          + ((v79 >> 10) ^ __ROL4__(v79, 13) ^ __ROL4__(v79, 15))\n          + v75;\n    else\n      v35 = a2[12];\n    v75 = v35;\n    v36 = v35\n        + dword_46DBC0[v45]\n        + (v65 ^ v63 & (v65 ^ v69))\n        + (__ROR4__(v63, 6) ^ __ROL4__(v63, 7) ^ __ROR4__(v63, 11))\n        + v59;\n    v3 = v36 + v25;\n    v37 = (__ROR4__(v34, 2) ^ __ROL4__(v34, 10) ^ __ROR4__(v34, 13)) + (v31 ^ v55 & (v34 ^ v31)) + v36;\n    v56 = v37;\n    if ( v45 )\n      v38 = v86\n          + ((v82 >> 3) ^ __ROR4__(v82, 7) ^ __ROL4__(v82, 14))\n          + ((v81 >> 10) ^ __ROL4__(v81, 13) ^ __ROL4__(v81, 15))\n          + v88;\n    else\n      v38 = a2[13];\n    v88 = v38;\n    v39 = v38\n        + dword_46DBC4[v45]\n        + (v69 ^ v3 & (v63 ^ v69))\n        + (__ROR4__(v3, 6) ^ __ROL4__(v3, 7) ^ __ROR4__(v3, 11))\n        + v65;\n    v46 = v39 + v50;\n    v73 = v34 ^ v37;\n    v5 = (__ROR4__(v37, 2) ^ __ROL4__(v37, 10) ^ __ROR4__(v37, 13)) + v39 + (v34 ^ (v34 ^ v31) & (v34 ^ v37));\n    if ( v45 )\n      v40 = v87\n          + ((v77 >> 3) ^ __ROR4__(v77, 7) ^ __ROL4__(v77, 14))\n          + ((v75 >> 10) ^ __ROL4__(v75, 13) ^ __ROL4__(v75, 15))\n          + v82;\n    else\n      v40 = a2[14];\n    v82 = v40;\n    v70 = v40\n        + dword_46DBC8[v45]\n        + (v63 ^ v46 & (v3 ^ v63))\n        + (__ROR4__(v46, 6) ^ __ROL4__(v46, 7) ^ __ROR4__(v46, 11))\n        + v69;\n    v51 = v70 + v31;\n    v6 = (__ROR4__(v5, 2) ^ __ROL4__(v5, 10) ^ __ROR4__(v5, 13)) + v70 + (v56 ^ v73 & (v56 ^ v5));\n    if ( v45 )\n      v41 = v89\n          + ((v88 >> 10) ^ __ROL4__(v88, 13) ^ __ROL4__(v88, 15))\n          + ((v76 >> 3) ^ __ROR4__(v76, 7) ^ __ROL4__(v76, 14))\n          + v77;\n    else\n      v41 = a2[15];\n    v77 = v41;\n    v42 = v41\n        + dword_46DBCC[v45]\n        + (v3 ^ v51 & (v3 ^ v46))\n        + (__ROR4__(v51, 6) ^ __ROL4__(v51, 7) ^ __ROR4__(v51, 11))\n        + v63;\n    v4 = v42 + v34;\n    v43 = (__ROR4__(v6, 2) ^ __ROL4__(v6, 10) ^ __ROR4__(v6, 13)) + v42 + (v5 ^ (v56 ^ v5) & (v5 ^ v6));\n    v2 = v45 + 16;\n    v60 = v43;\n    v45 = v2;\n  }\n  while ( v2 < 0x40 );\n  *a1 += v43;\n  a1[3] += v56;\n  a1[4] += v4;\n  a1[5] += v51;\n  a1[1] += v6;\n  a1[2] += v5;\n  result = v46;\n  a1[6] += v46;\n  a1[7] += v3;\n  return result;\n}\n// 421FFE: too many cbuild loops\n// 46DB90: using guessed type int SHA512_Constants_46DB90[];\n// 46DB94: using guessed type int SHA512_Constants_46DB94[];\n// 46DB98: using guessed type int SHA512_Constants_46DB98[];\n// 46DB9C: using guessed type int SHA512_Constants_46DB9C[];\n// 46DBA0: using guessed type int dword_46DBA0[];\n// 46DBA4: using guessed type int dword_46DBA4[];\n// 46DBA8: using guessed type int dword_46DBA8[];\n// 46DBAC: using guessed type int dword_46DBAC[];\n// 46DBB0: using guessed type int dword_46DBB0[];\n// 46DBB4: using guessed type int dword_46DBB4[];\n// 46DBB8: using guessed type int dword_46DBB8[];\n// 46DBBC: using guessed type int dword_46DBBC[];\n// 46DBC0: using guessed type int dword_46DBC0[];\n// 46DBC4: using guessed type int dword_46DBC4[];\n// 46DBC8: using guessed type int dword_46DBC8[];\n// 46DBCC: using guessed type int dword_46DBCC[33];\n\n"
    },
    {
        "Function": "sub_422CF6",
        "Total XOR and shift operations": 384,
        "XOR operations": 352,
        "Shift operations": 32,
        "Operation percentage": "57.40%",
        "Function Body": "\nint __fastcall sub_422CF6(const __m128i *a1, unsigned int *a2, int a3)\n{\n  _DWORD *v3; // esi\n  __m128i v4; // xmm0\n  __m128i v5; // xmm1\n  int v6; // edi\n  int v7; // edx\n  int v8; // ebx\n  int v9; // edx\n  int v10; // edi\n  int v11; // ebx\n  int v12; // edi\n  int v13; // edx\n  int v14; // ebx\n  int v15; // edx\n  int v16; // edi\n  int v17; // ebx\n  int v18; // edi\n  int v19; // edx\n  int v20; // ebx\n  int v21; // edx\n  int v22; // edi\n  int v23; // ebx\n  int v24; // edi\n  int v25; // edx\n  int v26; // ebx\n  int v27; // edx\n  int v28; // edi\n  int v29; // ebx\n  int v30; // edi\n  int v31; // edx\n  int v32; // ebx\n  int v33; // edx\n  int v34; // edi\n  int v35; // ebx\n  int v36; // edi\n  int v37; // edx\n  int v38; // ebx\n  int v39; // edx\n  int v40; // edi\n  int v41; // ebx\n  int v42; // edi\n  int v43; // edx\n  int v44; // ebx\n  int v45; // edx\n  int v46; // edi\n  int v47; // ebx\n  int v48; // edi\n  int v49; // edx\n  int v50; // ebx\n  int v51; // edx\n  int v52; // edi\n  int result; // eax\n  int v54; // ebx\n  int v55; // ecx\n  int v56; // edi\n  int v57; // ecx\n  int v58; // edx\n  int v59; // ebp\n  int v60; // edi\n  int v61; // edx\n  int v62; // ebx\n  int v63; // edi\n  int v64; // edx\n  unsigned int v65; // edx\n  int v66; // ebx\n  int v67; // ecx\n  int v68; // ebp\n  int v69; // ebx\n  int v70; // edx\n  int v71; // edi\n  int v72; // ebx\n  int v73; // edx\n  int v74; // edi\n  unsigned int v75; // edi\n  int v76; // ebx\n  int v77; // edi\n  int v78; // edx\n  int v79; // ebx\n  int v80; // edi\n  int v81; // edx\n  unsigned int v82; // edx\n  int v83; // ebx\n  int v84; // edx\n  int v85; // edi\n  int v86; // ebx\n  int v87; // edx\n  int v88; // edi\n  unsigned int v89; // edi\n  int v90; // ebx\n  int v91; // edi\n  int v92; // edx\n  int v93; // ebx\n  int v94; // edi\n  int v95; // edx\n  unsigned int v96; // edx\n  int v97; // ebx\n  int v98; // edx\n  int v99; // edi\n  int v100; // ebx\n  int v101; // edx\n  int v102; // edi\n  unsigned int v103; // edi\n  int v104; // ebx\n  int v105; // edi\n  int v106; // edx\n  int v107; // ebx\n  int v108; // edi\n  int v109; // edx\n  unsigned int v110; // edx\n  int v111; // ebx\n  int v112; // edx\n  int v113; // edi\n  int v114; // ebx\n  int v115; // edx\n  int v116; // edi\n  unsigned int v117; // edi\n  int v118; // ebx\n  int v119; // edi\n  int v120; // edx\n  int v121; // ebx\n  int v122; // edi\n  int v123; // edx\n  unsigned int v124; // edx\n  int v125; // ebx\n  int v126; // edx\n  int v127; // edi\n  int v128; // ebx\n  int v129; // edx\n  int v130; // edi\n  unsigned int v131; // edi\n  int v132; // ebx\n  int v133; // edi\n  int v134; // edx\n  int v135; // ebx\n  int v136; // edi\n  int v137; // edx\n  unsigned int v138; // edx\n  int v139; // ebx\n  int v140; // edx\n  int v141; // edi\n  int v142; // ebx\n  int v143; // edx\n  int v144; // edi\n  unsigned int v145; // edi\n  int v146; // ebx\n  int v147; // edi\n  int v148; // edx\n  int v149; // ebx\n  int v150; // edi\n  int v151; // edx\n  unsigned int v152; // edx\n  int v153; // ebx\n  int v154; // edx\n  int v155; // edi\n  int v156; // ebx\n  int v157; // edx\n  int v158; // edi\n  unsigned int v159; // edi\n  int v160; // ebx\n  int v161; // edi\n  int v162; // edx\n  int v163; // ebx\n  int v164; // edi\n  int v165; // edx\n  unsigned int v166; // edx\n  int v167; // ebx\n  int v168; // edx\n  int v169; // edi\n  int v170; // ebx\n  int v171; // edx\n  int v172; // edi\n  unsigned int v173; // edi\n  int v174; // ebx\n  unsigned int v175; // ecx\n  __m128i *v176; // ebp\n  int v177; // ecx\n  int v178; // ebx\n  int v179; // ebx\n  int v180; // ecx\n  __int128 v181[2]; // [esp+0h] [ebp-80h] BYREF\n  unsigned int v182; // [esp+20h] [ebp-60h]\n  unsigned int v183; // [esp+24h] [ebp-5Ch]\n  unsigned int v184; // [esp+28h] [ebp-58h]\n  unsigned int v185; // [esp+2Ch] [ebp-54h]\n  unsigned int v186; // [esp+30h] [ebp-50h]\n  unsigned int v187; // [esp+34h] [ebp-4Ch]\n  unsigned int v188; // [esp+38h] [ebp-48h]\n  unsigned int v189; // [esp+3Ch] [ebp-44h]\n  unsigned int v190; // [esp+40h] [ebp-40h]\n  unsigned int v191; // [esp+44h] [ebp-3Ch]\n  unsigned int v192; // [esp+48h] [ebp-38h]\n  unsigned int v193; // [esp+4Ch] [ebp-34h]\n  unsigned int v194; // [esp+50h] [ebp-30h]\n  unsigned int v195; // [esp+54h] [ebp-2Ch]\n  unsigned int v196; // [esp+58h] [ebp-28h]\n  unsigned int v197; // [esp+5Ch] [ebp-24h]\n  unsigned int v198; // [esp+60h] [ebp-20h]\n  __m128i *v199; // [esp+64h] [ebp-1Ch]\n  unsigned int *v200; // [esp+68h] [ebp-18h]\n  unsigned int v201; // [esp+6Ch] [ebp-14h]\n  int *v202; // [esp+70h] [ebp-10h]\n  int vars0; // [esp+80h] [ebp+0h] BYREF\n\n  v3 = &unk_46DC50;\n  v202 = &vars0;\n  v199 = (__m128i *)a1;\n  v200 = a2;\n  v201 = (unsigned int)a2 + a3;\n  v198 = (unsigned int)&unk_46DC50;\n  if ( (a3 & 1) != 0 )\n    goto LABEL_3;\n  --v198;\n  v4 = _mm_loadu_si128(a1);\n  v5 = _mm_loadu_si128(a1 + 1);\n  do\n  {\n    v181[1] = (__int128)v5;\n    v181[0] = (__int128)v4;\n    while ( 1 )\n    {\n      v3 -= 48;\n      v197 = _byteswap_ulong(*a2);\n      v196 = _byteswap_ulong(a2[1]);\n      v195 = _byteswap_ulong(a2[2]);\n      v194 = _byteswap_ulong(a2[3]);\n      v193 = _byteswap_ulong(a2[4]);\n      v192 = _byteswap_ulong(a2[5]);\n      v191 = _byteswap_ulong(a2[6]);\n      v190 = _byteswap_ulong(a2[7]);\n      v189 = _byteswap_ulong(a2[8]);\n      v188 = _byteswap_ulong(a2[9]);\n      v187 = _byteswap_ulong(a2[10]);\n      v186 = _byteswap_ulong(a2[11]);\n      v185 = _byteswap_ulong(a2[12]);\n      v184 = _byteswap_ulong(a2[13]);\n      v183 = _byteswap_ulong(a2[14]);\n      v182 = _byteswap_ulong(a2[15]);\n      v6 = __ROR4__(v181[1], 6);\n      v7 = (__ROR4__(v6, 5) ^ v6 ^ __ROR4__(v181[1], 25))\n         + HIDWORD(v181[1])\n         + v197\n         + *v3\n         + (DWORD2(v181[1]) ^ v181[1] & (DWORD2(v181[1]) ^ DWORD1(v181[1])));\n      v8 = __ROR4__(v181[0], 2);\n      HIDWORD(v181[0]) += v7;\n      HIDWORD(v181[1]) = (__ROR4__(v8, 11) ^ v8 ^ __ROR4__(v181[0], 22))\n                       + v7\n                       + (DWORD1(v181[0]) ^ (DWORD1(v181[0]) ^ LODWORD(v181[0])) & (DWORD2(v181[0]) ^ DWORD1(v181[0])));\n      v9 = __ROR4__(HIDWORD(v181[0]), 6);\n      v10 = (__ROR4__(v9, 5) ^ v9 ^ __ROR4__(HIDWORD(v181[0]), 25))\n          + DWORD2(v181[1])\n          + v196\n          + v3[1]\n          + (DWORD1(v181[1]) ^ HIDWORD(v181[0]) & (DWORD1(v181[1]) ^ LODWORD(v181[1])));\n      v11 = __ROR4__(HIDWORD(v181[1]), 2);\n      DWORD2(v181[0]) += v10;\n      DWORD2(v181[1]) = (__ROR4__(v11, 11) ^ v11 ^ __ROR4__(HIDWORD(v181[1]), 22))\n                      + v10\n                      + (LODWORD(v181[0]) ^ (LODWORD(v181[0]) ^ HIDWORD(v181[1])) & (DWORD1(v181[0]) ^ LODWORD(v181[0])));\n      v12 = __ROR4__(DWORD2(v181[0]), 6);\n      v13 = (__ROR4__(v12, 5) ^ v12 ^ __ROR4__(DWORD2(v181[0]), 25))\n          + DWORD1(v181[1])\n          + v195\n          + v3[2]\n          + (LODWORD(v181[1]) ^ DWORD2(v181[0]) & (LODWORD(v181[1]) ^ HIDWORD(v181[0])));\n      v14 = __ROR4__(DWORD2(v181[1]), 2);\n      DWORD1(v181[0]) += v13;\n      DWORD1(v181[1]) = (__ROR4__(v14, 11) ^ v14 ^ __ROR4__(DWORD2(v181[1]), 22))\n                      + v13\n                      + (HIDWORD(v181[1]) ^ (HIDWORD(v181[1]) ^ DWORD2(v181[1])) & (LODWORD(v181[0]) ^ HIDWORD(v181[1])));\n      v15 = __ROR4__(DWORD1(v181[0]), 6);\n      v16 = (__ROR4__(v15, 5) ^ v15 ^ __ROR4__(DWORD1(v181[0]), 25))\n          + LODWORD(v181[1])\n          + v194\n          + v3[3]\n          + (HIDWORD(v181[0]) ^ DWORD1(v181[0]) & (HIDWORD(v181[0]) ^ DWORD2(v181[0])));\n      v17 = __ROR4__(DWORD1(v181[1]), 2);\n      LODWORD(v181[0]) += v16;\n      LODWORD(v181[1]) = (__ROR4__(v17, 11) ^ v17 ^ __ROR4__(DWORD1(v181[1]), 22))\n                       + v16\n                       + (DWORD2(v181[1]) ^ (DWORD2(v181[1]) ^ DWORD1(v181[1])) & (HIDWORD(v181[1]) ^ DWORD2(v181[1])));\n      v18 = __ROR4__(v181[0], 6);\n      v19 = (__ROR4__(v18, 5) ^ v18 ^ __ROR4__(v181[0], 25))\n          + HIDWORD(v181[0])\n          + v193\n          + v3[4]\n          + (DWORD2(v181[0]) ^ v181[0] & (DWORD2(v181[0]) ^ DWORD1(v181[0])));\n      v20 = __ROR4__(v181[1], 2);\n      HIDWORD(v181[1]) += v19;\n      HIDWORD(v181[0]) = (__ROR4__(v20, 11) ^ v20 ^ __ROR4__(v181[1], 22))\n                       + v19\n                       + (DWORD1(v181[1]) ^ (DWORD1(v181[1]) ^ LODWORD(v181[1])) & (DWORD2(v181[1]) ^ DWORD1(v181[1])));\n      v21 = __ROR4__(HIDWORD(v181[1]), 6);\n      v22 = (__ROR4__(v21, 5) ^ v21 ^ __ROR4__(HIDWORD(v181[1]), 25))\n          + DWORD2(v181[0])\n          + v192\n          + v3[5]\n          + (DWORD1(v181[0]) ^ HIDWORD(v181[1]) & (DWORD1(v181[0]) ^ LODWORD(v181[0])));\n      v23 = __ROR4__(HIDWORD(v181[0]), 2);\n      DWORD2(v181[1]) += v22;\n      DWORD2(v181[0]) = (__ROR4__(v23, 11) ^ v23 ^ __ROR4__(HIDWORD(v181[0]), 22))\n                      + v22\n                      + (LODWORD(v181[1]) ^ (LODWORD(v181[1]) ^ HIDWORD(v181[0])) & (DWORD1(v181[1]) ^ LODWORD(v181[1])));\n      v24 = __ROR4__(DWORD2(v181[1]), 6);\n      v25 = (__ROR4__(v24, 5) ^ v24 ^ __ROR4__(DWORD2(v181[1]), 25))\n          + DWORD1(v181[0])\n          + v191\n          + v3[6]\n          + (LODWORD(v181[0]) ^ DWORD2(v181[1]) & (LODWORD(v181[0]) ^ HIDWORD(v181[1])));\n      v26 = __ROR4__(DWORD2(v181[0]), 2);\n      DWORD1(v181[1]) += v25;\n      DWORD1(v181[0]) = (__ROR4__(v26, 11) ^ v26 ^ __ROR4__(DWORD2(v181[0]), 22))\n                      + v25\n                      + (HIDWORD(v181[0]) ^ (HIDWORD(v181[0]) ^ DWORD2(v181[0])) & (LODWORD(v181[1]) ^ HIDWORD(v181[0])));\n      v27 = __ROR4__(DWORD1(v181[1]), 6);\n      v28 = (__ROR4__(v27, 5) ^ v27 ^ __ROR4__(DWORD1(v181[1]), 25))\n          + LODWORD(v181[0])\n          + v190\n          + v3[7]\n          + (HIDWORD(v181[1]) ^ DWORD1(v181[1]) & (HIDWORD(v181[1]) ^ DWORD2(v181[1])));\n      v29 = __ROR4__(DWORD1(v181[0]), 2);\n      LODWORD(v181[1]) += v28;\n      LODWORD(v181[0]) = (__ROR4__(v29, 11) ^ v29 ^ __ROR4__(DWORD1(v181[0]), 22))\n                       + v28\n                       + (DWORD2(v181[0]) ^ (DWORD2(v181[0]) ^ DWORD1(v181[0])) & (HIDWORD(v181[0]) ^ DWORD2(v181[0])));\n      v30 = __ROR4__(v181[1], 6);\n      v31 = (__ROR4__(v30, 5) ^ v30 ^ __ROR4__(v181[1], 25))\n          + HIDWORD(v181[1])\n          + v189\n          + v3[8]\n          + (DWORD2(v181[1]) ^ v181[1] & (DWORD2(v181[1]) ^ DWORD1(v181[1])));\n      v32 = __ROR4__(v181[0], 2);\n      HIDWORD(v181[0]) += v31;\n      HIDWORD(v181[1]) = (__ROR4__(v32, 11) ^ v32 ^ __ROR4__(v181[0], 22))\n                       + v31\n                       + (DWORD1(v181[0]) ^ (DWORD1(v181[0]) ^ LODWORD(v181[0])) & (DWORD2(v181[0]) ^ DWORD1(v181[0])));\n      v33 = __ROR4__(HIDWORD(v181[0]), 6);\n      v34 = (__ROR4__(v33, 5) ^ v33 ^ __ROR4__(HIDWORD(v181[0]), 25))\n          + DWORD2(v181[1])\n          + v188\n          + v3[9]\n          + (DWORD1(v181[1]) ^ HIDWORD(v181[0]) & (DWORD1(v181[1]) ^ LODWORD(v181[1])));\n      v35 = __ROR4__(HIDWORD(v181[1]), 2);\n      DWORD2(v181[0]) += v34;\n      DWORD2(v181[1]) = (__ROR4__(v35, 11) ^ v35 ^ __ROR4__(HIDWORD(v181[1]), 22))\n                      + v34\n                      + (LODWORD(v181[0]) ^ (LODWORD(v181[0]) ^ HIDWORD(v181[1])) & (DWORD1(v181[0]) ^ LODWORD(v181[0])));\n      v36 = __ROR4__(DWORD2(v181[0]), 6);\n      v37 = (__ROR4__(v36, 5) ^ v36 ^ __ROR4__(DWORD2(v181[0]), 25))\n          + DWORD1(v181[1])\n          + v187\n          + v3[10]\n          + (LODWORD(v181[1]) ^ DWORD2(v181[0]) & (LODWORD(v181[1]) ^ HIDWORD(v181[0])));\n      v38 = __ROR4__(DWORD2(v181[1]), 2);\n      DWORD1(v181[0]) += v37;\n      DWORD1(v181[1]) = (__ROR4__(v38, 11) ^ v38 ^ __ROR4__(DWORD2(v181[1]), 22))\n                      + v37\n                      + (HIDWORD(v181[1]) ^ (HIDWORD(v181[1]) ^ DWORD2(v181[1])) & (LODWORD(v181[0]) ^ HIDWORD(v181[1])));\n      v39 = __ROR4__(DWORD1(v181[0]), 6);\n      v40 = (__ROR4__(v39, 5) ^ v39 ^ __ROR4__(DWORD1(v181[0]), 25))\n          + LODWORD(v181[1])\n          + v186\n          + v3[11]\n          + (HIDWORD(v181[0]) ^ DWORD1(v181[0]) & (HIDWORD(v181[0]) ^ DWORD2(v181[0])));\n      v41 = __ROR4__(DWORD1(v181[1]), 2);\n      LODWORD(v181[0]) += v40;\n      LODWORD(v181[1]) = (__ROR4__(v41, 11) ^ v41 ^ __ROR4__(DWORD1(v181[1]), 22))\n                       + v40\n                       + (DWORD2(v181[1]) ^ (DWORD2(v181[1]) ^ DWORD1(v181[1])) & (HIDWORD(v181[1]) ^ DWORD2(v181[1])));\n      v42 = __ROR4__(v181[0], 6);\n      v43 = (__ROR4__(v42, 5) ^ v42 ^ __ROR4__(v181[0], 25))\n          + HIDWORD(v181[0])\n          + v185\n          + v3[12]\n          + (DWORD2(v181[0]) ^ v181[0] & (DWORD2(v181[0]) ^ DWORD1(v181[0])));\n      v44 = __ROR4__(v181[1], 2);\n      HIDWORD(v181[1]) += v43;\n      HIDWORD(v181[0]) = (__ROR4__(v44, 11) ^ v44 ^ __ROR4__(v181[1], 22))\n                       + v43\n                       + (DWORD1(v181[1]) ^ (DWORD1(v181[1]) ^ LODWORD(v181[1])) & (DWORD2(v181[1]) ^ DWORD1(v181[1])));\n      v45 = __ROR4__(HIDWORD(v181[1]), 6);\n      v46 = (__ROR4__(v45, 5) ^ v45 ^ __ROR4__(HIDWORD(v181[1]), 25))\n          + DWORD2(v181[0])\n          + v184\n          + v3[13]\n          + (DWORD1(v181[0]) ^ HIDWORD(v181[1]) & (DWORD1(v181[0]) ^ LODWORD(v181[0])));\n      v47 = __ROR4__(HIDWORD(v181[0]), 2);\n      DWORD2(v181[1]) += v46;\n      DWORD2(v181[0]) = (__ROR4__(v47, 11) ^ v47 ^ __ROR4__(HIDWORD(v181[0]), 22))\n                      + v46\n                      + (LODWORD(v181[1]) ^ (LODWORD(v181[1]) ^ HIDWORD(v181[0])) & (DWORD1(v181[1]) ^ LODWORD(v181[1])));\n      v48 = __ROR4__(DWORD2(v181[1]), 6);\n      v49 = (__ROR4__(v48, 5) ^ v48 ^ __ROR4__(DWORD2(v181[1]), 25))\n          + DWORD1(v181[0])\n          + v183\n          + v3[14]\n          + (LODWORD(v181[0]) ^ DWORD2(v181[1]) & (LODWORD(v181[0]) ^ HIDWORD(v181[1])));\n      v50 = __ROR4__(DWORD2(v181[0]), 2);\n      DWORD1(v181[1]) += v49;\n      DWORD1(v181[0]) = (__ROR4__(v50, 11) ^ v50 ^ __ROR4__(DWORD2(v181[0]), 22))\n                      + v49\n                      + (HIDWORD(v181[0]) ^ (HIDWORD(v181[0]) ^ DWORD2(v181[0])) & (LODWORD(v181[1]) ^ HIDWORD(v181[0])));\n      v51 = __ROR4__(DWORD1(v181[1]), 6);\n      v52 = (__ROR4__(v51, 5) ^ v51 ^ __ROR4__(DWORD1(v181[1]), 25))\n          + LODWORD(v181[0])\n          + v182\n          + v3[15]\n          + (HIDWORD(v181[1]) ^ DWORD1(v181[1]) & (HIDWORD(v181[1]) ^ DWORD2(v181[1])));\n      result = DWORD2(v181[0]) ^ DWORD1(v181[0]);\n      v54 = __ROR4__(DWORD1(v181[0]), 2);\n      v55 = v52 + (DWORD2(v181[0]) ^ (DWORD2(v181[0]) ^ DWORD1(v181[0])) & (HIDWORD(v181[0]) ^ DWORD2(v181[0])));\n      v56 = LODWORD(v181[1]) + v52;\n      LODWORD(v181[1]) = v56;\n      v57 = (__ROR4__(v54, 11) ^ v54 ^ __ROR4__(DWORD1(v181[0]), 22)) + v55;\n      LODWORD(v181[0]) = v57;\n      do\n      {\n        v3 += 16;\n        v58 = DWORD2(v181[1]) ^ v56 & (DWORD2(v181[1]) ^ DWORD1(v181[1]));\n        v59 = v56;\n        v60 = __ROR4__(v56, 6);\n        v61 = (__ROR4__(v60, 5) ^ v60 ^ __ROR4__(v59, 25)) + v58;\n        v62 = __ROR4__(v183, 17);\n        v63 = __ROR4__(v196, 7);\n        v64 = HIDWORD(v181[1]) + *v3 + v61;\n        v197 += v188 + (v62 ^ (v183 >> 10) ^ __ROR4__(v62, 2)) + (__ROR4__(v63, 11) ^ v63 ^ (v196 >> 3));\n        v65 = v197 + v64;\n        v66 = v57;\n        v67 = DWORD1(v181[0]) ^ v57;\n        v68 = v66;\n        v69 = __ROR4__(v66, 2);\n        HIDWORD(v181[0]) += v65;\n        HIDWORD(v181[1]) = (__ROR4__(v69, 11) ^ v69 ^ __ROR4__(v68, 22)) + v65 + (DWORD1(v181[0]) ^ v67 & result);\n        v70 = __ROR4__(HIDWORD(v181[0]), 6);\n        v71 = (__ROR4__(v70, 5) ^ v70 ^ __ROR4__(HIDWORD(v181[0]), 25))\n            + (DWORD1(v181[1]) ^ HIDWORD(v181[0]) & (DWORD1(v181[1]) ^ LODWORD(v181[1])));\n        v72 = __ROR4__(v182, 17);\n        v73 = __ROR4__(v195, 7);\n        v74 = DWORD2(v181[1]) + v3[1] + v71;\n        v196 += v187 + (v72 ^ (v182 >> 10) ^ __ROR4__(v72, 2)) + (__ROR4__(v73, 11) ^ v73 ^ (v195 >> 3));\n        v75 = v196 + v74;\n        v76 = __ROR4__(HIDWORD(v181[1]), 2);\n        DWORD2(v181[0]) += v75;\n        DWORD2(v181[1]) = (__ROR4__(v76, 11) ^ v76 ^ __ROR4__(HIDWORD(v181[1]), 22))\n                        + v75\n                        + (LODWORD(v181[0]) ^ (LODWORD(v181[0]) ^ HIDWORD(v181[1])) & v67);\n        v77 = __ROR4__(DWORD2(v181[0]), 6);\n        v78 = (__ROR4__(v77, 5) ^ v77 ^ __ROR4__(DWORD2(v181[0]), 25))\n            + (LODWORD(v181[1]) ^ DWORD2(v181[0]) & (LODWORD(v181[1]) ^ HIDWORD(v181[0])));\n        v79 = __ROR4__(v197, 17);\n        v80 = __ROR4__(v194, 7);\n        v81 = DWORD1(v181[1]) + v3[2] + v78;\n        v195 += v186 + (v79 ^ (v197 >> 10) ^ __ROR4__(v79, 2)) + (__ROR4__(v80, 11) ^ v80 ^ (v194 >> 3));\n        v82 = v195 + v81;\n        v83 = __ROR4__(DWORD2(v181[1]), 2);\n        DWORD1(v181[0]) += v82;\n        DWORD1(v181[1]) = (__ROR4__(v83, 11) ^ v83 ^ __ROR4__(DWORD2(v181[1]), 22))\n                        + v82\n                        + (HIDWORD(v181[1]) ^ (HIDWORD(v181[1]) ^ DWORD2(v181[1])) & (LODWORD(v181[0]) ^ HIDWORD(v181[1])));\n        v84 = __ROR4__(DWORD1(v181[0]), 6);\n        v85 = (__ROR4__(v84, 5) ^ v84 ^ __ROR4__(DWORD1(v181[0]), 25))\n            + (HIDWORD(v181[0]) ^ DWORD1(v181[0]) & (HIDWORD(v181[0]) ^ DWORD2(v181[0])));\n        v86 = __ROR4__(v196, 17);\n        v87 = __ROR4__(v193, 7);\n        v88 = LODWORD(v181[1]) + v3[3] + v85;\n        v194 += v185 + (v86 ^ (v196 >> 10) ^ __ROR4__(v86, 2)) + (__ROR4__(v87, 11) ^ v87 ^ (v193 >> 3));\n        v89 = v194 + v88;\n        v90 = __ROR4__(DWORD1(v181[1]), 2);\n        LODWORD(v181[0]) += v89;\n        LODWORD(v181[1]) = (__ROR4__(v90, 11) ^ v90 ^ __ROR4__(DWORD1(v181[1]), 22))\n                         + v89\n                         + (DWORD2(v181[1]) ^ (DWORD2(v181[1]) ^ DWORD1(v181[1])) & (HIDWORD(v181[1]) ^ DWORD2(v181[1])));\n        v91 = __ROR4__(v181[0], 6);\n        v92 = (__ROR4__(v91, 5) ^ v91 ^ __ROR4__(v181[0], 25))\n            + (DWORD2(v181[0]) ^ v181[0] & (DWORD2(v181[0]) ^ DWORD1(v181[0])));\n        v93 = __ROR4__(v195, 17);\n        v94 = __ROR4__(v192, 7);\n        v95 = HIDWORD(v181[0]) + v3[4] + v92;\n        v193 += v184 + (v93 ^ (v195 >> 10) ^ __ROR4__(v93, 2)) + (__ROR4__(v94, 11) ^ v94 ^ (v192 >> 3));\n        v96 = v193 + v95;\n        v97 = __ROR4__(v181[1], 2);\n        HIDWORD(v181[1]) += v96;\n        HIDWORD(v181[0]) = (__ROR4__(v97, 11) ^ v97 ^ __ROR4__(v181[1], 22))\n                         + v96\n                         + (DWORD1(v181[1]) ^ (DWORD1(v181[1]) ^ LODWORD(v181[1])) & (DWORD2(v181[1]) ^ DWORD1(v181[1])));\n        v98 = __ROR4__(HIDWORD(v181[1]), 6);\n        v99 = (__ROR4__(v98, 5) ^ v98 ^ __ROR4__(HIDWORD(v181[1]), 25))\n            + (DWORD1(v181[0]) ^ HIDWORD(v181[1]) & (DWORD1(v181[0]) ^ LODWORD(v181[0])));\n        v100 = __ROR4__(v194, 17);\n        v101 = __ROR4__(v191, 7);\n        v102 = DWORD2(v181[0]) + v3[5] + v99;\n        v192 += v183 + (v100 ^ (v194 >> 10) ^ __ROR4__(v100, 2)) + (__ROR4__(v101, 11) ^ v101 ^ (v191 >> 3));\n        v103 = v192 + v102;\n        v104 = __ROR4__(HIDWORD(v181[0]), 2);\n        DWORD2(v181[1]) += v103;\n        DWORD2(v181[0]) = (__ROR4__(v104, 11) ^ v104 ^ __ROR4__(HIDWORD(v181[0]), 22))\n                        + v103\n                        + (LODWORD(v181[1]) ^ (LODWORD(v181[1]) ^ HIDWORD(v181[0])) & (DWORD1(v181[1]) ^ LODWORD(v181[1])));\n        v105 = __ROR4__(DWORD2(v181[1]), 6);\n        v106 = (__ROR4__(v105, 5) ^ v105 ^ __ROR4__(DWORD2(v181[1]), 25))\n             + (LODWORD(v181[0]) ^ DWORD2(v181[1]) & (LODWORD(v181[0]) ^ HIDWORD(v181[1])));\n        v107 = __ROR4__(v193, 17);\n        v108 = __ROR4__(v190, 7);\n        v109 = DWORD1(v181[0]) + v3[6] + v106;\n        v191 += v182 + (v107 ^ (v193 >> 10) ^ __ROR4__(v107, 2)) + (__ROR4__(v108, 11) ^ v108 ^ (v190 >> 3));\n        v110 = v191 + v109;\n        v111 = __ROR4__(DWORD2(v181[0]), 2);\n        DWORD1(v181[1]) += v110;\n        DWORD1(v181[0]) = (__ROR4__(v111, 11) ^ v111 ^ __ROR4__(DWORD2(v181[0]), 22))\n                        + v110\n                        + (HIDWORD(v181[0]) ^ (HIDWORD(v181[0]) ^ DWORD2(v181[0])) & (LODWORD(v181[1]) ^ HIDWORD(v181[0])));\n        v112 = __ROR4__(DWORD1(v181[1]), 6);\n        v113 = (__ROR4__(v112, 5) ^ v112 ^ __ROR4__(DWORD1(v181[1]), 25))\n             + (HIDWORD(v181[1]) ^ DWORD1(v181[1]) & (HIDWORD(v181[1]) ^ DWORD2(v181[1])));\n        v114 = __ROR4__(v192, 17);\n        v115 = __ROR4__(v189, 7);\n        v116 = LODWORD(v181[0]) + v3[7] + v113;\n        v190 += v197 + (v114 ^ (v192 >> 10) ^ __ROR4__(v114, 2)) + (__ROR4__(v115, 11) ^ v115 ^ (v189 >> 3));\n        v117 = v190 + v116;\n        v118 = __ROR4__(DWORD1(v181[0]), 2);\n        LODWORD(v181[1]) += v117;\n        LODWORD(v181[0]) = (__ROR4__(v118, 11) ^ v118 ^ __ROR4__(DWORD1(v181[0]), 22))\n                         + v117\n                         + (DWORD2(v181[0]) ^ (DWORD2(v181[0]) ^ DWORD1(v181[0])) & (HIDWORD(v181[0]) ^ DWORD2(v181[0])));\n        v119 = __ROR4__(v181[1], 6);\n        v120 = (__ROR4__(v119, 5) ^ v119 ^ __ROR4__(v181[1], 25))\n             + (DWORD2(v181[1]) ^ v181[1] & (DWORD2(v181[1]) ^ DWORD1(v181[1])));\n        v121 = __ROR4__(v191, 17);\n        v122 = __ROR4__(v188, 7);\n        v123 = HIDWORD(v181[1]) + v3[8] + v120;\n        v189 += v196 + (v121 ^ (v191 >> 10) ^ __ROR4__(v121, 2)) + (__ROR4__(v122, 11) ^ v122 ^ (v188 >> 3));\n        v124 = v189 + v123;\n        v125 = __ROR4__(v181[0], 2);\n        HIDWORD(v181[0]) += v124;\n        HIDWORD(v181[1]) = (__ROR4__(v125, 11) ^ v125 ^ __ROR4__(v181[0], 22))\n                         + v124\n                         + (DWORD1(v181[0]) ^ (DWORD1(v181[0]) ^ LODWORD(v181[0])) & (DWORD2(v181[0]) ^ DWORD1(v181[0])));\n        v126 = __ROR4__(HIDWORD(v181[0]), 6);\n        v127 = (__ROR4__(v126, 5) ^ v126 ^ __ROR4__(HIDWORD(v181[0]), 25))\n             + (DWORD1(v181[1]) ^ HIDWORD(v181[0]) & (DWORD1(v181[1]) ^ LODWORD(v181[1])));\n        v128 = __ROR4__(v190, 17);\n        v129 = __ROR4__(v187, 7);\n        v130 = DWORD2(v181[1]) + v3[9] + v127;\n        v188 += v195 + (v128 ^ (v190 >> 10) ^ __ROR4__(v128, 2)) + (__ROR4__(v129, 11) ^ v129 ^ (v187 >> 3));\n        v131 = v188 + v130;\n        v132 = __ROR4__(HIDWORD(v181[1]), 2);\n        DWORD2(v181[0]) += v131;\n        DWORD2(v181[1]) = (__ROR4__(v132, 11) ^ v132 ^ __ROR4__(HIDWORD(v181[1]), 22))\n                        + v131\n                        + (LODWORD(v181[0]) ^ (LODWORD(v181[0]) ^ HIDWORD(v181[1])) & (DWORD1(v181[0]) ^ LODWORD(v181[0])));\n        v133 = __ROR4__(DWORD2(v181[0]), 6);\n        v134 = (__ROR4__(v133, 5) ^ v133 ^ __ROR4__(DWORD2(v181[0]), 25))\n             + (LODWORD(v181[1]) ^ DWORD2(v181[0]) & (LODWORD(v181[1]) ^ HIDWORD(v181[0])));\n        v135 = __ROR4__(v189, 17);\n        v136 = __ROR4__(v186, 7);\n        v137 = DWORD1(v181[1]) + v3[10] + v134;\n        v187 += v194 + (v135 ^ (v189 >> 10) ^ __ROR4__(v135, 2)) + (__ROR4__(v136, 11) ^ v136 ^ (v186 >> 3));\n        v138 = v187 + v137;\n        v139 = __ROR4__(DWORD2(v181[1]), 2);\n        DWORD1(v181[0]) += v138;\n        DWORD1(v181[1]) = (__ROR4__(v139, 11) ^ v139 ^ __ROR4__(DWORD2(v181[1]), 22))\n                        + v138\n                        + (HIDWORD(v181[1]) ^ (HIDWORD(v181[1]) ^ DWORD2(v181[1])) & (LODWORD(v181[0]) ^ HIDWORD(v181[1])));\n        v140 = __ROR4__(DWORD1(v181[0]), 6);\n        v141 = (__ROR4__(v140, 5) ^ v140 ^ __ROR4__(DWORD1(v181[0]), 25))\n             + (HIDWORD(v181[0]) ^ DWORD1(v181[0]) & (HIDWORD(v181[0]) ^ DWORD2(v181[0])));\n        v142 = __ROR4__(v188, 17);\n        v143 = __ROR4__(v185, 7);\n        v144 = LODWORD(v181[1]) + v3[11] + v141;\n        v186 += v193 + (v142 ^ (v188 >> 10) ^ __ROR4__(v142, 2)) + (__ROR4__(v143, 11) ^ v143 ^ (v185 >> 3));\n        v145 = v186 + v144;\n        v146 = __ROR4__(DWORD1(v181[1]), 2);\n        LODWORD(v181[0]) += v145;\n        LODWORD(v181[1]) = (__ROR4__(v146, 11) ^ v146 ^ __ROR4__(DWORD1(v181[1]), 22))\n                         + v145\n                         + (DWORD2(v181[1]) ^ (DWORD2(v181[1]) ^ DWORD1(v181[1])) & (HIDWORD(v181[1]) ^ DWORD2(v181[1])));\n        v147 = __ROR4__(v181[0], 6);\n        v148 = (__ROR4__(v147, 5) ^ v147 ^ __ROR4__(v181[0], 25))\n             + (DWORD2(v181[0]) ^ v181[0] & (DWORD2(v181[0]) ^ DWORD1(v181[0])));\n        v149 = __ROR4__(v187, 17);\n        v150 = __ROR4__(v184, 7);\n        v151 = HIDWORD(v181[0]) + v3[12] + v148;\n        v185 += v192 + (v149 ^ (v187 >> 10) ^ __ROR4__(v149, 2)) + (__ROR4__(v150, 11) ^ v150 ^ (v184 >> 3));\n        v152 = v185 + v151;\n        v153 = __ROR4__(v181[1], 2);\n        HIDWORD(v181[1]) += v152;\n        HIDWORD(v181[0]) = (__ROR4__(v153, 11) ^ v153 ^ __ROR4__(v181[1], 22))\n                         + v152\n                         + (DWORD1(v181[1]) ^ (DWORD1(v181[1]) ^ LODWORD(v181[1])) & (DWORD2(v181[1]) ^ DWORD1(v181[1])));\n        v154 = __ROR4__(HIDWORD(v181[1]), 6);\n        v155 = (__ROR4__(v154, 5) ^ v154 ^ __ROR4__(HIDWORD(v181[1]), 25))\n             + (DWORD1(v181[0]) ^ HIDWORD(v181[1]) & (DWORD1(v181[0]) ^ LODWORD(v181[0])));\n        v156 = __ROR4__(v186, 17);\n        v157 = __ROR4__(v183, 7);\n        v158 = DWORD2(v181[0]) + v3[13] + v155;\n        v184 += v191 + (v156 ^ (v186 >> 10) ^ __ROR4__(v156, 2)) + (__ROR4__(v157, 11) ^ v157 ^ (v183 >> 3));\n        v159 = v184 + v158;\n        v160 = __ROR4__(HIDWORD(v181[0]), 2);\n        DWORD2(v181[1]) += v159;\n        DWORD2(v181[0]) = (__ROR4__(v160, 11) ^ v160 ^ __ROR4__(HIDWORD(v181[0]), 22))\n                        + v159\n                        + (LODWORD(v181[1]) ^ (LODWORD(v181[1]) ^ HIDWORD(v181[0])) & (DWORD1(v181[1]) ^ LODWORD(v181[1])));\n        v161 = __ROR4__(DWORD2(v181[1]), 6);\n        v162 = (__ROR4__(v161, 5) ^ v161 ^ __ROR4__(DWORD2(v181[1]), 25))\n             + (LODWORD(v181[0]) ^ DWORD2(v181[1]) & (LODWORD(v181[0]) ^ HIDWORD(v181[1])));\n        v163 = __ROR4__(v185, 17);\n        v164 = __ROR4__(v182, 7);\n        v165 = DWORD1(v181[0]) + v3[14] + v162;\n        v183 += v190 + (v163 ^ (v185 >> 10) ^ __ROR4__(v163, 2)) + (__ROR4__(v164, 11) ^ v164 ^ (v182 >> 3));\n        v166 = v183 + v165;\n        v167 = __ROR4__(DWORD2(v181[0]), 2);\n        DWORD1(v181[1]) += v166;\n        DWORD1(v181[0]) = (__ROR4__(v167, 11) ^ v167 ^ __ROR4__(DWORD2(v181[0]), 22))\n                        + v166\n                        + (HIDWORD(v181[0]) ^ (HIDWORD(v181[0]) ^ DWORD2(v181[0])) & (LODWORD(v181[1]) ^ HIDWORD(v181[0])));\n        v168 = __ROR4__(DWORD1(v181[1]), 6);\n        v169 = (__ROR4__(v168, 5) ^ v168 ^ __ROR4__(DWORD1(v181[1]), 25))\n             + (HIDWORD(v181[1]) ^ DWORD1(v181[1]) & (HIDWORD(v181[1]) ^ DWORD2(v181[1])));\n        v170 = __ROR4__(v184, 17);\n        v171 = __ROR4__(v197, 7);\n        v172 = LODWORD(v181[0]) + v3[15] + v169;\n        v182 += v189 + (v170 ^ (v184 >> 10) ^ __ROR4__(v170, 2)) + (__ROR4__(v171, 11) ^ v171 ^ (v197 >> 3));\n        v173 = v182 + v172;\n        result = DWORD2(v181[0]) ^ DWORD1(v181[0]);\n        v174 = __ROR4__(DWORD1(v181[0]), 2);\n        v175 = v173 + (DWORD2(v181[0]) ^ (DWORD2(v181[0]) ^ DWORD1(v181[0])) & (HIDWORD(v181[0]) ^ DWORD2(v181[0])));\n        v56 = LODWORD(v181[1]) + v173;\n        LODWORD(v181[1]) = v56;\n        v57 = (__ROR4__(v174, 11) ^ v174 ^ __ROR4__(DWORD1(v181[0]), 22)) + v175;\n        LODWORD(v181[0]) = v57;\n      }\n      while ( (unsigned int)v3 < v198 );\n      a2 = v200 + 16;\n      v176 = v199;\n      v200 += 16;\n      if ( (v198 & 1) != 0 )\n        break;\n      v199->m128i_i32[0] += v57;\n      v176[1].m128i_i32[0] += v56;\n      v177 = HIDWORD(v181[0]);\n      v178 = DWORD2(v181[0]);\n      v176->m128i_i32[1] += DWORD1(v181[0]);\n      v176->m128i_i32[2] += v178;\n      v176->m128i_i32[3] += v177;\n      v179 = DWORD2(v181[1]);\n      result = DWORD1(v181[1]);\n      v180 = HIDWORD(v181[1]);\n      v176[1].m128i_i32[1] += DWORD1(v181[1]);\n      v176[1].m128i_i32[2] += v179;\n      v176[1].m128i_i32[3] += v180;\n      a1 = v176;\n      if ( (unsigned int)a2 >= v201 )\n        return result;\nLABEL_3:\n      qmemcpy(v181, a1, sizeof(v181));\n      v3 = (_DWORD *)v198;\n    }\n    v5 = _mm_add_epi32(_mm_loadu_si128(v199 + 1), (__m128i)v181[1]);\n    v4 = _mm_add_epi32(_mm_loadu_si128(v199), (__m128i)v181[0]);\n    v199[1] = v5;\n    *v176 = v4;\n  }\n  while ( (unsigned int)a2 < v201 );\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_420F84",
        "Total XOR and shift operations": 312,
        "XOR operations": 312,
        "Shift operations": 0,
        "Operation percentage": "51.74%",
        "Function Body": "\nint __cdecl sub_420F84(int *a1, int *a2)\n{\n  int v2; // edx\n  int v3; // eax\n  int v4; // edx\n  int v5; // ebp\n  int v6; // esi\n  int v7; // ebx\n  int v8; // eax\n  int v9; // ebp\n  int v10; // edi\n  int v11; // eax\n  int v12; // esi\n  int v13; // edx\n  int v14; // eax\n  int v15; // edi\n  int v16; // ebx\n  int v17; // eax\n  int v18; // edx\n  int v19; // ebp\n  int v20; // eax\n  int v21; // ebx\n  int v22; // esi\n  int v23; // eax\n  int v24; // ebp\n  int v25; // edi\n  int v26; // eax\n  int v27; // esi\n  int v28; // edx\n  int v29; // eax\n  int v30; // edi\n  int v31; // ebx\n  int v32; // eax\n  int v33; // edx\n  int v34; // ebp\n  int v35; // eax\n  int v36; // ebx\n  int v37; // esi\n  int v38; // eax\n  int v39; // ebp\n  int v40; // edi\n  int v41; // eax\n  int v42; // esi\n  int v43; // edx\n  int v44; // eax\n  int v45; // edi\n  int v46; // ebx\n  int v47; // eax\n  int v48; // edx\n  int v49; // ebp\n  int v50; // eax\n  int v51; // ebx\n  int v52; // esi\n  int v53; // edi\n  int v54; // ebp\n  int v55; // edx\n  int v56; // esi\n  int v57; // ebp\n  int v58; // edi\n  int v59; // edx\n  int v60; // ebx\n  int v61; // esi\n  int v62; // ebx\n  int v63; // eax\n  int v64; // edi\n  int v65; // ebp\n  int v66; // eax\n  int v67; // ebx\n  int v68; // edx\n  int v69; // esi\n  int v70; // ebp\n  int v71; // eax\n  int v72; // edx\n  int v73; // edi\n  int v74; // eax\n  int v75; // esi\n  int v76; // ebx\n  int v77; // eax\n  int v78; // edi\n  int v79; // ebp\n  int v80; // eax\n  int v81; // ebx\n  int v82; // edx\n  int v83; // esi\n  int v84; // ebp\n  int v85; // eax\n  int v86; // edx\n  int v87; // edi\n  int v88; // eax\n  int v89; // esi\n  int v90; // ebx\n  int v91; // eax\n  int v92; // edi\n  int v93; // ebp\n  int v94; // eax\n  int v95; // ebx\n  int v96; // edx\n  int v97; // esi\n  int v98; // ebp\n  int v99; // eax\n  int v100; // edx\n  int v101; // edi\n  int v102; // eax\n  int v103; // esi\n  int v104; // ebx\n  int v105; // eax\n  int v106; // edi\n  int v107; // ebp\n  int v108; // eax\n  int v109; // ebx\n  int v110; // edx\n  int v111; // ebp\n  int v112; // esi\n  int v113; // edi\n  int v114; // ebx\n  int v115; // edx\n  int v116; // ebp\n  int v117; // ebp\n  int v118; // esi\n  int v119; // edi\n  int v120; // ebx\n  int v121; // ebp\n  int v122; // esi\n  int v123; // edi\n  int v124; // ebx\n  int v125; // eax\n  int v126; // ebp\n  int v127; // ecx\n  int v128; // ecx\n  int v129; // esi\n  int v130; // edi\n  int v131; // ebp\n  int v132; // eax\n  int v133; // ecx\n  int v134; // esi\n  int v135; // ebx\n  int v136; // ecx\n  int v137; // edi\n  int v138; // ebp\n  int v139; // ecx\n  int v140; // ebx\n  int v141; // edx\n  int v142; // eax\n  int v143; // ebp\n  int v144; // esi\n  int v145; // eax\n  int v146; // edx\n  int v147; // edi\n  int v148; // eax\n  int v149; // esi\n  int v150; // ebx\n  int v151; // eax\n  int v152; // edi\n  int v153; // ebp\n  int v154; // eax\n  int v155; // ebx\n  int v156; // edx\n  int v157; // eax\n  int v158; // ebp\n  int v159; // esi\n  int v160; // eax\n  int v161; // edx\n  int v162; // edi\n  int v163; // eax\n  int v164; // esi\n  int v165; // ebx\n  int v166; // eax\n  int v167; // edi\n  int v168; // ebp\n  int v169; // eax\n  int v170; // ebx\n  int v171; // edx\n  int v172; // eax\n  int v173; // ebp\n  int v174; // esi\n  int v175; // eax\n  int v176; // edx\n  int v177; // eax\n  int v178; // ebx\n  int v179; // edi\n  int v180; // ebp\n  int v181; // eax\n  int v182; // ebp\n  int v183; // edx\n  int v184; // esi\n  int v185; // edi\n  int v186; // ebx\n  int v187; // ecx\n  int v188; // esi\n  int v189; // ebp\n  int v190; // esi\n  int v191; // ebx\n  int v192; // edx\n  int v193; // eax\n  int result; // eax\n  int v195; // [esp+10h] [ebp-4Ch]\n  int v196; // [esp+10h] [ebp-4Ch]\n  int v197; // [esp+10h] [ebp-4Ch]\n  int v198; // [esp+10h] [ebp-4Ch]\n  int v199; // [esp+14h] [ebp-48h]\n  int v200; // [esp+14h] [ebp-48h]\n  int v201; // [esp+14h] [ebp-48h]\n  int v202; // [esp+14h] [ebp-48h]\n  int v203; // [esp+14h] [ebp-48h]\n  int v204; // [esp+18h] [ebp-44h]\n  int v205; // [esp+18h] [ebp-44h]\n  int v206; // [esp+18h] [ebp-44h]\n  int v207; // [esp+1Ch] [ebp-40h]\n  int v208; // [esp+1Ch] [ebp-40h]\n  int v209; // [esp+1Ch] [ebp-40h]\n  int v210; // [esp+1Ch] [ebp-40h]\n  int v211; // [esp+20h] [ebp-3Ch]\n  int v212; // [esp+20h] [ebp-3Ch]\n  int v213; // [esp+20h] [ebp-3Ch]\n  int v214; // [esp+20h] [ebp-3Ch]\n  int v215; // [esp+24h] [ebp-38h]\n  int v216; // [esp+24h] [ebp-38h]\n  int v217; // [esp+24h] [ebp-38h]\n  int v218; // [esp+24h] [ebp-38h]\n  int v219; // [esp+28h] [ebp-34h]\n  int v220; // [esp+28h] [ebp-34h]\n  int v221; // [esp+28h] [ebp-34h]\n  int v222; // [esp+28h] [ebp-34h]\n  int v223; // [esp+28h] [ebp-34h]\n  int v224; // [esp+2Ch] [ebp-30h]\n  int v225; // [esp+2Ch] [ebp-30h]\n  int v226; // [esp+2Ch] [ebp-30h]\n  int v227; // [esp+2Ch] [ebp-30h]\n  int v228; // [esp+2Ch] [ebp-30h]\n  int v229; // [esp+2Ch] [ebp-30h]\n  int v230; // [esp+30h] [ebp-2Ch]\n  int v231; // [esp+30h] [ebp-2Ch]\n  int v232; // [esp+30h] [ebp-2Ch]\n  int v233; // [esp+30h] [ebp-2Ch]\n  int v234; // [esp+30h] [ebp-2Ch]\n  int v235; // [esp+34h] [ebp-28h]\n  int v236; // [esp+34h] [ebp-28h]\n  int v237; // [esp+34h] [ebp-28h]\n  int v238; // [esp+34h] [ebp-28h]\n  int v239; // [esp+34h] [ebp-28h]\n  int v240; // [esp+38h] [ebp-24h]\n  int v241; // [esp+38h] [ebp-24h]\n  int v242; // [esp+38h] [ebp-24h]\n  int v243; // [esp+38h] [ebp-24h]\n  int v244; // [esp+3Ch] [ebp-20h]\n  int v245; // [esp+3Ch] [ebp-20h]\n  int v246; // [esp+3Ch] [ebp-20h]\n  int v247; // [esp+3Ch] [ebp-20h]\n  int v248; // [esp+40h] [ebp-1Ch]\n  int v249; // [esp+40h] [ebp-1Ch]\n  int v250; // [esp+40h] [ebp-1Ch]\n  int v251; // [esp+40h] [ebp-1Ch]\n  int v252; // [esp+40h] [ebp-1Ch]\n  int v253; // [esp+40h] [ebp-1Ch]\n  int v254; // [esp+44h] [ebp-18h]\n  int v255; // [esp+44h] [ebp-18h]\n  int v256; // [esp+44h] [ebp-18h]\n  int v257; // [esp+44h] [ebp-18h]\n  int v258; // [esp+44h] [ebp-18h]\n  int v259; // [esp+44h] [ebp-18h]\n  int v260; // [esp+48h] [ebp-14h]\n  int v261; // [esp+48h] [ebp-14h]\n  int v262; // [esp+48h] [ebp-14h]\n  int v263; // [esp+48h] [ebp-14h]\n  int v264; // [esp+4Ch] [ebp-10h]\n  int v265; // [esp+4Ch] [ebp-10h]\n  int v266; // [esp+4Ch] [ebp-10h]\n  int v267; // [esp+4Ch] [ebp-10h]\n  int v268; // [esp+50h] [ebp-Ch]\n  int v269; // [esp+50h] [ebp-Ch]\n  int v270; // [esp+50h] [ebp-Ch]\n  int v271; // [esp+50h] [ebp-Ch]\n  int v272; // [esp+50h] [ebp-Ch]\n  int v273; // [esp+54h] [ebp-8h]\n  int v274; // [esp+54h] [ebp-8h]\n  int v275; // [esp+54h] [ebp-8h]\n  int v276; // [esp+54h] [ebp-8h]\n  int v277; // [esp+54h] [ebp-8h]\n  int v278; // [esp+54h] [ebp-8h]\n  int v279; // [esp+54h] [ebp-8h]\n  int v280; // [esp+54h] [ebp-8h]\n  int v281; // [esp+54h] [ebp-8h]\n  int v282; // [esp+58h] [ebp-4h]\n  int v283; // [esp+58h] [ebp-4h]\n  int v284; // [esp+58h] [ebp-4h]\n  int v285; // [esp+58h] [ebp-4h]\n  int v286; // [esp+58h] [ebp-4h]\n  int v287; // [esp+58h] [ebp-4h]\n  int v288; // [esp+58h] [ebp-4h]\n  int v289; // [esp+58h] [ebp-4h]\n  int v290; // [esp+58h] [ebp-4h]\n  int v291; // [esp+58h] [ebp-4h]\n  int v292; // [esp+58h] [ebp-4h]\n  int v293; // [esp+64h] [ebp+8h]\n  int v294; // [esp+64h] [ebp+8h]\n  int v295; // [esp+64h] [ebp+8h]\n  int v296; // [esp+64h] [ebp+8h]\n\n  v2 = a1[1];\n  v224 = *a2;\n  v3 = v2 & (a1[2] ^ a1[3]);\n  v4 = __ROR4__(v2, 2);\n  v5 = a1[4] + __ROL4__(*a1, 5) + (a1[3] ^ v3) + *a2 + 1518500249;\n  v219 = a2[1];\n  v6 = v219 + __ROL4__(v5, 5) + (a1[2] ^ *a1 & (v4 ^ a1[2])) + a1[3] + 1518500249;\n  v7 = __ROR4__(*a1, 2);\n  v282 = a2[2];\n  v8 = v282 + __ROL4__(v6, 5) + (v4 ^ v5 & (v7 ^ v4));\n  v9 = __ROR4__(v5, 2);\n  v10 = v8 + a1[2] + 1518500249;\n  v248 = a2[3];\n  v11 = v6 & (v7 ^ v9);\n  v12 = __ROR4__(v6, 2);\n  v13 = v248 + __ROL4__(v10, 5) + (v7 ^ v11) + v4 + 1518500249;\n  v244 = a2[4];\n  v14 = v244 + __ROL4__(v13, 5) + (v9 ^ v10 & (v12 ^ v9));\n  v15 = __ROR4__(v10, 2);\n  v16 = v14 + v7 + 1518500249;\n  v240 = a2[5];\n  v17 = v13 & (v15 ^ v12);\n  v18 = __ROR4__(v13, 2);\n  v19 = v240 + __ROL4__(v16, 5) + 1518500249 + (v12 ^ v17) + v9;\n  v230 = a2[6];\n  v20 = v16 & (v18 ^ v15);\n  v21 = __ROR4__(v16, 2);\n  v22 = v230 + __ROL4__(v19, 5) + 1518500249 + (v15 ^ v20) + v12;\n  v235 = a2[7];\n  v23 = v19 & (v21 ^ v18);\n  v24 = __ROR4__(v19, 2);\n  v25 = v235 + __ROL4__(v22, 5) + 1518500249 + (v18 ^ v23) + v15;\n  v264 = a2[8];\n  v26 = v22 & (v21 ^ v24);\n  v27 = __ROR4__(v22, 2);\n  v28 = v264 + __ROL4__(v25, 5) + 1518500249 + (v21 ^ v26) + v18;\n  v260 = a2[9];\n  v29 = v25 & (v27 ^ v24);\n  v30 = __ROR4__(v25, 2);\n  v31 = v260 + __ROL4__(v28, 5) + 1518500249 + (v24 ^ v29) + v21;\n  v254 = a2[10];\n  v32 = v27 ^ v28 & (v30 ^ v27);\n  v33 = __ROR4__(v28, 2);\n  v34 = v254 + __ROL4__(v31, 5) + 1518500249 + v32 + v24;\n  v268 = a2[11];\n  v35 = v31 & (v33 ^ v30);\n  v36 = __ROR4__(v31, 2);\n  v37 = v268 + __ROL4__(v34, 5) + 1518500249 + (v30 ^ v35) + v27;\n  v273 = a2[12];\n  v38 = v34 & (v36 ^ v33);\n  v39 = __ROR4__(v34, 2);\n  v40 = v273 + __ROL4__(v37, 5) + 1518500249 + (v33 ^ v38) + v30;\n  v199 = a2[13];\n  v41 = v37 & (v36 ^ v39);\n  v42 = __ROR4__(v37, 2);\n  v43 = v199 + __ROL4__(v40, 5) + 1518500249 + (v36 ^ v41) + v33;\n  v195 = a2[14];\n  v44 = v40 & (v42 ^ v39);\n  v45 = __ROR4__(v40, 2);\n  v46 = v195 + __ROL4__(v43, 5) + 1518500249 + (v39 ^ v44) + v36;\n  v293 = a2[15];\n  v47 = v43 & (v45 ^ v42);\n  v48 = __ROR4__(v43, 2);\n  v49 = v293 + __ROL4__(v46, 5) + 1518500249 + (v42 ^ v47) + v39;\n  v204 = __ROL4__(v224 ^ v282 ^ v264 ^ v199, 1);\n  v50 = v45 ^ v46 & (v48 ^ v45);\n  v51 = __ROR4__(v46, 2);\n  v52 = v204 + __ROL4__(v49, 5) + 1518500249 + v50 + v42;\n  v207 = __ROL4__(v219 ^ v248 ^ v260 ^ v195, 1);\n  v53 = v207 + __ROL4__(v52, 5) + 1518500249 + (v48 ^ v49 & (v51 ^ v48)) + v45;\n  v225 = __ROR4__(v49, 2);\n  v211 = __ROL4__(v282 ^ v244 ^ v254 ^ v293, 1);\n  v54 = v48 + 1518500249 + v211 + __ROL4__(v53, 5) + (v51 ^ v52 & (v51 ^ v225));\n  v215 = __ROL4__(v204 ^ v248 ^ v240 ^ v268, 1);\n  v283 = __ROR4__(v52, 2);\n  v55 = v51 + v215 + __ROL4__(v54, 5) + 1518500249 + (v53 & (v283 ^ v225) ^ v225);\n  v249 = __ROR4__(v53, 2);\n  v220 = __ROL4__(v207 ^ v244 ^ v230 ^ v273, 1);\n  v56 = v225 + 1859775393 + v220 + __ROL4__(v55, 5) + (v54 ^ v249 ^ v283);\n  v226 = __ROL4__(v211 ^ v240 ^ v235 ^ v199, 1);\n  v57 = __ROR4__(v54, 2);\n  v231 = __ROL4__(v215 ^ v230 ^ v264 ^ v195, 1);\n  v58 = v283 + 1859775393 + v226 + __ROL4__(v56, 5) + (v55 ^ v57 ^ v249);\n  v59 = __ROR4__(v55, 2);\n  v60 = v59 ^ v57 ^ v56;\n  v61 = __ROR4__(v56, 2);\n  v236 = __ROL4__(v220 ^ v235 ^ v260 ^ v293, 1);\n  v62 = v249 + 1859775393 + v231 + __ROL4__(v58, 5) + v60;\n  v63 = v59 ^ v58 ^ v61;\n  v64 = __ROR4__(v58, 2);\n  v65 = v236 + __ROL4__(v62, 5) + 1859775393 + v63 + v57;\n  v241 = __ROL4__(v204 ^ v226 ^ v264 ^ v254, 1);\n  v66 = v241 + __ROL4__(v65, 5) + 1859775393 + (v62 ^ v64 ^ v61);\n  v67 = __ROR4__(v62, 2);\n  v68 = v66 + v59;\n  v245 = __ROL4__(v207 ^ v231 ^ v260 ^ v268, 1);\n  v69 = v245 + __ROL4__(v68, 5) + 1859775393 + (v65 ^ v67 ^ v64) + v61;\n  v250 = __ROL4__(v211 ^ v236 ^ v254 ^ v273, 1);\n  v70 = __ROR4__(v65, 2);\n  v71 = v68 ^ v70 ^ v67;\n  v72 = __ROR4__(v68, 2);\n  v73 = v250 + __ROL4__(v69, 5) + 1859775393 + v71 + v64;\n  v255 = __ROL4__(v215 ^ v241 ^ v268 ^ v199, 1);\n  v74 = v72 ^ v70 ^ v69;\n  v75 = __ROR4__(v69, 2);\n  v76 = v255 + __ROL4__(v73, 5) + 1859775393 + v74 + v67;\n  v261 = __ROL4__(v220 ^ v245 ^ v273 ^ v195, 1);\n  v77 = v72 ^ v73 ^ v75;\n  v78 = __ROR4__(v73, 2);\n  v79 = v261 + __ROL4__(v76, 5) + 1859775393 + v77 + v70;\n  v200 = __ROL4__(v226 ^ v250 ^ v199 ^ v293, 1);\n  v80 = v200 + __ROL4__(v79, 5) + 1859775393 + (v76 ^ v78 ^ v75);\n  v81 = __ROR4__(v76, 2);\n  v82 = v80 + v72;\n  v196 = __ROL4__(v204 ^ v231 ^ v255 ^ v195, 1);\n  v83 = v196 + __ROL4__(v82, 5) + 1859775393 + (v79 ^ v81 ^ v78) + v75;\n  v84 = __ROR4__(v79, 2);\n  v294 = __ROL4__(v207 ^ v236 ^ v261 ^ v293, 1);\n  v85 = v294 + __ROL4__(v83, 5) + 1859775393 + (v82 ^ v84 ^ v81);\n  v86 = __ROR4__(v82, 2);\n  v87 = v85 + v78;\n  v205 = __ROL4__(v204 ^ v211 ^ v241 ^ v200, 1);\n  v88 = v86 ^ v84 ^ v83;\n  v89 = __ROR4__(v83, 2);\n  v90 = v205 + __ROL4__(v87, 5) + 1859775393 + v88 + v81;\n  v208 = __ROL4__(v207 ^ v215 ^ v245 ^ v196, 1);\n  v91 = v86 ^ v87 ^ v89;\n  v92 = __ROR4__(v87, 2);\n  v93 = v208 + __ROL4__(v90, 5) + 1859775393 + v91 + v84;\n  v212 = __ROL4__(v211 ^ v220 ^ v250 ^ v294, 1);\n  v94 = v212 + __ROL4__(v93, 5) + 1859775393 + (v90 ^ v92 ^ v89);\n  v95 = __ROR4__(v90, 2);\n  v96 = v94 + v86;\n  v216 = __ROL4__(v205 ^ v215 ^ v226 ^ v255, 1);\n  v97 = v216 + __ROL4__(v96, 5) + 1859775393 + (v93 ^ v95 ^ v92) + v89;\n  v98 = __ROR4__(v93, 2);\n  v221 = __ROL4__(v208 ^ v220 ^ v231 ^ v261, 1);\n  v99 = v221 + __ROL4__(v97, 5) + 1859775393 + (v96 ^ v98 ^ v95);\n  v100 = __ROR4__(v96, 2);\n  v101 = v99 + v92;\n  v227 = __ROL4__(v212 ^ v226 ^ v236 ^ v200, 1);\n  v102 = v100 ^ v98 ^ v97;\n  v103 = __ROR4__(v97, 2);\n  v104 = v227 + __ROL4__(v101, 5) + 1859775393 + v102 + v95;\n  v232 = __ROL4__(v216 ^ v231 ^ v241 ^ v196, 1);\n  v105 = v100 ^ v101 ^ v103;\n  v106 = __ROR4__(v101, 2);\n  v107 = v232 + __ROL4__(v104, 5) + 1859775393 + v105 + v98;\n  v237 = __ROL4__(v221 ^ v236 ^ v245 ^ v294, 1);\n  v108 = v104 ^ v106 ^ v103;\n  v109 = __ROR4__(v104, 2);\n  v242 = __ROL4__(v205 ^ v227 ^ v241 ^ v250, 1);\n  v284 = v237 + __ROL4__(v107, 5) + 1859775393 + v108 + v100;\n  v110 = v103 - 1894007588 + v242 + (v107 & v109 | v106 & (v107 | v109)) + __ROL4__(v284, 5);\n  v246 = __ROL4__(v208 ^ v232 ^ v245 ^ v255, 1);\n  v111 = __ROR4__(v107, 2);\n  v112 = __ROR4__(v284, 2);\n  v251 = __ROL4__(v212 ^ v237 ^ v250 ^ v261, 1);\n  v285 = v106 - 1894007588 + v246 + (v284 & v111 | v109 & (v284 | v111)) + __ROL4__(v110, 5);\n  v113 = __ROR4__(v110, 2);\n  v256 = __ROL4__(v216 ^ v242 ^ v255 ^ v200, 1);\n  v274 = v109 - 1894007588 + v251 + (v112 & v110 | v111 & (v112 | v110)) + __ROL4__(v285, 5);\n  v114 = __ROR4__(v285, 2);\n  v115 = v111 + v256 + (v285 & v113 | v112 & (v285 | v113)) - 1894007588 + __ROL4__(v274, 5);\n  v116 = v274;\n  v262 = __ROL4__(v221 ^ v246 ^ v261 ^ v196, 1);\n  v275 = v112 - 1894007588 + v262 + (v274 & v114 | v113 & (v274 | v114)) + __ROL4__(v115, 5);\n  v201 = __ROL4__(v227 ^ v251 ^ v200 ^ v294, 1);\n  v117 = __ROR4__(v116, 2);\n  v118 = __ROR4__(v115, 2);\n  v197 = __ROL4__(v205 ^ v232 ^ v256 ^ v196, 1);\n  v286 = v113 - 1894007588 + v201 + (v115 & v117 | v114 & (v115 | v117)) + __ROL4__(v275, 5);\n  v119 = __ROR4__(v275, 2);\n  v295 = __ROL4__(v208 ^ v237 ^ v262 ^ v294, 1);\n  v276 = v114 - 1894007588 + v197 + (v275 & v118 | v117 & (v275 | v118)) + __ROL4__(v286, 5);\n  v120 = __ROR4__(v286, 2);\n  v206 = __ROL4__(v205 ^ v212 ^ v242 ^ v201, 1);\n  v287 = v117 - 1894007588 + v295 + (v119 & v286 | v118 & (v119 | v286)) + __ROL4__(v276, 5);\n  v121 = __ROR4__(v276, 2);\n  v277 = v118 - 1894007588 + v206 + (v276 & v120 | v119 & (v276 | v120)) + __ROL4__(v287, 5);\n  v209 = __ROL4__(v208 ^ v216 ^ v246 ^ v197, 1);\n  v122 = __ROR4__(v287, 2);\n  v213 = __ROL4__(v212 ^ v221 ^ v251 ^ v295, 1);\n  v288 = v119 - 1894007588 + v209 + (v287 & v121 | v120 & (v287 | v121)) + __ROL4__(v277, 5);\n  v123 = __ROR4__(v277, 2);\n  v217 = __ROL4__(v206 ^ v216 ^ v227 ^ v256, 1);\n  v269 = v120 - 1894007588 + v213 + (v277 & v122 | v121 & (v277 | v122)) + __ROL4__(v288, 5);\n  v124 = __ROR4__(v288, 2);\n  v125 = v121 + v217 + (v288 & v123 | v122 & (v288 | v123)) + __ROL4__(v269, 5) - 1894007588;\n  v222 = __ROL4__(v209 ^ v221 ^ v232 ^ v262, 1);\n  v126 = __ROR4__(v269, 2);\n  v270 = __ROL4__(v125, 5) + v122 - 1894007588 + v222 + (v123 & (v124 | v269) | v124 & v269);\n  v228 = __ROL4__(v213 ^ v227 ^ v237 ^ v201, 1);\n  v278 = __ROR4__(v125, 2);\n  v233 = __ROL4__(v217 ^ v232 ^ v242 ^ v197, 1);\n  v265 = v123 + v228 + (v125 & v126 | v124 & (v125 | v126)) + __ROL4__(v270, 5) - 1894007588;\n  v127 = v270 & v278 | v126 & (v270 | v278);\n  v271 = __ROR4__(v270, 2);\n  v238 = __ROL4__(v222 ^ v237 ^ v246 ^ v295, 1);\n  v289 = v124 + v233 + v127 + __ROL4__(v265, 5) - 1894007588;\n  v128 = v265 & v271 | v278 & (v265 | v271);\n  v266 = __ROR4__(v265, 2);\n  v129 = v126 + v238 + v128 + __ROL4__(v289, 5) - 1894007588;\n  v243 = __ROL4__(v206 ^ v228 ^ v242 ^ v251, 1);\n  v130 = v278 + v243 + (v289 & v266 | v271 & (v289 | v266)) + __ROL4__(v129, 5) - 1894007588;\n  v247 = __ROL4__(v209 ^ v233 ^ v246 ^ v256, 1);\n  v131 = __ROR4__(v289, 2);\n  v132 = v131 & v129;\n  v133 = v131 | v129;\n  v134 = __ROR4__(v129, 2);\n  v290 = v131;\n  v135 = v271 + v247 + (v132 | v266 & v133) + __ROL4__(v130, 5) - 1894007588;\n  v252 = __ROL4__(v213 ^ v238 ^ v251 ^ v262, 1);\n  v136 = v130 & v134 | v131 & (v130 | v134);\n  v137 = __ROR4__(v130, 2);\n  v257 = __ROL4__(v217 ^ v243 ^ v256 ^ v201, 1);\n  v138 = v266 + v252 + v136 + __ROL4__(v135, 5) - 1894007588;\n  v139 = v135 & v137 | v134 & (v135 | v137);\n  v140 = __ROR4__(v135, 2);\n  v141 = v290 - 1894007588 + v257 + v139 + __ROL4__(v138, 5);\n  v263 = __ROL4__(v222 ^ v247 ^ v262 ^ v197, 1);\n  v142 = v138 ^ v140 ^ v137;\n  v143 = __ROR4__(v138, 2);\n  v144 = v134 + v263 + v142 + __ROL4__(v141, 5) - 899497514;\n  v267 = __ROL4__(v228 ^ v252 ^ v201 ^ v295, 1);\n  v145 = v141 ^ v143 ^ v140;\n  v146 = __ROR4__(v141, 2);\n  v147 = v137 + v267 + v145 + __ROL4__(v144, 5) - 899497514;\n  v198 = __ROL4__(v206 ^ v233 ^ v257 ^ v197, 1);\n  v148 = v146 ^ v143 ^ v144;\n  v149 = __ROR4__(v144, 2);\n  v150 = v140 + v198 + v148 + __ROL4__(v147, 5) - 899497514;\n  v296 = __ROL4__(v209 ^ v238 ^ v263 ^ v295, 1);\n  v151 = v146 ^ v147 ^ v149;\n  v152 = __ROR4__(v147, 2);\n  v153 = v143 + v296 + v151 + __ROL4__(v150, 5) - 899497514;\n  v272 = __ROL4__(v206 ^ v213 ^ v243 ^ v267, 1);\n  v154 = v150 ^ v152 ^ v149;\n  v155 = __ROR4__(v150, 2);\n  v156 = v146 + v272 + v154 + __ROL4__(v153, 5) - 899497514;\n  v210 = __ROL4__(v209 ^ v217 ^ v247 ^ v198, 1);\n  v157 = v153 ^ v155 ^ v152;\n  v158 = __ROR4__(v153, 2);\n  v159 = v149 + v210 + v157 + __ROL4__(v156, 5) - 899497514;\n  v291 = __ROL4__(v213 ^ v222 ^ v252 ^ v296, 1);\n  v160 = v156 ^ v158 ^ v155;\n  v161 = __ROR4__(v156, 2);\n  v162 = v152 + v291 + v160 + __ROL4__(v159, 5) - 899497514;\n  v218 = __ROL4__(v272 ^ v217 ^ v228 ^ v257, 1);\n  v163 = v161 ^ v158 ^ v159;\n  v164 = __ROR4__(v159, 2);\n  v165 = v155 + v218 + v163 + __ROL4__(v162, 5) - 899497514;\n  v223 = __ROL4__(v210 ^ v222 ^ v233 ^ v263, 1);\n  v166 = v161 ^ v162 ^ v164;\n  v167 = __ROR4__(v162, 2);\n  v168 = v158 + v223 + v166 + __ROL4__(v165, 5) - 899497514;\n  v229 = __ROL4__(v291 ^ v228 ^ v238 ^ v267, 1);\n  v169 = v165 ^ v167 ^ v164;\n  v170 = __ROR4__(v165, 2);\n  v171 = v161 + v229 + v169 + __ROL4__(v168, 5) - 899497514;\n  v234 = __ROL4__(v218 ^ v233 ^ v243 ^ v198, 1);\n  v172 = v164 + v234 + (v168 ^ v170 ^ v167);\n  v173 = __ROR4__(v168, 2);\n  v279 = __ROL4__(v171, 5) - 899497514 + v172;\n  v214 = __ROL4__(v223 ^ v238 ^ v247 ^ v296, 1);\n  v202 = __ROL4__(v279, 5) - 899497514 + v167 + v214 + (v171 ^ v173 ^ v170);\n  v239 = __ROR4__(v171, 2);\n  v174 = __ROL4__(v272 ^ v229 ^ v243 ^ v252, 1);\n  v175 = v170 + v174 + (v239 ^ v173 ^ v279);\n  v280 = __ROR4__(v279, 2);\n  v176 = v175 + __ROL4__(v202, 5) - 899497514;\n  v177 = v239 ^ v202 ^ v280;\n  v203 = __ROR4__(v202, 2);\n  v178 = __ROL4__(v210 ^ v234 ^ v247 ^ v257, 1);\n  v179 = v173 + v178 + v177 + __ROL4__(v176, 5) - 899497514;\n  v180 = v291 ^ v214 ^ v252 ^ v263;\n  v181 = v176 ^ v203 ^ v280;\n  v292 = __ROR4__(v176, 2);\n  v182 = __ROL4__(v180, 1);\n  v183 = __ROL4__(v218 ^ v174 ^ v257 ^ v267, 1);\n  v184 = __ROL4__(v179, 5) - 899497514 + v239 + v182 + v181;\n  v258 = __ROL4__(v184, 5) - 899497514 + v280 + v183 + (v179 ^ v292 ^ v203);\n  v281 = __ROR4__(v179, 2);\n  v185 = __ROL4__(v223 ^ v178 ^ v263 ^ v198, 1);\n  v186 = v203 + v185 + (v184 ^ v281 ^ v292) - 899497514 + __ROL4__(v258, 5);\n  v187 = __ROL4__(v229 ^ v182 ^ v267 ^ v296, 1);\n  v253 = __ROR4__(v184, 2);\n  v188 = (v281 ^ v258 ^ v253) - 899497514;\n  v259 = __ROR4__(v258, 2);\n  v189 = v253 ^ v186 ^ v259;\n  v190 = __ROL4__(v186, 5) + v187 + v292 + v188;\n  v191 = __ROR4__(v186, 2);\n  v192 = v281 + v189 - 899497514 + __ROL4__(v190, 5) + __ROL4__(v272 ^ v234 ^ v198 ^ v183, 1);\n  a1[3] += v191;\n  a1[1] += v192;\n  v193 = *a1 + (v190 ^ v191 ^ v259) - 899497514;\n  a1[2] += __ROR4__(v190, 2);\n  result = v253 + __ROL4__(v210 ^ v214 ^ v185 ^ v296, 1) + __ROL4__(v192, 5) + v193;\n  a1[4] += v259;\n  *a1 = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40FA2E",
        "Total XOR and shift operations": 89,
        "XOR operations": 0,
        "Shift operations": 89,
        "Operation percentage": "41.59%",
        "Function Body": "\nunsigned __int64 __cdecl sub_40FA2E(_DWORD *a1, unsigned int *a2, unsigned int *a3)\n{\n  __int64 v3; // kr08_8\n  __int64 v4; // kr2C0_8\n  unsigned int v5; // esi\n  unsigned __int64 v6; // kr18_8\n  unsigned int v7; // esi\n  unsigned int v8; // ebx\n  unsigned int v9; // edi\n  unsigned __int64 v10; // rax\n  unsigned __int64 v11; // kr48_8\n  unsigned int v12; // esi\n  unsigned __int64 v13; // kr68_8\n  int v14; // esi\n  unsigned __int64 v15; // kr78_8\n  unsigned int v16; // ecx\n  unsigned int v17; // ebx\n  unsigned int v18; // edi\n  unsigned __int64 v19; // rax\n  unsigned __int64 v20; // krA8_8\n  unsigned int v21; // esi\n  unsigned __int64 v22; // krD8_8\n  int v23; // esi\n  unsigned __int64 v24; // krE8_8\n  unsigned int v25; // ecx\n  unsigned int v26; // ebx\n  unsigned int v27; // edi\n  unsigned __int64 v28; // rax\n  unsigned __int64 v29; // kr138_8\n  unsigned int v30; // esi\n  unsigned __int64 v31; // kr188_8\n  int v32; // esi\n  unsigned __int64 v33; // kr198_8\n  unsigned int v34; // ecx\n  unsigned int v35; // ebx\n  unsigned int v36; // edi\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // kr1E8_8\n  unsigned int v39; // esi\n  unsigned __int64 v40; // kr218_8\n  int v41; // esi\n  unsigned __int64 v42; // kr228_8\n  unsigned int v43; // ecx\n  unsigned int v44; // ebx\n  unsigned int v45; // edi\n  unsigned __int64 v46; // rax\n  unsigned __int64 v47; // kr258_8\n  unsigned int v48; // esi\n  unsigned __int64 v49; // kr268_8\n  int v50; // esi\n  unsigned __int64 v51; // kr278_8\n  unsigned int v52; // ebx\n  unsigned int v53; // edi\n  unsigned __int64 v54; // rax\n  unsigned __int64 v55; // kr2A0_8\n  unsigned int v56; // ebx\n  unsigned int v57; // edi\n  unsigned __int64 v58; // kr2B8_8\n  unsigned __int64 v59; // rax\n  int v60; // kr00_4\n  unsigned __int64 result; // rax\n\n  v3 = *a3;\n  v4 = *a2;\n  *a1 = *a3 * *a2;\n  v5 = (__PAIR64__(a3[1], v3) * v4) >> 32;\n  v6 = ((((unsigned __int64)(v3 * v4) >> 32) + a3[1] * (unsigned __int64)*a2) >> 32)\n     + ((v5 + *a3 * (unsigned __int64)a2[1]) >> 32);\n  a1[1] = v5 + *a3 * a2[1];\n  v7 = v6 + a3[2] * *a2;\n  v8 = ((((unsigned int)v6 + a3[2] * (unsigned __int64)*a2) >> 32)\n      + HIDWORD(v6)\n      + ((a3[1] * (unsigned __int64)a2[1] + v7) >> 32)) >> 32;\n  v9 = (((unsigned int)v6 + a3[2] * (unsigned __int64)*a2) >> 32)\n     + HIDWORD(v6)\n     + ((a3[1] * (unsigned __int64)a2[1] + v7) >> 32);\n  v10 = a3[1] * a2[1] + v7 + *a3 * (unsigned __int64)a2[2];\n  a1[2] = v10;\n  v11 = __PAIR64__(v8, HIDWORD(v10)) + v9;\n  v12 = v11 + a3[3] * *a2;\n  v13 = ((v12 + a3[2] * (unsigned __int64)a2[1]) >> 32)\n      + (((unsigned int)v11 + a3[3] * (unsigned __int64)*a2) >> 32)\n      + HIDWORD(v11);\n  HIDWORD(v10) = (a3[1] * (unsigned __int64)a2[2] + v12 + a3[2] * a2[1]) >> 32;\n  v14 = a3[1] * a2[2] + v12 + a3[2] * a2[1];\n  v15 = HIDWORD(v10) + v13 + (((unsigned int)v14 + *a3 * (unsigned __int64)a2[3]) >> 32);\n  a1[3] = v14 + *a3 * a2[3];\n  v16 = v15 + a3[4] * *a2 + a3[3] * a2[1];\n  v17 = (((v16 + a3[2] * (unsigned __int64)a2[2]) >> 32)\n       + (((unsigned int)v15 + a3[4] * *a2 + a3[3] * (unsigned __int64)a2[1]) >> 32)\n       + (((unsigned int)v15 + a3[4] * (unsigned __int64)*a2) >> 32)\n       + HIDWORD(v15)\n       + ((a3[1] * (unsigned __int64)a2[3] + v16 + a3[2] * a2[2]) >> 32)) >> 32;\n  v18 = ((v16 + a3[2] * (unsigned __int64)a2[2]) >> 32)\n      + (((unsigned int)v15 + a3[4] * *a2 + a3[3] * (unsigned __int64)a2[1]) >> 32)\n      + (((unsigned int)v15 + a3[4] * (unsigned __int64)*a2) >> 32)\n      + HIDWORD(v15)\n      + ((a3[1] * (unsigned __int64)a2[3] + v16 + a3[2] * a2[2]) >> 32);\n  v19 = a3[1] * a2[3] + v16 + a3[2] * a2[2] + *a3 * (unsigned __int64)a2[4];\n  a1[4] = v19;\n  v20 = __PAIR64__(v17, HIDWORD(v19)) + v18;\n  v21 = v20 + a3[5] * *a2 + a3[4] * a2[1] + a3[3] * a2[2];\n  v22 = ((v21 + a3[2] * (unsigned __int64)a2[3]) >> 32)\n      + (((_DWORD)v20 + a3[5] * *a2 + a3[4] * a2[1] + a3[3] * (unsigned __int64)a2[2]) >> 32)\n      + (((unsigned int)v20 + a3[5] * *a2 + a3[4] * (unsigned __int64)a2[1]) >> 32)\n      + (((unsigned int)v20 + a3[5] * (unsigned __int64)*a2) >> 32)\n      + HIDWORD(v20);\n  HIDWORD(v19) = (a3[1] * (unsigned __int64)a2[4] + v21 + a3[2] * a2[3]) >> 32;\n  v23 = a3[1] * a2[4] + v21 + a3[2] * a2[3];\n  v24 = HIDWORD(v19) + v22 + (((unsigned int)v23 + *a3 * (unsigned __int64)a2[5]) >> 32);\n  a1[5] = v23 + *a3 * a2[5];\n  v25 = v24 + a3[6] * *a2 + a3[5] * a2[1] + a3[4] * a2[2] + a3[3] * a2[3];\n  v26 = (((v25 + a3[2] * (unsigned __int64)a2[4]) >> 32)\n       + (((_DWORD)v24 + a3[6] * *a2 + a3[5] * a2[1] + a3[4] * a2[2] + a3[3] * (unsigned __int64)a2[3]) >> 32)\n       + (((_DWORD)v24 + a3[6] * *a2 + a3[5] * a2[1] + a3[4] * (unsigned __int64)a2[2]) >> 32)\n       + (((unsigned int)v24 + a3[6] * *a2 + a3[5] * (unsigned __int64)a2[1]) >> 32)\n       + (((unsigned int)v24 + a3[6] * (unsigned __int64)*a2) >> 32)\n       + HIDWORD(v24)\n       + ((a3[1] * (unsigned __int64)a2[5] + v25 + a3[2] * a2[4]) >> 32)) >> 32;\n  v27 = ((v25 + a3[2] * (unsigned __int64)a2[4]) >> 32)\n      + (((_DWORD)v24 + a3[6] * *a2 + a3[5] * a2[1] + a3[4] * a2[2] + a3[3] * (unsigned __int64)a2[3]) >> 32)\n      + (((_DWORD)v24 + a3[6] * *a2 + a3[5] * a2[1] + a3[4] * (unsigned __int64)a2[2]) >> 32)\n      + (((unsigned int)v24 + a3[6] * *a2 + a3[5] * (unsigned __int64)a2[1]) >> 32)\n      + (((unsigned int)v24 + a3[6] * (unsigned __int64)*a2) >> 32)\n      + HIDWORD(v24)\n      + ((a3[1] * (unsigned __int64)a2[5] + v25 + a3[2] * a2[4]) >> 32);\n  v28 = a3[1] * a2[5] + v25 + a3[2] * a2[4] + *a3 * (unsigned __int64)a2[6];\n  a1[6] = v28;\n  v29 = __PAIR64__(v26, HIDWORD(v28)) + v27;\n  v30 = v29 + a3[7] * *a2 + a3[6] * a2[1] + a3[5] * a2[2] + a3[4] * a2[3] + a3[3] * a2[4];\n  v31 = ((v30 + a3[2] * (unsigned __int64)a2[5]) >> 32)\n      + (((_DWORD)v29 + a3[7] * *a2 + a3[6] * a2[1] + a3[5] * a2[2] + a3[4] * a2[3] + a3[3] * (unsigned __int64)a2[4]) >> 32)\n      + (((_DWORD)v29 + a3[7] * *a2 + a3[6] * a2[1] + a3[5] * a2[2] + a3[4] * (unsigned __int64)a2[3]) >> 32)\n      + (((_DWORD)v29 + a3[7] * *a2 + a3[6] * a2[1] + a3[5] * (unsigned __int64)a2[2]) >> 32)\n      + (((unsigned int)v29 + a3[7] * *a2 + a3[6] * (unsigned __int64)a2[1]) >> 32)\n      + (((unsigned int)v29 + a3[7] * (unsigned __int64)*a2) >> 32)\n      + HIDWORD(v29);\n  HIDWORD(v28) = (a3[1] * (unsigned __int64)a2[6] + v30 + a3[2] * a2[5]) >> 32;\n  v32 = a3[1] * a2[6] + v30 + a3[2] * a2[5];\n  v33 = HIDWORD(v28) + v31 + (((unsigned int)v32 + *a3 * (unsigned __int64)a2[7]) >> 32);\n  a1[7] = v32 + *a3 * a2[7];\n  v34 = v33 + a3[7] * a2[1] + a3[6] * a2[2] + a3[5] * a2[3] + a3[4] * a2[4];\n  v35 = (((v34 + a3[3] * (unsigned __int64)a2[5]) >> 32)\n       + (((_DWORD)v33 + a3[7] * a2[1] + a3[6] * a2[2] + a3[5] * a2[3] + a3[4] * (unsigned __int64)a2[4]) >> 32)\n       + (((_DWORD)v33 + a3[7] * a2[1] + a3[6] * a2[2] + a3[5] * (unsigned __int64)a2[3]) >> 32)\n       + (((unsigned int)v33 + a3[7] * a2[1] + a3[6] * (unsigned __int64)a2[2]) >> 32)\n       + (((unsigned int)v33 + a3[7] * (unsigned __int64)a2[1]) >> 32)\n       + HIDWORD(v33)\n       + ((a3[2] * (unsigned __int64)a2[6] + v34 + a3[3] * a2[5]) >> 32)) >> 32;\n  v36 = ((v34 + a3[3] * (unsigned __int64)a2[5]) >> 32)\n      + (((_DWORD)v33 + a3[7] * a2[1] + a3[6] * a2[2] + a3[5] * a2[3] + a3[4] * (unsigned __int64)a2[4]) >> 32)\n      + (((_DWORD)v33 + a3[7] * a2[1] + a3[6] * a2[2] + a3[5] * (unsigned __int64)a2[3]) >> 32)\n      + (((unsigned int)v33 + a3[7] * a2[1] + a3[6] * (unsigned __int64)a2[2]) >> 32)\n      + (((unsigned int)v33 + a3[7] * (unsigned __int64)a2[1]) >> 32)\n      + HIDWORD(v33)\n      + ((a3[2] * (unsigned __int64)a2[6] + v34 + a3[3] * a2[5]) >> 32);\n  v37 = a3[2] * a2[6] + v34 + a3[3] * a2[5] + a3[1] * (unsigned __int64)a2[7];\n  a1[8] = v37;\n  v38 = __PAIR64__(v35, HIDWORD(v37)) + v36;\n  v39 = v38 + a3[7] * a2[2] + a3[6] * a2[3] + a3[5] * a2[4];\n  v40 = ((v39 + a3[4] * (unsigned __int64)a2[5]) >> 32)\n      + (((_DWORD)v38 + a3[7] * a2[2] + a3[6] * a2[3] + a3[5] * (unsigned __int64)a2[4]) >> 32)\n      + (((unsigned int)v38 + a3[7] * a2[2] + a3[6] * (unsigned __int64)a2[3]) >> 32)\n      + (((unsigned int)v38 + a3[7] * (unsigned __int64)a2[2]) >> 32)\n      + HIDWORD(v38);\n  HIDWORD(v37) = (a3[3] * (unsigned __int64)a2[6] + v39 + a3[4] * a2[5]) >> 32;\n  v41 = a3[3] * a2[6] + v39 + a3[4] * a2[5];\n  v42 = HIDWORD(v37) + v40 + (((unsigned int)v41 + a3[2] * (unsigned __int64)a2[7]) >> 32);\n  a1[9] = v41 + a3[2] * a2[7];\n  v43 = v42 + a3[7] * a2[3] + a3[6] * a2[4];\n  v44 = (((v43 + a3[5] * (unsigned __int64)a2[5]) >> 32)\n       + (((unsigned int)v42 + a3[7] * a2[3] + a3[6] * (unsigned __int64)a2[4]) >> 32)\n       + (((unsigned int)v42 + a3[7] * (unsigned __int64)a2[3]) >> 32)\n       + HIDWORD(v42)\n       + ((a3[4] * (unsigned __int64)a2[6] + v43 + a3[5] * a2[5]) >> 32)) >> 32;\n  v45 = ((v43 + a3[5] * (unsigned __int64)a2[5]) >> 32)\n      + (((unsigned int)v42 + a3[7] * a2[3] + a3[6] * (unsigned __int64)a2[4]) >> 32)\n      + (((unsigned int)v42 + a3[7] * (unsigned __int64)a2[3]) >> 32)\n      + HIDWORD(v42)\n      + ((a3[4] * (unsigned __int64)a2[6] + v43 + a3[5] * a2[5]) >> 32);\n  v46 = a3[4] * a2[6] + v43 + a3[5] * a2[5] + a3[3] * (unsigned __int64)a2[7];\n  a1[10] = v46;\n  v47 = __PAIR64__(v44, HIDWORD(v46)) + v45;\n  v48 = v47 + a3[7] * a2[4];\n  v49 = ((v48 + a3[6] * (unsigned __int64)a2[5]) >> 32)\n      + (((unsigned int)v47 + a3[7] * (unsigned __int64)a2[4]) >> 32)\n      + HIDWORD(v47);\n  HIDWORD(v46) = (a3[5] * (unsigned __int64)a2[6] + v48 + a3[6] * a2[5]) >> 32;\n  v50 = a3[5] * a2[6] + v48 + a3[6] * a2[5];\n  v51 = HIDWORD(v46) + v49 + (((unsigned int)v50 + a3[4] * (unsigned __int64)a2[7]) >> 32);\n  a1[11] = v50 + a3[4] * a2[7];\n  v52 = ((((unsigned int)v51 + a3[7] * (unsigned __int64)a2[5]) >> 32)\n       + HIDWORD(v51)\n       + ((a3[6] * (unsigned __int64)a2[6] + (unsigned int)v51 + a3[7] * a2[5]) >> 32)) >> 32;\n  v53 = (((unsigned int)v51 + a3[7] * (unsigned __int64)a2[5]) >> 32)\n      + HIDWORD(v51)\n      + ((a3[6] * (unsigned __int64)a2[6] + (unsigned int)v51 + a3[7] * a2[5]) >> 32);\n  v54 = a3[6] * a2[6] + (_DWORD)v51 + a3[7] * a2[5] + a3[5] * (unsigned __int64)a2[7];\n  a1[12] = v54;\n  v55 = __PAIR64__(v52, HIDWORD(v54)) + v53;\n  v57 = ((((unsigned int)v55 + a3[7] * (unsigned __int64)a2[6]) >> 32) + HIDWORD(v55)) >> 32;\n  v56 = (((unsigned int)v55 + a3[7] * (unsigned __int64)a2[6]) >> 32) + HIDWORD(v55);\n  v58 = a3[6] * (unsigned __int64)a2[7] + (unsigned int)v55 + a3[7] * a2[6];\n  a1[13] = v58;\n  v59 = HIDWORD(v58) + a3[7] * (unsigned __int64)a2[7];\n  v60 = HIDWORD(v58) + a3[7] * a2[7];\n  a1[14] = v56 + v60;\n  result = __PAIR64__(HIDWORD(v59), v56) + __PAIR64__(v57, v60);\n  a1[15] = HIDWORD(result);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4130D8",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "37.50%",
        "Function Body": "\nint __cdecl sub_4130D8(int a1, int a2, int a3, unsigned int a4)\n{\n  int v5; // ebx\n  int v6; // esi\n  int v7; // esi\n  int v8; // eax\n\n  if ( a4 <= dword_48C06C )\n    return ((int (__cdecl *)(int, int))dword_490C84[a4 >> 2])(a1, a3);\n  v5 = a2 + 4 * a4;\n  sub_4130D8(a1, v5, a3, a4 >> 1);\n  v6 = a3 + 4 * (a4 >> 1);\n  sub_4130D8(a1 + 4 * a4, v5, v6, a4 >> 1);\n  sub_412E84(a2, v5, a3, v6, a4 >> 1);\n  v7 = off_48C064(a1 + 4 * (a4 >> 1), a2);\n  v8 = off_48C064(a1 + 4 * (a4 >> 1), a2);\n  return sub_411C95((unsigned int *)(a1 + 4 * (a4 + (a4 >> 1))), a4 >> 1, v8 + v7);\n}\n// 48C064: using guessed type int (__stdcall *off_48C064)(_DWORD, _DWORD);\n// 48C06C: using guessed type int dword_48C06C;\n// 490C84: using guessed type int dword_490C84[];\n\n"
    },
    {
        "Function": "sub_41F78A",
        "Total XOR and shift operations": 82,
        "XOR operations": 56,
        "Shift operations": 26,
        "Operation percentage": "36.61%",
        "Function Body": "\n_DWORD **__userpurge sub_41F78A@<eax>(\n        int *a1@<ecx>,\n        __m64 a2@<mm2>,\n        __m64 a3@<mm3>,\n        __m128i *a4,\n        __m128i *a5,\n        __m128i *a6)\n{\n  _DWORD *v8; // esi\n  int v9; // ebx\n  int v10; // eax\n  _DWORD *v11; // esi\n  int v12; // eax\n  unsigned int v13; // ecx\n  int v14; // edi\n  int v15; // edi\n  unsigned int v16; // ebx\n  unsigned int v17; // ecx\n  unsigned int v18; // edx\n  int v19; // edi\n  unsigned __int8 v20; // al\n  int v21; // edi\n  int v22; // eax\n  int v23; // edi\n  int v24; // eax\n  int v25; // eax\n  int v26; // eax\n  int v27; // eax\n  int v28; // edx\n  int v29; // ebp\n  int v30; // ebx\n  int v31; // eax\n  int v32; // eax\n  int v33; // ebx\n  int v34; // eax\n  unsigned int v35; // ebx\n  unsigned int v36; // edx\n  int v37; // eax\n  int v38; // eax\n  int v39; // eax\n  unsigned int v40; // ebx\n  unsigned int v41; // edi\n  unsigned int v42; // edx\n  int v43; // eax\n  unsigned int v44; // ebx\n  int v45; // eax\n  int v46; // eax\n  unsigned int v47; // edx\n  int v48; // eax\n  _DWORD **v49; // eax\n  _DWORD **v50; // eax\n  _DWORD **v51; // eax\n  int v52; // [esp-Ch] [ebp-64h]\n  int v53; // [esp-8h] [ebp-60h]\n  int v54; // [esp-4h] [ebp-5Ch]\n  int v55; // [esp+10h] [ebp-48h]\n  int v56; // [esp+10h] [ebp-48h]\n  unsigned int v57; // [esp+10h] [ebp-48h]\n  unsigned int v58; // [esp+10h] [ebp-48h]\n  int v59; // [esp+10h] [ebp-48h]\n  int v60; // [esp+14h] [ebp-44h]\n  unsigned int v61; // [esp+14h] [ebp-44h]\n  int v62; // [esp+14h] [ebp-44h]\n  unsigned int v63; // [esp+14h] [ebp-44h]\n  int v64; // [esp+18h] [ebp-40h]\n  int v65; // [esp+18h] [ebp-40h]\n  unsigned int v66; // [esp+18h] [ebp-40h]\n  unsigned int v67; // [esp+18h] [ebp-40h]\n  int v68; // [esp+18h] [ebp-40h]\n  int v69; // [esp+1Ch] [ebp-3Ch]\n  unsigned int v70; // [esp+1Ch] [ebp-3Ch]\n  unsigned int v71; // [esp+1Ch] [ebp-3Ch]\n  int v72; // [esp+20h] [ebp-38h]\n  int v73; // [esp+20h] [ebp-38h]\n  unsigned int v74; // [esp+20h] [ebp-38h]\n  int v75; // [esp+20h] [ebp-38h]\n  int v76; // [esp+20h] [ebp-38h]\n  int v77; // [esp+24h] [ebp-34h]\n  int v78; // [esp+24h] [ebp-34h]\n  unsigned int v79; // [esp+24h] [ebp-34h]\n  int v80; // [esp+2Ch] [ebp-2Ch]\n  _DWORD *v81[2]; // [esp+38h] [ebp-20h] BYREF\n  int v82; // [esp+40h] [ebp-18h]\n  int v83; // [esp+44h] [ebp-14h]\n  int v84; // [esp+48h] [ebp-10h]\n  int v85; // [esp+4Ch] [ebp-Ch]\n\n  if ( sub_411C74() )\n    return (_DWORD **)sub_41F340(a1, a2, a3, a4, a5, a6, 0x10u, 0);\n  v8 = (_DWORD *)a1[69];\n  v9 = a4->m128i_i32[0] ^ *v8;\n  v80 = a4->m128i_i32[1] ^ v8[1];\n  v77 = a4->m128i_i32[2] ^ v8[2];\n  v60 = a4->m128i_i32[3] ^ v8[3];\n  v72 = v8[4];\n  v64 = v8[5];\n  v69 = v8[6];\n  v10 = v8[7];\n  v11 = v8 + 8;\n  v55 = v10;\n  v12 = sub_41F717();\n  v13 = 0;\n  v14 = 0;\n  do\n  {\n    v14 &= *(int *)((char *)dword_490CF0 + v13);\n    v13 += v12;\n  }\n  while ( v13 < 0x800 );\n  v15 = dword_4914E8 & v14;\n  v16 = v15 | v9;\n  v17 = v15 | v77;\n  v61 = v15 | v60;\n  v18 = v15 | v80;\n  v19 = dword_490CF4[2 * (unsigned __int8)v61] ^ v55;\n  v61 >>= 8;\n  v20 = v61;\n  v61 >>= 8;\n  v56 = v19;\n  v21 = *(int *)((char *)&dword_490CF0[2 * v20] + 1) ^ v69;\n  v22 = (unsigned __int8)v17;\n  v17 >>= 8;\n  v23 = dword_490CF4[2 * v22] ^ v21;\n  v24 = (unsigned __int8)v18;\n  v18 >>= 8;\n  v65 = dword_490CF4[2 * v24] ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v61] + 2) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v17] + 1) ^ v64;\n  v25 = (unsigned __int8)v18;\n  v18 >>= 8;\n  v73 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v17)] + 2) ^ *(int *)((char *)&dword_490CF0[2 * v25] + 1) ^ *(int *)((char *)&dword_490CF0[2 * (v61 >> 8)] + 3) ^ v72;\n  v26 = (unsigned __int8)v16;\n  v16 >>= 8;\n  v74 = dword_490CF4[2 * v26] ^ v73;\n  v27 = (unsigned __int8)v16;\n  v16 >>= 8;\n  v57 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v18] + 2) ^ *(int *)((char *)&dword_490CF0[2 * v27] + 1) ^ *(int *)((char *)&dword_490CF0[2 * HIWORD(v17)] + 3) ^ v56;\n  v28 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v16] + 2) ^ *(int *)((char *)&dword_490CF0[2 * (v18 >> 8)]\n                                                                               + 3) ^ v23;\n  v29 = ((unsigned int)a1[2] >> 1) - 1;\n  v70 = v28;\n  v66 = *(int *)((char *)&dword_490CF0[2 * (v16 >> 8)] + 3) ^ v65;\n  while ( 1 )\n  {\n    v30 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v57] + 3);\n    v31 = BYTE1(v57);\n    v58 = HIWORD(v57);\n    v78 = v11[1] ^ *(int *)((char *)&dword_490CF0[2 * v31] + 2);\n    v32 = BYTE1(v70);\n    v71 = HIWORD(v70);\n    v62 = *(int *)((char *)&dword_490CF0[2 * v32] + 2) ^ *v11 ^ v30;\n    v33 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v58] + 1) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v66]\n                                                                                 + 3) ^ dword_490CF4[2 * (v71 >> 8)];\n    v34 = BYTE1(v66);\n    v67 = HIWORD(v66);\n    v79 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v71] + 1) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v74]\n                                                                                 + 3) ^ dword_490CF4[2 * (v67 >> 8)] ^ v78;\n    v35 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v74)] + 2) ^ v11[2] ^ v33;\n    v36 = *(int *)((char *)&dword_490CF0[2 * BYTE2(v74)] + 1) ^ *(int *)((char *)&dword_490CF0[2 * v34] + 2) ^ v11[3] ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v28] + 3) ^ dword_490CF4[2 * (v58 >> 8)];\n    v63 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v67] + 1) ^ dword_490CF4[2 * HIBYTE(v74)] ^ v62;\n    v37 = (unsigned __int8)v36;\n    v36 >>= 8;\n    v75 = v11[4] ^ *(int *)((char *)&dword_490CF0[2 * v37] + 3);\n    v38 = (unsigned __int8)v36;\n    v36 >>= 8;\n    v68 = v11[5] ^ *(int *)((char *)&dword_490CF0[2 * v38] + 2);\n    v39 = (unsigned __int8)v35;\n    v35 >>= 8;\n    v59 = v11[7] ^ *(int *)((char *)&dword_490CF0[2 * v39] + 3) ^ dword_490CF4[2 * (v36 >> 8)];\n    v11 += 8;\n    v76 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v35] + 2) ^ v75;\n    v35 >>= 8;\n    v66 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v35] + 1) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v63]\n                                                                                 + 3) ^ dword_490CF4[2 * HIBYTE(v79)] ^ v68;\n    v40 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v63)] + 2) ^ *(v11 - 2) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v36]\n                                                                                    + 1) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v79]\n                                                                                                  + 3) ^ dword_490CF4[2 * (v35 >> 8)];\n    v70 = v40;\n    v41 = *(int *)((char *)&dword_490CF0[2 * BYTE2(v63)] + 1) ^ *(int *)((char *)&dword_490CF0[2 * BYTE1(v79)] + 2) ^ v59;\n    v57 = v41;\n    v42 = *(int *)((char *)&dword_490CF0[2 * BYTE2(v79)] + 1) ^ dword_490CF4[2 * HIBYTE(v63)] ^ v76;\n    v74 = v42;\n    if ( !--v29 )\n      break;\n    LOBYTE(v28) = v40;\n  }\n  v43 = (unsigned __int8)v40;\n  v44 = v40 >> 8;\n  HIBYTE(v85) = BYTE1(dword_490CF0[2 * v43]);\n  v45 = (unsigned __int8)v44;\n  v44 >>= 8;\n  BYTE2(v82) = BYTE1(dword_490CF0[2 * v45]);\n  BYTE1(v83) = BYTE1(dword_490CF0[2 * (unsigned __int8)v44]);\n  LOBYTE(v84) = BYTE1(dword_490CF0[2 * (v44 >> 8)]);\n  HIBYTE(v84) = BYTE1(dword_490CF0[2 * (unsigned __int8)v66]);\n  BYTE2(v85) = BYTE1(dword_490CF0[2 * BYTE1(v66)]);\n  BYTE1(v82) = BYTE1(dword_490CF0[2 * BYTE2(v66)]);\n  LOBYTE(v83) = BYTE1(dword_490CF0[2 * HIBYTE(v66)]);\n  v46 = (unsigned __int8)v42;\n  v47 = v42 >> 8;\n  HIBYTE(v83) = BYTE1(dword_490CF0[2 * v46]);\n  v48 = (unsigned __int8)v47;\n  v47 >>= 8;\n  BYTE2(v84) = BYTE1(dword_490CF0[2 * v48]);\n  BYTE1(v85) = BYTE1(dword_490CF0[2 * (unsigned __int8)v47]);\n  LOBYTE(v82) = BYTE1(dword_490CF0[2 * (v47 >> 8)]);\n  HIBYTE(v82) = BYTE1(dword_490CF0[2 * (unsigned __int8)v41]);\n  BYTE2(v83) = BYTE1(dword_490CF0[2 * BYTE1(v41)]);\n  BYTE1(v84) = BYTE1(dword_490CF0[2 * BYTE2(v41)]);\n  LOBYTE(v85) = BYTE1(dword_490CF0[2 * HIBYTE(v41)]);\n  v81[0] = a5->m128i_i32;\n  v81[1] = a6->m128i_i32;\n  v54 = v85 ^ v11[3];\n  v53 = v84 ^ v11[2];\n  v52 = v83 ^ v11[1];\n  v49 = sub_41F263(v81, v82 ^ *v11);\n  v50 = sub_41F263(v49, v52);\n  v51 = sub_41F263(v50, v53);\n  return sub_41F263(v51, v54);\n}\n// 490CF0: using guessed type int dword_490CF0[];\n// 490CF4: using guessed type int dword_490CF4[509];\n// 4914E8: using guessed type int dword_4914E8;\n\n"
    },
    {
        "Function": "sub_408BF1",
        "Total XOR and shift operations": 6,
        "XOR operations": 0,
        "Shift operations": 6,
        "Operation percentage": "35.29%",
        "Function Body": "\n_DWORD *__thiscall sub_408BF1(_DWORD *this)\n{\n  _DWORD *result; // eax\n\n  sub_408C19(this);\n  *this = &CryptoPP::TF_EncryptorImpl<CryptoPP::TF_CryptoSchemeOptions<CryptoPP::TF_ES<CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>,int>,CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>>>::`vftable';\n  result = this;\n  this[1] = &CryptoPP::TF_EncryptorImpl<CryptoPP::TF_CryptoSchemeOptions<CryptoPP::TF_ES<CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>,int>,CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>>>::`vftable';\n  this[2] = &CryptoPP::TF_EncryptorImpl<CryptoPP::TF_CryptoSchemeOptions<CryptoPP::TF_ES<CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>,int>,CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>>>::`vftable';\n  return result;\n}\n// 46CF6C: using guessed type void *CryptoPP::TF_EncryptorImpl<CryptoPP::TF_CryptoSchemeOptions<CryptoPP::TF_ES<CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>,int>,CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>>>::`vftable';\n// 46CF98: using guessed type void *CryptoPP::TF_EncryptorImpl<CryptoPP::TF_CryptoSchemeOptions<CryptoPP::TF_ES<CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>,int>,CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>>>::`vftable';\n// 46CFB8: using guessed type void *CryptoPP::TF_EncryptorImpl<CryptoPP::TF_CryptoSchemeOptions<CryptoPP::TF_ES<CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>,int>,CryptoPP::RSA,CryptoPP::OAEP<CryptoPP::SHA1,CryptoPP::P1363_MGF1>>>::`vftable';\n\n"
    },
    {
        "Function": "sub_410375",
        "Total XOR and shift operations": 17,
        "XOR operations": 0,
        "Shift operations": 17,
        "Operation percentage": "34.00%",
        "Function Body": "\nunsigned __int64 __cdecl sub_410375(_DWORD *a1, unsigned int *a2, unsigned int *a3, unsigned int a4)\n{\n  unsigned int v4; // esi\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // kr30_8\n  unsigned __int64 v7; // kr40_8\n  unsigned __int64 v8; // rax\n  int v9; // kr48_4\n  unsigned __int64 v10; // kr50_8\n  int v11; // ecx\n  unsigned __int64 v12; // rax\n  unsigned __int64 result; // rax\n\n  v4 = a3[3] * *a2\n     + ((a3[1] * (unsigned __int64)a2[1]) >> 32)\n     + ((a3[2] * (unsigned __int64)*a2) >> 32)\n     + ((*a3 * (unsigned __int64)a2[2]) >> 32);\n  v5 = a3[1] * a2[2] + v4 + a3[2] * a2[1] + *a3 * (unsigned __int64)a2[3];\n  v6 = HIDWORD(v5)\n     + (unsigned __int64)(a4 < (unsigned int)v5)\n     + ((a3[1] * (unsigned __int64)a2[2] + v4 + a3[2] * a2[1]) >> 32)\n     + ((a3[3] * (unsigned __int64)*a2\n       + (unsigned int)(((a3[1] * (unsigned __int64)a2[1]) >> 32)\n                      + ((a3[2] * (unsigned __int64)*a2) >> 32)\n                      + ((*a3 * (unsigned __int64)a2[2]) >> 32))) >> 32)\n     + ((((a3[1] * (unsigned __int64)a2[1]) >> 32)\n       + ((a3[2] * (unsigned __int64)*a2) >> 32)\n       + ((*a3 * (unsigned __int64)a2[2]) >> 32)) >> 32)\n     + ((v4 + a3[2] * (unsigned __int64)a2[1]) >> 32);\n  v7 = ((a3[3] * (unsigned __int64)a2[1] + (unsigned int)v6) >> 32)\n     + HIDWORD(v6)\n     + ((a3[2] * (unsigned __int64)a2[2] + a3[3] * a2[1] + (unsigned int)v6) >> 32);\n  v8 = a3[2] * a2[2] + a3[3] * a2[1] + (_DWORD)v6 + a3[1] * (unsigned __int64)a2[3];\n  *a1 = v8;\n  v9 = HIDWORD(v8) + v7 + a3[3] * a2[2];\n  v10 = (((unsigned int)(HIDWORD(v8) + v7) + a3[3] * (unsigned __int64)a2[2]) >> 32)\n      + (unsigned int)__CFADD__(HIDWORD(v8), (_DWORD)v7)\n      + HIDWORD(v7);\n  LODWORD(v8) = a3[2] * a2[3];\n  v11 = (a3[2] * (unsigned __int64)a2[3]) >> 32;\n  a1[1] = v9 + v8;\n  v12 = (unsigned int)__CFADD__(v9, (_DWORD)v8) + v11 + a3[3] * (unsigned __int64)a2[3];\n  a1[2] = v10 + v12;\n  result = v10 + v12;\n  a1[3] = HIDWORD(result);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_40F028",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "33.33%",
        "Function Body": "\nint *__thiscall sub_40F028(int *this, unsigned int a2)\n{\n  int v3; // edi\n  int v4; // eax\n\n  v3 = sub_4113F2(this[4], this[3]);\n  v4 = sub_413329(v3 + ((a2 + 31) >> 5));\n  sub_411181((int)(this + 1), v4);\n  sub_41C187((_DWORD *)this[4], (a2 >> 5) + v3, a2 >> 5);\n  sub_41C142(this[4] + 4 * (a2 >> 5), v3 + (((a2 & 0x1F) + 31) >> 5), a2 & 0x1F);\n  return this;\n}\n\n"
    },
    {
        "Function": "sub_42035E",
        "Total XOR and shift operations": 73,
        "XOR operations": 61,
        "Shift operations": 12,
        "Operation percentage": "32.59%",
        "Function Body": "\nvoid __thiscall sub_42035E(_DWORD *this, char *Src, size_t Size, int a4)\n{\n  _DWORD *v4; // ebx\n  int v5; // ebp\n  int v6; // edx\n  int *v7; // edi\n  int *v8; // esi\n  int v9; // edx\n  int v10; // eax\n  int v11; // ecx\n  int *v12; // ebx\n  int v13; // ecx\n  int v14; // eax\n  int v15; // ecx\n  int v16; // edx\n  int v17; // eax\n  int v18; // ecx\n  int v19; // eax\n  int *v20; // esi\n  int v21; // edx\n  int v22; // eax\n  int v23; // ecx\n  unsigned int *v24; // edi\n  unsigned int v25; // ebp\n  unsigned int v26; // eax\n  unsigned int v27; // ebx\n  unsigned __int8 *v28; // eax\n  unsigned __int8 *v29; // edi\n  int v30; // esi\n  int v31; // esi\n  int v32; // esi\n  int v33; // esi\n  unsigned int v34; // edx\n  int v35; // ecx\n  int v36; // eax\n  unsigned int v37; // edx\n  int v38; // ecx\n  int v39; // eax\n  unsigned int v40; // edx\n  unsigned __int32 v41; // ecx\n  unsigned __int32 v42; // ecx\n  unsigned __int32 v43; // ecx\n  unsigned __int32 v44; // ecx\n  unsigned int *v46; // [esp+10h] [ebp-8h]\n  _DWORD *v47; // [esp+14h] [ebp-4h]\n  unsigned int *v48; // [esp+14h] [ebp-4h]\n  _DWORD *Srca; // [esp+1Ch] [ebp+4h]\n  unsigned __int8 *Sizea; // [esp+20h] [ebp+8h]\n\n  v4 = this;\n  sub_40898B((int)(this + 72), 0x120Cu);\n  v4[73] = 0;\n  v5 = Size >> 2;\n  v47 = v4 + 4;\n  v4[3] = (Size >> 2) + 6;\n  sub_41F753((int)(v4 + 4), v6, 4 * ((Size >> 2) + 6) + 4);\n  v7 = (int *)v4[70];\n  if ( sub_41F72B() && sub_41F73F() )\n  {\n    sub_428D01(Src, Size, (char *)v7);\n    if ( !(*(unsigned __int8 (__thiscall **)(_DWORD *))(v4[1] + 28))(v4 + 1) )\n      sub_428CB0((_OWORD *)v4[70], v4[3]);\n  }\n  else\n  {\n    sub_41F2EB(1, v7, v5, Src, Size);\n    v8 = &v7[v5];\n    Srca = &unk_46E8EC;\n    v9 = *v7 ^ (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*(v8 - 1))] ^ (((unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)*(v8 - 1)] ^ (((unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*(v8 - 1))] ^ ((unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*(v8 - 1))] << 8)) << 8)) << 8) ^ 0x1000000;\n    *v8 = v9;\n    v10 = v9 ^ v7[1];\n    v8[1] = v10;\n    v11 = v10 ^ v7[2];\n    v8[2] = v11;\n    v8[3] = v11 ^ v7[3];\n    if ( &v7[v5 + 4] != (int *)(v4[70] + 4 * v4[69]) )\n    {\n      v12 = &v7[v5];\n      do\n      {\n        if ( Size == 24 )\n        {\n          v13 = v7[4] ^ v7[9];\n          v14 = v13 ^ v7[5];\n          v7[10] = v13;\n          v7[11] = v14;\n        }\n        else if ( Size == 32 )\n        {\n          v15 = v7[6];\n          v16 = v7[4] ^ (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)v7[11]] ^ (((unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(v7[11])] ^ (((unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(v7[11])] ^ ((unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(v7[11])] << 8)) << 8)) << 8);\n          v17 = v16 ^ v7[5];\n          v7[12] = v16;\n          v18 = v17 ^ v15;\n          v7[13] = v17;\n          v19 = v18 ^ v7[7];\n          v7[14] = v18;\n          v7[15] = v19;\n        }\n        v7 = v12;\n        v20 = v12;\n        v12 += v5;\n        v21 = *v7 ^ *Srca ^ (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*(v12 - 1))] ^ (((unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)*(v12 - 1)] ^ (((unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*(v12 - 1))] ^ ((unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*(v12 - 1))] << 8)) << 8)) << 8);\n        *v12 = v21;\n        ++Srca;\n        v22 = v21 ^ v7[1];\n        v12[1] = v22;\n        v23 = v22 ^ v7[2];\n        v7[v5 + 2] = v23;\n        v7[v5 + 3] = v23 ^ v7[3];\n      }\n      while ( &v20[v5 + 4] != (int *)(v47[66] + 4 * v47[65]) );\n      v4 = this;\n    }\n    v24 = (unsigned int *)v4[70];\n    v46 = v24;\n    if ( (*(unsigned __int8 (__thiscall **)(_DWORD *))(v4[1] + 28))(v4 + 1) )\n    {\n      if ( !byte_491D00 )\n        sub_41F6A7();\n      sub_41F28C(v24, (int)v24, 0x10u);\n      sub_41F28C(&v24[4 * v4[3]], (int)&v24[4 * v4[3]], 0x10u);\n    }\n    else\n    {\n      if ( !byte_491D01 )\n        sub_41F54F();\n      v25 = 4;\n      v26 = 4 * v4[3] - 4;\n      if ( v26 > 4 )\n      {\n        v27 = 4 * v4[3] - 4;\n        v48 = &v24[v26 + 2];\n        v28 = (unsigned __int8 *)(v24 + 6);\n        v29 = (unsigned __int8 *)v48;\n        Sizea = v28;\n        do\n        {\n          v30 = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[*(Sizea - 8)]] + 3) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*((_DWORD *)v28 - 2))]] + 2) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*((_DWORD *)v28 - 2))]] + 1) ^ dword_491504[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*((_DWORD *)v28 - 2))]];\n          *((_DWORD *)Sizea - 2) = *(int *)((char *)&dword_491500[2\n                                                                * (unsigned __int8)RijnDael_AES_LONG_46E6E8[*(v29 - 8)]]\n                                          + 3) ^ *(int *)((char *)&dword_491500[2\n                                                                              * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*((_DWORD *)v29 - 2))]]\n                                                        + 2) ^ *(int *)((char *)&dword_491500[2\n                                                                                            * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*((_DWORD *)v29 - 2))]]\n                                                                      + 1) ^ dword_491504[2\n                                                                                        * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*((_DWORD *)v29 - 2))]];\n          *((_DWORD *)v29 - 2) = v30;\n          v31 = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[*(Sizea - 4)]] + 3) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*((_DWORD *)Sizea - 1))]] + 2) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*((_DWORD *)Sizea - 1))]] + 1) ^ dword_491504[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*((_DWORD *)Sizea - 1))]];\n          *((_DWORD *)Sizea - 1) = *(int *)((char *)&dword_491500[2\n                                                                * (unsigned __int8)RijnDael_AES_LONG_46E6E8[*(v29 - 4)]]\n                                          + 3) ^ *(int *)((char *)&dword_491500[2\n                                                                              * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*((_DWORD *)v29 - 1))]]\n                                                        + 2) ^ *(int *)((char *)&dword_491500[2\n                                                                                            * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*((_DWORD *)v29 - 1))]]\n                                                                      + 1) ^ dword_491504[2\n                                                                                        * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*((_DWORD *)v29 - 1))]];\n          *((_DWORD *)v29 - 1) = v31;\n          v25 += 4;\n          v27 -= 4;\n          v32 = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[*Sizea]] + 3) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*(_DWORD *)Sizea)]] + 2) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*(_DWORD *)Sizea)]] + 1) ^ dword_491504[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*(_DWORD *)Sizea)]];\n          *(_DWORD *)Sizea = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[*v29]] + 3) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*(_DWORD *)v29)]] + 2) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*(_DWORD *)v29)]] + 1) ^ dword_491504[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*(_DWORD *)v29)]];\n          *(_DWORD *)v29 = v32;\n          v29 -= 16;\n          v33 = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[Sizea[4]]] + 3) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*((_DWORD *)Sizea + 1))]] + 2) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*((_DWORD *)Sizea + 1))]] + 1) ^ dword_491504[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*((_DWORD *)Sizea + 1))]];\n          *((_DWORD *)Sizea + 1) = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[v29[20]]]\n                                          + 3) ^ *(int *)((char *)&dword_491500[2\n                                                                              * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(*((_DWORD *)v29 + 5))]]\n                                                        + 2) ^ *(int *)((char *)&dword_491500[2\n                                                                                            * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(*((_DWORD *)v29 + 5))]]\n                                                                      + 1) ^ dword_491504[2\n                                                                                        * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(*((_DWORD *)v29 + 5))]];\n          v28 = Sizea + 16;\n          *((_DWORD *)v29 + 5) = v33;\n          Sizea += 16;\n        }\n        while ( v25 < v27 );\n        v4 = this;\n        v24 = v46;\n      }\n      v34 = v24[v25 + 1];\n      v24[v25] = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[LOBYTE(v24[v25])]] + 3) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(v24[v25])]] + 2) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[(unsigned __int8)BYTE2(v24[v25])]] + 1) ^ dword_491504[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(v24[v25])]];\n      v35 = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE2(v34)]] + 1) ^ dword_491504[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(v34)]];\n      v36 = BYTE1(v34);\n      v37 = v24[v25 + 2];\n      v24[v25 + 1] = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[LOBYTE(v24[v25 + 1])]]\n                            + 3) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[v36]] + 2) ^ v35;\n      v38 = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE2(v37)]] + 1) ^ dword_491504[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(v37)]];\n      v39 = BYTE1(v37);\n      v40 = v24[v25 + 3];\n      v24[v25 + 2] = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[LOBYTE(v24[v25 + 2])]]\n                            + 3) ^ *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[v39]] + 2) ^ v38;\n      v24[v25 + 3] = *(int *)((char *)&dword_491500[2 * (unsigned __int8)RijnDael_AES_LONG_46E6E8[LOBYTE(v24[v25 + 3])]]\n                            + 3) ^ *(int *)((char *)&dword_491500[2\n                                                                * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE1(v40)]]\n                                          + 2) ^ *(int *)((char *)&dword_491500[2\n                                                                              * (unsigned __int8)RijnDael_AES_LONG_46E6E8[BYTE2(v40)]]\n                                                        + 1) ^ dword_491504[2\n                                                                          * (unsigned __int8)RijnDael_AES_LONG_46E6E8[HIBYTE(v40)]];\n      v41 = _byteswap_ulong(*v24);\n      *v24 = _byteswap_ulong(v24[4 * v4[3]]);\n      v24[4 * v4[3]] = v41;\n      v42 = _byteswap_ulong(v24[1]);\n      v24[1] = _byteswap_ulong(v24[4 * v4[3] + 1]);\n      v24[4 * v4[3] + 1] = v42;\n      v43 = _byteswap_ulong(v24[2]);\n      v24[2] = _byteswap_ulong(v24[4 * v4[3] + 2]);\n      v24[4 * v4[3] + 2] = v43;\n      v44 = _byteswap_ulong(v24[3]);\n      v24[3] = _byteswap_ulong(v24[4 * v4[3] + 3]);\n      v24[4 * v4[3] + 3] = v44;\n    }\n    if ( sub_41F72B() )\n      sub_41F28C(v24 + 4, (int)(v24 + 4), 16 * v4[3] - 16);\n  }\n}\n// 42039D: variable 'v6' is possibly undefined\n// 491500: using guessed type int dword_491500[];\n// 491504: using guessed type int dword_491504[511];\n// 491D00: using guessed type char byte_491D00;\n// 491D01: using guessed type char byte_491D01;\n\n"
    },
    {
        "Function": "sub_410497",
        "Total XOR and shift operations": 50,
        "XOR operations": 0,
        "Shift operations": 50,
        "Operation percentage": "30.67%",
        "Function Body": "\nunsigned __int64 __cdecl sub_410497(_DWORD *a1, unsigned int *a2, unsigned int *a3, unsigned int a4)\n{\n  unsigned __int64 v4; // kr98_8\n  unsigned int v5; // esi\n  unsigned int v6; // kr04_4\n  unsigned int v7; // edx\n  int v8; // esi\n  unsigned int v9; // ebp\n  unsigned int v10; // edi\n  unsigned int v11; // kr0C_4\n  unsigned int v12; // edx\n  int v13; // esi\n  unsigned __int64 v14; // krD8_8\n  unsigned __int64 v15; // rax\n  unsigned __int64 v16; // krE0_8\n  unsigned int v17; // esi\n  unsigned int v18; // kr20_4\n  int v19; // esi\n  unsigned int v20; // ebx\n  unsigned int v21; // ebp\n  int v22; // kr30_4\n  unsigned __int64 v23; // rax\n  unsigned __int64 v24; // kr108_8\n  unsigned int v25; // esi\n  unsigned int v26; // kr3C_4\n  int v27; // esi\n  unsigned int v28; // ebx\n  unsigned int v29; // edi\n  unsigned int v30; // kr44_4\n  int v31; // esi\n  unsigned int v32; // edi\n  int v33; // kr138_4\n  unsigned __int64 v34; // rax\n  unsigned __int64 v35; // kr140_8\n  unsigned int v36; // kr54_4\n  unsigned __int64 v37; // kr168_8\n  unsigned __int64 v38; // rax\n  int v39; // kr58_4\n  unsigned int v40; // kr5C_4\n  unsigned __int64 v41; // kr170_8\n  unsigned int v42; // esi\n  unsigned int v43; // ebx\n  unsigned int v44; // edi\n  int v45; // esi\n  unsigned int v46; // kr68_4\n  unsigned __int64 v47; // rax\n  unsigned __int64 v48; // kr190_8\n  unsigned int v49; // esi\n  unsigned __int64 v50; // kr1B0_8\n  unsigned __int64 v51; // rax\n  int v52; // kr74_4\n  unsigned int v53; // kr78_4\n  unsigned __int64 v54; // kr1B8_8\n  int v55; // esi\n  unsigned __int64 v56; // kr1C8_8\n  int v57; // ecx\n  unsigned __int64 v58; // rax\n  unsigned __int64 result; // rax\n\n  v4 = ((a3[5] * (unsigned __int64)a2[1]) >> 32)\n     + ((a3[4] * (unsigned __int64)a2[2]) >> 32)\n     + ((a3[3] * (unsigned __int64)a2[3]) >> 32)\n     + ((a3[2] * (unsigned __int64)a2[4]) >> 32)\n     + ((a3[1] * (unsigned __int64)a2[5]) >> 32)\n     + ((a3[6] * (unsigned __int64)*a2) >> 32)\n     + ((*a3 * (unsigned __int64)a2[6]) >> 32);\n  v5 = a3[7] * *a2 + v4;\n  v6 = (v5 + a3[6] * (unsigned __int64)a2[1]) >> 32;\n  v7 = (a3[5] * (unsigned __int64)a2[2] + v5 + a3[6] * a2[1]) >> 32;\n  v8 = a3[5] * a2[2] + v5 + a3[6] * a2[1];\n  v9 = (v7 + ((a3[7] * (unsigned __int64)*a2 + (unsigned int)v4) >> 32) + HIDWORD(v4) + v6) >> 32;\n  v10 = v7 + ((a3[7] * (unsigned __int64)*a2 + (unsigned int)v4) >> 32) + HIDWORD(v4) + v6;\n  v11 = ((unsigned int)v8 + a3[4] * (unsigned __int64)a2[3]) >> 32;\n  v12 = (a3[3] * (unsigned __int64)a2[4] + v8 + a3[4] * a2[3]) >> 32;\n  v13 = a3[3] * a2[4] + v8 + a3[4] * a2[3];\n  v14 = ((a3[1] * (unsigned __int64)a2[6] + v13 + a3[2] * a2[5]) >> 32)\n      + v12\n      + __PAIR64__(v9, v11)\n      + v10\n      + (((unsigned int)v13 + a3[2] * (unsigned __int64)a2[5]) >> 32);\n  v15 = a3[1] * a2[6] + v13 + a3[2] * a2[5] + *a3 * (unsigned __int64)a2[7];\n  v16 = HIDWORD(v15) + (unsigned __int64)(a4 < (unsigned int)v15) + v14;\n  v17 = a3[7] * a2[1] + v16;\n  v18 = (v17 + a3[6] * (unsigned __int64)a2[2]) >> 32;\n  HIDWORD(v15) = (a3[5] * (unsigned __int64)a2[3] + v17 + a3[6] * a2[2]) >> 32;\n  v19 = a3[5] * a2[3] + v17 + a3[6] * a2[2];\n  v20 = (((a3[3] * (unsigned __int64)a2[5] + v19 + a3[4] * a2[4]) >> 32)\n       + HIDWORD(v15)\n       + ((a3[7] * (unsigned __int64)a2[1] + (unsigned int)v16) >> 32)\n       + HIDWORD(v16)\n       + v18\n       + (((unsigned int)v19 + a3[4] * (unsigned __int64)a2[4]) >> 32)) >> 32;\n  v21 = ((a3[3] * (unsigned __int64)a2[5] + v19 + a3[4] * a2[4]) >> 32)\n      + HIDWORD(v15)\n      + ((a3[7] * (unsigned __int64)a2[1] + (unsigned int)v16) >> 32)\n      + HIDWORD(v16)\n      + v18\n      + (((unsigned int)v19 + a3[4] * (unsigned __int64)a2[4]) >> 32);\n  v22 = a3[3] * a2[5] + v19 + a3[4] * a2[4];\n  v23 = a3[2] * a2[6] + v22 + a3[1] * (unsigned __int64)a2[7];\n  v24 = HIDWORD(v23) + __PAIR64__(v20, (a3[2] * (unsigned __int64)a2[6] + (unsigned int)v22) >> 32) + v21;\n  *a1 = v23;\n  v25 = a3[7] * a2[2] + v24;\n  v26 = (v25 + a3[6] * (unsigned __int64)a2[3]) >> 32;\n  HIDWORD(v23) = (a3[5] * (unsigned __int64)a2[4] + v25 + a3[6] * a2[3]) >> 32;\n  v27 = a3[5] * a2[4] + v25 + a3[6] * a2[3];\n  v29 = (HIDWORD(v23) + ((a3[7] * (unsigned __int64)a2[2] + (unsigned int)v24) >> 32) + HIDWORD(v24) + v26) >> 32;\n  v28 = HIDWORD(v23) + ((a3[7] * (unsigned __int64)a2[2] + (unsigned int)v24) >> 32) + HIDWORD(v24) + v26;\n  v30 = ((unsigned int)v27 + a3[4] * (unsigned __int64)a2[5]) >> 32;\n  HIDWORD(v23) = (a3[3] * (unsigned __int64)a2[6] + v27 + a3[4] * a2[5]) >> 32;\n  v31 = a3[3] * a2[6] + v27 + a3[4] * a2[5];\n  v33 = HIDWORD(v23) + v30 + v28;\n  v32 = (HIDWORD(v23) + __PAIR64__(v29, v30) + v28) >> 32;\n  v34 = a3[2] * (unsigned __int64)a2[7];\n  a1[1] = v31 + v34;\n  v35 = __PAIR64__(v32, (unsigned int)__CFADD__(v31, (_DWORD)v34) + HIDWORD(v34)) + (unsigned int)v33;\n  v36 = v35 + a3[7] * a2[3] + a3[6] * a2[4] + a3[5] * a2[5];\n  v37 = ((a3[4] * (unsigned __int64)a2[6] + v36) >> 32)\n      + (((_DWORD)v35 + a3[7] * a2[3] + a3[6] * a2[4] + a3[5] * (unsigned __int64)a2[5]) >> 32)\n      + (((unsigned int)v35 + a3[7] * (unsigned __int64)a2[3]) >> 32)\n      + HIDWORD(v35)\n      + (((unsigned int)v35 + a3[7] * a2[3] + a3[6] * (unsigned __int64)a2[4]) >> 32);\n  v38 = a3[3] * (unsigned __int64)a2[7];\n  v39 = a3[3] * a2[7];\n  v40 = a3[4] * a2[6] + v36;\n  a1[2] = v40 + v39;\n  v41 = ((__PAIR64__(HIDWORD(v38), v40) + (unsigned int)v39) >> 32) + v37;\n  v42 = v41 + a3[7] * a2[4];\n  v44 = ((((unsigned int)v41 + a3[7] * (unsigned __int64)a2[4]) >> 32)\n       + HIDWORD(v41)\n       + ((v42 + a3[6] * (unsigned __int64)a2[5]) >> 32)) >> 32;\n  v43 = (((unsigned int)v41 + a3[7] * (unsigned __int64)a2[4]) >> 32)\n      + HIDWORD(v41)\n      + ((v42 + a3[6] * (unsigned __int64)a2[5]) >> 32);\n  HIDWORD(v38) = (a3[5] * (unsigned __int64)a2[6] + v42 + a3[6] * a2[5]) >> 32;\n  v45 = a3[5] * a2[6] + v42 + a3[6] * a2[5];\n  v46 = HIDWORD(v38);\n  v47 = a3[4] * (unsigned __int64)a2[7];\n  a1[3] = v45 + v47;\n  v48 = __PAIR64__(v44, v46) + v43 + (unsigned int)__CFADD__(v45, (_DWORD)v47) + HIDWORD(v47);\n  v49 = v48 + a3[7] * a2[5];\n  v50 = ((a3[6] * (unsigned __int64)a2[6] + v49) >> 32)\n      + (((unsigned int)v48 + a3[7] * (unsigned __int64)a2[5]) >> 32)\n      + HIDWORD(v48);\n  v51 = a3[5] * (unsigned __int64)a2[7];\n  v52 = a3[5] * a2[7];\n  v53 = a3[6] * a2[6] + v49;\n  a1[4] = v53 + v52;\n  v54 = ((__PAIR64__(HIDWORD(v51), v53) + (unsigned int)v52) >> 32) + v50;\n  v55 = v54 + a3[7] * a2[6];\n  v56 = (((unsigned int)v54 + a3[7] * (unsigned __int64)a2[6]) >> 32) + HIDWORD(v54);\n  LODWORD(v51) = a3[6] * a2[7];\n  v57 = (a3[6] * (unsigned __int64)a2[7]) >> 32;\n  a1[5] = v55 + v51;\n  v58 = (unsigned int)__CFADD__(v55, (_DWORD)v51) + v57 + a3[7] * (unsigned __int64)a2[7];\n  a1[6] = v56 + v58;\n  result = v56 + v58;\n  a1[7] = HIDWORD(result);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_410A44",
        "Total XOR and shift operations": 56,
        "XOR operations": 0,
        "Shift operations": 56,
        "Operation percentage": "29.32%",
        "Function Body": "\n_DWORD *__cdecl sub_410A44(_DWORD *a1, unsigned int *a2)\n{\n  unsigned __int64 v3; // rax\n  unsigned int v4; // edi\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // kr00_8\n  unsigned int v7; // esi\n  unsigned __int64 v8; // rax\n  unsigned __int64 v9; // kr78_8\n  int v11; // kr0C_4\n  unsigned int v12; // edi\n  unsigned int v13; // esi\n  int v14; // ecx\n  bool v15; // cf\n  unsigned __int64 v16; // kr90_8\n  unsigned int v17; // edi\n  unsigned __int64 v18; // kr98_8\n  unsigned __int64 v19; // rax\n  unsigned __int64 v20; // krA0_8\n  unsigned __int64 v22; // krA8_8\n  unsigned __int64 v23; // krB8_8\n  unsigned int v24; // esi\n  unsigned __int64 v25; // krC8_8\n  unsigned __int64 v27; // krD0_8\n  unsigned __int64 v28; // krE0_8\n  unsigned __int64 v29; // rax\n  unsigned __int64 v30; // krF0_8\n  __int64 v32; // rcx\n  unsigned __int64 v33; // kr110_8\n  unsigned __int64 v34; // kr120_8\n  unsigned int v35; // esi\n  unsigned __int64 v36; // kr130_8\n  unsigned __int64 v37; // kr140_8\n  unsigned __int64 v38; // kr150_8\n  unsigned __int64 v39; // rax\n  unsigned __int64 v40; // kr158_8\n  unsigned __int64 v41; // kr170_8\n  unsigned int v42; // edi\n  unsigned int v43; // esi\n  __int64 v44; // kr190_8\n  int v45; // kr44_4\n  unsigned int v46; // edi\n  unsigned __int64 v47; // kr1A0_8\n  unsigned __int64 v48; // rax\n  unsigned __int64 v49; // kr1A8_8\n  int v50; // kr50_4\n  unsigned __int64 v51; // kr1B8_8\n  unsigned __int64 v52; // kr1C0_8\n  unsigned __int64 v53; // rax\n  unsigned int v54; // ebp\n  unsigned int v55; // kr68_4\n  unsigned __int64 v57; // kr1E0_8\n  unsigned __int64 v58; // kr1E8_8\n  int v59; // ebp\n  _DWORD *result; // eax\n  unsigned __int64 v61; // kr1F8_8\n  int v62; // [esp+10h] [ebp-Ch]\n  unsigned __int64 v63; // [esp+10h] [ebp-Ch]\n  unsigned __int64 v64; // [esp+10h] [ebp-Ch]\n  __int64 v65; // [esp+10h] [ebp-Ch]\n\n  v3 = *a2 * (unsigned __int64)*a2;\n  *a1 = v3;\n  v4 = HIDWORD(v3);\n  v5 = ((a2[1] * *a2) >> 31) + 2 * ((a2[1] * (unsigned __int64)*a2) >> 32);\n  v6 = __PAIR64__(v5, 2 * a2[1] * *a2) + v4;\n  v62 = HIDWORD(v5) + __CFADD__((_DWORD)v5, HIDWORD(v6));\n  a1[1] = v6;\n  v7 = a2[2] * *a2;\n  v8 = 2 * v7 + a2[1] * (unsigned __int64)a2[1];\n  v9 = __PAIR64__(v62, v8) + HIDWORD(v6);\n  v63 = 2 * ((a2[2] * (unsigned __int64)*a2) >> 32) + (v7 >> 31) + HIDWORD(v8) + (unsigned __int64)HIDWORD(v9);\n  a1[2] = v9;\n  v11 = a2[3] * *a2;\n  v12 = a2[2] * a2[1] + v11;\n  v13 = 2 * ((a2[3] * (unsigned __int64)*a2) >> 32)\n      + (v12 >> 31)\n      + 2 * ((a2[2] * (unsigned __int64)a2[1] + (unsigned int)v11) >> 32);\n  v14 = 2 * v12 + v63;\n  v15 = __CFADD__(v13, (__PAIR64__(v13, 2 * v12) + v63) >> 32);\n  HIDWORD(v63) = (__PAIR64__(v13, 2 * v12) + v63) >> 32;\n  LODWORD(v63) = ((2 * ((a2[3] * (unsigned __int64)*a2) >> 32)\n                 + (v12 >> 31)\n                 + 2 * ((a2[2] * (unsigned __int64)a2[1] + (unsigned int)v11) >> 32)) >> 32)\n               + v15;\n  a1[3] = v14;\n  v16 = a2[4] * (unsigned __int64)*a2;\n  v17 = a2[3] * a2[1] + v16;\n  v18 = (v17 >> 31) + 2 * ((a2[3] * (unsigned __int64)a2[1] + (unsigned int)v16) >> 32);\n  v19 = 2 * v17 + a2[2] * (unsigned __int64)a2[2];\n  v20 = (unsigned int)v19 + __PAIR64__(v63, HIDWORD(v63));\n  a1[4] = v20;\n  v22 = a2[4] * (unsigned __int64)a2[1] + a2[5] * *a2;\n  v23 = (unsigned int)v22 + a2[3] * (unsigned __int64)a2[2];\n  v24 = 2 * (HIDWORD(v22) + ((a2[5] * (unsigned __int64)*a2) >> 32)) + ((unsigned int)v23 >> 31) + 2 * HIDWORD(v23);\n  v25 = __PAIR64__(v24, 2 * (int)v23) + 2i64 * HIDWORD(v16) + v18 + HIDWORD(v19) + (unsigned __int64)HIDWORD(v20);\n  LODWORD(v63) = ((2 * (HIDWORD(v22) + ((a2[5] * (unsigned __int64)*a2) >> 32))\n                 + ((unsigned int)v23 >> 31)\n                 + 2i64 * HIDWORD(v23)) >> 32)\n               + __CFADD__(v24, HIDWORD(v25));\n  a1[5] = v25;\n  v27 = a2[5] * (unsigned __int64)a2[1] + a2[6] * *a2;\n  v28 = (unsigned int)v27 + a2[4] * (unsigned __int64)a2[2];\n  v29 = (unsigned int)(2 * v28) + a2[3] * (unsigned __int64)a2[3];\n  v30 = (unsigned int)v29 + __PAIR64__(v63, HIDWORD(v25));\n  v64 = 2 * (HIDWORD(v27) + ((a2[6] * (unsigned __int64)*a2) >> 32))\n      + 2i64 * HIDWORD(v28)\n      + ((unsigned int)v28 >> 31)\n      + HIDWORD(v29)\n      + (unsigned __int64)HIDWORD(v30);\n  a1[6] = v30;\n  v32 = a2[7] * *a2;\n  v33 = a2[5] * (unsigned __int64)a2[2] + (unsigned int)v32 + a2[6] * a2[1];\n  v34 = a2[4] * (unsigned __int64)a2[3] + (unsigned int)v33;\n  HIDWORD(v29) = (2\n                * (HIDWORD(v33)\n                 + __PAIR64__(HIDWORD(v32), (v32 + a2[6] * (unsigned __int64)a2[1]) >> 32)\n                 + __PAIR64__(HIDWORD(v32), (a2[7] * (unsigned __int64)*a2) >> 32))\n                + 2i64 * HIDWORD(v34)\n                + ((unsigned int)v34 >> 31)) >> 32;\n  v35 = 2 * (HIDWORD(v33) + ((v32 + a2[6] * (unsigned __int64)a2[1]) >> 32) + ((a2[7] * (unsigned __int64)*a2) >> 32))\n      + 2 * HIDWORD(v34)\n      + ((unsigned int)v34 >> 31);\n  HIDWORD(v32) = a2;\n  LODWORD(v32) = 2 * v34 + v64;\n  v15 = __CFADD__(v35, (__PAIR64__(v35, 2 * (int)v34) + v64) >> 32);\n  HIDWORD(v64) = (__PAIR64__(v35, 2 * (int)v34) + v64) >> 32;\n  LODWORD(v64) = HIDWORD(v29) + v15;\n  a1[7] = v32;\n  v36 = *(unsigned int *)(HIDWORD(v32) + 24) * (unsigned __int64)*(unsigned int *)(HIDWORD(v32) + 8)\n      + (unsigned int)(*(_DWORD *)(HIDWORD(v32) + 28) * *(_DWORD *)(HIDWORD(v32) + 4));\n  v37 = (unsigned int)v36 + a2[5] * (unsigned __int64)a2[3];\n  v38 = 2\n      * (HIDWORD(v36)\n       + ((*(unsigned int *)(HIDWORD(v32) + 28) * (unsigned __int64)*(unsigned int *)(HIDWORD(v32) + 4)) >> 32))\n      + 2i64 * HIDWORD(v37)\n      + ((unsigned int)v37 >> 31);\n  HIDWORD(v32) = HIDWORD(v38);\n  v39 = (unsigned int)(2 * v37) + a2[4] * (unsigned __int64)a2[4];\n  v40 = (unsigned int)v39 + __PAIR64__(v64, HIDWORD(v64));\n  LODWORD(v32) = HIDWORD(v39) + HIDWORD(v40);\n  v65 = __PAIR64__((HIDWORD(v39) + (unsigned __int64)HIDWORD(v40)) >> 32, v38) + v32;\n  a1[8] = v40;\n  v41 = a2[6] * (unsigned __int64)a2[3] + a2[7] * a2[2];\n  v42 = v41 + a2[5] * a2[4];\n  v43 = 2 * (HIDWORD(v41) + ((a2[7] * (unsigned __int64)a2[2]) >> 32))\n      + (v42 >> 31)\n      + 2 * (((unsigned int)v41 + a2[5] * (unsigned __int64)a2[4]) >> 32);\n  HIDWORD(v32) = a2;\n  v44 = __PAIR64__(v43, 2 * v42) + v65;\n  LODWORD(v65) = ((2 * (HIDWORD(v41) + ((a2[7] * (unsigned __int64)a2[2]) >> 32))\n                 + (v42 >> 31)\n                 + 2 * (((unsigned int)v41 + a2[5] * (unsigned __int64)a2[4]) >> 32)) >> 32)\n               + __CFADD__(v43, (__PAIR64__(v43, 2 * v42) + v65) >> 32);\n  a1[9] = v44;\n  v45 = *(_DWORD *)(HIDWORD(v32) + 28) * *(_DWORD *)(HIDWORD(v32) + 12);\n  v46 = *(_DWORD *)(HIDWORD(v32) + 24) * *(_DWORD *)(HIDWORD(v32) + 16) + v45;\n  v47 = 2 * ((*(unsigned int *)(HIDWORD(v32) + 28) * (unsigned __int64)*(unsigned int *)(HIDWORD(v32) + 12)) >> 32)\n      + (v46 >> 31)\n      + 2\n      * ((*(unsigned int *)(HIDWORD(v32) + 24) * (unsigned __int64)*(unsigned int *)(HIDWORD(v32) + 16)\n        + (unsigned int)v45) >> 32);\n  v48 = 2 * v46 + a2[5] * (unsigned __int64)a2[5];\n  v49 = (unsigned int)v48 + __PAIR64__(v65, HIDWORD(v44));\n  a1[10] = v49;\n  v50 = a2[7] * a2[4];\n  v51 = 2 * (a2[6] * a2[5] + v50) + v47 + HIDWORD(v48) + (unsigned __int64)HIDWORD(v49);\n  v52 = 2 * ((a2[7] * (unsigned __int64)a2[4]) >> 32)\n      + ((a2[6] * a2[5] + v50) >> 31)\n      + 2 * ((a2[6] * (unsigned __int64)a2[5] + (unsigned int)v50) >> 32)\n      + HIDWORD(v51);\n  a1[11] = v51;\n  v53 = 2 * a2[7] * a2[5] + a2[6] * (unsigned __int64)a2[6];\n  HIDWORD(v65) = v53 + v52;\n  v54 = (HIDWORD(v53) + ((v52 + (unsigned int)v53) >> 32)) >> 32;\n  v55 = HIDWORD(v53) + ((v52 + (unsigned int)v53) >> 32);\n  LODWORD(v53) = 2 * ((a2[7] * (unsigned __int64)a2[5]) >> 32) + ((a2[7] * a2[5]) >> 31) + v55;\n  v57 = 2 * ((a2[7] * (unsigned __int64)a2[5]) >> 32) + ((a2[7] * a2[5]) >> 31) + __PAIR64__(v54, v55);\n  a1[12] = HIDWORD(v65);\n  v58 = a2[7] * (unsigned __int64)a2[6];\n  v59 = __CFADD__(2 * v58, (_DWORD)v53) + HIDWORD(v57);\n  a1[13] = 2 * v58 + v53;\n  result = a1;\n  v61 = ((unsigned int)v58 >> 31) + 2i64 * HIDWORD(v58) + a2[7] * (unsigned __int64)a2[7];\n  a1[14] = v59 + v61;\n  a1[15] = __CFADD__(v59, (_DWORD)v61) + HIDWORD(v61);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_41FCF7",
        "Total XOR and shift operations": 80,
        "XOR operations": 71,
        "Shift operations": 9,
        "Operation percentage": "23.67%",
        "Function Body": "\n// positive sp value has been detected, the output may be wrong!\nunsigned int *__usercall sub_41FCF7@<eax>(const __m128i *a1@<edx>, int a2@<ecx>, __m64 a3@<mm2>, __m64 a4@<mm3>)\n{\n  int v4; // edi\n  int v5; // esi\n  unsigned int v6; // eax\n  __int8 *v7; // eax\n  __m128i si128; // xmm4\n  __m128i v9; // xmm1\n  __m64 v10; // mm1\n  unsigned int v11; // ebx\n  unsigned int v12; // ecx\n  unsigned int v13; // edx\n  int i; // eax\n  __m128i v15; // xmm2\n  unsigned int v16; // eax\n  unsigned int v17; // eax\n  __m128i v18; // xmm2\n  int v19; // edi\n  __m128i v20; // xmm2\n  __m64 v21; // mm1\n  int v22; // edx\n  int v23; // ecx\n  int v24; // ebx\n  unsigned int v25; // eax\n  int v26; // edi\n  __m128i v27; // xmm2\n  int v28; // ebx\n  __m64 v29; // mm1\n  int v30; // edx\n  int v31; // ecx\n  unsigned int v32; // eax\n  int v33; // edi\n  int v34; // ecx\n  int v35; // ebx\n  __m64 v36; // mm1\n  unsigned int v37; // edx\n  unsigned int v38; // ecx\n  unsigned int v39; // ebx\n  unsigned int v40; // edi\n  __m64 v41; // mm0\n  unsigned int v42; // eax\n  int v43; // eax\n  unsigned int v44; // ebx\n  int v45; // ebx\n  int v46; // edi\n  __m64 v47; // mm0\n  int v48; // ecx\n  int v49; // edx\n  __m128i v50; // xmm2\n  unsigned int v51; // eax\n  __m128i v52; // xmm2\n  int v53; // edi\n  __m128i v54; // xmm2\n  __m64 v55; // mm1\n  int v56; // edx\n  int v57; // ebx\n  __m64 v58; // mm1\n  int v59; // edx\n  int v60; // ecx\n  unsigned int v61; // eax\n  int v62; // edi\n  int v63; // ecx\n  int v64; // ebx\n  unsigned int v65; // edx\n  unsigned int v66; // ecx\n  unsigned int v67; // ebx\n  unsigned int v68; // eax\n  __int16 v69; // cx\n  unsigned int v70; // edx\n  unsigned int v71; // ebx\n  int v72; // ecx\n  unsigned int v73; // ecx\n  unsigned int v74; // eax\n  unsigned int j; // edx\n  __m64 v76; // mm0\n  unsigned int v77; // edi\n  unsigned int v78; // eax\n  int v79; // edi\n  __m64 v80; // mm0\n  unsigned int v81; // ebx\n  __m64 v82; // mm0\n  int v83; // eax\n  int v84; // ebx\n  unsigned int v85; // ecx\n  int v86; // eax\n  int v87; // ebx\n  unsigned int v88; // edx\n  int v89; // ebx\n  __m64 v90; // mm0\n  unsigned int v91; // edi\n  unsigned int v92; // eax\n  int v93; // edi\n  __m64 v94; // mm0\n  unsigned int v95; // ebx\n  __m64 v96; // mm0\n  int v97; // eax\n  int v98; // ebx\n  unsigned int v99; // ecx\n  int v100; // eax\n  int v101; // ebx\n  unsigned int v102; // edx\n  int v103; // ebx\n  unsigned int v104; // edx\n  unsigned int v105; // eax\n  unsigned int v106; // ebx\n  unsigned int v107; // ecx\n  __m128i *v108; // ebx\n  bool v109; // cc\n  unsigned int v110; // ecx\n  __m128i v111; // xmm2\n  unsigned int *result; // eax\n  int v113; // [esp+2C0h] [ebp-50h] BYREF\n  void *retaddr; // [esp+310h] [ebp+0h] BYREF\n\n  v4 = dword_48C1F8;\n  *(_DWORD *)(a2 + 256) = &v113;\n  v5 = STACK[0x6C8];\n  v6 = STACK[0x6C8] & 0x10;\n  *(__m128i *)&STACK[0x680] = _mm_load_si128((const __m128i *)((char *)a1 + v6 + 16));\n  v7 = &a1[2].m128i_i8[v6 - v5];\n  do\n  {\n    *(__m128i *)((char *)&STACK[0x5C0] + v5) = _mm_load_si128((const __m128i *)&v7[v5]);\n    v5 += 16;\n  }\n  while ( v5 < 192 );\n  si128 = _mm_load_si128((const __m128i *)&v7[v5]);\n  v9 = _mm_load_si128(a1);\n  v10 = _mm_cvtsi32_si64(a1[1].m128i_u32[0]);\n  v11 = a1[1].m128i_u32[1];\n  v12 = a1[1].m128i_u32[2];\n  v13 = a1[1].m128i_u32[3];\n  for ( i = 0; i < 2048; i += v4 + v4 + v4 + v4 )\n    ;\n  _mm_lfence();\n  if ( (STACK[0x6C4] & 1) == 0 )\n    goto LABEL_7;\n  v15 = _mm_xor_si128(_mm_loadu_si128((const __m128i *)STACK[0x6A0]), v9);\n  v9 = _mm_srli_si128(v9, 14);\n  v16 = _mm_cvtsi128_si32(v9);\n  LOBYTE(v16) = *(_BYTE *)(STACK[0x6A0] + 15);\n  a3 = _mm_cvtsi32_si64(v16);\n  a4 = _mm_cvtsi32_si64(1u);\n  v17 = _mm_cvtsi128_si32(v15);\n  v18 = _mm_srli_si128(v15, 4);\n  v19 = _mm_cvtsi128_si32(v18);\n  v20 = _mm_srli_si128(v18, 4);\n  v21 = _m_pxor(v10, _mm_cvtsi32_si64(dword_490CF0[2 * (unsigned __int8)v17 + 1]));\n  v22 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v17)] + 1) ^ v13;\n  v17 >>= 16;\n  v23 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v17] + 2) ^ v12;\n  v24 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v17)] + 3) ^ v11;\n  v25 = v19;\n  v26 = _mm_cvtsi128_si32(v20);\n  v27 = _mm_srli_si128(v20, 4);\n  v28 = dword_490CF0[2 * (unsigned __int8)v25 + 1] ^ v24;\n  v29 = _m_pxor(v21, _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * BYTE1(v25)] + 1)));\n  v25 >>= 16;\n  v30 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v25] + 2) ^ v22;\n  v31 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v25)] + 3) ^ v23;\n  v32 = v26;\n  v33 = _mm_cvtsi128_si32(v27);\n  v34 = dword_490CF0[2 * (unsigned __int8)v32 + 1] ^ v31;\n  v35 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v32)] + 1) ^ v28;\n  v32 >>= 16;\n  v36 = _m_pxor(v29, _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v32] + 2)));\n  v37 = dword_490CF0[2 * (unsigned __int8)v33 + 1] ^ *(int *)((char *)&dword_490CF0[2 * BYTE1(v32)] + 3) ^ v30;\n  v38 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v33)] + 1) ^ v34;\n  v39 = *(int *)((char *)&dword_490CF0[2 * BYTE2(v33)] + 2) ^ v35;\n  v40 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v39] + 3) ^ STACK[0x688];\n  v41 = _m_pxor(\n          _m_pxor(\n            _mm_cvtsi32_si64(STACK[0x68C]),\n            _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v38] + 3))),\n          _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * BYTE1(v39)] + 2)));\n  v39 >>= 16;\n  v42 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v38)] + 2) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v39]\n                                                                     + 1) ^ STACK[0x680];\n  v38 >>= 16;\n  v43 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v37] + 3) ^ v42;\n  v44 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v37)] + 2) ^ STACK[0x684] ^ dword_490CF0[2 * BYTE1(v39) + 1];\n  v37 >>= 16;\n  v45 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v38] + 1) ^ v44;\n  v46 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v37] + 1) ^ dword_490CF0[2 * BYTE1(v38) + 1] ^ v40;\n  v47 = _m_pxor(v41, _mm_cvtsi32_si64(dword_490CF0[2 * BYTE1(v37) + 1]));\n  v48 = _mm_cvtsi128_si32(_mm_srli_si128(v27, 3));\n  v49 = _mm_cvtsi64_si32(v36);\n  STACK[0x5CC] = _mm_cvtsi64_si32(v47);\n  STACK[0x5C0] = v43;\n  STACK[0x5C4] = v45;\n  STACK[0x5C8] = v46;\nLABEL_9:\n  a3 = _m_paddb(a3, a4);\n  v70 = *(int *)((char *)&dword_490CF0[2 * v48] + 3) ^ v49;\n  v71 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v70] + 3) ^ v45;\n  v72 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v70)] + 2);\n  v70 >>= 16;\n  v73 = STACK[0x5C8] ^ v72;\n  v74 = dword_490CF0[2 * BYTE1(v70) + 1] ^ v43;\n  for ( j = STACK[0x5CC] ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v70] + 1);\n        ;\n        j = _mm_cvtsi64_si32(_m_pxor(v82, _mm_cvtsi32_si64(dword_490CF0[2 * BYTE1(v88) + 1]))) )\n  {\n    v90 = _m_pxor(\n            _mm_cvtsi32_si64(STACK[0x5CC]),\n            _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v73] + 3)));\n    LOBYTE(v73) = v74;\n    v91 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v74)] + 2) ^ STACK[0x5C8];\n    v92 = HIWORD(v74);\n    v93 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v71] + 3) ^ v91;\n    v94 = _m_pxor(v90, _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * BYTE1(v71)] + 2)));\n    v95 = HIWORD(v71);\n    v96 = _m_pxor(v94, _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v92] + 1)));\n    v97 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v73)] + 2) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v95]\n                                                                       + 1) ^ dword_490CF0[2 * BYTE1(v92) + 1];\n    v98 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v73] + 3) ^ dword_490CF0[2 * BYTE1(v95) + 1];\n    v99 = HIWORD(v73);\n    v100 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)j] + 3) ^ v97;\n    v101 = *(int *)((char *)&dword_490CF0[2 * BYTE1(j)] + 2) ^ v98;\n    v102 = HIWORD(j);\n    v103 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v99] + 1) ^ v101;\n    v66 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v102] + 1) ^ dword_490CF0[2 * BYTE1(v99) + 1] ^ v93;\n    v68 = STACK[0x5C0] ^ v100;\n    v67 = STACK[0x5C4] ^ v103;\n    v65 = _mm_cvtsi64_si32(_m_pxor(v96, _mm_cvtsi32_si64(dword_490CF0[2 * BYTE1(v102) + 1])));\n    if ( ((unsigned int)&retaddr & 0xFF) != 0 )\n      goto LABEL_10;\n    LOWORD(STACK[0x5E2]) = LOWORD(dword_490CF0[2 * (unsigned __int8)v65]) ^ BYTE1(dword_490CF0[2 * BYTE1(v66)]);\n    LOWORD(STACK[0x5E6]) = LOWORD(dword_490CF0[2 * (unsigned __int8)v68]) ^ BYTE1(dword_490CF0[2 * BYTE1(v65)]);\n    v104 = HIWORD(v65);\n    LOWORD(STACK[0x5EA]) = LOWORD(dword_490CF0[2 * (unsigned __int8)v67]) ^ BYTE1(dword_490CF0[2 * BYTE1(v68)]);\n    v105 = HIWORD(v68);\n    LOWORD(STACK[0x5EE]) = LOWORD(dword_490CF0[2 * (unsigned __int8)v66]) ^ BYTE1(dword_490CF0[2 * BYTE1(v67)]);\n    v106 = HIWORD(v67);\n    LOWORD(STACK[0x5EC]) = LOWORD(dword_490CF0[2 * (unsigned __int8)v105]) ^ BYTE1(dword_490CF0[2 * BYTE1(v104)]);\n    v107 = HIWORD(v66);\n    LOWORD(STACK[0x5E0]) = LOWORD(dword_490CF0[2 * (unsigned __int8)v106]) ^ BYTE1(dword_490CF0[2 * BYTE1(v105)]);\n    LOWORD(STACK[0x5E4]) = LOWORD(dword_490CF0[2 * (unsigned __int8)v107]) ^ BYTE1(dword_490CF0[2 * BYTE1(v106)]);\n    LOWORD(STACK[0x5E8]) = LOWORD(dword_490CF0[2 * (unsigned __int8)v104]) ^ BYTE1(dword_490CF0[2 * BYTE1(v107)]);\n    v108 = (__m128i *)STACK[0x5FC];\n    v109 = (int)STACK[0x614] <= 16;\n    v110 = STACK[0x614] - 16;\n    v111 = _mm_xor_si128(_mm_loadu_si128((const __m128i *)STACK[0x5F8]), si128);\n    *(__m128i *)&STACK[0x5F0] = _mm_add_epi32(_mm_load_si128((const __m128i *)&STACK[0x600]), *(__m128i *)&STACK[0x5F0]);\n    *v108 = _mm_xor_si128(v111, *(__m128i *)&STACK[0x5E0]);\n    if ( v109 )\n      break;\n    STACK[0x614] = v110;\n    if ( (v110 & 1) != 0 )\n    {\n      v69 = _mm_cvtsi64_si32(a3);\n      v49 = _mm_cvtsi64_si32(v36);\n      v43 = STACK[0x510];\n      v45 = STACK[0x514];\n      v48 = (unsigned __int8)(HIBYTE(v69) ^ v69);\n      goto LABEL_9;\n    }\n    v10 = _mm_cvtsi32_si64(STACK[0x5D0]);\n    v11 = STACK[0x5D4];\n    v12 = STACK[0x5D8];\n    v13 = STACK[0x5DC];\nLABEL_7:\n    v50 = _mm_xor_si128(\n            _mm_xor_si128(_mm_loadu_si128((const __m128i *)STACK[0x5F0]), v9),\n            _mm_loadu_si128((const __m128i *)STACK[0x5F4]));\n    v51 = _mm_cvtsi128_si32(v50);\n    v52 = _mm_srli_si128(v50, 4);\n    v53 = _mm_cvtsi128_si32(v52);\n    v54 = _mm_srli_si128(v52, 4);\n    v55 = _m_pxor(v10, _mm_cvtsi32_si64(dword_490CF0[2 * (unsigned __int8)v51 + 1]));\n    v56 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v51)] + 1) ^ v13;\n    v51 >>= 16;\n    v57 = dword_490CF0[2 * (unsigned __int8)v53 + 1] ^ *(int *)((char *)&dword_490CF0[2 * BYTE1(v51)] + 3) ^ v11;\n    v58 = _m_pxor(v55, _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * BYTE1(v53)] + 1)));\n    v59 = *(int *)((char *)&dword_490CF0[2 * BYTE2(v53)] + 2) ^ v56;\n    v60 = *(int *)((char *)&dword_490CF0[2 * HIBYTE(v53)] + 3) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v51]\n                                                                        + 2) ^ v12;\n    v61 = _mm_cvtsi128_si32(v54);\n    v62 = _mm_cvtsi128_si32(_mm_srli_si128(v54, 4));\n    v63 = dword_490CF0[2 * (unsigned __int8)v61 + 1] ^ v60;\n    v64 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v61)] + 1) ^ v57;\n    v61 >>= 16;\n    v65 = dword_490CF0[2 * (unsigned __int8)v62 + 1] ^ *(int *)((char *)&dword_490CF0[2 * BYTE1(v61)] + 3) ^ v59;\n    v66 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v62)] + 1) ^ v63;\n    v67 = *(int *)((char *)&dword_490CF0[2 * BYTE2(v62)] + 2) ^ v64;\n    v36 = _m_pxor(\n            _m_pxor(v58, _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v61] + 2))),\n            _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * HIBYTE(v62)] + 3)));\n    v68 = _mm_cvtsi64_si32(v36);\nLABEL_10:\n    v76 = _m_pxor(\n            _mm_cvtsi32_si64(STACK[0x5DC]),\n            _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v66] + 3)));\n    LOBYTE(v66) = v68;\n    v77 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v68)] + 2) ^ STACK[0x5D8];\n    v78 = HIWORD(v68);\n    v79 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v67] + 3) ^ v77;\n    v80 = _m_pxor(v76, _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * BYTE1(v67)] + 2)));\n    v81 = HIWORD(v67);\n    v82 = _m_pxor(v80, _mm_cvtsi32_si64(*(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v78] + 1)));\n    v83 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v66)] + 2) ^ *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v81]\n                                                                       + 1) ^ dword_490CF0[2 * BYTE1(v78) + 1];\n    v84 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v66] + 3) ^ dword_490CF0[2 * BYTE1(v81) + 1];\n    v85 = HIWORD(v66);\n    v86 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v65] + 3) ^ v83;\n    v87 = *(int *)((char *)&dword_490CF0[2 * BYTE1(v65)] + 2) ^ v84;\n    v88 = HIWORD(v65);\n    v89 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v85] + 1) ^ v87;\n    v73 = *(int *)((char *)&dword_490CF0[2 * (unsigned __int8)v88] + 1) ^ dword_490CF0[2 * BYTE1(v85) + 1] ^ v79;\n    v74 = STACK[0x5D0] ^ v86;\n    v71 = STACK[0x5D4] ^ v89;\n  }\n  result = &STACK[0x580];\n  *(_OWORD *)&STACK[0x510] = 0i64;\n  *(_OWORD *)&STACK[0x520] = 0i64;\n  *(_OWORD *)&STACK[0x530] = 0i64;\n  *(_OWORD *)&STACK[0x540] = 0i64;\n  *(_OWORD *)&STACK[0x550] = 0i64;\n  *(_OWORD *)&STACK[0x560] = 0i64;\n  *(_OWORD *)&STACK[0x570] = 0i64;\n  *(_OWORD *)&STACK[0x580] = 0i64;\n  *(_OWORD *)&STACK[0x590] = 0i64;\n  *(_OWORD *)&STACK[0x5A0] = 0i64;\n  *(_OWORD *)&STACK[0x5B0] = 0i64;\n  *(_OWORD *)&STACK[0x5C0] = 0i64;\n  *(_OWORD *)&STACK[0x5D0] = 0i64;\n  *(_OWORD *)&STACK[0x5E0] = 0i64;\n  _m_empty();\n  return result;\n}\n// 420074: positive sp value 40 has been found\n// 420312: returning address of temporary local variable '%0x580'\n// 48C1F8: using guessed type int dword_48C1F8;\n// 490CF0: using guessed type int dword_490CF0[];\n\n"
    }
]