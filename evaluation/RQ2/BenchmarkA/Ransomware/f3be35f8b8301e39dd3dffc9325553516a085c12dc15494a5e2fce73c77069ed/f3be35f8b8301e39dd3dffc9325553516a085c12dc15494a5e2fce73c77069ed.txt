[
    {
        "Function": "sub_406A04",
        "Total XOR and shift operations": 92,
        "XOR operations": 68,
        "Shift operations": 24,
        "Operation percentage": "137.31%",
        "Function Body": "\nint __usercall sub_406A04@<eax>(unsigned __int8 *a1@<eax>, int a2@<esi>, int *a3)\n{\n  _DWORD *v3; // ecx\n  unsigned int v4; // ebx\n  _DWORD *v5; // ecx\n  bool v6; // cc\n  unsigned int v7; // edx\n  unsigned int v8; // edi\n  int v9; // edx\n  int v11; // [esp+8h] [ebp-18h]\n  int v12; // [esp+Ch] [ebp-14h]\n  unsigned int v13; // [esp+10h] [ebp-10h]\n  unsigned int v14; // [esp+10h] [ebp-10h]\n  unsigned int v15; // [esp+14h] [ebp-Ch]\n  unsigned int v16; // [esp+14h] [ebp-Ch]\n  unsigned int v17; // [esp+14h] [ebp-Ch]\n  unsigned int v18; // [esp+18h] [ebp-8h]\n  int v19; // [esp+18h] [ebp-8h]\n  unsigned int v20; // [esp+1Ch] [ebp-4h]\n  unsigned int v21; // [esp+28h] [ebp+8h]\n  unsigned int v22; // [esp+28h] [ebp+8h]\n\n  v3 = (_DWORD *)a3[1];\n  v20 = *v3 ^ (*a1 | ((a1[1] | (*((unsigned __int16 *)a1 + 1) << 8)) << 8));\n  v18 = v3[1] ^ (a1[4] | ((a1[5] | ((a1[6] | (a1[7] << 8)) << 8)) << 8));\n  v4 = v3[2] ^ (a1[8] | ((a1[9] | ((a1[10] | (a1[11] << 8)) << 8)) << 8));\n  v15 = v3[3] ^ (a1[12] | ((a1[13] | ((a1[14] | (a1[15] << 8)) << 8)) << 8));\n  v5 = v3 + 4;\n  v11 = (*a3 >> 1) - 1;\n  v6 = v11 <= 0;\n  while ( !v6 )\n  {\n    v21 = v5[1] ^ dword_40D170[(unsigned __int8)v18] ^ dword_40C570[HIBYTE(v20)] ^ dword_40CD70[BYTE1(v4)] ^ dword_40C970[BYTE2(v15)];\n    v13 = v5[2] ^ dword_40D170[(unsigned __int8)v4] ^ dword_40C570[HIBYTE(v18)] ^ dword_40C970[BYTE2(v20)] ^ dword_40CD70[BYTE1(v15)];\n    v7 = *v5 ^ dword_40D170[(unsigned __int8)v20] ^ dword_40C570[HIBYTE(v15)] ^ dword_40CD70[BYTE1(v18)] ^ dword_40C970[BYTE2(v4)];\n    v16 = v5[3] ^ dword_40D170[(unsigned __int8)v15] ^ dword_40C570[HIBYTE(v4)] ^ dword_40CD70[BYTE1(v20)] ^ dword_40C970[BYTE2(v18)];\n    v20 = v5[4] ^ dword_40D170[(unsigned __int8)v7] ^ dword_40C570[HIBYTE(v16)] ^ dword_40CD70[BYTE1(v21)] ^ dword_40C970[BYTE2(v13)];\n    v18 = v5[5] ^ dword_40D170[(unsigned __int8)v21] ^ dword_40C570[HIBYTE(v7)] ^ dword_40CD70[BYTE1(v13)] ^ dword_40C970[BYTE2(v16)];\n    v4 = v5[6] ^ dword_40D170[(unsigned __int8)v13] ^ dword_40C570[HIBYTE(v21)] ^ dword_40C970[BYTE2(v7)] ^ dword_40CD70[BYTE1(v16)];\n    v5 += 8;\n    v6 = --v11 <= 0;\n    v15 = *(v5 - 1) ^ dword_40D170[(unsigned __int8)v16] ^ dword_40C570[HIBYTE(v13)] ^ dword_40CD70[BYTE1(v7)] ^ dword_40C970[BYTE2(v21)];\n  }\n  v22 = v5[1] ^ dword_40D170[(unsigned __int8)v18] ^ dword_40C570[HIBYTE(v20)] ^ dword_40CD70[BYTE1(v4)] ^ dword_40C970[BYTE2(v15)];\n  v14 = v5[2] ^ dword_40D170[(unsigned __int8)v4] ^ dword_40C570[HIBYTE(v18)] ^ dword_40C970[BYTE2(v20)] ^ dword_40CD70[BYTE1(v15)];\n  v8 = *v5 ^ dword_40D170[(unsigned __int8)v20] ^ dword_40C570[HIBYTE(v15)] ^ dword_40CD70[BYTE1(v18)] ^ dword_40C970[BYTE2(v4)];\n  v17 = v5[3] ^ dword_40D170[(unsigned __int8)v15] ^ dword_40C570[HIBYTE(v4)] ^ dword_40CD70[BYTE1(v20)] ^ dword_40C970[BYTE2(v18)];\n  v19 = v5[5] ^ (unsigned __int8)byte_40B448[(unsigned __int8)v22] ^ (((unsigned __int8)byte_40B448[BYTE1(v14)] ^ ((((unsigned __int8)byte_40B448[HIBYTE(v8)] << 8) ^ (unsigned __int8)byte_40B448[BYTE2(v17)]) << 8)) << 8);\n  v12 = v5[6] ^ (unsigned __int8)byte_40B448[(unsigned __int8)v14] ^ (((unsigned __int8)byte_40B448[BYTE1(v17)] ^ ((((unsigned __int8)byte_40B448[HIBYTE(v22)] << 8) ^ (unsigned __int8)byte_40B448[BYTE2(v8)]) << 8)) << 8);\n  v9 = v5[7] ^ (unsigned __int8)byte_40B448[(unsigned __int8)v17] ^ (((unsigned __int8)byte_40B448[BYTE1(v8)] ^ ((((unsigned __int8)byte_40B448[HIBYTE(v14)] << 8) ^ (unsigned __int8)byte_40B448[BYTE2(v22)]) << 8)) << 8);\n  *(_DWORD *)a2 = v5[4] ^ (unsigned __int8)byte_40B448[(unsigned __int8)v8] ^ (((unsigned __int8)byte_40B448[BYTE1(v22)] ^ ((((unsigned __int8)byte_40B448[HIBYTE(v17)] << 8) ^ (unsigned __int8)byte_40B448[BYTE2(v14)]) << 8)) << 8);\n  *(_DWORD *)(a2 + 4) = v19;\n  *(_WORD *)(a2 + 8) = v12;\n  *(_BYTE *)(a2 + 11) = HIBYTE(v12);\n  *(_WORD *)(a2 + 12) = v9;\n  *(_BYTE *)(a2 + 14) = BYTE2(v9);\n  *(_BYTE *)(a2 + 10) = BYTE2(v12);\n  *(_BYTE *)(a2 + 15) = HIBYTE(v9);\n  return 0;\n}\n// 40C570: using guessed type int dword_40C570[256];\n// 40C970: using guessed type int dword_40C970[256];\n// 40CD70: using guessed type int dword_40CD70[256];\n// 40D170: using guessed type int dword_40D170[256];\n\n"
    },
    {
        "Function": "sub_406F2A",
        "Total XOR and shift operations": 99,
        "XOR operations": 76,
        "Shift operations": 23,
        "Operation percentage": "125.32%",
        "Function Body": "\nint __usercall sub_406F2A@<eax>(unsigned __int8 *a1@<eax>, int a2@<esi>, int *a3)\n{\n  _DWORD *v3; // ecx\n  int v4; // ebx\n  unsigned int v5; // edx\n  _DWORD *v6; // ecx\n  bool v7; // cc\n  unsigned int v8; // edx\n  unsigned int v9; // edi\n  int v10; // edx\n  int v11; // ebx\n  int v13; // [esp+8h] [ebp-18h]\n  unsigned int v14; // [esp+Ch] [ebp-14h]\n  int v15; // [esp+Ch] [ebp-14h]\n  unsigned __int8 v16; // [esp+10h] [ebp-10h]\n  unsigned int v17; // [esp+10h] [ebp-10h]\n  unsigned int v18; // [esp+10h] [ebp-10h]\n  unsigned int v19; // [esp+14h] [ebp-Ch]\n  unsigned int v20; // [esp+14h] [ebp-Ch]\n  unsigned int v21; // [esp+18h] [ebp-8h]\n  unsigned int v22; // [esp+1Ch] [ebp-4h]\n  int v23; // [esp+1Ch] [ebp-4h]\n  unsigned int v24; // [esp+28h] [ebp+8h]\n  unsigned int v25; // [esp+28h] [ebp+8h]\n\n  v3 = (_DWORD *)a3[1];\n  v22 = v3[1] ^ (a1[4] | ((a1[5] | (*((unsigned __int16 *)a1 + 3) << 8)) << 8));\n  v4 = *v3 ^ (*a1 | ((a1[1] | (*((unsigned __int16 *)a1 + 1) << 8)) << 8));\n  v21 = v3[2] ^ (a1[8] | ((a1[9] | ((a1[10] | (a1[11] << 8)) << 8)) << 8));\n  v5 = v3[3] ^ (a1[12] | ((a1[13] | ((a1[14] | (a1[15] << 8)) << 8)) << 8));\n  v6 = v3 + 4;\n  v14 = v4;\n  v13 = (*a3 >> 1) - 1;\n  v7 = v13 <= 0;\n  while ( 1 )\n  {\n    v16 = v5;\n    if ( v7 )\n      break;\n    v24 = *v6 ^ dword_40C170[(unsigned __int8)v4] ^ dword_40B548[HIBYTE(v22)] ^ dword_40B948[BYTE2(v21)] ^ dword_40BD70[BYTE1(v5)];\n    v19 = v6[2] ^ dword_40C170[(unsigned __int8)v21] ^ dword_40B548[HIBYTE(v5)] ^ dword_40B948[BYTE2(v4)] ^ dword_40BD70[BYTE1(v22)];\n    v8 = v6[1] ^ dword_40C170[(unsigned __int8)v22] ^ dword_40B548[HIBYTE(v21)] ^ dword_40BD70[BYTE1(v4)] ^ dword_40B948[BYTE2(v5)];\n    v17 = v6[3] ^ dword_40C170[v16] ^ dword_40B548[HIBYTE(v14)] ^ dword_40B948[BYTE2(v22)] ^ dword_40BD70[BYTE1(v21)];\n    v14 = v6[4] ^ dword_40C170[(unsigned __int8)v24] ^ dword_40B548[HIBYTE(v8)] ^ dword_40B948[BYTE2(v19)] ^ dword_40BD70[BYTE1(v17)];\n    v22 = v6[5] ^ dword_40C170[(unsigned __int8)v8] ^ dword_40B548[HIBYTE(v19)] ^ dword_40BD70[BYTE1(v24)] ^ dword_40B948[BYTE2(v17)];\n    v4 = v14;\n    v21 = v6[6] ^ dword_40C170[(unsigned __int8)v19] ^ dword_40B548[HIBYTE(v17)] ^ dword_40B948[BYTE2(v24)] ^ dword_40BD70[BYTE1(v8)];\n    v6 += 8;\n    v7 = --v13 <= 0;\n    v5 = *(v6 - 1) ^ dword_40C170[(unsigned __int8)v17] ^ dword_40B548[HIBYTE(v24)] ^ dword_40B948[BYTE2(v8)] ^ dword_40BD70[BYTE1(v19)];\n  }\n  v25 = *v6 ^ dword_40C170[(unsigned __int8)v4] ^ dword_40B548[HIBYTE(v22)] ^ dword_40B948[BYTE2(v21)] ^ dword_40BD70[BYTE1(v5)];\n  v9 = v6[1] ^ dword_40C170[(unsigned __int8)v22] ^ dword_40B548[HIBYTE(v21)] ^ dword_40BD70[BYTE1(v4)] ^ dword_40B948[BYTE2(v5)];\n  v20 = v6[2] ^ dword_40C170[(unsigned __int8)v21] ^ dword_40B548[HIBYTE(v5)] ^ dword_40B948[BYTE2(v4)] ^ dword_40BD70[BYTE1(v22)];\n  v18 = v6[3] ^ dword_40C170[(unsigned __int8)v5] ^ dword_40B548[HIBYTE(v14)] ^ dword_40B948[BYTE2(v22)] ^ dword_40BD70[BYTE1(v21)];\n  v15 = v6[4] ^ (unsigned __int8)byte_40D570[*(_BYTE *)v6 ^ LOBYTE(dword_40C170[(unsigned __int8)v4]) ^ LOBYTE(dword_40B548[HIBYTE(v22)]) ^ LOBYTE(dword_40B948[BYTE2(v21)]) ^ LOBYTE(dword_40BD70[BYTE1(v5)])] ^ (((unsigned __int8)byte_40D570[BYTE1(v18)] ^ ((((unsigned __int8)byte_40D570[HIBYTE(v9)] << 8) ^ (unsigned __int8)byte_40D570[BYTE2(v20)]) << 8)) << 8);\n  v23 = v6[5] ^ (unsigned __int8)byte_40D570[*((_BYTE *)v6 + 4) ^ LOBYTE(dword_40C170[(unsigned __int8)v22]) ^ LOBYTE(dword_40B548[HIBYTE(v21)]) ^ LOBYTE(dword_40BD70[BYTE1(v4)]) ^ LOBYTE(dword_40B948[BYTE2(v5)])] ^ (((unsigned __int8)byte_40D570[BYTE1(v25)] ^ ((((unsigned __int8)byte_40D570[HIBYTE(v20)] << 8) ^ (unsigned __int8)byte_40D570[BYTE2(v18)]) << 8)) << 8);\n  v10 = v6[6] ^ (unsigned __int8)byte_40D570[(unsigned __int8)v20] ^ (((unsigned __int8)byte_40D570[BYTE1(v9)] ^ ((((unsigned __int8)byte_40D570[HIBYTE(v18)] << 8) ^ (unsigned __int8)byte_40D570[BYTE2(v25)]) << 8)) << 8);\n  v11 = v6[7] ^ (unsigned __int8)byte_40D570[(unsigned __int8)v18] ^ (((unsigned __int8)byte_40D570[BYTE1(v20)] ^ ((((unsigned __int8)byte_40D570[HIBYTE(v25)] << 8) ^ (unsigned __int8)byte_40D570[BYTE2(v9)]) << 8)) << 8);\n  *(_DWORD *)a2 = v15;\n  *(_WORD *)(a2 + 4) = v23;\n  *(_BYTE *)(a2 + 7) = HIBYTE(v23);\n  *(_BYTE *)(a2 + 9) = BYTE1(v10);\n  *(_BYTE *)(a2 + 10) = BYTE2(v10);\n  *(_WORD *)(a2 + 12) = v11;\n  *(_BYTE *)(a2 + 8) = v10;\n  *(_BYTE *)(a2 + 14) = BYTE2(v11);\n  *(_BYTE *)(a2 + 15) = HIBYTE(v11);\n  *(_BYTE *)(a2 + 6) = BYTE2(v23);\n  *(_BYTE *)(a2 + 11) = HIBYTE(v10);\n  return 0;\n}\n// 40B548: using guessed type int dword_40B548[256];\n// 40B948: using guessed type int dword_40B948[256];\n// 40BD70: using guessed type int dword_40BD70[256];\n// 40C170: using guessed type int dword_40C170[256];\n\n"
    },
    {
        "Function": "sub_40669B",
        "Total XOR and shift operations": 47,
        "XOR operations": 33,
        "Shift operations": 14,
        "Operation percentage": "38.84%",
        "Function Body": "\nint __cdecl sub_40669B(_DWORD *a1, int a2, _DWORD *a3)\n{\n  unsigned int v3; // esi\n  _DWORD *v4; // edx\n  _DWORD *v5; // eax\n  unsigned __int16 *v6; // ecx\n  int v7; // ecx\n  int v8; // edx\n  int v9; // ecx\n  int v10; // edx\n  int v11; // ecx\n  int v12; // edx\n  int v13; // ecx\n  int v14; // ecx\n  unsigned int v15; // ebx\n  int v16; // ecx\n  int v17; // edx\n  int v18; // ecx\n  int v19; // edx\n  int v20; // ecx\n  int v21; // ecx\n  unsigned int v22; // ebx\n  int v23; // ecx\n  int v24; // edx\n  int v25; // ecx\n  int v26; // ecx\n  unsigned int v28; // [esp+Ch] [ebp-4h]\n\n  v3 = 0;\n  if ( !dword_40D670 )\n  {\n    sub_40646A();\n    dword_40D670 = 1;\n  }\n  v4 = a1;\n  v5 = a1 + 6;\n  *a1 = 14;\n  a1[1] = a1 + 6;\n  v6 = (unsigned __int16 *)(a2 + 2);\n  do\n  {\n    v5[v3++] = *((unsigned __int8 *)v6 - 2) | ((*((unsigned __int8 *)v6 - 1) | (*v6 << 8)) << 8);\n    v6 += 2;\n  }\n  while ( v3 < 8 );\n  switch ( *a1 )\n  {\n    case 0xA:\n      v22 = 0;\n      do\n      {\n        v23 = *v5 ^ dword_40BD48[v22++] ^ (unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 13)] ^ (((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 14)] ^ (((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 15)] ^ ((unsigned __int8)byte_40B448[(unsigned __int8)v5[3]] << 8)) << 8)) << 8);\n        v24 = v23 ^ v5[1];\n        v5[4] = v23;\n        v25 = v24 ^ v5[2];\n        v5[6] = v25;\n        v26 = v5[3] ^ v25;\n        v5[5] = v24;\n        v5[7] = v26;\n        v5 += 4;\n      }\n      while ( v22 < 10 );\n      goto LABEL_16;\n    case 0xC:\n      v15 = 0;\n      do\n      {\n        v16 = *v5 ^ dword_40BD48[v15++] ^ (unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 21)] ^ (((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 22)] ^ (((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 23)] ^ ((unsigned __int8)byte_40B448[(unsigned __int8)v5[5]] << 8)) << 8)) << 8);\n        v17 = v16 ^ v5[1];\n        v5[6] = v16;\n        v18 = v17 ^ v5[2];\n        v5[7] = v17;\n        v19 = v18 ^ v5[3];\n        v5[8] = v18;\n        v20 = v19 ^ v5[4];\n        v5[10] = v20;\n        v21 = v5[5] ^ v20;\n        v5[9] = v19;\n        v5[11] = v21;\n        v5 += 6;\n      }\n      while ( v15 < 8 );\n      goto LABEL_16;\n    case 0xE:\n      v28 = 0;\n      do\n      {\n        v7 = *v5 ^ dword_40BD48[v28++] ^ (unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 29)] ^ (((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 30)] ^ (((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 31)] ^ ((unsigned __int8)byte_40B448[(unsigned __int8)v5[7]] << 8)) << 8)) << 8);\n        v8 = v7 ^ v5[1];\n        v5[8] = v7;\n        v9 = v8 ^ v5[2];\n        v5[10] = v9;\n        v5[9] = v8;\n        v10 = v9 ^ v5[3];\n        v5[11] = v10;\n        v11 = v5[4] ^ (unsigned __int8)byte_40B448[(unsigned __int8)v10] ^ (((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 45)] ^ (((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 46)] ^ ((unsigned __int8)byte_40B448[*((unsigned __int8 *)v5 + 47)] << 8)) << 8)) << 8);\n        v12 = v11 ^ v5[5];\n        v5[12] = v11;\n        v13 = v12 ^ v5[6];\n        v5[14] = v13;\n        v14 = v5[7] ^ v13;\n        v5[13] = v12;\n        v5[15] = v14;\n        v5 += 8;\n      }\n      while ( v28 < 7 );\nLABEL_16:\n      v4 = a1;\n      break;\n  }\n  v4[2] = *a3;\n  v4[3] = a3[1];\n  v4[4] = a3[2];\n  v4[5] = a3[3];\n  return 0;\n}\n// 40BD48: using guessed type int dword_40BD48[];\n// 40D670: using guessed type int dword_40D670;\n\n"
    },
    {
        "Function": "sub_4077DF",
        "Total XOR and shift operations": 9,
        "XOR operations": 9,
        "Shift operations": 0,
        "Operation percentage": "23.08%",
        "Function Body": "\nvoid sub_4077DF()\n{\n  struct _SYSTEMTIME SystemTime; // [esp+8h] [ebp-20h] BYREF\n  struct _FILETIME FileTime; // [esp+18h] [ebp-10h] BYREF\n  LARGE_INTEGER PerformanceCount; // [esp+20h] [ebp-8h] BYREF\n\n  InitializeCriticalSectionAndSpinCount(&CriticalSection, 0xFA0u);\n  EnterCriticalSection(&CriticalSection);\n  QueryPerformanceCounter(&PerformanceCount);\n  dword_40D680 ^= GetTickCount();\n  dword_40D684 ^= PerformanceCount.HighPart;\n  dword_40D688 ^= PerformanceCount.LowPart;\n  dword_40D68C ^= GetCurrentProcessId();\n  dword_40D690 ^= GetCurrentThreadId();\n  GetLocalTime(&SystemTime);\n  SystemTimeToFileTime(&SystemTime, &FileTime);\n  dword_40D694 ^= FileTime.dwHighDateTime;\n  dword_40D698 ^= FileTime.dwLowDateTime;\n  QueryPerformanceCounter(&PerformanceCount);\n  dword_40D69C ^= PerformanceCount.HighPart;\n  dword_40D680 ^= PerformanceCount.LowPart;\n  do\n    sub_407753();\n  while ( (_BYTE)dword_40D680 );\n  byte_40D6B8 = 1;\n  LeaveCriticalSection(&CriticalSection);\n}\n// 40D680: using guessed type int dword_40D680;\n// 40D684: using guessed type int dword_40D684;\n// 40D688: using guessed type int dword_40D688;\n// 40D68C: using guessed type int dword_40D68C;\n// 40D690: using guessed type int dword_40D690;\n// 40D694: using guessed type int dword_40D694;\n// 40D698: using guessed type int dword_40D698;\n// 40D69C: using guessed type int dword_40D69C;\n// 40D6B8: using guessed type char byte_40D6B8;\n\n"
    },
    {
        "Function": "sub_40646A",
        "Total XOR and shift operations": 27,
        "XOR operations": 17,
        "Shift operations": 10,
        "Operation percentage": "22.13%",
        "Function Body": "\nint sub_40646A()\n{\n  int v0; // ecx\n  int v1; // ebx\n  int v2; // eax\n  int v3; // eax\n  int *v4; // ecx\n  int v5; // eax\n  int v6; // ecx\n  int v7; // edx\n  int v8; // eax\n  int v9; // ecx\n  int v10; // eax\n  int v11; // edi\n  int v12; // edx\n  int v13; // eax\n  int v14; // ecx\n  int v15; // eax\n  int v16; // eax\n  int v17; // edx\n  int v18; // edx\n  int v19; // edx\n  int v20; // eax\n  int result; // eax\n  int v22[255]; // [esp+Ch] [ebp-80Ch]\n  char v23[40]; // [esp+408h] [ebp-410h]\n  int v24; // [esp+430h] [ebp-3E8h]\n  int v25; // [esp+438h] [ebp-3E0h]\n  int v26; // [esp+440h] [ebp-3D8h]\n  int v27; // [esp+444h] [ebp-3D4h]\n  int v28; // [esp+80Ch] [ebp-Ch]\n  int v29; // [esp+810h] [ebp-8h]\n  int v30; // [esp+814h] [ebp-4h]\n\n  v0 = 0;\n  v1 = 1;\n  v2 = 1;\n  do\n  {\n    v22[v0] = v2;\n    *(_DWORD *)&v23[4 * v2 + 4] = v0;\n    v2 = (unsigned __int8)((2 * v2) ^ ((char)(v2 & 0x80) != 0 ? 0x1B : 0) ^ v2);\n    ++v0;\n  }\n  while ( v0 < 256 );\n  v3 = 1;\n  v4 = &dword_40BD48;\n  do\n  {\n    *v4++ = v3;\n    v3 = (unsigned __int8)(((char)(v3 & 0x80) != 0 ? 0x1B : 0) ^ (2 * v3));\n  }\n  while ( (int)v4 < (int)dword_40BD70 );\n  byte_40B448[0] = 99;\n  byte_40D5D3 = 0;\n  do\n  {\n    v5 = *(_DWORD *)&v23[-4 * *(_DWORD *)&v23[4 * v1 + 4]];\n    v6 = (unsigned __int8)((2 * v5) | (v5 >> 7));\n    v7 = (unsigned __int8)((2 * v6) | (v6 >> 7));\n    v8 = v7 ^ v6 ^ v5;\n    v9 = (unsigned __int8)((2 * v7) | (v7 >> 7));\n    v10 = (unsigned __int8)((2 * v9) | (v9 >> 7)) ^ 0x63 ^ v9 ^ v8;\n    byte_40B448[v1] = v10;\n    byte_40D570[v10] = v1++;\n  }\n  while ( v1 < 256 );\n  v11 = 0;\n  do\n  {\n    v12 = (unsigned __int8)byte_40B448[v11];\n    v13 = (unsigned __int8)((2 * v12) ^ ((char)(byte_40B448[v11] & 0x80) != 0 ? 0x1B : 0)) ^ ((v12 ^ ((v12 ^ ((v12 ^ (unsigned __int8)((2 * v12) ^ ((char)(byte_40B448[v11] & 0x80) != 0 ? 0x1B : 0))) << 8)) << 8)) << 8);\n    v14 = v11;\n    dword_40D170[v11] = v13;\n    v15 = __ROL4__(v13, 8);\n    dword_40CD70[v11] = v15;\n    v16 = __ROL4__(v15, 8);\n    dword_40C970[v11] = v16;\n    dword_40C570[v11] = __ROL4__(v16, 8);\n    if ( byte_40D570[v11] )\n      v30 = v22[(v27 + *(_DWORD *)&v23[4 * (unsigned __int8)byte_40D570[v11] + 4]) % 255];\n    else\n      v30 = 0;\n    if ( byte_40D570[v11] )\n      v28 = v22[(v24 + *(_DWORD *)&v23[4 * (unsigned __int8)byte_40D570[v11] + 4]) % 255];\n    else\n      v28 = 0;\n    if ( byte_40D570[v11] )\n      v29 = v22[(v26 + *(_DWORD *)&v23[4 * (unsigned __int8)byte_40D570[v11] + 4]) % 255];\n    else\n      v29 = 0;\n    if ( byte_40D570[v11] )\n      v17 = v22[(v25 + *(_DWORD *)&v23[4 * (unsigned __int8)byte_40D570[v11] + 4]) % 255];\n    else\n      v17 = 0;\n    v18 = v30 ^ ((v28 ^ ((v29 ^ (v17 << 8)) << 8)) << 8);\n    ++v11;\n    dword_40C170[v14] = v18;\n    v19 = __ROL4__(v18, 8);\n    dword_40BD70[v14] = v19;\n    v20 = __ROL4__(v19, 8);\n    dword_40B948[v14] = v20;\n    result = __ROL4__(v20, 8);\n    dword_40B548[v14] = result;\n  }\n  while ( v11 < 256 );\n  return result;\n}\n// 40B548: using guessed type int dword_40B548[256];\n// 40B948: using guessed type int dword_40B948[256];\n// 40BD48: using guessed type int dword_40BD48;\n// 40BD70: using guessed type int dword_40BD70[256];\n// 40C170: using guessed type int dword_40C170[256];\n// 40C570: using guessed type int dword_40C570[256];\n// 40C970: using guessed type int dword_40C970[256];\n// 40CD70: using guessed type int dword_40CD70[256];\n// 40D170: using guessed type int dword_40D170[256];\n// 40D5D3: using guessed type char byte_40D5D3;\n// 40646A: using guessed type int var_80C[255];\n\n"
    },
    {
        "Function": "sub_4085D9",
        "Total XOR and shift operations": 3,
        "XOR operations": 2,
        "Shift operations": 1,
        "Operation percentage": "18.75%",
        "Function Body": "\nint __usercall sub_4085D9@<eax>(int a1@<eax>, _BYTE *a2@<ecx>, int a3)\n{\n  unsigned int v3; // eax\n\n  v3 = ~a1;\n  while ( a3 )\n  {\n    --a3;\n    v3 = dword_40B000[(unsigned __int8)(v3 ^ *a2++)] ^ (v3 >> 8);\n  }\n  return ~v3;\n}\n// 40B000: using guessed type int dword_40B000[128];\n\n"
    },
    {
        "Function": "sub_408FA9",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "16.67%",
        "Function Body": "\nchar *__cdecl sub_408FA9(char *a1, unsigned __int8 a2, unsigned int a3)\n{\n  if ( a3 )\n  {\n    memset32(a1, 16843009 * a2, a3 >> 2);\n    memset(&a1[4 * (a3 >> 2)], a2, a3 & 3);\n  }\n  return a1;\n}\n\n"
    },
    {
        "Function": "sub_4082EE",
        "Total XOR and shift operations": 16,
        "XOR operations": 11,
        "Shift operations": 5,
        "Operation percentage": "16.33%",
        "Function Body": "\n_DWORD *__usercall sub_4082EE@<eax>(_DWORD *result@<eax>, int a2@<ecx>)\n{\n  unsigned int v2; // edx\n  unsigned __int8 *v3; // ecx\n  _DWORD *v4; // ecx\n  int v5; // edi\n  int v6; // edi\n  bool v7; // zf\n  int v8; // ecx\n  int v9; // edi\n  int v10; // ebx\n  int v11; // esi\n  int v12; // ecx\n  int v13; // ecx\n  int v14; // edx\n  int v15; // esi\n  _DWORD v16[66]; // [esp+4h] [ebp-128h] BYREF\n  int v17; // [esp+10Ch] [ebp-20h]\n  int v18; // [esp+110h] [ebp-1Ch]\n  int v19; // [esp+114h] [ebp-18h]\n  unsigned int v20; // [esp+118h] [ebp-14h]\n  int v21; // [esp+11Ch] [ebp-10h]\n  int v22; // [esp+120h] [ebp-Ch]\n  int v23; // [esp+124h] [ebp-8h]\n  int v24; // [esp+128h] [ebp-4h]\n\n  v2 = 0;\n  v3 = (unsigned __int8 *)(a2 + 1);\n  do\n  {\n    v16[v2++ + 2] = v3[2] | ((v3[1] | ((*v3 | (*(v3 - 1) << 8)) << 8)) << 8);\n    v3 += 4;\n  }\n  while ( v2 < 0x10 );\n  if ( v2 < 0x40 )\n  {\n    v4 = &v16[v2];\n    v24 = 64 - v2;\n    do\n    {\n      v5 = *(v4 - 14)\n         + ((*(v4 - 13) >> 3) ^ __ROR4__(*(v4 - 13), 7) ^ __ROL4__(*(v4 - 13), 14))\n         + ((*v4 >> 10) ^ __ROL4__(*v4, 13) ^ __ROL4__(*v4, 15));\n      v6 = *(++v4 - 6) + v5;\n      v7 = v24-- == 1;\n      v4[1] = v6;\n    }\n    while ( !v7 );\n  }\n  v8 = result[21];\n  v9 = result[20];\n  v10 = result[26];\n  v11 = result[24];\n  v20 = 0;\n  v23 = v8;\n  v22 = result[22];\n  v18 = result[23];\n  v21 = result[25];\n  v12 = result[27];\n  v19 = v9;\n  v17 = v10;\n  v24 = v12;\n  do\n  {\n    v13 = v24\n        + v16[v20 / 4 + 2]\n        + dword_40A238[v20 / 4]\n        + (v11 & v21 ^ v10 & ~v11)\n        + (__ROR4__(v11, 6) ^ __ROL4__(v11, 7) ^ __ROR4__(v11, 11));\n    v20 += 4;\n    v14 = (v19 & v23 ^ v22 & (v9 ^ v23)) + (__ROR4__(v9, 2) ^ __ROL4__(v9, 10) ^ __ROR4__(v9, 13));\n    v10 = v21;\n    v24 = v17;\n    v21 = v11;\n    v15 = v18;\n    v18 = v22;\n    v22 = v23;\n    v23 = v19;\n    v11 = v13 + v15;\n    v9 = v14 + v13;\n    v17 = v10;\n    v19 = v14 + v13;\n  }\n  while ( v20 < 0x100 );\n  result[20] += v9;\n  result[21] += v23;\n  result[22] += v22;\n  result[23] += v18;\n  result[24] += v11;\n  result[25] += v21;\n  result[26] += v10;\n  result[27] += v24;\n  return result;\n}\n// 40A238: using guessed type int dword_40A238[];\n\n"
    },
    {
        "Function": "sub_409530",
        "Total XOR and shift operations": 5,
        "XOR operations": 0,
        "Shift operations": 5,
        "Operation percentage": "12.20%",
        "Function Body": "\nunsigned int __stdcall sub_409530(unsigned __int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rtt\n  unsigned int v4; // ecx\n  unsigned int v5; // ebx\n  unsigned __int64 v6; // rax\n  char v7; // cf\n  unsigned int v8; // esi\n  unsigned __int64 v9; // rax\n\n  if ( HIDWORD(a2) )\n  {\n    v4 = HIDWORD(a2);\n    v5 = a2;\n    v6 = a1;\n    do\n    {\n      v7 = v4 & 1;\n      v4 >>= 1;\n      v5 = (v5 >> 1) | (v7 << 31);\n      v6 >>= 1;\n    }\n    while ( v4 );\n    v8 = v6 / v5;\n    v9 = v8 * (unsigned __int64)(unsigned int)a2;\n    if ( __CFADD__(HIDWORD(a2) * v8, HIDWORD(v9)) || (HIDWORD(v9) = (a2 * (unsigned __int64)v8) >> 32, v9 > a1) )\n      --v8;\n    return v8;\n  }\n  else\n  {\n    LODWORD(v3) = a1;\n    HIDWORD(v3) = HIDWORD(a1) % (unsigned int)a2;\n    return v3 / (unsigned int)a2;\n  }\n}\n\n// nfuncs=187 queued=187 decompiled=187 lumina nreq=0 worse=0 better=0\n// ALL OK, 187 function(s) have been successfully decompiled\n"
    },
    {
        "Function": "sub_40848A",
        "Total XOR and shift operations": 8,
        "XOR operations": 0,
        "Shift operations": 8,
        "Operation percentage": "9.30%",
        "Function Body": "\nunsigned int __usercall sub_40848A@<eax>(int a1@<eax>)\n{\n  unsigned int v2; // eax\n  bool v3; // cf\n  unsigned int v4; // eax\n  int v5; // eax\n  int v6; // ecx\n  int v7; // eax\n  unsigned int v8; // edx\n  unsigned int v9; // ecx\n  unsigned int v10; // esi\n  unsigned int result; // eax\n  char v12; // cl\n  unsigned int v13; // [esp+Ch] [ebp-18h]\n  unsigned int v14; // [esp+10h] [ebp-14h]\n  unsigned int v15; // [esp+14h] [ebp-10h]\n  unsigned int v16; // [esp+18h] [ebp-Ch]\n  unsigned int v17; // [esp+1Ch] [ebp-8h]\n  unsigned int v18; // [esp+20h] [ebp-4h]\n\n  v2 = *(_DWORD *)(a1 + 64);\n  *(_BYTE *)(v2 + a1) = 0x80;\n  v3 = v2 < 0x38;\n  v4 = v2 + 1;\n  if ( v3 )\n  {\n    if ( v4 < 0x38 )\n      sub_408FA9((char *)(v4 + a1), 0, 56 - v4);\n  }\n  else\n  {\n    if ( v4 < 0x40 )\n      sub_408FA9((char *)(v4 + a1), 0, 64 - v4);\n    sub_4082EE((_DWORD *)a1, a1);\n    sub_408FA9((char *)a1, 0, 0x38u);\n  }\n  v5 = 8 * *(_DWORD *)(a1 + 64);\n  v3 = __CFADD__(v5, *(_DWORD *)(a1 + 72));\n  *(_DWORD *)(a1 + 72) += v5;\n  v6 = *(_DWORD *)(a1 + 72);\n  *(_DWORD *)(a1 + 76) += v3;\n  *(_BYTE *)(a1 + 63) = *(_BYTE *)(a1 + 72);\n  v7 = *(_DWORD *)(a1 + 76);\n  *(_BYTE *)(a1 + 62) = BYTE1(v6);\n  *(_BYTE *)(a1 + 61) = BYTE2(v6);\n  *(_BYTE *)(a1 + 60) = HIBYTE(v6);\n  *(_BYTE *)(a1 + 59) = v7;\n  *(_BYTE *)(a1 + 58) = BYTE1(v7);\n  *(_BYTE *)(a1 + 57) = BYTE2(v7);\n  *(_BYTE *)(a1 + 56) = HIBYTE(v7);\n  sub_4082EE((_DWORD *)a1, a1);\n  v8 = *(_DWORD *)(a1 + 80);\n  v18 = *(_DWORD *)(a1 + 84);\n  v17 = *(_DWORD *)(a1 + 88);\n  v16 = *(_DWORD *)(a1 + 92);\n  v15 = *(_DWORD *)(a1 + 96);\n  v14 = *(_DWORD *)(a1 + 100);\n  v9 = *(_DWORD *)(a1 + 104);\n  v10 = *(_DWORD *)(a1 + 108);\n  result = 0;\n  v13 = v9;\n  do\n  {\n    v12 = 8 * (3 - result);\n    *((_BYTE *)&dword_40D680 + result) = v8 >> v12;\n    *((_BYTE *)&dword_40D684 + result) = v18 >> v12;\n    *((_BYTE *)&dword_40D688 + result) = v17 >> v12;\n    *((_BYTE *)&dword_40D68C + result) = v16 >> v12;\n    *((_BYTE *)&dword_40D690 + result) = v15 >> v12;\n    *((_BYTE *)&dword_40D694 + result) = v14 >> v12;\n    *((_BYTE *)&dword_40D698 + result++) = v13 >> v12;\n    *((_BYTE *)&dword_40D698 + result + 3) = v10 >> v12;\n  }\n  while ( result < 4 );\n  return result;\n}\n// 40D680: using guessed type int dword_40D680;\n// 40D684: using guessed type int dword_40D684;\n// 40D688: using guessed type int dword_40D688;\n// 40D68C: using guessed type int dword_40D68C;\n// 40D690: using guessed type int dword_40D690;\n// 40D694: using guessed type int dword_40D694;\n// 40D698: using guessed type int dword_40D698;\n\n"
    },
    {
        "Function": "sub_407447",
        "Total XOR and shift operations": 4,
        "XOR operations": 2,
        "Shift operations": 2,
        "Operation percentage": "4.12%",
        "Function Body": "\nint __cdecl sub_407447(int *a1, int a2, _BYTE *a3, unsigned __int8 *a4)\n{\n  int v4; // ecx\n  int *v5; // eax\n  unsigned int v7; // ebx\n  unsigned __int8 *v8; // eax\n  int v9; // esi\n  int v10; // ebx\n  int *v11; // esi\n  _BYTE *v12; // eax\n  int v13; // ecx\n  int *v14; // esi\n  bool v15; // zf\n  int v16; // [esp+0h] [ebp-18h]\n  int v17; // [esp+4h] [ebp-14h]\n  int v18; // [esp+8h] [ebp-10h]\n  int v19; // [esp+Ch] [ebp-Ch]\n  int v20; // [esp+10h] [ebp-8h]\n  unsigned int v21; // [esp+10h] [ebp-8h]\n  int *v22; // [esp+14h] [ebp-4h]\n\n  v5 = a1 + 2;\n  if ( (v4 & 0xF) != 0 )\n    return -34;\n  if ( a2 )\n  {\n    if ( v4 )\n    {\n      v10 = (char *)v5 - a3;\n      v21 = ((unsigned int)(v4 - 1) >> 4) + 1;\n      do\n      {\n        v11 = (int *)a4;\n        v12 = a3;\n        v13 = 16;\n        do\n        {\n          v12[a4 - a3] = *v12 ^ v12[v10];\n          ++v12;\n          --v13;\n        }\n        while ( v13 );\n        if ( a2 == 1 )\n          sub_406A04(a4, (int)a4, a1);\n        else\n          sub_406F2A(a4, (int)a4, a1);\n        a3 += 16;\n        a4 += 16;\n        a1[2] = *v11;\n        v14 = v11 + 1;\n        a1[3] = *v14++;\n        a1[4] = *v14;\n        v10 -= 16;\n        v15 = v21-- == 1;\n        a1[5] = v14[1];\n      }\n      while ( !v15 );\n    }\n  }\n  else if ( v4 )\n  {\n    v22 = (int *)a3;\n    v20 = (char *)v5 - (char *)a4;\n    v7 = ((unsigned int)(v4 - 1) >> 4) + 1;\n    do\n    {\n      v16 = *v22;\n      v17 = v22[1];\n      v18 = v22[2];\n      v19 = v22[3];\n      sub_406F2A((unsigned __int8 *)v22, (int)a4, a1);\n      v8 = a4;\n      v9 = 16;\n      do\n      {\n        *v8 ^= v8[v20];\n        ++v8;\n        --v9;\n      }\n      while ( v9 );\n      v22 += 4;\n      v20 -= 16;\n      --v7;\n      a1[2] = v16;\n      a1[3] = v17;\n      a1[4] = v18;\n      a1[5] = v19;\n      a4 = v8;\n    }\n    while ( v7 );\n  }\n  return 0;\n}\n// 407453: variable 'v4' is possibly undefined\n\n"
    },
    {
        "Function": "sub_407B16",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "2.55%",
        "Function Body": "\nint __cdecl sub_407B16(int a1, int a2, int a3)\n{\n  unsigned __int8 v3; // al\n  int v4; // esi\n  int v5; // edi\n  _DWORD *v7; // ebx\n  int v8; // edi\n  int v9; // ecx\n  int v10; // edx\n  int v11; // eax\n  int v12; // ecx\n  int v13; // eax\n  int v14; // eax\n  bool v15; // zf\n  _WORD *v16; // eax\n  int v17; // eax\n  int v18; // eax\n  unsigned int v19; // ebx\n  int v20; // edi\n  int v21; // ecx\n  unsigned int v22; // eax\n  _WORD *v23; // esi\n  unsigned int v24; // edx\n  int v25; // [esp+Ch] [ebp-30h]\n  int v26; // [esp+10h] [ebp-2Ch] BYREF\n  int v27; // [esp+14h] [ebp-28h]\n  int v28; // [esp+18h] [ebp-24h]\n  int v29; // [esp+1Ch] [ebp-20h]\n  int v30; // [esp+20h] [ebp-1Ch]\n  int v31; // [esp+24h] [ebp-18h]\n  int v32; // [esp+28h] [ebp-14h]\n  _DWORD *v33; // [esp+2Ch] [ebp-10h]\n  int v34; // [esp+30h] [ebp-Ch]\n  int v35; // [esp+34h] [ebp-8h]\n  unsigned __int8 v36; // [esp+3Bh] [ebp-1h]\n  int v37; // [esp+4Ch] [ebp+10h]\n\n  v3 = *(_BYTE *)(a1 + 36);\n  v34 = 0;\n  v4 = a2;\n  v5 = *(__int16 *)(a3 + 4);\n  v29 = *(__int16 *)(a2 + 4);\n  v36 = v3;\n  v32 = v5;\n  v25 = v29 - v5;\n  if ( sub_407FB9(a2, a3) > 0 )\n  {\n    sub_407951((_DWORD *)a1, (_DWORD *)a3);\n    return a2;\n  }\n  v33 = sub_408052(v29 - v5 + 1, (_DWORD *)a1);\n  v27 = v5 + 1;\n  v7 = sub_408052(v5 + 1, (_DWORD *)a1);\n  v8 = sub_4080E3(a3);\n  v37 = v8;\n  v31 = (unsigned __int16)(0x10000\n                         / ((unsigned int)*(unsigned __int16 *)(*(_DWORD *)(v8 + 12) + 2 * *(__int16 *)(v8 + 4) - 2) + 1));\n  sub_408FA9((char *)v33[3], 0, 2 * *((__int16 *)v33 + 2));\n  if ( (unsigned __int16)v31 > 1u )\n  {\n    a2 = sub_407A8F((_DWORD *)a1, a2, v31);\n    v4 = a2;\n    v37 = *(_DWORD *)(a1 + 4 * v36 + 16);\n    v8 = v37;\n  }\n  if ( v29 == *(__int16 *)(v4 + 4) )\n  {\n    sub_408008(v29 + 1, v4);\n    v4 = a2;\n    v8 = v37;\n  }\n  v29 = 2 * v32 + 2;\n  do\n  {\n    sub_408FD7(v7[3], (_BYTE *)(*(_DWORD *)(v4 + 12) + 2 * (*(__int16 *)(v4 + 4) - v34 - v32) - 2), v29);\n    v9 = *(_DWORD *)(v8 + 12);\n    v10 = v7[3];\n    v28 = *(__int16 *)(v8 + 4);\n    v11 = *(unsigned __int16 *)(v9 + 2 * v28 - 2);\n    v12 = *((__int16 *)v7 + 2);\n    v30 = v11;\n    if ( *(_WORD *)(v10 + 2 * v12 - 2) == (_WORD)v11 )\n    {\n      v35 = 0xFFFF;\n    }\n    else\n    {\n      v35 = (unsigned __int16)((*(unsigned __int16 *)(v10 + 2 * *((__int16 *)v7 + 2) - 4)\n                              + (*(unsigned __int16 *)(v10 + 2 * *((__int16 *)v7 + 2) - 2) << 16))\n                             / (unsigned int)(unsigned __int16)v30);\n      if ( *(__int16 *)(v8 + 4) > 1 )\n      {\n        v28 = *(unsigned __int16 *)(*(_DWORD *)(v8 + 12) + 2 * v28 - 4);\n        if ( (_WORD)v28 )\n        {\n          if ( (unsigned __int16)v35 * (unsigned int)(unsigned __int16)v28 > *(unsigned __int16 *)(v7[3]\n                                                                                                 + 2\n                                                                                                 * *((__int16 *)v7 + 2)\n                                                                                                 - 6)\n                                                                           + ((unsigned __int16)(*(_WORD *)(v7[3] + 2 * *((__int16 *)v7 + 2) - 4)\n                                                                                               - v35 * v30) << 16) )\n            v35 += 0xFFFF;\n        }\n      }\n      if ( !(_WORD)v35 )\n      {\n        *(_WORD *)(v33[3] + 2 * (*((__int16 *)v33 + 2) - v34) - 2) = 0;\n        goto LABEL_22;\n      }\n    }\n    v13 = *(_DWORD *)(v8 + 8);\n    if ( v13 != 2147440042 )\n      *(_DWORD *)(v8 + 8) = v13 + 1;\n    v14 = sub_407A8F((_DWORD *)a1, v8, v35);\n    v7 = (_DWORD *)sub_407A0A((int)v7, (_DWORD *)a1, v14, &v26);\n    sub_408008(v27, (int)v7);\n    v15 = v26 == 0;\n    *(_WORD *)(v33[3] + 2 * (*((__int16 *)v33 + 2) - v34) - 2) = v35;\n    if ( !v15 )\n    {\n      v16 = (_WORD *)(v33[3] + 2 * (*((__int16 *)v33 + 2) - v34) - 2);\n      --*v16;\n      v17 = *(_DWORD *)(v37 + 8);\n      if ( v17 != 2147440042 )\n        *(_DWORD *)(v37 + 8) = v17 + 1;\n      v7 = (_DWORD *)sub_40797A((_DWORD *)a1, (int)v7, v37);\n      --*((_WORD *)v7 + 2);\n      --*(_WORD *)(v37 + 4);\n    }\n    v8 = v37;\n    v4 = a2;\nLABEL_22:\n    sub_408FD7(*(_DWORD *)(v4 + 12) + 2 * (*(__int16 *)(v4 + 4) - v34++ - v32) - 2, (_BYTE *)v7[3], v29);\n  }\n  while ( v34 <= v25 );\n  sub_407951((_DWORD *)a1, v7);\n  sub_407951((_DWORD *)a1, (_DWORD *)v8);\n  sub_407951((_DWORD *)a1, v33);\n  v18 = sub_4080E3(v4);\n  v19 = (unsigned __int16)v31;\n  v20 = v18;\n  v21 = *(__int16 *)(v18 + 4) - 1;\n  v22 = 0;\n  do\n  {\n    v23 = (_WORD *)(*(_DWORD *)(v20 + 12) + 2 * v21);\n    v24 = ((unsigned __int16)*v23 + (v22 << 16)) % v19;\n    --v21;\n    *v23 = ((unsigned __int16)*v23 + (v22 << 16)) / v19;\n    v22 = v24;\n  }\n  while ( v21 >= 0 );\n  return sub_4080E3(v20);\n}\n\n"
    }
]