[
    {
        "Function": "sub_14E5D7C90",
        "Total XOR and shift operations": 336,
        "XOR operations": 256,
        "Shift operations": 80,
        "Operation percentage": "67.47%",
        "Function Body": "\nunsigned __int8 *__fastcall sub_14E5D7C90(int *a1, _DWORD *a2, __int64 a3, unsigned __int8 *a4)\n{\n  int v4; // r14d\n  int v6; // ebp\n  _DWORD *v7; // r9\n  int v8; // esi\n  int v9; // edi\n  int v10; // ebx\n  int v11; // r11d\n  int v12; // r10d\n  int v13; // eax\n  int v14; // r8d\n  int v15; // edx\n  int v16; // r8d\n  int v17; // ecx\n  int v18; // edx\n  int v19; // ecx\n  int v20; // edx\n  int v21; // ecx\n  int v22; // edx\n  int v23; // ecx\n  int v24; // edx\n  int v25; // ecx\n  int v26; // edx\n  int v27; // ecx\n  int v28; // edx\n  int v29; // ecx\n  int v30; // edx\n  int v31; // ecx\n  int v32; // edx\n  int v33; // ecx\n  _DWORD *v34; // r13\n  int *v35; // r9\n  __int64 v36; // r12\n  int v37; // edx\n  int v38; // ecx\n  int v39; // edx\n  int v40; // ecx\n  int v41; // eax\n  int v42; // edi\n  int v43; // eax\n  int v44; // r10d\n  int v45; // esi\n  int v46; // r10d\n  int v47; // r11d\n  int v48; // ebp\n  int v49; // r11d\n  int v50; // ebx\n  int v51; // r14d\n  int v52; // ebx\n  int v53; // edi\n  int v54; // esi\n  int v55; // ebp\n  int v56; // r14d\n  unsigned int v57; // r12d\n  unsigned int v58; // r15d\n  unsigned int v59; // r9d\n  unsigned int v60; // r13d\n  unsigned int v61; // eax\n  unsigned int v62; // edi\n  int v63; // r9d\n  unsigned int v64; // r10d\n  unsigned int v65; // esi\n  int v66; // r10d\n  unsigned int v67; // r11d\n  unsigned int v68; // ebp\n  int v69; // r11d\n  unsigned int v70; // ebx\n  unsigned int v71; // r14d\n  int v72; // ebx\n  unsigned int v73; // edi\n  unsigned int v74; // r9d\n  int v75; // edi\n  unsigned int v76; // esi\n  unsigned int v77; // r10d\n  int v78; // esi\n  unsigned int v79; // ebp\n  unsigned int v80; // r11d\n  int v81; // ebp\n  unsigned int v82; // r14d\n  unsigned int v83; // ebx\n  int v84; // r14d\n  unsigned int v85; // r9d\n  unsigned int v86; // edi\n  int v87; // eax\n  unsigned int v88; // r10d\n  unsigned int v89; // esi\n  int v90; // r10d\n  unsigned int v91; // r11d\n  unsigned int v92; // ebp\n  int v93; // r11d\n  unsigned int v94; // ebx\n  unsigned int v95; // r14d\n  int v96; // ebx\n  unsigned int v97; // edi\n  unsigned int v98; // esi\n  unsigned int v99; // ebp\n  _DWORD *v100; // rcx\n  unsigned int v101; // r14d\n  bool v102; // zf\n  _DWORD *v104; // [rsp+0h] [rbp-148h]\n  unsigned int v105; // [rsp+8h] [rbp-140h]\n  unsigned int v106; // [rsp+Ch] [rbp-13Ch]\n  unsigned int v107; // [rsp+10h] [rbp-138h]\n  unsigned int v108; // [rsp+14h] [rbp-134h]\n  unsigned int v109; // [rsp+18h] [rbp-130h]\n  unsigned int v110; // [rsp+1Ch] [rbp-12Ch]\n  unsigned int v111; // [rsp+20h] [rbp-128h]\n  unsigned int v112; // [rsp+24h] [rbp-124h]\n  unsigned int v113; // [rsp+28h] [rbp-120h]\n  unsigned int v114; // [rsp+2Ch] [rbp-11Ch]\n  unsigned int v115; // [rsp+30h] [rbp-118h]\n  unsigned int v116; // [rsp+34h] [rbp-114h]\n  unsigned int v117; // [rsp+38h] [rbp-110h]\n  int v118; // [rsp+3Ch] [rbp-10Ch]\n  int v119; // [rsp+40h] [rbp-108h]\n  int v120; // [rsp+44h] [rbp-104h]\n  int v121; // [rsp+48h] [rbp-100h]\n  int v122; // [rsp+4Ch] [rbp-FCh]\n  int v123; // [rsp+50h] [rbp-F8h]\n  int v124; // [rsp+54h] [rbp-F4h]\n  int v125; // [rsp+58h] [rbp-F0h]\n  int v126; // [rsp+5Ch] [rbp-ECh]\n  int v127; // [rsp+60h] [rbp-E8h]\n  int v128; // [rsp+64h] [rbp-E4h]\n  __int64 v129; // [rsp+68h] [rbp-E0h]\n  __int64 v130; // [rsp+70h] [rbp-D8h]\n  __int64 v131; // [rsp+78h] [rbp-D0h]\n  __int64 v132; // [rsp+80h] [rbp-C8h]\n  __int64 v133; // [rsp+88h] [rbp-C0h]\n  __int64 v134; // [rsp+90h] [rbp-B8h]\n  __int64 v135; // [rsp+98h] [rbp-B0h]\n  __int64 v136; // [rsp+A0h] [rbp-A8h]\n  __int64 v137; // [rsp+A8h] [rbp-A0h]\n  unsigned __int8 *v139; // [rsp+B8h] [rbp-90h]\n  int v141[14]; // [rsp+D8h] [rbp-70h] BYREF\n\n  v4 = *a1;\n  v6 = a1[1];\n  v7 = a2;\n  v8 = a1[2];\n  v9 = a1[3];\n  v10 = a1[4];\n  v11 = a1[5];\n  v12 = a1[6];\n  v13 = a1[7];\n  v130 = a3;\n  if ( a3 )\n  {\n    v125 = *a1;\n    v118 = a1[1];\n    v119 = a1[2];\n    v120 = a1[3];\n    v121 = a1[4];\n    v131 = (char *)a2 - (char *)v141 + 4;\n    v132 = (char *)a2 - (char *)v141 + 8;\n    v133 = (char *)a2 - (char *)v141 + 12;\n    v134 = (char *)a2 - (char *)v141 + 16;\n    v135 = (char *)a2 - (char *)v141 + 20;\n    v136 = (char *)a2 - (char *)v141 + 24;\n    v137 = (char *)a2 - (char *)v141 + 28;\n    v122 = a1[5];\n    v123 = a1[6];\n    v124 = a1[7];\n    do\n    {\n      v14 = a4[16] << 8;\n      v113 = a4[3] | ((a4[2] | ((a4[1] | (*a4 << 8)) << 8)) << 8);\n      v128 = a4[7] | ((a4[6] | ((a4[5] | (a4[4] << 8)) << 8)) << 8);\n      v126 = a4[11] | ((a4[10] | ((a4[9] | (a4[8] << 8)) << 8)) << 8);\n      v15 = a4[14] | ((a4[13] | (a4[12] << 8)) << 8);\n      v141[0] = v126;\n      v16 = a4[17] | v14;\n      v127 = a4[15] | (v15 << 8);\n      v17 = a4[18];\n      v141[1] = v127;\n      v117 = a4[19] | ((v17 | (v16 << 8)) << 8);\n      v18 = a4[22] | ((a4[21] | (a4[20] << 8)) << 8);\n      v141[2] = v117;\n      v19 = a4[25];\n      v107 = a4[23] | (v18 << 8);\n      v141[3] = v107;\n      v20 = a4[27] | ((a4[26] | ((v19 | (a4[24] << 8)) << 8)) << 8);\n      v21 = a4[29];\n      v109 = v20;\n      v141[4] = v20;\n      v22 = a4[31] | ((a4[30] | ((v21 | (a4[28] << 8)) << 8)) << 8);\n      v23 = a4[33];\n      v116 = v22;\n      v141[5] = v22;\n      v24 = a4[35] | ((a4[34] | ((v23 | (a4[32] << 8)) << 8)) << 8);\n      v25 = a4[37];\n      v115 = v24;\n      v141[6] = v24;\n      v26 = a4[39] | ((a4[38] | ((v25 | (a4[36] << 8)) << 8)) << 8);\n      v27 = a4[41];\n      v105 = v26;\n      v141[7] = v26;\n      v28 = a4[43] | ((a4[42] | ((v27 | (a4[40] << 8)) << 8)) << 8);\n      v29 = a4[45];\n      v106 = v28;\n      v141[8] = v28;\n      v30 = a4[47] | ((a4[46] | ((v29 | (a4[44] << 8)) << 8)) << 8);\n      v31 = a4[49];\n      v108 = v30;\n      v141[9] = v30;\n      v32 = a4[51] | ((a4[50] | ((v31 | (a4[48] << 8)) << 8)) << 8);\n      v33 = a4[53];\n      v110 = v32;\n      v141[10] = v32;\n      v34 = v7;\n      v35 = v141;\n      v36 = 2i64;\n      v37 = a4[55] | ((a4[54] | ((v33 | (a4[52] << 8)) << 8)) << 8);\n      v38 = a4[57];\n      v112 = v37;\n      v141[11] = v37;\n      v39 = a4[59] | ((a4[58] | ((v38 | (a4[56] << 8)) << 8)) << 8);\n      v40 = a4[61];\n      v111 = v39;\n      v141[12] = v39;\n      v114 = a4[63] | ((a4[62] | ((v40 | (a4[60] << 8)) << 8)) << 8);\n      v139 = a4 + 64;\n      v141[13] = v114;\n      do\n      {\n        v41 = *v34\n            + *(v35 - 2)\n            + (v12 ^ v10 & (v11 ^ v12))\n            + (__ROR4__(v10, 6) ^ __ROR4__(v10, 11) ^ __ROR4__(v10, 25))\n            + v13;\n        v42 = v41 + v9;\n        v43 = (__ROR4__(v4, 2) ^ __ROR4__(v4, 13) ^ __ROR4__(v4, 22)) + (v4 & v6 ^ v8 & (v4 ^ v6)) + v41;\n        v44 = *(v35 - 1)\n            + *(int *)((char *)v35 + v131)\n            + (v11 ^ v42 & (v10 ^ v11))\n            + (__ROR4__(v42, 6) ^ __ROR4__(v42, 11) ^ __ROR4__(v42, 25))\n            + v12;\n        v45 = v44 + v8;\n        v46 = (__ROR4__(v43, 2) ^ __ROR4__(v43, 13) ^ __ROR4__(v43, 22)) + (v4 & v43 ^ v6 & (v4 ^ v43)) + v44;\n        v47 = *v35\n            + *(int *)((char *)v35 + v132)\n            + (v10 ^ v45 & (v42 ^ v10))\n            + (__ROR4__(v45, 6) ^ __ROR4__(v45, 11) ^ __ROR4__(v45, 25))\n            + v11;\n        v48 = v47 + v6;\n        v49 = (__ROR4__(v46, 2) ^ __ROR4__(v46, 13) ^ __ROR4__(v46, 22)) + (v46 & v43 ^ v4 & (v46 ^ v43)) + v47;\n        v50 = v35[1]\n            + *(int *)((char *)v35 + v133)\n            + (v42 ^ v48 & (v45 ^ v42))\n            + (__ROR4__(v48, 6) ^ __ROR4__(v48, 11) ^ __ROR4__(v48, 25))\n            + v10;\n        v51 = v50 + v4;\n        v52 = (__ROR4__(v49, 2) ^ __ROR4__(v49, 13) ^ __ROR4__(v49, 22)) + (v49 & v46 ^ v43 & (v49 ^ v46)) + v50;\n        v53 = v35[2]\n            + *(int *)((char *)v35 + v134)\n            + (v45 ^ v51 & (v48 ^ v45))\n            + (__ROR4__(v51, 6) ^ __ROR4__(v51, 11) ^ __ROR4__(v51, 25))\n            + v42;\n        v13 = v53 + v43;\n        v9 = (__ROR4__(v52, 2) ^ __ROR4__(v52, 13) ^ __ROR4__(v52, 22)) + (v52 & v49 ^ v46 & (v52 ^ v49)) + v53;\n        v54 = v35[3]\n            + *(int *)((char *)v35 + v135)\n            + (v48 ^ v13 & (v51 ^ v48))\n            + (__ROR4__(v13, 6) ^ __ROR4__(v13, 11) ^ __ROR4__(v13, 25))\n            + v45;\n        v12 = v54 + v46;\n        v8 = (__ROR4__(v9, 2) ^ __ROR4__(v9, 13) ^ __ROR4__(v9, 22)) + (v9 & v52 ^ v49 & (v9 ^ v52)) + v54;\n        v55 = v35[4]\n            + *(int *)((char *)v35 + v136)\n            + (v51 ^ v12 & (v51 ^ v13))\n            + (__ROR4__(v12, 6) ^ __ROR4__(v12, 11) ^ __ROR4__(v12, 25))\n            + v48;\n        v11 = v55 + v49;\n        v6 = (__ROR4__(v8, 2) ^ __ROR4__(v8, 13) ^ __ROR4__(v8, 22)) + (v8 & v9 ^ v52 & (v8 ^ v9)) + v55;\n        v35 += 8;\n        v34 += 8;\n        v56 = *(v35 - 3)\n            + *(int *)((char *)v35 + v137 - 32)\n            + (v13 ^ v11 & (v12 ^ v13))\n            + (__ROR4__(v11, 6) ^ __ROR4__(v11, 11) ^ __ROR4__(v11, 25))\n            + v51;\n        v10 = v56 + v52;\n        v4 = (__ROR4__(v6, 2) ^ __ROR4__(v6, 13) ^ __ROR4__(v6, 22)) + (v6 & v8 ^ v9 & (v6 ^ v8)) + v56;\n        --v36;\n      }\n      while ( v36 );\n      v57 = v128;\n      v58 = v127;\n      v59 = v39;\n      v104 = v34;\n      v60 = v126;\n      v129 = 3i64;\n      do\n      {\n        v113 += v105\n              + ((v59 >> 10) ^ __ROR4__(v59, 17) ^ __ROR4__(v59, 19))\n              + ((v57 >> 3) ^ __ROR4__(v57, 7) ^ __ROR4__(v57, 18));\n        v61 = *v104\n            + v113\n            + (__ROR4__(v10, 11) ^ __ROR4__(v10, 25) ^ __ROR4__(v10, 6))\n            + (v12 ^ v10 & (v11 ^ v12))\n            + v13;\n        v62 = v61 + v9;\n        v63 = (__ROR4__(v4, 2) ^ __ROR4__(v4, 13) ^ __ROR4__(v4, 22)) + v61 + (v4 & v6 ^ v8 & (v4 ^ v6));\n        v57 += ((v114 >> 10) ^ __ROR4__(v114, 17) ^ __ROR4__(v114, 19))\n             + v106\n             + ((v60 >> 3) ^ __ROR4__(v60, 7) ^ __ROR4__(v60, 18));\n        v64 = v57\n            + v104[1]\n            + (v11 ^ v62 & (v10 ^ v11))\n            + (__ROR4__(v62, 6) ^ __ROR4__(v62, 11) ^ __ROR4__(v62, 25))\n            + v12;\n        v65 = v64 + v8;\n        v66 = (__ROR4__(v63, 2) ^ __ROR4__(v63, 13) ^ __ROR4__(v63, 22)) + (v4 & v63 ^ v6 & (v4 ^ v63)) + v64;\n        v60 += ((v58 >> 3) ^ __ROR4__(v58, 7) ^ __ROR4__(v58, 18))\n             + v108\n             + ((v113 >> 10) ^ __ROR4__(v113, 17) ^ __ROR4__(v113, 19));\n        v67 = v60\n            + v104[2]\n            + (v10 ^ v65 & (v62 ^ v10))\n            + (__ROR4__(v65, 6) ^ __ROR4__(v65, 11) ^ __ROR4__(v65, 25))\n            + v11;\n        v68 = v67 + v6;\n        v69 = (__ROR4__(v66, 2) ^ __ROR4__(v66, 13) ^ __ROR4__(v66, 22)) + (v66 & v63 ^ v4 & (v66 ^ v63)) + v67;\n        v58 += ((v117 >> 3) ^ __ROR4__(v117, 7) ^ __ROR4__(v117, 18))\n             + v110\n             + ((v57 >> 10) ^ __ROR4__(v57, 17) ^ __ROR4__(v57, 19));\n        v70 = v58\n            + v104[3]\n            + (v62 ^ v68 & (v65 ^ v62))\n            + (__ROR4__(v68, 6) ^ __ROR4__(v68, 11) ^ __ROR4__(v68, 25))\n            + v10;\n        v71 = v70 + v4;\n        v72 = (__ROR4__(v69, 2) ^ __ROR4__(v69, 13) ^ __ROR4__(v69, 22)) + (v69 & v66 ^ v63 & (v69 ^ v66)) + v70;\n        v117 += ((v60 >> 10) ^ __ROR4__(v60, 17) ^ __ROR4__(v60, 19))\n              + v112\n              + ((v107 >> 3) ^ __ROR4__(v107, 7) ^ __ROR4__(v107, 18));\n        v73 = v117\n            + v104[4]\n            + (v65 ^ v71 & (v68 ^ v65))\n            + (__ROR4__(v71, 6) ^ __ROR4__(v71, 11) ^ __ROR4__(v71, 25))\n            + v62;\n        v74 = v73 + v63;\n        v75 = (__ROR4__(v72, 2) ^ __ROR4__(v72, 13) ^ __ROR4__(v72, 22)) + (v72 & v69 ^ v66 & (v72 ^ v69)) + v73;\n        v107 += v111\n              + ((v109 >> 3) ^ __ROR4__(v109, 7) ^ __ROR4__(v109, 18))\n              + ((v58 >> 10) ^ __ROR4__(v58, 17) ^ __ROR4__(v58, 19));\n        v76 = v107\n            + v104[5]\n            + (v68 ^ v74 & (v71 ^ v68))\n            + (__ROR4__(v74, 6) ^ __ROR4__(v74, 11) ^ __ROR4__(v74, 25))\n            + v65;\n        v77 = v76 + v66;\n        v78 = (__ROR4__(v75, 2) ^ __ROR4__(v75, 13) ^ __ROR4__(v75, 22)) + (v75 & v72 ^ v69 & (v75 ^ v72)) + v76;\n        v109 += v114\n              + ((v117 >> 10) ^ __ROR4__(v117, 17) ^ __ROR4__(v117, 19))\n              + ((v116 >> 3) ^ __ROR4__(v116, 7) ^ __ROR4__(v116, 18));\n        v79 = v109\n            + v104[6]\n            + (v71 ^ v77 & (v71 ^ v74))\n            + (__ROR4__(v77, 6) ^ __ROR4__(v77, 11) ^ __ROR4__(v77, 25))\n            + v68;\n        v80 = v79 + v69;\n        v81 = (__ROR4__(v78, 2) ^ __ROR4__(v78, 13) ^ __ROR4__(v78, 22)) + (v78 & v75 ^ v72 & (v78 ^ v75)) + v79;\n        v116 += ((v107 >> 10) ^ __ROR4__(v107, 17) ^ __ROR4__(v107, 19))\n              + v113\n              + ((v115 >> 3) ^ __ROR4__(v115, 7) ^ __ROR4__(v115, 18));\n        v82 = v116\n            + v104[7]\n            + (v74 ^ v80 & (v77 ^ v74))\n            + (__ROR4__(v80, 6) ^ __ROR4__(v80, 11) ^ __ROR4__(v80, 25))\n            + v71;\n        v83 = v82 + v72;\n        v84 = (__ROR4__(v81, 2) ^ __ROR4__(v81, 13) ^ __ROR4__(v81, 22)) + (v81 & v78 ^ v75 & (v81 ^ v78)) + v82;\n        v115 += v57\n              + ((v109 >> 10) ^ __ROR4__(v109, 17) ^ __ROR4__(v109, 19))\n              + ((v105 >> 3) ^ __ROR4__(v105, 7) ^ __ROR4__(v105, 18));\n        v85 = v115\n            + v104[8]\n            + (v77 ^ v83 & (v80 ^ v77))\n            + (__ROR4__(v83, 6) ^ __ROR4__(v83, 11) ^ __ROR4__(v83, 25))\n            + v74;\n        v86 = v85 + v75;\n        v87 = (__ROR4__(v84, 2) ^ __ROR4__(v84, 13) ^ __ROR4__(v84, 22)) + v85 + (v78 & (v84 ^ v81) ^ v84 & v81);\n        v105 += ((v116 >> 10) ^ __ROR4__(v116, 17) ^ __ROR4__(v116, 19))\n              + v60\n              + ((v106 >> 3) ^ __ROR4__(v106, 7) ^ __ROR4__(v106, 18));\n        v88 = v105\n            + v104[9]\n            + (v80 ^ v86 & (v83 ^ v80))\n            + (__ROR4__(v86, 6) ^ __ROR4__(v86, 11) ^ __ROR4__(v86, 25))\n            + v77;\n        v89 = v88 + v78;\n        v90 = (__ROR4__(v87, 2) ^ __ROR4__(v87, 13) ^ __ROR4__(v87, 22)) + (v84 & v87 ^ v81 & (v84 ^ v87)) + v88;\n        v106 += v58\n              + ((v115 >> 10) ^ __ROR4__(v115, 17) ^ __ROR4__(v115, 19))\n              + ((v108 >> 3) ^ __ROR4__(v108, 7) ^ __ROR4__(v108, 18));\n        v91 = v106\n            + v104[10]\n            + (v83 ^ v89 & (v86 ^ v83))\n            + (__ROR4__(v89, 6) ^ __ROR4__(v89, 11) ^ __ROR4__(v89, 25))\n            + v80;\n        v92 = v91 + v81;\n        v93 = (__ROR4__(v90, 2) ^ __ROR4__(v90, 13) ^ __ROR4__(v90, 22)) + (v90 & v87 ^ v84 & (v90 ^ v87)) + v91;\n        v108 += ((v105 >> 10) ^ __ROR4__(v105, 17) ^ __ROR4__(v105, 19))\n              + ((v110 >> 3) ^ __ROR4__(v110, 7) ^ __ROR4__(v110, 18))\n              + v117;\n        v94 = v108\n            + v104[11]\n            + (v86 ^ v92 & (v89 ^ v86))\n            + (__ROR4__(v92, 6) ^ __ROR4__(v92, 11) ^ __ROR4__(v92, 25))\n            + v83;\n        v95 = v94 + v84;\n        v96 = (__ROR4__(v93, 2) ^ __ROR4__(v93, 13) ^ __ROR4__(v93, 22)) + (v93 & v90 ^ v87 & (v93 ^ v90)) + v94;\n        v110 += v107\n              + ((v112 >> 3) ^ __ROR4__(v112, 7) ^ __ROR4__(v112, 18))\n              + ((v106 >> 10) ^ __ROR4__(v106, 17) ^ __ROR4__(v106, 19));\n        v97 = v110\n            + v104[12]\n            + (v89 ^ v95 & (v92 ^ v89))\n            + (__ROR4__(v95, 6) ^ __ROR4__(v95, 11) ^ __ROR4__(v95, 25))\n            + v86;\n        v13 = v97 + v87;\n        v9 = (__ROR4__(v96, 2) ^ __ROR4__(v96, 13) ^ __ROR4__(v96, 22)) + (v96 & v93 ^ v90 & (v96 ^ v93)) + v97;\n        v112 += v109\n              + ((v111 >> 3) ^ __ROR4__(v111, 7) ^ __ROR4__(v111, 18))\n              + ((v108 >> 10) ^ __ROR4__(v108, 17) ^ __ROR4__(v108, 19));\n        v98 = v112\n            + v104[13]\n            + (v92 ^ v13 & (v95 ^ v92))\n            + (__ROR4__(v13, 6) ^ __ROR4__(v13, 11) ^ __ROR4__(v13, 25))\n            + v89;\n        v12 = v98 + v90;\n        v8 = (__ROR4__(v9, 2) ^ __ROR4__(v9, 13) ^ __ROR4__(v9, 22)) + (v9 & v96 ^ v93 & (v9 ^ v96)) + v98;\n        v59 = v116\n            + ((v110 >> 10) ^ __ROR4__(v110, 17) ^ __ROR4__(v110, 19))\n            + ((v114 >> 3) ^ __ROR4__(v114, 7) ^ __ROR4__(v114, 18))\n            + v111;\n        v111 = v59;\n        v99 = v59\n            + v104[14]\n            + (v95 ^ v12 & (v95 ^ v13))\n            + (__ROR4__(v12, 6) ^ __ROR4__(v12, 11) ^ __ROR4__(v12, 25))\n            + v92;\n        v11 = v99 + v93;\n        v6 = (__ROR4__(v8, 2) ^ __ROR4__(v8, 13) ^ __ROR4__(v8, 22)) + (v8 & v9 ^ v96 & (v8 ^ v9)) + v99;\n        v114 += ((v112 >> 10) ^ __ROR4__(v112, 17) ^ __ROR4__(v112, 19))\n              + v115\n              + ((v113 >> 3) ^ __ROR4__(v113, 7) ^ __ROR4__(v113, 18));\n        v100 = v104;\n        v104 += 16;\n        v101 = v114\n             + v100[15]\n             + (v13 ^ v11 & (v12 ^ v13))\n             + (__ROR4__(v11, 6) ^ __ROR4__(v11, 11) ^ __ROR4__(v11, 25))\n             + v95;\n        v10 = v101 + v96;\n        v4 = (__ROR4__(v6, 2) ^ __ROR4__(v6, 13) ^ __ROR4__(v6, 22)) + (v6 & v8 ^ v9 & (v6 ^ v8)) + v101;\n        --v129;\n      }\n      while ( v129 );\n      v4 += v125;\n      v6 += v118;\n      v8 += v119;\n      v9 += v120;\n      v10 += v121;\n      v11 += v122;\n      v12 += v123;\n      v13 += v124;\n      v102 = v130-- == 1;\n      a4 = v139;\n      v7 = a2;\n      *a1 = v4;\n      a1[1] = v6;\n      a1[2] = v8;\n      a1[3] = v9;\n      a1[4] = v10;\n      a1[5] = v11;\n      a1[6] = v12;\n      a1[7] = v13;\n      v125 = v4;\n      v118 = v6;\n      v119 = v8;\n      v120 = v9;\n      v121 = v10;\n      v122 = v11;\n      v123 = v12;\n      v124 = v13;\n    }\n    while ( !v102 );\n  }\n  return a4;\n}\n// 14E5D7C90: too many cbuild loops\n\n"
    },
    {
        "Function": "sub_14E5D7860",
        "Total XOR and shift operations": 53,
        "XOR operations": 24,
        "Shift operations": 29,
        "Operation percentage": "53.54%",
        "Function Body": "\n__int64 __fastcall sub_14E5D7860(unsigned int a1, _DWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  unsigned __int16 *v8; // r14\n  __int64 v9; // rcx\n  _BYTE *v10; // r10\n  unsigned int v11; // r12d\n  int v12; // esi\n  int v13; // ebp\n  unsigned int v14; // edi\n  int i; // edx\n  unsigned int v16; // ebx\n  __int64 v17; // r11\n  unsigned int v18; // r9d\n  unsigned int v19; // edx\n  unsigned __int64 v20; // r10\n  unsigned __int64 v21; // r10\n  unsigned int v22; // edi\n  unsigned int v23; // edx\n  unsigned int v24; // r11d\n  __int64 v25; // rsi\n  int v26; // ebp\n  int v27; // ebx\n  int v28; // r9d\n  unsigned int v29; // edx\n  __int64 result; // rax\n  _BYTE *v31; // [rsp+0h] [rbp-38h]\n  __int64 v32; // [rsp+58h] [rbp+20h]\n  __int64 v33; // [rsp+68h] [rbp+30h]\n\n  if ( a4 )\n  {\n    v32 = a4;\n    v8 = (unsigned __int16 *)(a6 + 2);\n    v9 = a6 - a5 - 2;\n    v33 = v9;\n    v10 = (_BYTE *)(a5 + 2);\n    v31 = (_BYTE *)(a5 + 2);\n    do\n    {\n      v11 = 1;\n      v12 = *a2 ^ ((unsigned __int8)v10[v9] | ((*((unsigned __int8 *)v8 - 1) | (*v8 << 8)) << 8));\n      v13 = a2[1] ^ (*((unsigned __int8 *)v8 + 2) | ((*((unsigned __int8 *)v8 + 3) | (v8[2] << 8)) << 8));\n      v14 = a2[2] ^ (*((unsigned __int8 *)v8 + 6) | ((*((unsigned __int8 *)v8 + 7) | (v8[4] << 8)) << 8));\n      for ( i = a2[3] ^ (*((unsigned __int8 *)v8 + 10) | ((*((unsigned __int8 *)v8 + 11) | (v8[6] << 8)) << 8));\n            v11 < a1;\n            i = a2[(unsigned int)(v17 + 3)] ^ *(_DWORD *)(a3 + 4i64 * (unsigned __int8)v16 + 256) ^ *(_DWORD *)(a3 + 4 * (v20 >> 24) + 3328) ^ *(_DWORD *)(a3 + 4i64 * BYTE1(v18) + 1280) ^ *(_DWORD *)(a3 + 4i64 * BYTE2(v19) + 2304) )\n      {\n        v16 = i;\n        v17 = 4 * v11;\n        v18 = v12;\n        ++v11;\n        v19 = v13;\n        v20 = v14;\n        v12 = a2[v17] ^ *(_DWORD *)(a3 + 4i64 * (unsigned __int8)v12 + 256) ^ *(_DWORD *)(a3\n                                                                                        + 4\n                                                                                        * ((unsigned __int64)v16 >> 24)\n                                                                                        + 3328) ^ *(_DWORD *)(a3 + 4i64 * BYTE2(v14) + 2304) ^ *(_DWORD *)(a3 + 4i64 * BYTE1(v13) + 1280);\n        v13 = a2[(unsigned int)(v17 + 1)] ^ *(_DWORD *)(a3 + 4i64 * (unsigned __int8)v13 + 256) ^ *(_DWORD *)(a3 + 4 * ((unsigned __int64)v18 >> 24) + 3328) ^ *(_DWORD *)(a3 + 4i64 * BYTE2(v16) + 2304) ^ *(_DWORD *)(a3 + 4i64 * BYTE1(v14) + 1280);\n        v14 = a2[(unsigned int)(v17 + 2)] ^ *(_DWORD *)(a3 + 4i64 * (unsigned __int8)v14 + 256) ^ *(_DWORD *)(a3 + 4 * ((unsigned __int64)v19 >> 24) + 3328) ^ *(_DWORD *)(a3 + 4i64 * BYTE1(v16) + 1280) ^ *(_DWORD *)(a3 + 4i64 * BYTE2(v18) + 2304);\n      }\n      v21 = v14;\n      v22 = i;\n      v23 = v13;\n      v24 = v12;\n      v25 = 4 * v11;\n      v26 = a2[v25] ^ (*(unsigned __int8 *)((unsigned __int8)v24 + a3) | ((*(unsigned __int8 *)(BYTE1(v13) + a3) | (((*(unsigned __int8 *)(((unsigned __int64)v22 >> 24) + a3) << 8) | *(unsigned __int8 *)(BYTE2(v21) + a3)) << 8)) << 8));\n      v27 = a2[(unsigned int)(v25 + 1)] ^ (*(unsigned __int8 *)((unsigned __int8)v23 + a3) | ((*(unsigned __int8 *)(BYTE1(v21) + a3) | ((*(unsigned __int8 *)(BYTE2(v22) + a3) | (*(unsigned __int8 *)(((unsigned __int64)v24 >> 24) + a3) << 8)) << 8)) << 8));\n      v28 = a2[(unsigned int)(v25 + 2)] ^ (*(unsigned __int8 *)((unsigned __int8)v21 + a3) | ((*(unsigned __int8 *)(BYTE1(v22) + a3) | (((*(unsigned __int8 *)(((unsigned __int64)v23 >> 24) + a3) << 8) | *(unsigned __int8 *)(BYTE2(v24) + a3)) << 8)) << 8));\n      v8 += 8;\n      v9 = v33;\n      v29 = a2[(unsigned int)(v25 + 3)] ^ (*(unsigned __int8 *)((unsigned __int8)v22 + a3) | ((*(unsigned __int8 *)(BYTE1(v24) + a3) | (((*(unsigned __int8 *)((v21 >> 24) + a3) << 8) | *(unsigned __int8 *)(BYTE2(v23) + a3)) << 8)) << 8));\n      v31[1] = HIE52D(v26);\n      *v31 = BYTE2(v26);\n      *(v31 - 1) = BYTE1(v26);\n      v31[5] = HIE52D(v27);\n      v31[4] = BYTE2(v27);\n      v31[3] = BYTE1(v27);\n      v31[9] = HIE52D(v28);\n      v31[8] = BYTE2(v28);\n      v31[7] = BYTE1(v28);\n      v31[13] = HIE52D(v29);\n      v31[12] = BYTE2(v29);\n      v31[6] = v28;\n      result = v29 >> 8;\n      v31[11] = BYTE1(v29);\n      *(v31 - 2) = v26;\n      v31[2] = v27;\n      v31[10] = v29;\n      v10 = v31 + 16;\n      v32 -= 16i64;\n      v31 += 16;\n    }\n    while ( v32 );\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_1495EDC20",
        "Total XOR and shift operations": 34,
        "XOR operations": 30,
        "Shift operations": 4,
        "Operation percentage": "47.89%",
        "Function Body": "\n__int64 __fastcall sub_1495EDC20(__int64 a1, unsigned int a2)\n{\n  int v2; // esi\n  int v3; // r15d\n  __int16 v4; // r9\n  int v5; // r14d\n  __int16 v6; // r8\n  __int16 v7; // r10\n  char v8; // bp\n  char v9; // cl\n  bool v10; // cf\n  unsigned __int16 v11; // r8\n  unsigned __int8 v12; // bp\n  char v13; // r11\n  char v14; // cl\n  __int16 v15; // r9\n  __int16 v16; // dx\n  unsigned __int8 v17; // r11\n  char v18; // r10\n  char v19; // cl\n  char v20; // r10\n  unsigned __int8 v21; // cl\n  unsigned __int8 v22; // r10\n  int v23; // r8d\n  unsigned __int8 v24; // cl\n\n  v2 = *((unsigned __int8 *)&stru_141576168.ExceptionInformation[13] + (unsigned __int8)a2);\n  v3 = *((unsigned __int8 *)&stru_141576168.ExceptionInformation[13] + BYTE1(a2));\n  v4 = 2 * v3;\n  v5 = *((unsigned __int8 *)&stru_141576168.ExceptionInformation[13] + BYTE2(a2));\n  v6 = v3 ^ (2 * v3);\n  v7 = *((unsigned __int8 *)&stru_141576168.ExceptionInformation[13] + ((unsigned __int64)a2 >> 24));\n  v8 = (2 * v2) ^ 0x1B;\n  if ( ((2 * v2) & 0x100) == 0 )\n    v8 = 2 * v2;\n  v9 = v6 ^ 0x1B;\n  v10 = (v6 & 0x100) != 0;\n  v11 = 2 * v5;\n  if ( !v10 )\n    v9 = v3 ^ (2 * v3);\n  v12 = v5 ^ v7 ^ v9 ^ v8;\n  v13 = v5 ^ v11 ^ 0x1B;\n  if ( (((unsigned __int16)v5 ^ v11) & 0x100) == 0 )\n    v13 = v5 ^ v11;\n  v14 = v4 ^ 0x1B;\n  v10 = (v4 & 0x100) != 0;\n  v15 = 2 * v7;\n  if ( !v10 )\n    v14 = 2 * v3;\n  v16 = v7 ^ v15;\n  v17 = v2 ^ v7 ^ v14 ^ v13;\n  v18 = v7 ^ v15 ^ 0x1B;\n  if ( (v16 & 0x100) == 0 )\n    v18 = v16;\n  v19 = v11 ^ 0x1B;\n  if ( ((2 * (_WORD)v5) & 0x100) == 0 )\n    v19 = 2 * v5;\n  v20 = v3 ^ v19 ^ v18;\n  v21 = v2 ^ (2 * v2) ^ 0x1B;\n  v22 = v2 ^ v20;\n  if ( (((unsigned __int16)v2 ^ (unsigned __int16)(2 * v2)) & 0x100) == 0 )\n    v21 = v2 ^ (2 * v2);\n  v23 = v21;\n  v24 = v15 ^ 0x1B;\n  if ( (v15 & 0x100) == 0 )\n    v24 = v15;\n  return v12 | ((v17 | ((v22 | ((v3 ^ v5 ^ v23 ^ (unsigned int)v24) << 8)) << 8)) << 8);\n}\n\n"
    },
    {
        "Function": "sub_143F31F30",
        "Total XOR and shift operations": 144,
        "XOR operations": 80,
        "Shift operations": 64,
        "Operation percentage": "42.99%",
        "Function Body": "\nvoid __fastcall sub_143F31F30(int *a1, char *a2, char *a3, unsigned int a4)\n{\n  unsigned int v4; // r10d\n  char *v5; // r13\n  int v6; // ebx\n  unsigned int v7; // ebp\n  int v8; // esi\n  int v9; // edi\n  unsigned int v10; // r14d\n  int v11; // r8d\n  unsigned int v12; // r11d\n  __int64 v13; // r8\n  signed __int64 v14; // rdx\n  char *v15; // rcx\n  int v16; // r13d\n  int v17; // r12d\n  unsigned int v18; // r9d\n  int v19; // edx\n  unsigned int v20; // ebx\n  unsigned int v21; // edi\n  unsigned int v22; // ebp\n  int v23; // r15d\n  unsigned int v24; // esi\n  int v25; // r12d\n  int v26; // r15d\n  int v27; // r13d\n  unsigned int v28; // r8d\n  unsigned int v29; // r9d\n  unsigned int v30; // ecx\n  int v31; // r15d\n  unsigned int v32; // edi\n  unsigned int v33; // r8d\n  unsigned int v34; // ebx\n  unsigned int v35; // r14d\n  unsigned int v36; // ecx\n  int v37; // r12d\n  unsigned int v38; // esi\n  unsigned int v39; // r8d\n  unsigned int v40; // r10d\n  unsigned int v41; // ecx\n  int v42; // r13d\n  unsigned int v43; // ebp\n  int v44; // edx\n  int v45; // r11d\n  int v46; // r15d\n  int v47; // r12d\n  unsigned int v48; // r8d\n  unsigned int v49; // ecx\n  int v50; // edx\n  unsigned int v51; // r9d\n  unsigned int v52; // r8d\n  unsigned int v53; // ebx\n  unsigned int v54; // ecx\n  unsigned int v55; // r8d\n  unsigned int v56; // ecx\n  unsigned int v57; // r10d\n  int v58; // r13d\n  int v59; // edx\n  unsigned int v60; // r8d\n  unsigned int v61; // ecx\n  unsigned int v62; // r8d\n  unsigned int v63; // ecx\n  int v64; // eax\n  unsigned int v65; // r8d\n  char *v66; // rdx\n  int v67; // r12d\n  int v68; // r15d\n  int v69; // r14d\n  int v70; // ebp\n  int v71; // esi\n  int v72; // edi\n  int v73; // ebx\n  int v74; // r11d\n  int v75; // r10d\n  int v76; // r8d\n  int v77; // ecx\n  int v78; // eax\n  int v79; // r13d\n  int v80; // r9d\n  bool v81; // zf\n  unsigned int v82; // eax\n  char *v83; // rcx\n  __int64 v84; // rdx\n  unsigned int v85; // [rsp+0h] [rbp-128h]\n  unsigned int v86; // [rsp+0h] [rbp-128h]\n  unsigned int v87; // [rsp+0h] [rbp-128h]\n  unsigned int v88; // [rsp+4h] [rbp-124h]\n  unsigned int v89; // [rsp+4h] [rbp-124h]\n  unsigned int v90; // [rsp+8h] [rbp-120h]\n  unsigned int v91; // [rsp+Ch] [rbp-11Ch]\n  int v92; // [rsp+Ch] [rbp-11Ch]\n  unsigned int v93; // [rsp+10h] [rbp-118h]\n  unsigned int v94; // [rsp+14h] [rbp-114h]\n  unsigned int v95; // [rsp+18h] [rbp-110h]\n  unsigned int v96; // [rsp+1Ch] [rbp-10Ch]\n  unsigned int v97; // [rsp+20h] [rbp-108h]\n  int v98; // [rsp+24h] [rbp-104h]\n  unsigned int v99; // [rsp+28h] [rbp-100h]\n  unsigned int v100; // [rsp+28h] [rbp-100h]\n  unsigned int v101; // [rsp+2Ch] [rbp-FCh]\n  unsigned int v102; // [rsp+30h] [rbp-F8h]\n  unsigned int v103; // [rsp+34h] [rbp-F4h]\n  unsigned int v104; // [rsp+38h] [rbp-F0h]\n  unsigned int v105; // [rsp+3Ch] [rbp-ECh]\n  unsigned int v106; // [rsp+40h] [rbp-E8h]\n  unsigned int v107; // [rsp+44h] [rbp-E4h]\n  int v108; // [rsp+48h] [rbp-E0h]\n  int v109; // [rsp+4Ch] [rbp-DCh]\n  int v110; // [rsp+50h] [rbp-D8h]\n  unsigned int v111; // [rsp+54h] [rbp-D4h]\n  unsigned int v112; // [rsp+58h] [rbp-D0h]\n  unsigned int v113; // [rsp+5Ch] [rbp-CCh]\n  unsigned int v114; // [rsp+60h] [rbp-C8h]\n  char *v115; // [rsp+68h] [rbp-C0h]\n  int v116; // [rsp+68h] [rbp-C0h]\n  char *v117; // [rsp+70h] [rbp-B8h]\n  __int64 v118; // [rsp+78h] [rbp-B0h]\n  int v119; // [rsp+78h] [rbp-B0h]\n  int v120; // [rsp+84h] [rbp-A4h]\n  char *v121; // [rsp+88h] [rbp-A0h]\n  char v123[64]; // [rsp+A0h] [rbp-88h] BYREF\n\n  if ( a4 )\n  {\n    v4 = a1[13];\n    v121 = 0i64;\n    v5 = a3;\n    v6 = a1[1];\n    v113 = a1[6];\n    v7 = a1[4];\n    v114 = a1[7];\n    v8 = a1[3];\n    v101 = a1[8];\n    v9 = a1[2];\n    v102 = a1[9];\n    v103 = a1[10];\n    v10 = a1[5];\n    v104 = a1[11];\n    v105 = a1[14];\n    v117 = a3;\n    v11 = *a1;\n    v12 = a1[12];\n    v106 = a1[15];\n    v107 = a4;\n    v115 = a2;\n    v98 = *a1;\n    v108 = v6;\n    v109 = v9;\n    v110 = v8;\n    v111 = v7;\n    v112 = v10;\n    v90 = v12;\n    v93 = v4;\n    while ( 1 )\n    {\n      if ( a4 < 0x40 )\n      {\n        if ( a4 )\n        {\n          v13 = a4;\n          v14 = a2 - v123;\n          v15 = v123;\n          do\n          {\n            *v15 = v15[v14];\n            ++v15;\n            --v13;\n          }\n          while ( v13 );\n          v11 = v98;\n        }\n        v121 = v5;\n        v115 = v123;\n        v117 = v123;\n      }\n      v16 = v9;\n      v17 = v6;\n      v18 = v101;\n      v19 = v8;\n      v20 = v102;\n      v21 = v7;\n      v22 = v105;\n      v23 = v11;\n      v95 = v113;\n      v24 = v4;\n      v85 = v104;\n      v96 = v114;\n      v97 = v106;\n      v94 = v10;\n      v88 = v103;\n      v118 = 4i64;\n      do\n      {\n        v25 = v94 + v17;\n        v26 = v21 + v23;\n        v27 = v95 + v16;\n        v28 = ((v26 ^ v12) << 16) | ((v26 ^ v12) >> 16);\n        v29 = v28 + v18;\n        v30 = ((v21 ^ v29) << 12) | ((v21 ^ v29) >> 20);\n        v31 = v30 + v26;\n        v32 = ((v31 ^ v28) << 8) | ((v31 ^ v28) >> 24);\n        v99 = v32 + v29;\n        v33 = ((v25 ^ v24) << 16) | ((v25 ^ v24) >> 16);\n        v34 = v33 + v20;\n        v35 = ((v30 ^ v99) << 7) | ((v30 ^ v99) >> 25);\n        v36 = ((v94 ^ v34) << 12) | ((v94 ^ v34) >> 20);\n        v37 = v36 + v25;\n        v38 = ((v37 ^ v33) << 8) | ((v37 ^ v33) >> 24);\n        v91 = v38 + v34;\n        v39 = ((v27 ^ v22) << 16) | ((v27 ^ v22) >> 16);\n        v40 = ((v36 ^ v91) << 7) | ((v36 ^ v91) >> 25);\n        v41 = ((v95 ^ (v39 + v88)) << 12) | ((v95 ^ (v39 + v88)) >> 20);\n        v42 = v41 + v27;\n        v43 = ((v42 ^ v39) << 8) | ((v42 ^ v39) >> 24);\n        v89 = v43 + v39 + v88;\n        v44 = v96 + v19;\n        v45 = ((v41 ^ v89) << 7) | ((unsigned __int64)(v41 ^ v89) >> 25);\n        v46 = v40 + v31;\n        v47 = v45 + v37;\n        v48 = ((v44 ^ v97) << 16) | ((v44 ^ v97) >> 16);\n        v49 = ((v96 ^ (v48 + v85)) << 12) | ((v96 ^ (v48 + v85)) >> 20);\n        v50 = v49 + v44;\n        v51 = ((v50 ^ v48) << 8) | ((v50 ^ v48) >> 24);\n        v86 = v51 + v48 + v85;\n        v52 = ((v46 ^ v51) << 16) | ((v46 ^ v51) >> 16);\n        v53 = ((v49 ^ v86) << 7) | ((v49 ^ v86) >> 25);\n        v54 = ((v40 ^ (v52 + v89)) << 12) | ((v40 ^ (v52 + v89)) >> 20);\n        v23 = v54 + v46;\n        v97 = ((v23 ^ v52) << 8) | ((v23 ^ v52) >> 24);\n        v88 = v97 + v52 + v89;\n        v55 = ((v47 ^ v32) << 16) | ((v47 ^ v32) >> 16);\n        v94 = ((v54 ^ v88) << 7) | ((v54 ^ v88) >> 25);\n        v56 = ((v45 ^ (v55 + v86)) << 12) | ((v45 ^ (v55 + v86)) >> 20);\n        v17 = v56 + v47;\n        v12 = ((v17 ^ v55) << 8) | ((v17 ^ v55) >> 24);\n        v57 = v12 + v55 + v86;\n        v58 = v53 + v42;\n        v85 = v57;\n        v59 = v35 + v50;\n        v60 = ((v58 ^ v38) << 16) | ((v58 ^ v38) >> 16);\n        v95 = ((v56 ^ v57) << 7) | ((v56 ^ v57) >> 25);\n        v61 = ((v53 ^ (v60 + v99)) << 12) | ((v53 ^ (v60 + v99)) >> 20);\n        v16 = v61 + v58;\n        v24 = ((v16 ^ v60) << 8) | ((v16 ^ v60) >> 24);\n        v18 = v24 + v60 + v99;\n        v62 = ((v59 ^ v43) << 16) | ((v59 ^ v43) >> 16);\n        v96 = ((v61 ^ v18) << 7) | ((v61 ^ v18) >> 25);\n        v63 = ((v35 ^ (v62 + v91)) << 12) | ((v35 ^ (v62 + v91)) >> 20);\n        v19 = v63 + v59;\n        v22 = ((v19 ^ v62) << 8) | ((v19 ^ v62) >> 24);\n        v20 = v22 + v62 + v91;\n        v21 = ((v63 ^ v20) << 7) | ((v63 ^ v20) >> 25);\n        --v118;\n      }\n      while ( v118 );\n      v64 = v17 + v108;\n      v87 = v24;\n      v100 = v12;\n      v65 = v22 + v105;\n      v120 = v23;\n      v92 = v19;\n      v66 = v115;\n      v67 = *((_DWORD *)v115 + 4) ^ (v21 + v111);\n      v68 = *((_DWORD *)v115 + 5) ^ (v112 + v94);\n      v69 = *((_DWORD *)v115 + 6) ^ (v113 + v95);\n      v70 = *((_DWORD *)v115 + 7) ^ (v114 + v96);\n      v71 = *((_DWORD *)v115 + 8) ^ (v18 + v101);\n      v72 = *((_DWORD *)v115 + 9) ^ (v20 + v102);\n      v73 = *((_DWORD *)v115 + 10) ^ (v103 + v88);\n      v74 = *((_DWORD *)v115 + 11) ^ (v57 + v104);\n      v75 = *((_DWORD *)v115 + 12) ^ (v90 + v100);\n      v76 = *((_DWORD *)v115 + 14) ^ v65;\n      v77 = *((_DWORD *)v115 + 15) ^ (v106 + v97);\n      v119 = *((_DWORD *)v115 + 1) ^ v64;\n      v78 = v16 + v109;\n      v79 = *((_DWORD *)v115 + 3) ^ (v110 + v92);\n      v116 = *((_DWORD *)v115 + 2) ^ v78;\n      v80 = *((_DWORD *)v66 + 13) ^ (v93 + v87);\n      v81 = v90++ == -1;\n      v82 = v93 + 1;\n      if ( !v81 )\n        v82 = v93;\n      v93 = v82;\n      *(_DWORD *)v117 = *(_DWORD *)v66 ^ (v98 + v120);\n      *((_DWORD *)v117 + 1) = v119;\n      *((_DWORD *)v117 + 2) = v116;\n      *((_DWORD *)v117 + 3) = v79;\n      *((_DWORD *)v117 + 4) = v67;\n      *((_DWORD *)v117 + 5) = v68;\n      *((_DWORD *)v117 + 6) = v69;\n      *((_DWORD *)v117 + 7) = v70;\n      *((_DWORD *)v117 + 8) = v71;\n      *((_DWORD *)v117 + 9) = v72;\n      *((_DWORD *)v117 + 10) = v73;\n      *((_DWORD *)v117 + 11) = v74;\n      *((_DWORD *)v117 + 12) = v75;\n      *((_DWORD *)v117 + 13) = v80;\n      *((_DWORD *)v117 + 14) = v76;\n      *((_DWORD *)v117 + 15) = v77;\n      if ( v107 <= 0x40 )\n        break;\n      v4 = v82;\n      a4 = v107 - 64;\n      v12 = v90;\n      v5 = v117 + 64;\n      v11 = v98;\n      a2 = v66 + 64;\n      v6 = v108;\n      v9 = v109;\n      v8 = v110;\n      v7 = v111;\n      v10 = v112;\n      v115 = a2;\n      v107 -= 64;\n      v117 += 64;\n    }\n    if ( v107 - 1 <= 0x3E )\n    {\n      v83 = v121;\n      v84 = v107;\n      do\n      {\n        *v83 = v83[v117 - v121];\n        ++v83;\n        --v84;\n      }\n      while ( v84 );\n    }\n    a1[12] = v90;\n    a1[13] = v82;\n  }\n}\n\n"
    },
    {
        "Function": "sub_14E887640",
        "Total XOR and shift operations": 18,
        "XOR operations": 0,
        "Shift operations": 18,
        "Operation percentage": "28.57%",
        "Function Body": "\nunsigned __int64 __fastcall sub_14E887640(int a1)\n{\n  unsigned int v1; // r10d\n  unsigned __int64 v2; // r9\n  int v3; // r11d\n  unsigned int v4; // ebx\n  unsigned int v5; // edx\n  unsigned int v6; // r10d\n  int v7; // r8d\n  unsigned int i; // eax\n  __int64 v9; // rcx\n  int v10; // eax\n  unsigned __int64 v11; // rax\n  unsigned int v13; // r9d\n  __int64 v14; // rcx\n\n  v1 = (637AD2 * a1 - 26154E) >> 21;\n  v2 = qword_14EE575A0[31 - v1];\n  v3 = a1 + ((int)(-1764127 * v1) >> 19);\n  v4 = ((v2 - (v2 >> 25)) >> (40 - (unsigned __int8)v3)) + 1;\n  if ( (unsigned int)(a1 - 2) <= 1 )\n    v4 = (v2 - (v2 >> 25)) >> (40 - (unsigned __int8)v3);\n  v5 = (unsigned int)((v2 + (v2 >> 24)) >> (40 - (unsigned __int8)v3)) / 0xA;\n  if ( 10 * v5 < v4 )\n  {\n    v13 = ((unsigned int)(v2 >> (39 - (unsigned __int8)v3)) + 1) >> 1;\n    if ( a1 == -35 )\n    {\n      v14 = v13 - 1;\n      if ( (v13 & 1) == 0 )\n        v14 = v13;\n    }\n    else\n    {\n      v14 = v13;\n      if ( v13 < v4 )\n        v14 = v13 + 1;\n    }\n    return v14 | ((unsigned __int64)v1 << 32);\n  }\n  else\n  {\n    v6 = v1 + 1;\n    v7 = 0;\n    for ( i = ((-10EDD52151 * v5) >> 2) | (v5 << 30); i <= 0x28FE128; i = ((-10EDD52151 * i) >> 2) | (i << 30) )\n    {\n      v5 = i;\n      v7 += 2;\n    }\n    v9 = ((-85FF4C459 * v5) >> 1) | (v5 << 31);\n    v10 = v7 | 1;\n    if ( (unsigned int)v9 > 0x197D0E99 )\n      v10 = v7;\n    v11 = (unsigned __int64)(v6 + v10) << 32;\n    if ( (unsigned int)v9 > 0x197D0E99 )\n      v9 = v5;\n    return v9 | v11;\n  }\n}\n// 14EE575A0: using guessed type _QWORD qword_14EE575A0[31];\n\n"
    },
    {
        "Function": "sub_145EA3640",
        "Total XOR and shift operations": 51,
        "XOR operations": 48,
        "Shift operations": 3,
        "Operation percentage": "27.42%",
        "Function Body": "\n__int64 __fastcall sub_145EA3640(int *a1, __int64 a2)\n{\n  int v2; // edi\n  unsigned __int8 *v3; // rax\n  int v4; // r10d\n  __int64 v5; // r8\n  int v6; // r11d\n  int v7; // ebx\n  __int64 v8; // r9\n  int v9; // ecx\n  int v10; // edx\n  int v11; // edx\n  int v12; // r8d\n  int v13; // r9d\n  int v14; // r10d\n  int v15; // r11d\n  int v16; // edx\n  int v17; // r8d\n  int v18; // r9d\n  int v19; // r10d\n  int v20; // edx\n  int v21; // edi\n  int v22; // r9d\n  int v23; // r11d\n  int v24; // ebx\n  int v25; // r10d\n  int v26; // r9d\n  int v27; // r11d\n  int v28; // r8d\n  int v29; // edx\n  int v30; // r10d\n  int v31; // r9d\n  int v32; // r11d\n  int v33; // r8d\n  int v34; // edx\n  int v35; // r10d\n  int v36; // r9d\n  int v37; // r11d\n  int v38; // ebx\n  int v39; // edx\n  int v40; // r8d\n  int v41; // r9d\n  int v42; // r10d\n  int v43; // edx\n  int v44; // r8d\n  int v45; // r9d\n  int v46; // r10d\n  int v47; // r11d\n  int v48; // edx\n  int v49; // r8d\n  int v50; // r9d\n  int v51; // r10d\n  int v52; // r11d\n  int v53; // r8d\n  int v54; // edx\n  int v55; // r9d\n  int v56; // ecx\n  int v57; // r10d\n  int v58; // r8d\n  int v59; // edx\n  int v60; // r9d\n  int v61; // ecx\n  int v62; // r10d\n  int v63; // r8d\n  int v64; // edx\n  int v65; // r9d\n  int v66; // ecx\n  int v67; // r10d\n  int v68; // r11d\n  int v69; // r9d\n  int v70; // ebx\n  int v71; // r8d\n  int v72; // edx\n  int v73; // ecx\n  int v74; // ecx\n  __int64 result; // rax\n  int v76; // [rsp+0h] [rbp-88h]\n  int v78; // [rsp+10h] [rbp-78h]\n  int v79; // [rsp+14h] [rbp-74h]\n  int v80; // [rsp+18h] [rbp-70h]\n  int v81; // [rsp+1Ch] [rbp-6Ch]\n  int v82; // [rsp+20h] [rbp-68h]\n  int v83; // [rsp+24h] [rbp-64h]\n  int v84; // [rsp+28h] [rbp-60h]\n  int v85; // [rsp+2Ch] [rbp-5Ch]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+34h] [rbp-54h]\n  int v88; // [rsp+38h] [rbp-50h]\n  int v89; // [rsp+3Ch] [rbp-4Ch]\n  int v90; // [rsp+40h] [rbp-48h]\n  int v91; // [rsp+44h] [rbp-44h]\n  int v92; // [rsp+48h] [rbp-40h]\n  int v93; // [rsp+4Ch] [rbp-3Ch]\n\n  v2 = *a1;\n  v3 = (unsigned __int8 *)(a2 + 2);\n  v4 = a1[1];\n  v5 = 0i64;\n  v6 = a1[2];\n  v7 = a1[3];\n  v8 = 16i64;\n  v76 = *a1;\n  do\n  {\n    v9 = *v3;\n    v10 = v3[1];\n    v3 += 4;\n    *(&v78 + v5) = *(v3 - 6) | ((*(v3 - 5) | ((v9 | (v10 << 8)) << 8)) << 8);\n    v5 = (unsigned int)(v5 + 1);\n    --v8;\n  }\n  while ( v8 );\n  v11 = v4 + __ROR4__(v2 + v78 + (v4 & v6 | v7 & ~v4) - 68E141936, 25);\n  v12 = v11 + __ROR4__(v7 + v79 + (v11 & v4 | v6 & ~v11) - 385DDB586, 20);\n  v13 = v12 + __ROR4__(v6 + 60CE15819 + v80 + (v11 & v12 | v4 & ~v12), 15);\n  v14 = v13 + __ROR4__(v81 + (v13 & v12 | v11 & ~v13) + v4 - 1044541470, 10);\n  v15 = v14 + __ROR4__(v82 + (v14 & v13 | v12 & ~v14) + v11 - 17DCAC897, 25);\n  v16 = v15 + __ROR4__(v83 + (v15 & v14 | v13 & ~v15) + v12 + 1255D20426, 20);\n  v17 = v16 + __ROR4__(v84 + (v15 & v16 | v14 & ~v16) + v13 - 14A5CA1341, 15);\n  v18 = v17 + __ROR4__(v85 + (v17 & v16 | v15 & ~v17) + v14 - 45D3F883, 10);\n  v19 = v18 + __ROR4__(v15 + v86 + (v18 & v17 | v16 & ~v18) + 1759F15416, 25);\n  v20 = v19 + __ROR4__(v87 + (v19 & v18 | v17 & ~v19) - 19CD004417 + v16, 20);\n  v21 = v20 + __ROR4__(v17 + v88 + (v19 & v20 | v18 & ~v20) - 42063, 15);\n  v22 = v21 + __ROR4__(v89 + (v21 & v20 | v19 & ~v21) - 196CF34162 + v18, 10);\n  v23 = v22 + __ROR4__(v90 + (v22 & v21 | v20 & ~v22) + v19 + 189C213682, 25);\n  v24 = v23 + __ROR4__(v91 + (v23 & v22 | v21 & ~v23) + v20 - 407D1B01, 20);\n  v25 = v24 + __ROR4__(v92 + (v23 & v24 | v22 & ~v24) + v21 - 150F912290, 15);\n  v26 = v25 + __ROR4__(v93 + (v25 & v24 | v23 & ~v25) + 1266F65329 + v22, 10);\n  v27 = v26 + __ROR4__(v79 - 16A0F4510 + (v26 & v24 | v25 & ~v24) + v23, 27);\n  v28 = v27 + __ROR4__(v24 + v84 + (v26 & ~v25 | v27 & v25) - 10AAF11632, 23);\n  v29 = v28 + __ROR4__(v89 + (v26 & v28 | v27 & ~v26) + v25 + 64D115713, 18);\n  v30 = v29 + __ROR4__(v78 + (v27 & v29 | v28 & ~v27) + v26 - 3794D9302, 12);\n  v31 = v30 + __ROR4__(v83 + (v30 & v28 | v29 & ~v28) + v27 - 706DE8691, 27);\n  v32 = v31 + __ROR4__(v88 + (v31 & v29 | v30 & ~v29) + v28 + 38986683, 23);\n  v33 = v32 + __ROR4__(v93 + (v30 & v32 | v31 & ~v30) + v29 - 6625E6335, 18);\n  v34 = v33 + __ROR4__(v82 + (v31 & v33 | v32 & ~v31) + v30 - 40A72A848, 12);\n  v35 = v34 + __ROR4__(v87 + (v34 & v32 | v33 & ~v32) + v31 + 56F2AC438, 27);\n  v36 = v35 + __ROR4__(v92 + (v35 & v33 | v34 & ~v33) + v32 - 10A50C3690, 23);\n  v37 = v36 + __ROR4__(v33 + v81 + (v34 & v36 | v35 & ~v34) - 189D0A961, 18);\n  v38 = v37 + __ROR4__(v86 + (v35 & v37 | v36 & ~v35) + v34 + 1112BE1501, 12);\n  v39 = v38 + __ROR4__(v91 + (v38 & v36 | v37 & ~v36) + v35 - 14BBA31467, 27);\n  v40 = v39 + __ROR4__(v80 + (v39 & v37 | v38 & ~v37) + v36 - 513D8D84, 23);\n  v41 = v40 + __ROR4__(v85 + (v38 & v40 | v39 & ~v38) + v37 + 17AEDF8473, 18);\n  v42 = v41 + __ROR4__(v38 + v90 + (v39 & v41 | v40 & ~v39) - 191B8C7734, 12);\n  v43 = v42 + __ROR4__(v83 + (v42 ^ v41 ^ v40) - 37DC87 + v39, 28);\n  v44 = v43 + __ROR4__(v86 + (v43 ^ v42 ^ v41) - 2012264463 + v40, 21);\n  v45 = v44 + __ROR4__(v89 + (v43 ^ v42 ^ v44) + 18162B0562 + v41, 16);\n  v46 = v45 + __ROR4__(v92 + (v43 ^ v45 ^ v44) - 3569F256 + v42, 9);\n  v47 = v46 + __ROR4__(v79 + (v46 ^ v45 ^ v44) + v43 - 15A0F52060, 28);\n  v48 = v47 + __ROR4__(v82 + (v47 ^ v46 ^ v45) + v44 + 12357D3353, 21);\n  v49 = v48 + __ROR4__(v85 + (v47 ^ v46 ^ v48) + v45 - 153BED632, 16);\n  v50 = v49 + __ROR4__(v88 + (v47 ^ v49 ^ v48) + v46 - 104EB70640, 9);\n  v51 = v50 + __ROR4__(v91 + (v50 ^ v49 ^ v48) + v47 + 689B19174, 28);\n  v52 = v51 + __ROR4__(v78 + (v51 ^ v50 ^ v49) + v48 - 35D3DB222, 21);\n  v53 = v52 + __ROR4__(v81 + (v51 ^ v50 ^ v52) - 723312979 + v49, 16);\n  v54 = v53 + __ROR4__(v84 + (v51 ^ v53 ^ v52) + v50 + 76693589, 9);\n  v55 = v54 + __ROR4__(v87 + (v54 ^ v53 ^ v52) + v51 - 64C95B487, 28);\n  v56 = v55 + __ROR4__(v52 + v90 + (v55 ^ v54 ^ v53) - 428A87835, 21);\n  v57 = v56 + __ROR4__(v93 + (v55 ^ v54 ^ v56) + v53 + 53660A520, 16);\n  v58 = v57 + __ROR4__(v80 + (v55 ^ v57 ^ v56) + v54 - 99A1DE651, 9);\n  v59 = v58 + __ROR4__(v78 + (v57 ^ (v58 | ~v56)) + v55 - 19E07E844, 26);\n  v60 = v59 + __ROR4__(v85 + (v58 ^ (v59 | ~v57)) + v56 + 11DE2D1415, 22);\n  v61 = v60 + __ROR4__(v92 + (v59 ^ (v60 | ~v58)) + v57 - 1454234905, 17);\n  v62 = v61 + __ROR4__(v83 + (v60 ^ (v61 | ~v59)) + v58 - 57113655, 11);\n  v63 = v62 + __ROR4__(v90 + (v61 ^ (v62 | ~v60)) + v59 + 1749D35571, 26);\n  v64 = v63 + __ROR4__(v81 + (v62 ^ (v63 | ~v61)) + v60 - 18254D6606, 22);\n  v65 = v64 + __ROR4__(v88 + (v63 ^ (v64 | ~v62)) + v61 - 1045D43, 17);\n  v66 = v65 + __ROR4__(v79 + (v64 ^ (v65 | ~v63)) + v62 - 20E0462799, 11);\n  v67 = v66 + __ROR4__(v86 + (v65 ^ (v66 | ~v64)) + v63 + 186E583359, 26);\n  v68 = v67 + __ROR4__(v64 + v93 + (v66 ^ (v67 | ~v65)) - 30E12B44, 22);\n  v69 = v68 + __ROR4__(v84 + (v67 ^ (v68 | ~v66)) - 156CB28380 + v65, 17);\n  v70 = v69 + __ROR4__(v91 + (v68 ^ (v69 | ~v67)) + v66 + 1352411649, 11);\n  v71 = v70 + __ROR4__(v67 + v82 + (v69 ^ (v70 | ~v68)) - 14B134070, 26);\n  v72 = v71 + __ROR4__(v89 + (v70 ^ (v71 | ~v69)) + v68 - 11AE340379, 22);\n  v73 = __ROR4__(v80 + (v71 ^ (v72 | ~v70)) + v69 + 714353259, 17);\n  *a1 = v71 + v76;\n  v74 = v72 + v73;\n  a1[2] += v74;\n  result = (unsigned int)(v74 + a1[1] + __ROR4__(v87 + (v72 ^ (v74 | ~v71)) + v70 - 343984551, 11));\n  a1[3] += v72;\n  a1[1] = result;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_14B7E2680",
        "Total XOR and shift operations": 36,
        "XOR operations": 0,
        "Shift operations": 36,
        "Operation percentage": "26.09%",
        "Function Body": "\n__int64 __fastcall sub_14B7E2680(__int64 a1, double a2)\n{\n  __int64 v3; // rsi\n  int v4; // ebp\n  int v5; // ebx\n  int v6; // esi\n  unsigned __int64 v7; // r9\n  unsigned __int64 v8; // r10\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r9\n  unsigned __int64 v11; // rax\n  int v12; // r13d\n  __int64 v13; // r9\n  __int64 v14; // rbx\n  int v15; // r11d\n  int v16; // r12d\n  unsigned __int64 v17; // rbp\n  unsigned __int64 v18; // r10\n  bool v19; // cl\n  unsigned __int64 v20; // r14\n  unsigned int v21; // r10d\n  __int64 v22; // rsi\n  unsigned int v23; // r10d\n  unsigned __int64 v24; // r8\n  unsigned __int64 v25; // rbx\n  char v26; // dl\n  unsigned __int64 v27; // rbx\n  unsigned __int8 v29; // [rsp+20h] [rbp-78h]\n  __int64 v30; // [rsp+28h] [rbp-70h]\n  __m128i v31; // [rsp+30h] [rbp-68h] BYREF\n  __m128i v32; // [rsp+40h] [rbp-58h] BYREF\n\n  v3 = *(_QWORD *)&a2 & 0xFF9F59FF9F59Fi64;\n  if ( ((*(_QWORD *)&a2 >> 52) & 0x7FF) == 0 )\n  {\n    if ( !v3 )\n    {\n      *(_QWORD *)a1 = 0i64;\n      *(_DWORD *)(a1 + 8) = 0;\n      return a1;\n    }\n    v4 = -1074;\nLABEL_17:\n    v29 = ~(_BYTE)v3;\n    v12 = (316597 * v4) >> 20;\n    sub_1415AF690(&v32, 2 - v12);\n    v13 = 2 * v3;\n    v14 = v32.m128i_i64[1];\n    v15 = 0;\n    v30 = 2 * v3;\n    v16 = v4 + ((1764127 * (2 - v12)) >> 19);\n    v17 = (unsigned __int64)v32.m128i_i64[1] >> (63 - (unsigned __int8)v16);\n    v18 = ((((((2 * v3) | 1ui64) << v16) * (unsigned __int128)v32.m128i_u64[0]) >> 64)\n         + (((2 * v3) | 1ui64) << v16) * (unsigned __int128)v32.m128i_u64[1]) >> 64;\n    v19 = (unsigned __int64)(*(_OWORD *)&v32 * (((2 * v3) | 1) << v16)) >> 64 == 0;\n    v20 = (unsigned __int64)((v18 * (unsigned __int128)0x20E564A534B7F7CFui64) >> 64) >> 7;\n    *(_QWORD *)a1 = v20;\n    v21 = v18 - 1000 * v20;\n    if ( v21 >= (unsigned int)v17 )\n    {\n      if ( v21 > (unsigned int)v17 )\n        goto LABEL_21;\n      v22 = v32.m128i_i64[0];\n      if ( !(((unsigned __int64)((__PA481D8__(v14, v32.m128i_u64[0]) * (unsigned __int64)(v13 - 1)) >> 64) >> (64 - (unsigned __int8)v16)) & 1 | v29 & ((((unsigned __int64)((v13 - 1) * v32.m128i_i64[0]) >> (64 - (unsigned __int8)v16)) | (unsigned __int64)((__PA481D8__(v14, v32.m128i_u64[0]) * (unsigned __int64)(v13 - 1)) >> 64 << v16)) == 0)) )\n      {\nLABEL_22:\n        *(_DWORD *)(a1 + 8) = v12;\n        v23 = v21 - ((unsigned int)v17 >> 1) + 50;\n        v24 = ((unsigned __int64)(656 * v23) >> 16) + 10 * v20;\n        *(_QWORD *)a1 = v24;\n        if ( (unsigned __int16)(656 * v23) >= 0x290u )\n          return a1;\n        v25 = (__PA481D8__(v14, v22) * (unsigned __int64)v30) >> 64;\n        v26 = (v25 >> (64 - (unsigned __int8)v16)) & 1;\n        v27 = ((unsigned __int64)(v30 * v22) >> (64 - (unsigned __int8)v16)) | (v25 << v16);\n        if ( v26 == (v23 & 1) )\n        {\n          LOD261(v15) = v27 == 0;\n          if ( (v15 & (unsigned int)v24) == 0 )\n            return a1;\n        }\n        v11 = v24 - 1;\nLABEL_26:\n        *(_QWORD *)a1 = v11;\n        return a1;\n      }\n    }\n    else if ( !v21 && ((unsigned __int8)v3 & v19) != 0 )\n    {\n      v21 = 1000;\n      --v20;\nLABEL_21:\n      v22 = v32.m128i_i64[0];\n      goto LABEL_22;\n    }\n    *(_DWORD *)(a1 + 8) = v12 + 1;\n    *(_DWORD *)(a1 + 8) += sub_1415AF7A0((unsigned __int64 *)a1);\n    return a1;\n  }\n  v4 = ((*(_QWORD *)&a2 >> 52) & 0x7FF) - 1075;\n  if ( v3 )\n  {\n    v3 |= 0x10792100A58200ui64;\n    goto LABEL_17;\n  }\n  v5 = (637AD2 * v4 - 26154E) >> 21;\n  v6 = v4 + ((-1764127 * v5) >> 19);\n  sub_1415AF690(&v31, -v5);\n  v7 = v31.m128i_u64[1];\n  v8 = ((v31.m128i_i64[1] - ((unsigned __int64)v31.m128i_i64[1] >> 54)) >> (11 - (unsigned __int8)v6)) + 1;\n  if ( (unsigned int)((*(_QWORD *)&a2 >> 52) & 0x7FF) - 1077 <= 1 )\n    v8 = (v31.m128i_i64[1] - ((unsigned __int64)v31.m128i_i64[1] >> 54)) >> (11 - (unsigned __int8)v6);\n  v9 = ((v31.m128i_i64[1] + ((unsigned __int64)v31.m128i_i64[1] >> 53)) >> (11 - (unsigned __int8)v6)) / 0xA;\n  *(_QWORD *)a1 = v9;\n  if ( 10 * v9 >= v8 )\n  {\n    *(_DWORD *)(a1 + 8) = v5 + 1;\n    *(_DWORD *)(a1 + 8) += sub_1415AF7A0((unsigned __int64 *)a1);\n    return a1;\n  }\n  *(_DWORD *)(a1 + 8) = v5;\n  v10 = ((v7 >> (10 - (unsigned __int8)v6)) + 1) >> 1;\n  *(_QWORD *)a1 = v10;\n  if ( ((*(_QWORD *)&a2 >> 52) & 0x7FF) != 998 )\n  {\n    if ( v10 >= v8 )\n      return a1;\n    v11 = v10 + 1;\n    goto LABEL_26;\n  }\n  if ( (v10 & 1) != 0 )\n    --v10;\n  *(_QWORD *)a1 = v10;\n  return a1;\n}\n\n"
    },
    {
        "Function": "sub_1495EDA40",
        "Total XOR and shift operations": 22,
        "XOR operations": 14,
        "Shift operations": 8,
        "Operation percentage": "25.29%",
        "Function Body": "\n__int64 __fastcall sub_1495EDA40(unsigned int *a1, int a2)\n{\n  unsigned int v2; // edi\n  unsigned int v5; // eax\n  unsigned int v6; // r13d\n  unsigned int v7; // eax\n  unsigned int v8; // esi\n  unsigned int v9; // eax\n  __m128i v10; // xmm2\n  unsigned int v11; // ebp\n  unsigned int v12; // r14d\n  unsigned __int64 v13; // r10\n  unsigned int v14; // r11d\n  int v15; // r9d\n  int v16; // r8d\n  unsigned __int64 v17; // rax\n  int v18; // edx\n  bool v19; // sf\n  int v20; // r8d\n  int v21; // ecx\n  __int64 result; // rax\n  unsigned int v23; // [rsp+70h] [rbp+8h]\n  unsigned int v24; // [rsp+78h] [rbp+10h]\n  unsigned int v25; // [rsp+80h] [rbp+18h]\n  unsigned int v26; // [rsp+88h] [rbp+20h]\n\n  v2 = a1[38];\n  v5 = sub_1495EDC20((__int64)a1, v2 + a1[9]);\n  v6 = a1[37];\n  v24 = v5;\n  v23 = sub_1495EDC20((__int64)a1, v6 + a1[14]);\n  v7 = sub_1495EDC20((__int64)a1, a1[35]);\n  v8 = a1[36];\n  v25 = v7;\n  v9 = sub_1495EDC20((__int64)a1, v8);\n  v10 = *(__m128i *)(a1 + 1);\n  v11 = a1[6];\n  v12 = a1[11];\n  v13 = a1[13];\n  v14 = a1[15];\n  v26 = v9;\n  v15 = a1[3] ^ dword_1415762F0[(unsigned __int64)*a1 >> 24] ^ (*a1 << 8);\n  if ( !a2 )\n    v15 ^= v8 ^ a1[4] ^ (v2 + a1[5]);\n  v16 = a1[2];\n  v17 = a1[5];\n  if ( (v16 & 0x400A5820) != 0 )\n    v18 = dword_1415766F0[v17 >> 24] ^ (a1[5] << 8);\n  else\n    v18 = dword_141576AF0[v17 >> 24] ^ ((_DWORD)v17 << 8);\n  v19 = v16 < 0;\n  v20 = a1[13];\n  if ( v19 )\n    v20 = dword_141576EF0[v13 >> 24] ^ ((_DWORD)v13 << 8);\n  v21 = v18 ^ v20 ^ v11 ^ v12;\n  if ( !a2 )\n    v21 ^= *a1 ^ a1[35] ^ (v14 + v6);\n  a1[6] = a1[7];\n  a1[7] = a1[8];\n  a1[8] = a1[9];\n  a1[9] = a1[10];\n  a1[11] = a1[12];\n  a1[13] = a1[14];\n  a1[35] = v24;\n  a1[36] = v23;\n  *a1 = _mm_cvtsi128_si32(v10);\n  a1[37] = v25;\n  result = v26;\n  a1[38] = v26;\n  a1[1] = _mm_cvtsi128_si32(_mm_srli_si128(v10, 4));\n  a1[2] = _mm_cvtsi128_si32(_mm_srli_si128(v10, 8));\n  a1[3] = _mm_cvtsi128_si32(_mm_srli_si128(v10, 12));\n  a1[4] = v15;\n  a1[5] = v11;\n  a1[10] = v12;\n  a1[12] = v13;\n  a1[14] = v14;\n  a1[15] = v21;\n  return result;\n}\n// 1415762F0: using guessed type int dword_1415762F0[256];\n// 1415766F0: using guessed type int dword_1415766F0[256];\n// 141576AF0: using guessed type int dword_141576AF0[256];\n// 141576EF0: using guessed type int dword_141576EF0[256];\n\n"
    },
    {
        "Function": "sub_14B7E2400",
        "Total XOR and shift operations": 25,
        "XOR operations": 0,
        "Shift operations": 25,
        "Operation percentage": "25.00%",
        "Function Body": "\n// local variable allocation has failed, the output may be wrong!\nunsigned __int64 __fastcall sub_14B7E2400(double a1)\n{\n  unsigned int v1; // edx\n  unsigned int v2; // eax\n  int v3; // edx\n  int v4; // r8d\n  bool v6; // bl\n  unsigned int v7; // r13d\n  unsigned int v8; // ebp\n  unsigned __int64 v9; // r12\n  int v10; // edi\n  unsigned __int64 v11; // rsi\n  unsigned __int64 v12; // rdx\n  int v13; // r9d\n  unsigned __int64 v14; // r10\n  unsigned int v15; // r11d\n  unsigned int v16; // r11d\n  unsigned int v17; // r8d\n  bool v18; // cl\n  unsigned int i; // eax\n  unsigned int v20; // ecx\n  int v21; // eax\n  __int64 v22; // [rsp+20h] [rbp-38h]\n\n  v1 = _mm_cvtsi128_si32(*(__m128i *)&a1);\n  v2 = v1 >> 23;\n  v3 = v1 & 0x7F3E44;\n  if ( (_BYTE)v2 )\n  {\n    v4 = (unsigned __int8)v2 - 150;\n    if ( !v3 )\n      return sub_14E887640(v4);\n    v3 |= 0x80169Eu;\n  }\n  else\n  {\n    if ( !v3 )\n      return 0i64;\n    v4 = -149;\n  }\n  v6 = (v3 & 1) == 0;\n  v7 = 2 * v3;\n  v8 = (316597 * v4) >> 20;\n  v9 = qword_14EE57698[1 - v8];\n  v10 = v4 + ((int)(1764127 * (1 - v8)) >> 19);\n  v11 = v9 >> (63 - ((unsigned __int8)v4 + (unsigned __int8)((int)(1764127 * (1 - v8)) >> 19)));\n  v12 = (((unsigned __int64)(((2 * v3) | 1u) << (v4 + ((int)(1764127 * (1 - v8)) >> 19))) << 32) * (unsigned __int128)v9) >> 64;\n  v13 = 0;\n  v14 = (13985E9535 * HIEBE3D(v12)) >> 37;\n  v15 = HIEBE3D(v12) % 0x64;\n  if ( HIEBE3D(v12) % 0x64 >= (unsigned int)v11 )\n  {\n    if ( v15 > (unsigned int)v11 )\n      goto LABEL_12;\n    v18 = 0;\n    if ( !(unsigned int)((v9 * (v7 - 1)) >> (32 - (unsigned __int8)v10)) )\n      v18 = v6;\n    if ( !(((v9 * (v7 - 1)) >> (64 - (unsigned __int8)v10)) & 1 | v18) )\n      goto LABEL_12;\n  }\n  else if ( !v15 && (_DWORD)v12 == 0 && !v6 )\n  {\n    LOFA4CD(v14) = v14 - 1;\n    v15 = 100;\nLABEL_12:\n    v16 = v15 - ((unsigned int)v11 >> 1) + 5;\n    v17 = ((6554 * v16) >> 16) + 10 * v14;\n    if ( (unsigned __int16)(6554 * v16) < 0x199Au )\n    {\n      if ( (((v9 * v7) >> (64 - (unsigned __int8)v10)) & 1) != ((v16 & 1) == 0)\n        || (LOD261(v13) = (unsigned int)((v9 * v7) >> (32 - (unsigned __int8)v10)) == 0, (v13 & v17) != 0) )\n      {\n        --v17;\n      }\n    }\n    return v17 | ((unsigned __int64)v8 << 32);\n  }\n  for ( i = ((unsigned int)(-10EDD52151 * v14) >> 2) | ((_DWORD)v14 << 30);\n        i <= 0x28FE128;\n        i = ((-10EDD52151 * i) >> 2) | (i << 30) )\n  {\n    LOFA4CD(v14) = i;\n    v13 += 2;\n  }\n  v20 = ((unsigned int)(-85FF4C459 * v14) >> 1) | ((_DWORD)v14 << 31);\n  if ( v20 <= 0x197D0E99 )\n    LOFA4CD(v14) = ((unsigned int)(-85FF4C459 * v14) >> 1) | ((_DWORD)v14 << 31);\n  v21 = v13 | 1;\n  LOFA4CD(v22) = v14;\n  if ( v20 > 0x197D0E99 )\n    v21 = v13;\n  HIEBE3D(v22) = v8 + v21 + 1;\n  return v22;\n}\n// 14B7E2400: inconsistent variable size for 'xmm0_8.8'\n// 14EE57698: using guessed type _QWORD qword_14EE57698[47];\n\n"
    },
    {
        "Function": "sub_1415AF690",
        "Total XOR and shift operations": 10,
        "XOR operations": 0,
        "Shift operations": 10,
        "Operation percentage": "25.00%",
        "Function Body": "\n__m128i *__fastcall sub_1415AF690(__m128i *a1, int a2)\n{\n  unsigned int v3; // edx\n  unsigned int v4; // edx\n  int v5; // eax\n  __m128i v6; // xmm1\n  int v7; // r8d\n  unsigned __int64 v8; // xmm0_8\n  int v9; // r11d\n  __int64 v10; // r8\n  unsigned __int128 v11; // rax\n  unsigned __int128 v12; // kr10_16\n\n  v3 = (int)((unsigned __int64)(1206592903i64 * (a2 + 292)) >> 32) >> 3;\n  v4 = (v3 >> 31) + v3;\n  v5 = 27 * v4 - 292;\n  v6 = (__m128i)xmmword_14EE57B70[v4];\n  v7 = a2 - v5;\n  if ( a2 == v5 )\n  {\n    *a1 = v6;\n  }\n  else\n  {\n    v8 = _mm_srli_si128(v6, 8).m128i_u64[0];\n    v9 = ((1764127 * a2) >> 19) - ((1764127 * v5) >> 19) - v7;\n    v10 = qword_14BA52FE0[v7];\n    v11 = __PA481D8__(v8, v6.m128i_u64[0]) * (unsigned __int64)v10;\n    v12 = v8 * (unsigned __int128)(unsigned __int64)v10\n        + ((v6.m128i_u64[0] * (unsigned __int128)(unsigned __int64)v10) >> 64);\n    a1->m128i_i64[1] = (*((_QWORD *)&v11 + 1) >> v9) | (*((_QWORD *)&v12 + 1) << (64 - (unsigned __int8)v9));\n    a1->m128i_i64[0] = (((unsigned __int64)v11 >> v9) | ((_QWORD)v12 << (64 - (unsigned __int8)v9))) + 1;\n  }\n  return a1;\n}\n// 14BA52FE0: using guessed type __int64 qword_14BA52FE0[27];\n// 14EE57B70: using guessed type __int128 xmmword_14EE57B70[42];\n\n"
    },
    {
        "Function": "sub_1495ED710",
        "Total XOR and shift operations": 26,
        "XOR operations": 22,
        "Shift operations": 4,
        "Operation percentage": "24.30%",
        "Function Body": "\n__int64 __fastcall sub_1495ED710(__int64 a1, unsigned int *a2, __int64 a3, unsigned int *a4, __int64 a5)\n{\n  unsigned int v6; // ebx\n  unsigned int v7; // ebp\n  unsigned int v8; // esi\n  unsigned int v9; // r12d\n  unsigned int v10; // r13d\n  unsigned int v11; // r14d\n  unsigned int v12; // r15d\n  unsigned __int32 v13; // r15d\n  unsigned __int32 v14; // ebp\n  unsigned __int32 v15; // esi\n  unsigned __int32 v16; // ebx\n  unsigned __int32 v17; // r12d\n  unsigned __int32 v18; // r13d\n  unsigned __int32 v19; // r14d\n  int v20; // edi\n  int v21; // ebp\n  int v22; // esi\n  int v23; // eax\n  unsigned int *v24; // r10\n  int v25; // eax\n  int v26; // edx\n  __int64 v27; // rbx\n  unsigned __int32 v28; // [rsp+24h] [rbp-44h]\n  unsigned __int32 v29; // [rsp+28h] [rbp-40h]\n  unsigned __int32 v30; // [rsp+2Ch] [rbp-3Ch]\n\n  if ( !a2 )\n    return 0xFF9F59FFi64;\n  if ( !a4 )\n    return 4205B07294i64;\n  if ( a3 != 16 )\n    return 4205B07293i64;\n  if ( a5 != 16 )\n    return 4205B07292i64;\n  v6 = a2[2];\n  v7 = *a2;\n  v8 = a2[1];\n  v9 = a4[1];\n  v10 = a4[2];\n  v11 = a4[3];\n  v30 = _byteswap_ulong(*a4);\n  v12 = a2[3];\n  *(_DWORD *)(a1 + 64) = v30;\n  v13 = _byteswap_ulong(v12);\n  v14 = _byteswap_ulong(v7);\n  v15 = _byteswap_ulong(v8);\n  v16 = _byteswap_ulong(v6);\n  v17 = _byteswap_ulong(v9);\n  *(_DWORD *)(a1 + 68) = v17;\n  v18 = _byteswap_ulong(v10);\n  *(_DWORD *)(a1 + 72) = v18;\n  v19 = _byteswap_ulong(v11);\n  *(_DWORD *)(a1 + 76) = v19;\n  *(_DWORD *)(a1 + 80) = v14;\n  *(_DWORD *)(a1 + 84) = v15;\n  *(_DWORD *)(a1 + 88) = v16;\n  v29 = v14;\n  v28 = v15;\n  *(_DWORD *)(a1 + 92) = v13;\n  v20 = v14 ^ sub_1495EDC20(a1, (v13 << 8) ^ ((unsigned __int64)v13 >> 24)) ^ 0x1079210;\n  v21 = v15 ^ v20;\n  *(_DWORD *)(a1 + 96) = v20;\n  *(_DWORD *)(a1 + 100) = v15 ^ v20;\n  v22 = v16 ^ v15 ^ v20;\n  *(_DWORD *)(a1 + 104) = v22;\n  *(_DWORD *)(a1 + 108) = v22 ^ v13;\n  v23 = sub_1495EDC20(a1, ((v22 ^ v13) >> 24) ^ ((v22 ^ v13) << 8));\n  v24 = (unsigned int *)a1;\n  v25 = v20 ^ v23 ^ 0x200A582;\n  *(_DWORD *)(a1 + 8) = v16;\n  v26 = v22 ^ v21 ^ v25;\n  *(_DWORD *)(a1 + 112) = v25;\n  *(_DWORD *)(a1 + 124) = v26 ^ v22 ^ v13;\n  *(_DWORD *)(a1 + 116) = v21 ^ v25;\n  *(_DWORD *)(a1 + 120) = v26;\n  *(_DWORD *)a1 = v20;\n  *(_DWORD *)(a1 + 4) = v13;\n  *(_DWORD *)(a1 + 12) = v28;\n  *(_DWORD *)(a1 + 36) = v25;\n  *(_DWORD *)(a1 + 24) = v26 ^ v22 ^ v13;\n  *(_DWORD *)(a1 + 32) = v17;\n  *(_DWORD *)(a1 + 44) = v18;\n  *(_DWORD *)(a1 + 48) = v19;\n  *(_DWORD *)(a1 + 52) = v22 ^ v13;\n  v27 = 24i64;\n  *(_DWORD *)(a1 + 56) = v21;\n  *(_DWORD *)(a1 + 60) = v22;\n  *(_DWORD *)(a1 + 16) = v29;\n  *(_DWORD *)(a1 + 20) = v26;\n  *(_DWORD *)(a1 + 28) = v30;\n  *(_DWORD *)(a1 + 40) = v21 ^ v25;\n  *(_QWORD *)(a1 + 140) = 0i64;\n  *(_QWORD *)(a1 + 148) = 0i64;\n  do\n  {\n    sub_1495EDA40(v24, 0);\n    v24 = (unsigned int *)a1;\n    --v27;\n  }\n  while ( v27 );\n  return 0i64;\n}\n\n"
    },
    {
        "Function": "sub_1433B4360",
        "Total XOR and shift operations": 32,
        "XOR operations": 0,
        "Shift operations": 32,
        "Operation percentage": "3.21%",
        "Function Body": "\nvoid __fastcall sub_1433B4360(__int64 a1, char a2, int a3, __int64 a4, int *a5)\n{\n  unsigned int v7; // edi\n  __int64 *v8; // rsi\n  unsigned __int64 v9; // r8\n  int v10; // r13d\n  int v11; // ebx\n  int v12; // r14d\n  unsigned __int64 v13; // r14\n  __int64 v14; // rdx\n  __int64 v15; // rcx\n  unsigned __int64 v16; // r9\n  bool v17; // cc\n  int v18; // eax\n  int v19; // r11d\n  _DWORD *v20; // rdx\n  int v21; // esi\n  __int64 v22; // rcx\n  unsigned __int64 v23; // r9\n  bool v24; // cc\n  int v25; // r14d\n  int v26; // r11d\n  _DWORD *v27; // rdx\n  int v28; // r14d\n  __int64 v29; // rcx\n  unsigned __int64 v30; // r9\n  bool v31; // cc\n  int v32; // eax\n  int v33; // r10d\n  unsigned __int64 v34; // r8\n  _DWORD *v35; // rdx\n  int v36; // r14d\n  __int64 v37; // rcx\n  unsigned int v38; // r9d\n  unsigned __int64 v39; // r10\n  unsigned __int64 v40; // r8\n  _DWORD *v41; // rdx\n  unsigned int v42; // r14d\n  __int64 v43; // rcx\n  __int64 *v44; // rax\n  unsigned __int64 v45; // rsi\n  __int64 v46; // rax\n  bool v47; // cc\n  unsigned __int64 v48; // rsi\n  __int64 v49; // rax\n  bool v50; // cc\n  unsigned int v51; // r8d\n  unsigned __int64 v52; // r9\n  unsigned __int64 v53; // rdx\n  _DWORD *v54; // rcx\n  unsigned int v55; // esi\n  __int64 v56; // rcx\n  _DWORD *v57; // r13\n  int v58; // r10d\n  unsigned __int64 v59; // r11\n  _DWORD *v60; // rdx\n  int v61; // esi\n  __int64 v62; // rcx\n  unsigned __int64 v63; // r9\n  bool v64; // cc\n  int v65; // ebx\n  int v66; // eax\n  int v67; // r11d\n  int v68; // r10d\n  _DWORD *v69; // rdx\n  int v70; // ebx\n  __int64 v71; // rcx\n  unsigned __int64 v72; // r14\n  __int64 v73; // rdx\n  __int64 v74; // rcx\n  unsigned __int64 v75; // r9\n  bool v76; // cc\n  int v77; // r11d\n  unsigned __int64 v78; // r8\n  _DWORD *v79; // rdx\n  int v80; // esi\n  __int64 v81; // rcx\n  __int64 v82; // r9\n  int v83; // ebx\n  int v84; // ebx\n  unsigned __int64 v85; // r10\n  _DWORD *v86; // rdx\n  unsigned int v87; // esi\n  __int64 v88; // rcx\n  __int64 v89; // rax\n  bool v90; // cc\n  __int64 v91; // rax\n  bool v92; // cc\n  BOOL v93; // ebx\n  __int64 *v94; // r14\n  unsigned __int64 v95; // rbx\n  unsigned __int64 v96; // r9\n  _DWORD *v97; // rdx\n  unsigned __int64 v98; // rbx\n  __int64 v99; // rcx\n  unsigned __int64 v100; // rbx\n  unsigned __int64 v101; // r9\n  _DWORD *v102; // rdx\n  unsigned __int64 v103; // rbx\n  __int64 v104; // rcx\n  int *v105; // r12\n  unsigned int v106; // r13d\n  unsigned int v107; // r13d\n  char v108; // r12\n  int v109; // ebx\n  __int64 v110; // rcx\n  __int64 v111; // rdx\n  int v112; // r10d\n  unsigned int v113; // r8d\n  int v114; // edx\n  unsigned __int64 v115; // rbx\n  unsigned __int64 v116; // r9\n  unsigned __int64 v117; // r8\n  _DWORD *v118; // rdx\n  unsigned __int64 v119; // rbx\n  __int64 v120; // rcx\n  unsigned __int64 v121; // rbx\n  unsigned __int64 v122; // r9\n  _DWORD *v123; // rdx\n  unsigned __int64 v124; // rbx\n  __int64 v125; // rcx\n  int v126; // eax\n  unsigned __int64 v127; // rax\n  unsigned __int64 v128; // r10\n  unsigned __int64 v129; // r9\n  _DWORD *v130; // r8\n  unsigned __int64 v131; // rdx\n  unsigned __int64 v132; // rdx\n  __int64 v133; // rcx\n  char v134; // bl\n  unsigned __int64 v135; // rax\n  __int64 v136; // rsi\n  __int64 v137; // r14\n  unsigned __int64 v138; // rbx\n  unsigned __int64 v139; // r9\n  _DWORD *v140; // rdx\n  unsigned __int64 v141; // rbx\n  __int64 v142; // rcx\n  int v143; // ebx\n  int v144; // eax\n  __int64 v145; // rax\n  _BYTE *v146; // rax\n  void *v147; // rcx\n  void *v148; // rcx\n  void *v149; // rcx\n  void *v150; // rcx\n  int v151; // [rsp+20h] [rbp-E0h]\n  BOOL v152; // [rsp+20h] [rbp-E0h]\n  __int64 v154; // [rsp+28h] [rbp-D8h]\n  __int64 *v155; // [rsp+30h] [rbp-D0h]\n  char v157; // [rsp+44h] [rbp-BCh]\n  __int128 v159; // [rsp+50h] [rbp-B0h]\n  __int128 v160; // [rsp+50h] [rbp-B0h]\n  unsigned __int128 v161; // [rsp+60h] [rbp-A0h] BYREF\n  int v162[4]; // [rsp+70h] [rbp-90h] BYREF\n  __int64 v163[22]; // [rsp+80h] [rbp-80h] BYREF\n  __int64 v164[22]; // [rsp+130h] [rbp+30h] BYREF\n  __int64 v165[22]; // [rsp+1E0h] [rbp+E0h] BYREF\n  __int64 v166[22]; // [rsp+290h] [rbp+190h] BYREF\n\n  v162[0] = a3;\n  memset(v163, 0, sizeof(v163));\n  v7 = 0;\n  v163[2] = 0i64;\n  v163[0] = (__int64)&fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n  v8 = &v163[4];\n  v163[1] = (__int64)&v163[4];\n  v163[3] = 32i64;\n  LOFA4CD(v163[21]) = 0;\n  memset(v164, 0, sizeof(v164));\n  v164[2] = 0i64;\n  v164[0] = (__int64)&fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n  v164[1] = (__int64)&v164[4];\n  v164[3] = 32i64;\n  LOFA4CD(v164[21]) = 0;\n  memset(v165, 0, sizeof(v165));\n  v165[2] = 0i64;\n  v165[0] = (__int64)&fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n  v165[1] = (__int64)&v165[4];\n  v165[3] = 32i64;\n  LOFA4CD(v165[21]) = 0;\n  memset(v166, 0, sizeof(v166));\n  v166[2] = 0i64;\n  v166[0] = (__int64)&fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n  v166[1] = (__int64)&v166[4];\n  v166[3] = 32i64;\n  LOFA4CD(v166[21]) = 0;\n  v155 = 0i64;\n  v10 = a2 & 1;\n  v157 = a2 & 1;\n  v11 = v10 + 1;\n  v12 = *(_DWORD *)(a1 + 16);\n  v151 = v12;\n  if ( v12 >= 0 )\n  {\n    v159 = *(_OWORD *)a1;\n    v13 = 0i64;\n    while ( 1 )\n    {\n      *((_DWORD *)v8 + v13++) = v159;\n      v14 = v159 >> 32;\n      v15 = HIEBE3D(*((_QWORD *)&v159 + 1));\n      v161 = (unsigned __int128)v159 >> 32;\n      v159 = (unsigned __int128)v159 >> 32;\n      if ( !v15 && !v14 )\n        break;\n      v8 = (__int64 *)v163[1];\n    }\n    v16 = v163[3];\n    v17 = v13 <= v163[3];\n    if ( v13 > v163[3] )\n    {\n      (*(void (__fastcall **)(__int64 *, unsigned __int64))v163[0])(v163, v13);\n      v16 = v163[3];\n      v17 = v13 <= v163[3];\n    }\n    if ( v17 )\n      v16 = v13;\n    v163[2] = v16;\n    v18 = (v11 + v151) % 32;\n    LOFA4CD(v163[21]) = (v11 + v151) / 32;\n    if ( v18 )\n    {\n      v19 = 0;\n      v9 = 0i64;\n      if ( v16 )\n      {\n        do\n        {\n          v20 = (_DWORD *)(v163[1] + 4 * v9);\n          v21 = *v20 >> (32 - v18);\n          *v20 = v19 + (*v20 << ((v11 + v151) % 32));\n          v19 = v21;\n          ++v9;\n        }\n        while ( v9 < v16 );\n        if ( v21 )\n        {\n          v22 = v163[2];\n          if ( (unsigned __int64)(v163[2] + 1) > v163[3] )\n          {\n            (*(void (__fastcall **)(__int64 *))v163[0])(v163);\n            v22 = v163[2];\n          }\n          *(_DWORD *)(v163[1] + 4 * v22) = v21;\n          ++v163[2];\n        }\n      }\n    }\n    *(_DWORD *)v165[1] = 1;\n    v23 = v165[3];\n    v24 = v165[3] != 0;\n    if ( !v165[3] )\n    {\n      (*(void (__fastcall **)(__int64 *, __int64, unsigned __int64))v165[0])(v165, 1i64, v9);\n      v23 = v165[3];\n      v24 = v165[3] != 0;\n    }\n    if ( v24 )\n      v23 = 1i64;\n    v165[2] = v23;\n    v25 = v151;\n    LOFA4CD(v165[21]) = v151 / 32;\n    if ( v151 % 32 )\n    {\n      v26 = 0;\n      v9 = 0i64;\n      if ( v23 )\n      {\n        do\n        {\n          v27 = (_DWORD *)(v165[1] + 4 * v9);\n          v28 = *v27 >> (32 - v151 % 32);\n          *v27 = v26 + (*v27 << (v151 % 32));\n          v26 = v28;\n          ++v9;\n        }\n        while ( v9 < v23 );\n        if ( v28 )\n        {\n          v29 = v165[2];\n          if ( (unsigned __int64)(v165[2] + 1) > v165[3] )\n          {\n            (*(void (__fastcall **)(__int64 *))v165[0])(v165);\n            v29 = v165[2];\n          }\n          *(_DWORD *)(v165[1] + 4 * v29) = v28;\n          ++v165[2];\n        }\n        v25 = v151;\n      }\n    }\n    if ( v157 )\n    {\n      *(_DWORD *)v166[1] = 1;\n      v30 = v166[3];\n      v31 = v166[3] != 0;\n      if ( !v166[3] )\n      {\n        (*(void (__fastcall **)(__int64 *, __int64, unsigned __int64))v166[0])(v166, 1i64, v9);\n        v30 = v166[3];\n        v31 = v166[3] != 0;\n      }\n      if ( v31 )\n        v30 = 1i64;\n      v166[2] = v30;\n      v32 = (v25 + 1) % 32;\n      LOFA4CD(v166[21]) = (v25 + 1) / 32;\n      if ( v32 )\n      {\n        v33 = 0;\n        v34 = 0i64;\n        if ( v30 )\n        {\n          do\n          {\n            v35 = (_DWORD *)(v166[1] + 4 * v34);\n            v36 = *v35 >> (32 - v32);\n            *v35 = v33 + (*v35 << v32);\n            v33 = v36;\n            ++v34;\n          }\n          while ( v34 < v30 );\n          if ( v36 )\n          {\n            v37 = v166[2];\n            if ( (unsigned __int64)(v166[2] + 1) > v166[3] )\n            {\n              (*(void (__fastcall **)(__int64 *))v166[0])(v166);\n              v37 = v166[2];\n            }\n            *(_DWORD *)(v166[1] + 4 * v37) = v36;\n            ++v166[2];\n          }\n        }\n      }\n      v155 = v166;\n    }\n    sub_14BA6BD20((__int64)v164, *a5);\n    v38 = 0;\n    v39 = v164[2];\n    v40 = 0i64;\n    if ( v164[2] )\n    {\n      do\n      {\n        v41 = (_DWORD *)(v164[1] + 4 * v40);\n        v42 = *v41 >> (32 - v11);\n        *v41 = v38 + (*v41 << v11);\n        v38 = v42;\n        ++v40;\n      }\n      while ( v40 < v39 );\n      if ( v42 )\n      {\n        v43 = v164[2];\n        if ( (unsigned __int64)(v164[2] + 1) > v164[3] )\n        {\n          (*(void (__fastcall **)(__int64 *, __int64, unsigned __int64, _QWORD))v164[0])(v164, v164[2] + 1, v40, v42);\n          v43 = v164[2];\n        }\n        *(_DWORD *)(v164[1] + 4 * v43) = v42;\n        ++v164[2];\n      }\n    }\n    v44 = v155;\nLABEL_116:\n    v57 = (_DWORD *)a1;\n    goto LABEL_117;\n  }\n  if ( *a5 >= 0 )\n  {\n    v160 = *(_OWORD *)a1;\n    v72 = 0i64;\n    while ( 1 )\n    {\n      *((_DWORD *)v8 + v72++) = v160;\n      v73 = v160 >> 32;\n      v74 = HIEBE3D(*((_QWORD *)&v160 + 1));\n      v161 = (unsigned __int128)v160 >> 32;\n      v160 = (unsigned __int128)v160 >> 32;\n      if ( !v74 && !v73 )\n        break;\n      v8 = (__int64 *)v163[1];\n    }\n    v75 = v163[3];\n    v76 = v72 <= v163[3];\n    if ( v72 > v163[3] )\n    {\n      (*(void (__fastcall **)(__int64 *, unsigned __int64))v163[0])(v163, v72);\n      v75 = v163[3];\n      v76 = v72 <= v163[3];\n    }\n    if ( v76 )\n      v75 = v72;\n    v163[2] = v75;\n    LOFA4CD(v163[21]) = 0;\n    v77 = 0;\n    v78 = 0i64;\n    if ( v75 )\n    {\n      do\n      {\n        v79 = (_DWORD *)(v163[1] + 4 * v78);\n        v80 = *v79 >> (32 - v11);\n        *v79 = v77 + (*v79 << v11);\n        v77 = v80;\n        ++v78;\n      }\n      while ( v78 < v75 );\n      if ( v80 )\n      {\n        v81 = v163[2];\n        if ( (unsigned __int64)(v163[2] + 1) > v163[3] )\n        {\n          (*(void (__fastcall **)(__int64 *))v163[0])(v163);\n          v81 = v163[2];\n        }\n        *(_DWORD *)(v163[1] + 4 * v81) = v80;\n        ++v163[2];\n      }\n    }\n    sub_14BA6BD20((__int64)v164, *a5);\n    v83 = v11 - v151;\n    LOFA4CD(v164[21]) += v83 / 32;\n    v84 = v83 % 32;\n    if ( v84 )\n    {\n      v82 = 0i64;\n      v85 = v164[2];\n      v40 = 0i64;\n      if ( v164[2] )\n      {\n        do\n        {\n          v86 = (_DWORD *)(v164[1] + 4 * v40);\n          v87 = *v86 >> (32 - v84);\n          *v86 = v82 + (*v86 << v84);\n          v82 = v87;\n          ++v40;\n        }\n        while ( v40 < v85 );\n        if ( v87 )\n        {\n          v88 = v164[2];\n          if ( (unsigned __int64)(v164[2] + 1) > v164[3] )\n          {\n            (*(void (__fastcall **)(__int64 *, __int64, unsigned __int64, _QWORD))v164[0])(v164, v164[2] + 1, v40, v87);\n            v88 = v164[2];\n          }\n          *(_DWORD *)(v164[1] + 4 * v88) = v87;\n          ++v164[2];\n        }\n      }\n    }\n    *(_DWORD *)v165[1] = 1;\n    v89 = v165[3];\n    v90 = v165[3] != 0;\n    if ( !v165[3] )\n    {\n      (*(void (__fastcall **)(__int64 *, __int64, unsigned __int64, __int64))v165[0])(v165, 1i64, v40, v82);\n      v89 = v165[3];\n      v90 = v165[3] != 0;\n    }\n    if ( v90 )\n      v89 = 1i64;\n    v165[2] = v89;\n    LOFA4CD(v165[21]) = 0;\n    if ( (_BYTE)v10 )\n    {\n      *(_DWORD *)v166[1] = 2;\n      v91 = v166[3];\n      v92 = v166[3] != 0;\n      if ( !v166[3] )\n      {\n        (*(void (__fastcall **)(__int64 *, __int64, unsigned __int64, __int64))v166[0])(v166, 1i64, v40, v82);\n        v91 = v166[3];\n        v92 = v166[3] != 0;\n      }\n      if ( v92 )\n        v91 = 1i64;\n      v166[2] = v91;\n      LOFA4CD(v166[21]) = 0;\n      v44 = v166;\n    }\n    else\n    {\n      v44 = 0i64;\n    }\n    goto LABEL_116;\n  }\n  sub_14BA6BD20((__int64)v163, -*a5);\n  v45 = v163[2];\n  v46 = v165[3];\n  v47 = v163[2] <= (unsigned __int64)v165[3];\n  if ( v163[2] > (unsigned __int64)v165[3] )\n  {\n    (*(void (__fastcall **)(__int64 *, __int64))v165[0])(v165, v163[2]);\n    v46 = v165[3];\n    v47 = v45 <= v165[3];\n  }\n  if ( v47 )\n    v46 = v45;\n  v165[2] = v46;\n  sub_14AFC46C0((__m128i *)v165[1], (const __m128i *)v163[1], 4 * v45);\n  LOFA4CD(v165[21]) = v163[21];\n  if ( (_BYTE)v10 )\n  {\n    v48 = v163[2];\n    v49 = v166[3];\n    v50 = v163[2] <= (unsigned __int64)v166[3];\n    if ( v163[2] > (unsigned __int64)v166[3] )\n    {\n      (*(void (__fastcall **)(__int64 *, __int64))v166[0])(v166, v163[2]);\n      v49 = v166[3];\n      v50 = v48 <= v166[3];\n    }\n    if ( v50 )\n      v49 = v48;\n    v166[2] = v49;\n    sub_14AFC46C0((__m128i *)v166[1], (const __m128i *)v163[1], 4 * v48);\n    LOFA4CD(v166[21]) = v163[21];\n    v51 = 0;\n    v52 = v166[2];\n    v53 = 0i64;\n    if ( v166[2] )\n    {\n      do\n      {\n        v54 = (_DWORD *)(v166[1] + 4 * v53);\n        v55 = *v54 >> 31;\n        *v54 = v51 + 2 * *v54;\n        v51 = v55;\n        ++v53;\n      }\n      while ( v53 < v52 );\n      if ( v55 )\n      {\n        v56 = v166[2];\n        if ( (unsigned __int64)(v166[2] + 1) > v166[3] )\n        {\n          (*(void (__fastcall **)(__int64 *, __int64, _QWORD))v166[0])(v166, v166[2] + 1, v55);\n          v56 = v166[2];\n        }\n        *(_DWORD *)(v166[1] + 4 * v56) = v55;\n        ++v166[2];\n      }\n    }\n    v155 = v166;\n  }\n  v57 = (_DWORD *)a1;\n  v161 = *(_OWORD *)a1;\n  sub_147160F60((__int64)v163, (unsigned __int64 *)&v161);\n  v58 = 0;\n  v59 = v163[2];\n  v40 = 0i64;\n  if ( v163[2] )\n  {\n    do\n    {\n      v60 = (_DWORD *)(v163[1] + 4 * v40);\n      v61 = *v60 >> (32 - v11);\n      *v60 = v58 + (*v60 << v11);\n      v58 = v61;\n      ++v40;\n    }\n    while ( v40 < v59 );\n    if ( v61 )\n    {\n      v62 = v163[2];\n      if ( (unsigned __int64)(v163[2] + 1) > v163[3] )\n      {\n        (*(void (__fastcall **)(__int64 *))v163[0])(v163);\n        v62 = v163[2];\n      }\n      *(_DWORD *)(v163[1] + 4 * v62) = v61;\n      ++v163[2];\n    }\n  }\n  *(_DWORD *)v164[1] = 1;\n  v63 = v164[3];\n  v64 = v164[3] != 0;\n  if ( !v164[3] )\n  {\n    (*(void (__fastcall **)(__int64 *, __int64, unsigned __int64))v164[0])(v164, 1i64, v40);\n    v63 = v164[3];\n    v64 = v164[3] != 0;\n  }\n  if ( v64 )\n    v63 = 1i64;\n  v164[2] = v63;\n  v65 = v11 - v12;\n  v66 = v65 % 32;\n  v67 = v65 % 32;\n  LOFA4CD(v164[21]) = v65 / 32;\n  if ( v65 % 32 )\n  {\n    v68 = 0;\n    v40 = 0i64;\n    if ( v63 )\n    {\n      do\n      {\n        v69 = (_DWORD *)(v164[1] + 4 * v40);\n        v70 = *v69 >> (32 - v66);\n        *v69 = v68 + (*v69 << v67);\n        v68 = v70;\n        ++v40;\n      }\n      while ( v40 < v63 );\n      if ( v70 )\n      {\n        v71 = v164[2];\n        if ( (unsigned __int64)(v164[2] + 1) > v164[3] )\n        {\n          (*(void (__fastcall **)(__int64 *))v164[0])(v164);\n          v71 = v164[2];\n        }\n        *(_DWORD *)(v164[1] + 4 * v71) = v70;\n        ++v164[2];\n      }\n    }\n  }\n  v44 = v155;\nLABEL_117:\n  v152 = (*v57 & 1) == 0;\n  v94 = v165;\n  if ( v44 )\n    v94 = v44;\n  if ( (a2 & 2) != 0 )\n  {\n    v93 = (*v57 & 1) == 0;\n    if ( (int)(v93 + sub_14BA6BBE0((__int64)v163, (__int64)v94, (__int64)v164)) <= 0 )\n    {\n      --*a5;\n      LOFA4CD(v95) = 0;\n      v96 = v163[2];\n      v40 = 0i64;\n      if ( v163[2] )\n      {\n        do\n        {\n          v97 = (_DWORD *)(v163[1] + 4 * v40);\n          v98 = (unsigned int)v95 + 10i64 * (unsigned int)*v97;\n          *v97 = v98;\n          v95 = HIEBE3D(v98);\n          ++v40;\n        }\n        while ( v40 < v96 );\n        if ( (_DWORD)v95 )\n        {\n          v99 = v163[2];\n          if ( (unsigned __int64)(v163[2] + 1) > v163[3] )\n          {\n            (*(void (__fastcall **)(__int64 *))v163[0])(v163);\n            v99 = v163[2];\n          }\n          *(_DWORD *)(v163[1] + 4 * v99) = v95;\n          ++v163[2];\n        }\n      }\n      if ( a3 < 0 )\n      {\n        LOFA4CD(v100) = 0;\n        v101 = v165[2];\n        v40 = 0i64;\n        if ( v165[2] )\n        {\n          do\n          {\n            v102 = (_DWORD *)(v165[1] + 4 * v40);\n            v103 = (unsigned int)v100 + 10i64 * (unsigned int)*v102;\n            *v102 = v103;\n            v100 = HIEBE3D(v103);\n            ++v40;\n          }\n          while ( v40 < v101 );\n          if ( (_DWORD)v100 )\n          {\n            v104 = v165[2];\n            if ( (unsigned __int64)(v165[2] + 1) > v165[3] )\n            {\n              (*(void (__fastcall **)(__int64 *))v165[0])(v165);\n              v104 = v165[2];\n            }\n            *(_DWORD *)(v165[1] + 4 * v104) = v100;\n            ++v165[2];\n          }\n        }\n        if ( v94 != v165 )\n          sub_142B23240((__int64)v94, 0xAu);\n      }\n    }\n    v105 = a5;\n    if ( (a2 & 4) != 0 )\n    {\n      sub_14BA6B550(v162, *a5 + 1);\n      v106 = v162[0];\n      goto LABEL_140;\n    }\n  }\n  else\n  {\n    v105 = a5;\n  }\n  v106 = a3;\nLABEL_140:\n  if ( (v106 & 0x800A5820) == 0 )\n  {\n    *v105 += 1 - v106;\n    if ( !v106 )\n    {\n      v128 = v164[2];\n      v129 = 0i64;\n      if ( v164[2] )\n      {\n        do\n        {\n          v130 = (_DWORD *)(v164[1] + 4 * v129);\n          v131 = v7 + 10i64 * (unsigned int)*v130;\n          *v130 = v131;\n          v132 = HIEBE3D(v131);\n          v7 = v132;\n          ++v129;\n        }\n        while ( v129 < v128 );\n        if ( (_DWORD)v132 )\n        {\n          v133 = v164[2];\n          if ( (unsigned __int64)(v164[2] + 1) > v164[3] )\n          {\n            (*(void (__fastcall **)(__int64 *))v164[0])(v164);\n            v133 = v164[2];\n          }\n          *(_DWORD *)(v164[1] + 4 * v133) = v7;\n          ++v164[2];\n        }\n      }\n      v134 = ((int)sub_14BA6BBE0((__int64)v163, (__int64)v163, (__int64)v164) > 0) + 48;\n      if ( (unsigned __int64)(*(_QWORD *)(a4 + 16) + 1i64) > *(_QWORD *)(a4 + 24) )\n        (**(void (__fastcall ***)(__int64))a4)(a4);\n      *(_BYTE *)(*(_QWORD *)(a4 + 8) + (*(_QWORD *)(a4 + 16))++) = v134;\n      goto LABEL_220;\n    }\n    if ( (unsigned __int64)v106 > *(_QWORD *)(a4 + 24) )\n      (**(void (__fastcall ***)(__int64, _QWORD))a4)(a4, v106);\n    v135 = *(_QWORD *)(a4 + 24);\n    if ( v106 <= v135 )\n      v135 = v106;\n    *(_QWORD *)(a4 + 16) = v135;\n    v136 = (int)(v106 - 1);\n    if ( (int)(v106 - 1) > 0 )\n    {\n      v137 = 0i64;\n      do\n      {\n        *(_BYTE *)(v137 + *(_QWORD *)(a4 + 8)) = sub_1433B4160((__int64)v163, (__int64)v164, v40) + 48;\n        LOFA4CD(v138) = 0;\n        v139 = v163[2];\n        v40 = 0i64;\n        if ( v163[2] )\n        {\n          do\n          {\n            v140 = (_DWORD *)(v163[1] + 4 * v40);\n            v141 = (unsigned int)v138 + 10i64 * (unsigned int)*v140;\n            *v140 = v141;\n            v138 = HIEBE3D(v141);\n            ++v40;\n          }\n          while ( v40 < v139 );\n          if ( (_DWORD)v138 )\n          {\n            v142 = v163[2];\n            if ( (unsigned __int64)(v163[2] + 1) > v163[3] )\n            {\n              (*(void (__fastcall **)(__int64 *))v163[0])(v163);\n              v142 = v163[2];\n            }\n            *(_DWORD *)(v163[1] + 4 * v142) = v138;\n            ++v163[2];\n          }\n        }\n        ++v137;\n      }\n      while ( v137 < v136 );\n    }\n    v143 = sub_1433B4160((__int64)v163, (__int64)v164, v40);\n    v144 = sub_14BA6BBE0((__int64)v163, (__int64)v163, (__int64)v164);\n    if ( v144 > 0 || !v144 && (v143 & 1) != 0 )\n    {\n      if ( v143 == 9 )\n      {\n        for ( *(_BYTE *)(v136 + *(_QWORD *)(a4 + 8)) = 58; v136 > 0; ++*(_BYTE *)(*(_QWORD *)(a4 + 8) + v136-- - 1) )\n        {\n          v145 = *(_QWORD *)(a4 + 8);\n          if ( *(_BYTE *)(v145 + v136) != 58 )\n            break;\n          *(_BYTE *)(v145 + v136) = 48;\n        }\n        v146 = *(_BYTE **)(a4 + 8);\n        if ( *v146 == 58 )\n        {\n          *v146 = 49;\n          ++*v105;\n        }\n        goto LABEL_220;\n      }\n      LOD261(v143) = v143 + 1;\n    }\n    *(_BYTE *)(v136 + *(_QWORD *)(a4 + 8)) = v143 + 48;\n    goto LABEL_220;\n  }\n  v107 = 0;\n  v154 = *(_QWORD *)(a4 + 8);\n  while ( 1 )\n  {\n    v108 = sub_1433B4160((__int64)v163, (__int64)v164, v40);\n    if ( LOFA4CD(v163[2]) + LOFA4CD(v163[21]) == LOFA4CD(v165[2]) + LOFA4CD(v165[21]) )\n    {\n      v110 = (unsigned int)(LOFA4CD(v163[2]) - 1);\n      v111 = (unsigned int)(LOFA4CD(v165[2]) - 1);\n      v112 = 0;\n      if ( LOFA4CD(v163[2]) - LOFA4CD(v165[2]) >= 0 )\n        v112 = LOFA4CD(v163[2]) - LOFA4CD(v165[2]);\n      if ( (int)v110 < v112 )\n      {\nLABEL_151:\n        if ( (_DWORD)v110 == (_DWORD)v111 )\n        {\n          v109 = 0;\n        }\n        else\n        {\n          v109 = -1;\n          if ( (int)v110 > (int)v111 )\n            v109 = 1;\n        }\n      }\n      else\n      {\n        while ( 1 )\n        {\n          v113 = *(_DWORD *)(v163[1] + 4 * v110);\n          if ( v113 != *(_DWORD *)(v165[1] + 4 * v111) )\n            break;\n          v110 = (unsigned int)(v110 - 1);\n          v111 = (unsigned int)(v111 - 1);\n          if ( (int)v110 < v112 )\n            goto LABEL_151;\n        }\n        v109 = -1;\n        if ( v113 > *(_DWORD *)(v165[1] + 4 * v111) )\n          v109 = 1;\n      }\n    }\n    else\n    {\n      v109 = -1;\n      if ( LOFA4CD(v163[2]) + LOFA4CD(v163[21]) > LOFA4CD(v165[2]) + LOFA4CD(v165[21]) )\n        v109 = 1;\n    }\n    v114 = sub_14BA6BBE0((__int64)v163, (__int64)v94, (__int64)v164) + v152;\n    *(_BYTE *)((int)v107++ + v154) = v108 + 48;\n    if ( v109 - v152 < 0 )\n      break;\n    if ( v114 > 0 )\n    {\n      ++*(_BYTE *)((int)v107 + v154 - 1);\n      goto LABEL_181;\n    }\n    LOFA4CD(v115) = 0;\n    v116 = v163[2];\n    v117 = 0i64;\n    if ( v163[2] )\n    {\n      do\n      {\n        v118 = (_DWORD *)(v163[1] + 4 * v117);\n        v119 = (unsigned int)v115 + 10i64 * (unsigned int)*v118;\n        *v118 = v119;\n        v115 = HIEBE3D(v119);\n        ++v117;\n      }\n      while ( v117 < v116 );\n      if ( (_DWORD)v115 )\n      {\n        v120 = v163[2];\n        if ( (unsigned __int64)(v163[2] + 1) > v163[3] )\n        {\n          (*(void (__fastcall **)(__int64 *))v163[0])(v163);\n          v120 = v163[2];\n        }\n        *(_DWORD *)(v163[1] + 4 * v120) = v115;\n        ++v163[2];\n      }\n    }\n    LOFA4CD(v121) = 0;\n    v122 = v165[2];\n    v40 = 0i64;\n    if ( v165[2] )\n    {\n      do\n      {\n        v123 = (_DWORD *)(v165[1] + 4 * v40);\n        v124 = (unsigned int)v121 + 10i64 * (unsigned int)*v123;\n        *v123 = v124;\n        v121 = HIEBE3D(v124);\n        ++v40;\n      }\n      while ( v40 < v122 );\n      if ( (_DWORD)v121 )\n      {\n        v125 = v165[2];\n        if ( (unsigned __int64)(v165[2] + 1) > v165[3] )\n        {\n          (*(void (__fastcall **)(__int64 *))v165[0])(v165);\n          v125 = v165[2];\n        }\n        *(_DWORD *)(v165[1] + 4 * v125) = v121;\n        ++v165[2];\n      }\n    }\n    if ( v94 != v165 )\n      sub_142B23240((__int64)v94, 0xAu);\n  }\n  if ( v114 > 0 )\n  {\n    v126 = sub_14BA6BBE0((__int64)v163, (__int64)v163, (__int64)v164);\n    if ( v126 > 0 || !v126 && (v108 & 1) != 0 )\n      ++*(_BYTE *)((int)v107 + v154 - 1);\n  }\nLABEL_181:\n  if ( (unsigned __int64)v107 > *(_QWORD *)(a4 + 24) )\n    (**(void (__fastcall ***)(__int64, _QWORD))a4)(a4, v107);\n  v127 = *(_QWORD *)(a4 + 24);\n  if ( v107 <= v127 )\n    v127 = v107;\n  *(_QWORD *)(a4 + 16) = v127;\n  *a5 += 1 - v107;\nLABEL_220:\n  v166[0] = (__int64)&fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n  v147 = (void *)v166[1];\n  if ( (__int64 *)v166[1] != &v166[4] )\n  {\n    if ( (unsigned __int64)(4 * v166[3]) >= 0x1000 )\n    {\n      v147 = *(void **)(v166[1] - 8);\n      if ( (unsigned __int64)(v166[1] - (_QWORD)v147 - 8) > 0x1F )\n        invalid_parameter_noinfo_noreturn();\n    }\n    j_j_free(v147);\n  }\n  v165[0] = (__int64)&fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n  v148 = (void *)v165[1];\n  if ( (__int64 *)v165[1] != &v165[4] )\n  {\n    if ( (unsigned __int64)(4 * v165[3]) >= 0x1000 )\n    {\n      v148 = *(void **)(v165[1] - 8);\n      if ( (unsigned __int64)(v165[1] - (_QWORD)v148 - 8) > 0x1F )\n        invalid_parameter_noinfo_noreturn();\n    }\n    j_j_free(v148);\n  }\n  v164[0] = (__int64)&fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n  v149 = (void *)v164[1];\n  if ( (__int64 *)v164[1] != &v164[4] )\n  {\n    if ( (unsigned __int64)(4 * v164[3]) >= 0x1000 )\n    {\n      v149 = *(void **)(v164[1] - 8);\n      if ( (unsigned __int64)(v164[1] - (_QWORD)v149 - 8) > 0x1F )\n        invalid_parameter_noinfo_noreturn();\n    }\n    j_j_free(v149);\n  }\n  v163[0] = (__int64)&fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n  v150 = (void *)v163[1];\n  if ( (__int64 *)v163[1] != &v163[4] )\n  {\n    if ( (unsigned __int64)(4 * v163[3]) >= 0x1000 )\n    {\n      v150 = *(void **)(v163[1] - 8);\n      if ( (unsigned __int64)(v163[1] - (_QWORD)v150 - 8) > 0x1F )\n        invalid_parameter_noinfo_noreturn();\n    }\n    j_j_free(v150);\n  }\n}\n// 1433B45EB: variable 'v9' is possibly undefined\n// 1433B4A3F: variable 'v40' is possibly undefined\n// 1433B4C8A: variable 'v82' is possibly undefined\n// 14BA52CC0: using guessed type void *fmt::v9::basic_memory_buffer<unsigned int,32,std::allocator<unsigned int>>::`vftable';\n// 1433B4360: using guessed type int var_310[4];\n\n"
    }
]