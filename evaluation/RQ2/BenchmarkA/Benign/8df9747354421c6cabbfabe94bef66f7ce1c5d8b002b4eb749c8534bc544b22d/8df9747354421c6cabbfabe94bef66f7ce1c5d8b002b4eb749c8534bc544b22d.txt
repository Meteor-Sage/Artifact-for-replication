[
    {
        "Function": "sub_148C3C510",
        "Total XOR and shift operations": 272,
        "XOR operations": 252,
        "Shift operations": 20,
        "Operation percentage": "180.13%",
        "Function Body": "\n__int64 __fastcall sub_148C3C510(_DWORD *a1, int a2, unsigned __int8 *a3, _BYTE *a4)\n{\n  __int64 result; // rax\n  unsigned int v5; // [rsp+0h] [rbp-28h]\n  unsigned int v6; // [rsp+0h] [rbp-28h]\n  unsigned int v7; // [rsp+0h] [rbp-28h]\n  unsigned int v8; // [rsp+0h] [rbp-28h]\n  unsigned int v9; // [rsp+0h] [rbp-28h]\n  unsigned int v10; // [rsp+0h] [rbp-28h]\n  unsigned int v11; // [rsp+0h] [rbp-28h]\n  unsigned int v12; // [rsp+0h] [rbp-28h]\n  unsigned int v13; // [rsp+4h] [rbp-24h]\n  unsigned int v14; // [rsp+4h] [rbp-24h]\n  unsigned int v15; // [rsp+4h] [rbp-24h]\n  unsigned int v16; // [rsp+4h] [rbp-24h]\n  unsigned int v17; // [rsp+4h] [rbp-24h]\n  unsigned int v18; // [rsp+4h] [rbp-24h]\n  unsigned int v19; // [rsp+4h] [rbp-24h]\n  unsigned int v20; // [rsp+4h] [rbp-24h]\n  unsigned int v21; // [rsp+8h] [rbp-20h]\n  unsigned int v22; // [rsp+8h] [rbp-20h]\n  unsigned int v23; // [rsp+8h] [rbp-20h]\n  unsigned int v24; // [rsp+8h] [rbp-20h]\n  unsigned int v25; // [rsp+8h] [rbp-20h]\n  unsigned int v26; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v27; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v28; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v29; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v30; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v31; // [rsp+10h] [rbp-18h]\n  unsigned int v32; // [rsp+10h] [rbp-18h]\n  unsigned int v33; // [rsp+10h] [rbp-18h]\n  unsigned int v34; // [rsp+10h] [rbp-18h]\n  unsigned int v35; // [rsp+10h] [rbp-18h]\n  unsigned int v36; // [rsp+10h] [rbp-18h]\n  unsigned int v37; // [rsp+10h] [rbp-18h]\n  unsigned int v38; // [rsp+10h] [rbp-18h]\n  unsigned int v39; // [rsp+14h] [rbp-14h]\n  unsigned int v40; // [rsp+14h] [rbp-14h]\n  unsigned int v41; // [rsp+14h] [rbp-14h]\n  unsigned int v42; // [rsp+14h] [rbp-14h]\n  unsigned int v43; // [rsp+14h] [rbp-14h]\n  unsigned int v44; // [rsp+14h] [rbp-14h]\n  unsigned int v45; // [rsp+14h] [rbp-14h]\n  unsigned int v46; // [rsp+14h] [rbp-14h]\n  unsigned int v47; // [rsp+18h] [rbp-10h]\n  unsigned int v48; // [rsp+18h] [rbp-10h]\n  unsigned int v49; // [rsp+18h] [rbp-10h]\n  unsigned int v50; // [rsp+18h] [rbp-10h]\n  unsigned int v51; // [rsp+18h] [rbp-10h]\n  unsigned int v52; // [rsp+1Ch] [rbp-Ch]\n  unsigned int v53; // [rsp+1Ch] [rbp-Ch]\n  unsigned int v54; // [rsp+1Ch] [rbp-Ch]\n  unsigned int v55; // [rsp+1Ch] [rbp-Ch]\n  unsigned int v56; // [rsp+1Ch] [rbp-Ch]\n  _DWORD *v57; // [rsp+30h] [rbp+8h]\n\n  v13 = *a1 ^ a3[3] ^ (a3[2] << 8) ^ (a3[1] << 16) ^ (*a3 << 24);\n  v39 = a1[1] ^ a3[7] ^ (a3[6] << 8) ^ (a3[5] << 16) ^ (a3[4] << 24);\n  v31 = a1[2] ^ a3[11] ^ (a3[10] << 8) ^ (a3[9] << 16) ^ (a3[8] << 24);\n  v5 = a1[3] ^ a3[15] ^ (a3[14] << 8) ^ (a3[13] << 16) ^ (a3[12] << 24);\n  v52 = a1[4] ^ dword_1437F1880[(unsigned __int8)(*((_BYTE *)a1 + 12) ^ a3[15])] ^ dword_1437F1480[(unsigned __int8)((unsigned __int16)(*((_WORD *)a1 + 4) ^ a3[11] ^ (a3[10] << 8)) >> 8)] ^ dword_1437F1080[BYTE2(v39)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v13)];\n  v47 = a1[5] ^ dword_1437F1880[(unsigned __int8)(*(_BYTE *)a1 ^ a3[3])] ^ dword_1437F1480[(unsigned __int8)((unsigned __int16)(*((_WORD *)a1 + 6) ^ a3[15] ^ (a3[14] << 8)) >> 8)] ^ dword_1437F1080[BYTE2(v31)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v39)];\n  v21 = a1[6] ^ dword_1437F1880[(unsigned __int8)(*((_BYTE *)a1 + 4) ^ a3[7])] ^ dword_1437F1480[(unsigned __int8)((unsigned __int16)(*(_WORD *)a1 ^ a3[3] ^ (a3[2] << 8)) >> 8)] ^ dword_1437F1080[BYTE2(v5)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v31)];\n  v26 = a1[7] ^ dword_1437F1880[(unsigned __int8)(*((_BYTE *)a1 + 8) ^ a3[11])] ^ dword_1437F1480[(unsigned __int8)((unsigned __int16)(*((_WORD *)a1 + 2) ^ a3[7] ^ (a3[6] << 8)) >> 8)] ^ dword_1437F1080[BYTE2(v13)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v5)];\n  v14 = a1[8] ^ dword_1437F1880[(unsigned __int8)v26] ^ dword_1437F1480[BYTE1(v21)] ^ dword_1437F1080[BYTE2(v47)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v52)];\n  v40 = a1[9] ^ dword_1437F1880[(unsigned __int8)v52] ^ dword_1437F1480[BYTE1(v26)] ^ dword_1437F1080[BYTE2(v21)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v47)];\n  v32 = a1[10] ^ dword_1437F1880[(unsigned __int8)v47] ^ dword_1437F1480[BYTE1(v52)] ^ dword_1437F1080[BYTE2(v26)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v21)];\n  v6 = a1[11] ^ dword_1437F1880[(unsigned __int8)v21] ^ dword_1437F1480[BYTE1(v47)] ^ dword_1437F1080[BYTE2(v52)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v26)];\n  v53 = a1[12] ^ dword_1437F1880[(unsigned __int8)v6] ^ dword_1437F1480[BYTE1(v32)] ^ dword_1437F1080[BYTE2(v40)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v14)];\n  v48 = a1[13] ^ dword_1437F1880[(unsigned __int8)v14] ^ dword_1437F1480[BYTE1(v6)] ^ dword_1437F1080[BYTE2(v32)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v40)];\n  v22 = a1[14] ^ dword_1437F1880[(unsigned __int8)v40] ^ dword_1437F1480[BYTE1(v14)] ^ dword_1437F1080[BYTE2(v6)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v32)];\n  v27 = a1[15] ^ dword_1437F1880[(unsigned __int8)v32] ^ dword_1437F1480[BYTE1(v40)] ^ dword_1437F1080[BYTE2(v14)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v6)];\n  v15 = a1[16] ^ dword_1437F1880[(unsigned __int8)v27] ^ dword_1437F1480[BYTE1(v22)] ^ dword_1437F1080[BYTE2(v48)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v53)];\n  v41 = a1[17] ^ dword_1437F1880[(unsigned __int8)v53] ^ dword_1437F1480[BYTE1(v27)] ^ dword_1437F1080[BYTE2(v22)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v48)];\n  v33 = a1[18] ^ dword_1437F1880[(unsigned __int8)v48] ^ dword_1437F1480[BYTE1(v53)] ^ dword_1437F1080[BYTE2(v27)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v22)];\n  v7 = a1[19] ^ dword_1437F1880[(unsigned __int8)v22] ^ dword_1437F1480[BYTE1(v48)] ^ dword_1437F1080[BYTE2(v53)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v27)];\n  v54 = a1[20] ^ dword_1437F1880[(unsigned __int8)v7] ^ dword_1437F1480[BYTE1(v33)] ^ dword_1437F1080[BYTE2(v41)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v15)];\n  v49 = a1[21] ^ dword_1437F1880[(unsigned __int8)v15] ^ dword_1437F1480[BYTE1(v7)] ^ dword_1437F1080[BYTE2(v33)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v41)];\n  v23 = a1[22] ^ dword_1437F1880[(unsigned __int8)v41] ^ dword_1437F1480[BYTE1(v15)] ^ dword_1437F1080[BYTE2(v7)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v33)];\n  v28 = a1[23] ^ dword_1437F1880[(unsigned __int8)v33] ^ dword_1437F1480[BYTE1(v41)] ^ dword_1437F1080[BYTE2(v15)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v7)];\n  v16 = a1[24] ^ dword_1437F1880[(unsigned __int8)v28] ^ dword_1437F1480[BYTE1(v23)] ^ dword_1437F1080[BYTE2(v49)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v54)];\n  v42 = a1[25] ^ dword_1437F1880[(unsigned __int8)v54] ^ dword_1437F1480[BYTE1(v28)] ^ dword_1437F1080[BYTE2(v23)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v49)];\n  v34 = a1[26] ^ dword_1437F1880[(unsigned __int8)v49] ^ dword_1437F1480[BYTE1(v54)] ^ dword_1437F1080[BYTE2(v28)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v23)];\n  v8 = a1[27] ^ dword_1437F1880[(unsigned __int8)v23] ^ dword_1437F1480[BYTE1(v49)] ^ dword_1437F1080[BYTE2(v54)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v28)];\n  v55 = a1[28] ^ dword_1437F1880[(unsigned __int8)v8] ^ dword_1437F1480[BYTE1(v34)] ^ dword_1437F1080[BYTE2(v42)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v16)];\n  v50 = a1[29] ^ dword_1437F1880[(unsigned __int8)v16] ^ dword_1437F1480[BYTE1(v8)] ^ dword_1437F1080[BYTE2(v34)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v42)];\n  v24 = a1[30] ^ dword_1437F1880[(unsigned __int8)v42] ^ dword_1437F1480[BYTE1(v16)] ^ dword_1437F1080[BYTE2(v8)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v34)];\n  v29 = a1[31] ^ dword_1437F1880[(unsigned __int8)v34] ^ dword_1437F1480[BYTE1(v42)] ^ dword_1437F1080[BYTE2(v16)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v8)];\n  v17 = a1[32] ^ dword_1437F1880[(unsigned __int8)v29] ^ dword_1437F1480[BYTE1(v24)] ^ dword_1437F1080[BYTE2(v50)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v55)];\n  v43 = a1[33] ^ dword_1437F1880[(unsigned __int8)v55] ^ dword_1437F1480[BYTE1(v29)] ^ dword_1437F1080[BYTE2(v24)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v50)];\n  v35 = a1[34] ^ dword_1437F1880[(unsigned __int8)v50] ^ dword_1437F1480[BYTE1(v55)] ^ dword_1437F1080[BYTE2(v29)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v24)];\n  v9 = a1[35] ^ dword_1437F1880[(unsigned __int8)v24] ^ dword_1437F1480[BYTE1(v50)] ^ dword_1437F1080[BYTE2(v55)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v29)];\n  v56 = a1[36] ^ dword_1437F1880[(unsigned __int8)v9] ^ dword_1437F1480[BYTE1(v35)] ^ dword_1437F1080[BYTE2(v43)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v17)];\n  v51 = a1[37] ^ dword_1437F1880[(unsigned __int8)v17] ^ dword_1437F1480[BYTE1(v9)] ^ dword_1437F1080[BYTE2(v35)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v43)];\n  v25 = a1[38] ^ dword_1437F1880[(unsigned __int8)v43] ^ dword_1437F1480[BYTE1(v17)] ^ dword_1437F1080[BYTE2(v9)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v35)];\n  v30 = a1[39] ^ dword_1437F1880[(unsigned __int8)v35] ^ dword_1437F1480[BYTE1(v43)] ^ dword_1437F1080[BYTE2(v17)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v9)];\n  if ( a2 > 10 )\n  {\n    v18 = a1[40] ^ dword_1437F1880[(unsigned __int8)v30] ^ dword_1437F1480[BYTE1(v25)] ^ dword_1437F1080[BYTE2(v51)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v56)];\n    v44 = a1[41] ^ dword_1437F1880[(unsigned __int8)v56] ^ dword_1437F1480[BYTE1(v30)] ^ dword_1437F1080[BYTE2(v25)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v51)];\n    v36 = a1[42] ^ dword_1437F1880[(unsigned __int8)v51] ^ dword_1437F1480[BYTE1(v56)] ^ dword_1437F1080[BYTE2(v30)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v25)];\n    v10 = a1[43] ^ dword_1437F1880[(unsigned __int8)v25] ^ dword_1437F1480[BYTE1(v51)] ^ dword_1437F1080[BYTE2(v56)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v30)];\n    v56 = a1[44] ^ dword_1437F1880[(unsigned __int8)v10] ^ dword_1437F1480[BYTE1(v36)] ^ dword_1437F1080[BYTE2(v44)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v18)];\n    v51 = a1[45] ^ dword_1437F1880[(unsigned __int8)v18] ^ dword_1437F1480[BYTE1(v10)] ^ dword_1437F1080[BYTE2(v36)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v44)];\n    v25 = a1[46] ^ dword_1437F1880[(unsigned __int8)v44] ^ dword_1437F1480[BYTE1(v18)] ^ dword_1437F1080[BYTE2(v10)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v36)];\n    v30 = a1[47] ^ dword_1437F1880[(unsigned __int8)v36] ^ dword_1437F1480[BYTE1(v44)] ^ dword_1437F1080[BYTE2(v18)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v10)];\n    if ( a2 > 12 )\n    {\n      v19 = a1[48] ^ dword_1437F1880[(unsigned __int8)v30] ^ dword_1437F1480[BYTE1(v25)] ^ dword_1437F1080[BYTE2(v51)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v56)];\n      v45 = a1[49] ^ dword_1437F1880[(unsigned __int8)v56] ^ dword_1437F1480[BYTE1(v30)] ^ dword_1437F1080[BYTE2(v25)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v51)];\n      v37 = a1[50] ^ dword_1437F1880[(unsigned __int8)v51] ^ dword_1437F1480[BYTE1(v56)] ^ dword_1437F1080[BYTE2(v30)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v25)];\n      v11 = a1[51] ^ dword_1437F1880[(unsigned __int8)v25] ^ dword_1437F1480[BYTE1(v51)] ^ dword_1437F1080[BYTE2(v56)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v30)];\n      v56 = a1[52] ^ dword_1437F1880[(unsigned __int8)v11] ^ dword_1437F1480[BYTE1(v37)] ^ dword_1437F1080[BYTE2(v45)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v19)];\n      v51 = a1[53] ^ dword_1437F1880[(unsigned __int8)v19] ^ dword_1437F1480[BYTE1(v11)] ^ dword_1437F1080[BYTE2(v37)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v45)];\n      v25 = a1[54] ^ dword_1437F1880[(unsigned __int8)v45] ^ dword_1437F1480[BYTE1(v19)] ^ dword_1437F1080[BYTE2(v11)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v37)];\n      v30 = a1[55] ^ dword_1437F1880[(unsigned __int8)v37] ^ dword_1437F1480[BYTE1(v45)] ^ dword_1437F1080[BYTE2(v19)] ^ RijnDael_AES_Base_14A0E3C80[HIE52D(v11)];\n    }\n  }\n  v57 = &a1[4 * a2];\n  v20 = *v57 ^ (unsigned __int8)dword_1437F1C80[(unsigned __int8)v30] ^ dword_1437F1C80[BYTE1(v25)] & 0xFF00 ^ dword_1437F1C80[BYTE2(v51)] & 0xFF0CC9 ^ dword_1437F1C80[HIE52D(v56)] & 0xFF0CC900;\n  *a4 = HIE52D(v20);\n  a4[1] = BYTE2(v20);\n  a4[2] = BYTE1(v20);\n  a4[3] = v20;\n  v46 = v57[1] ^ (unsigned __int8)dword_1437F1C80[(unsigned __int8)v56] ^ dword_1437F1C80[BYTE1(v30)] & 0xFF00 ^ dword_1437F1C80[BYTE2(v25)] & 0xFF0CC9 ^ dword_1437F1C80[HIE52D(v51)] & 0xFF0CC900;\n  a4[4] = HIE52D(v46);\n  a4[5] = BYTE2(v46);\n  a4[6] = BYTE1(v46);\n  a4[7] = v46;\n  v38 = v57[2] ^ (unsigned __int8)dword_1437F1C80[(unsigned __int8)v51] ^ dword_1437F1C80[BYTE1(v56)] & 0xFF00 ^ dword_1437F1C80[BYTE2(v30)] & 0xFF0CC9 ^ dword_1437F1C80[HIE52D(v25)] & 0xFF0CC900;\n  a4[8] = HIE52D(v38);\n  a4[9] = BYTE2(v38);\n  a4[10] = BYTE1(v38);\n  a4[11] = v38;\n  v12 = v57[3] ^ (unsigned __int8)dword_1437F1C80[(unsigned __int8)v25] ^ dword_1437F1C80[BYTE1(v51)] & 0xFF00 ^ dword_1437F1C80[BYTE2(v56)] & 0xFF0CC9 ^ dword_1437F1C80[HIE52D(v30)] & 0xFF0CC900;\n  a4[12] = HIE52D(v12);\n  a4[13] = BYTE2(v12);\n  a4[14] = BYTE1(v12);\n  result = (unsigned __int8)v12;\n  a4[15] = v12;\n  return result;\n}\n// 14A0E3C80: using guessed type _DWORD RijnDael_AES_Base_14A0E3C80[256];\n// 1437F1080: using guessed type _DWORD dword_1437F1080[256];\n// 1437F1480: using guessed type _DWORD dword_1437F1480[256];\n// 1437F1880: using guessed type _DWORD dword_1437F1880[256];\n// 1437F1C80: using guessed type _DWORD dword_1437F1C80[256];\n\n"
    },
    {
        "Function": "sub_14141AF90",
        "Total XOR and shift operations": 272,
        "XOR operations": 252,
        "Shift operations": 20,
        "Operation percentage": "180.13%",
        "Function Body": "\n__int64 __fastcall sub_14141AF90(_DWORD *a1, int a2, unsigned __int8 *a3, _BYTE *a4)\n{\n  __int64 result; // rax\n  unsigned int v5; // [rsp+0h] [rbp-28h]\n  unsigned int v6; // [rsp+0h] [rbp-28h]\n  unsigned int v7; // [rsp+0h] [rbp-28h]\n  unsigned int v8; // [rsp+0h] [rbp-28h]\n  unsigned int v9; // [rsp+0h] [rbp-28h]\n  unsigned int v10; // [rsp+0h] [rbp-28h]\n  unsigned int v11; // [rsp+0h] [rbp-28h]\n  unsigned int v12; // [rsp+0h] [rbp-28h]\n  unsigned int v13; // [rsp+4h] [rbp-24h]\n  unsigned int v14; // [rsp+4h] [rbp-24h]\n  unsigned int v15; // [rsp+4h] [rbp-24h]\n  unsigned int v16; // [rsp+4h] [rbp-24h]\n  unsigned int v17; // [rsp+4h] [rbp-24h]\n  unsigned int v18; // [rsp+4h] [rbp-24h]\n  unsigned int v19; // [rsp+4h] [rbp-24h]\n  unsigned int v20; // [rsp+4h] [rbp-24h]\n  unsigned int v21; // [rsp+8h] [rbp-20h]\n  unsigned int v22; // [rsp+8h] [rbp-20h]\n  unsigned int v23; // [rsp+8h] [rbp-20h]\n  unsigned int v24; // [rsp+8h] [rbp-20h]\n  unsigned int v25; // [rsp+8h] [rbp-20h]\n  unsigned int v26; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v27; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v28; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v29; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v30; // [rsp+Ch] [rbp-1Ch]\n  unsigned int v31; // [rsp+10h] [rbp-18h]\n  unsigned int v32; // [rsp+10h] [rbp-18h]\n  unsigned int v33; // [rsp+10h] [rbp-18h]\n  unsigned int v34; // [rsp+10h] [rbp-18h]\n  unsigned int v35; // [rsp+10h] [rbp-18h]\n  unsigned int v36; // [rsp+10h] [rbp-18h]\n  unsigned int v37; // [rsp+10h] [rbp-18h]\n  unsigned int v38; // [rsp+10h] [rbp-18h]\n  unsigned int v39; // [rsp+14h] [rbp-14h]\n  unsigned int v40; // [rsp+14h] [rbp-14h]\n  unsigned int v41; // [rsp+14h] [rbp-14h]\n  unsigned int v42; // [rsp+14h] [rbp-14h]\n  unsigned int v43; // [rsp+14h] [rbp-14h]\n  unsigned int v44; // [rsp+14h] [rbp-14h]\n  unsigned int v45; // [rsp+14h] [rbp-14h]\n  unsigned int v46; // [rsp+14h] [rbp-14h]\n  unsigned int v47; // [rsp+18h] [rbp-10h]\n  unsigned int v48; // [rsp+18h] [rbp-10h]\n  unsigned int v49; // [rsp+18h] [rbp-10h]\n  unsigned int v50; // [rsp+18h] [rbp-10h]\n  unsigned int v51; // [rsp+18h] [rbp-10h]\n  unsigned int v52; // [rsp+1Ch] [rbp-Ch]\n  unsigned int v53; // [rsp+1Ch] [rbp-Ch]\n  unsigned int v54; // [rsp+1Ch] [rbp-Ch]\n  unsigned int v55; // [rsp+1Ch] [rbp-Ch]\n  unsigned int v56; // [rsp+1Ch] [rbp-Ch]\n  _DWORD *v57; // [rsp+30h] [rbp+8h]\n\n  v13 = *a1 ^ a3[3] ^ (a3[2] << 8) ^ (a3[1] << 16) ^ (*a3 << 24);\n  v39 = a1[1] ^ a3[7] ^ (a3[6] << 8) ^ (a3[5] << 16) ^ (a3[4] << 24);\n  v31 = a1[2] ^ a3[11] ^ (a3[10] << 8) ^ (a3[9] << 16) ^ (a3[8] << 24);\n  v5 = a1[3] ^ a3[15] ^ (a3[14] << 8) ^ (a3[13] << 16) ^ (a3[12] << 24);\n  v52 = a1[4] ^ dword_14ACA1C80[(unsigned __int8)(*((_BYTE *)a1 + 4) ^ a3[7])] ^ dword_14ACA1880[(unsigned __int8)((unsigned __int16)(*((_WORD *)a1 + 4) ^ a3[11] ^ (a3[10] << 8)) >> 8)] ^ dword_14ACA1480[BYTE2(v5)] ^ dword_14ACA1080[HIE52D(v13)];\n  v47 = a1[5] ^ dword_14ACA1C80[(unsigned __int8)(*((_BYTE *)a1 + 8) ^ a3[11])] ^ dword_14ACA1880[(unsigned __int8)((unsigned __int16)(*((_WORD *)a1 + 6) ^ a3[15] ^ (a3[14] << 8)) >> 8)] ^ dword_14ACA1480[BYTE2(v13)] ^ dword_14ACA1080[HIE52D(v39)];\n  v21 = a1[6] ^ dword_14ACA1C80[(unsigned __int8)(*((_BYTE *)a1 + 12) ^ a3[15])] ^ dword_14ACA1880[(unsigned __int8)((unsigned __int16)(*(_WORD *)a1 ^ a3[3] ^ (a3[2] << 8)) >> 8)] ^ dword_14ACA1480[BYTE2(v39)] ^ dword_14ACA1080[HIE52D(v31)];\n  v26 = a1[7] ^ dword_14ACA1C80[(unsigned __int8)(*(_BYTE *)a1 ^ a3[3])] ^ dword_14ACA1880[(unsigned __int8)((unsigned __int16)(*((_WORD *)a1 + 2) ^ a3[7] ^ (a3[6] << 8)) >> 8)] ^ dword_14ACA1480[BYTE2(v31)] ^ dword_14ACA1080[HIE52D(v5)];\n  v14 = a1[8] ^ dword_14ACA1C80[(unsigned __int8)v47] ^ dword_14ACA1880[BYTE1(v21)] ^ dword_14ACA1480[BYTE2(v26)] ^ dword_14ACA1080[HIE52D(v52)];\n  v40 = a1[9] ^ dword_14ACA1C80[(unsigned __int8)v21] ^ dword_14ACA1880[BYTE1(v26)] ^ dword_14ACA1480[BYTE2(v52)] ^ dword_14ACA1080[HIE52D(v47)];\n  v32 = a1[10] ^ dword_14ACA1C80[(unsigned __int8)v26] ^ dword_14ACA1880[BYTE1(v52)] ^ dword_14ACA1480[BYTE2(v47)] ^ dword_14ACA1080[HIE52D(v21)];\n  v6 = a1[11] ^ dword_14ACA1C80[(unsigned __int8)v52] ^ dword_14ACA1880[BYTE1(v47)] ^ dword_14ACA1480[BYTE2(v21)] ^ dword_14ACA1080[HIE52D(v26)];\n  v53 = a1[12] ^ dword_14ACA1C80[(unsigned __int8)v40] ^ dword_14ACA1880[BYTE1(v32)] ^ dword_14ACA1480[BYTE2(v6)] ^ dword_14ACA1080[HIE52D(v14)];\n  v48 = a1[13] ^ dword_14ACA1C80[(unsigned __int8)v32] ^ dword_14ACA1880[BYTE1(v6)] ^ dword_14ACA1480[BYTE2(v14)] ^ dword_14ACA1080[HIE52D(v40)];\n  v22 = a1[14] ^ dword_14ACA1C80[(unsigned __int8)v6] ^ dword_14ACA1880[BYTE1(v14)] ^ dword_14ACA1480[BYTE2(v40)] ^ dword_14ACA1080[HIE52D(v32)];\n  v27 = a1[15] ^ dword_14ACA1C80[(unsigned __int8)v14] ^ dword_14ACA1880[BYTE1(v40)] ^ dword_14ACA1480[BYTE2(v32)] ^ dword_14ACA1080[HIE52D(v6)];\n  v15 = a1[16] ^ dword_14ACA1C80[(unsigned __int8)v48] ^ dword_14ACA1880[BYTE1(v22)] ^ dword_14ACA1480[BYTE2(v27)] ^ dword_14ACA1080[HIE52D(v53)];\n  v41 = a1[17] ^ dword_14ACA1C80[(unsigned __int8)v22] ^ dword_14ACA1880[BYTE1(v27)] ^ dword_14ACA1480[BYTE2(v53)] ^ dword_14ACA1080[HIE52D(v48)];\n  v33 = a1[18] ^ dword_14ACA1C80[(unsigned __int8)v27] ^ dword_14ACA1880[BYTE1(v53)] ^ dword_14ACA1480[BYTE2(v48)] ^ dword_14ACA1080[HIE52D(v22)];\n  v7 = a1[19] ^ dword_14ACA1C80[(unsigned __int8)v53] ^ dword_14ACA1880[BYTE1(v48)] ^ dword_14ACA1480[BYTE2(v22)] ^ dword_14ACA1080[HIE52D(v27)];\n  v54 = a1[20] ^ dword_14ACA1C80[(unsigned __int8)v41] ^ dword_14ACA1880[BYTE1(v33)] ^ dword_14ACA1480[BYTE2(v7)] ^ dword_14ACA1080[HIE52D(v15)];\n  v49 = a1[21] ^ dword_14ACA1C80[(unsigned __int8)v33] ^ dword_14ACA1880[BYTE1(v7)] ^ dword_14ACA1480[BYTE2(v15)] ^ dword_14ACA1080[HIE52D(v41)];\n  v23 = a1[22] ^ dword_14ACA1C80[(unsigned __int8)v7] ^ dword_14ACA1880[BYTE1(v15)] ^ dword_14ACA1480[BYTE2(v41)] ^ dword_14ACA1080[HIE52D(v33)];\n  v28 = a1[23] ^ dword_14ACA1C80[(unsigned __int8)v15] ^ dword_14ACA1880[BYTE1(v41)] ^ dword_14ACA1480[BYTE2(v33)] ^ dword_14ACA1080[HIE52D(v7)];\n  v16 = a1[24] ^ dword_14ACA1C80[(unsigned __int8)v49] ^ dword_14ACA1880[BYTE1(v23)] ^ dword_14ACA1480[BYTE2(v28)] ^ dword_14ACA1080[HIE52D(v54)];\n  v42 = a1[25] ^ dword_14ACA1C80[(unsigned __int8)v23] ^ dword_14ACA1880[BYTE1(v28)] ^ dword_14ACA1480[BYTE2(v54)] ^ dword_14ACA1080[HIE52D(v49)];\n  v34 = a1[26] ^ dword_14ACA1C80[(unsigned __int8)v28] ^ dword_14ACA1880[BYTE1(v54)] ^ dword_14ACA1480[BYTE2(v49)] ^ dword_14ACA1080[HIE52D(v23)];\n  v8 = a1[27] ^ dword_14ACA1C80[(unsigned __int8)v54] ^ dword_14ACA1880[BYTE1(v49)] ^ dword_14ACA1480[BYTE2(v23)] ^ dword_14ACA1080[HIE52D(v28)];\n  v55 = a1[28] ^ dword_14ACA1C80[(unsigned __int8)v42] ^ dword_14ACA1880[BYTE1(v34)] ^ dword_14ACA1480[BYTE2(v8)] ^ dword_14ACA1080[HIE52D(v16)];\n  v50 = a1[29] ^ dword_14ACA1C80[(unsigned __int8)v34] ^ dword_14ACA1880[BYTE1(v8)] ^ dword_14ACA1480[BYTE2(v16)] ^ dword_14ACA1080[HIE52D(v42)];\n  v24 = a1[30] ^ dword_14ACA1C80[(unsigned __int8)v8] ^ dword_14ACA1880[BYTE1(v16)] ^ dword_14ACA1480[BYTE2(v42)] ^ dword_14ACA1080[HIE52D(v34)];\n  v29 = a1[31] ^ dword_14ACA1C80[(unsigned __int8)v16] ^ dword_14ACA1880[BYTE1(v42)] ^ dword_14ACA1480[BYTE2(v34)] ^ dword_14ACA1080[HIE52D(v8)];\n  v17 = a1[32] ^ dword_14ACA1C80[(unsigned __int8)v50] ^ dword_14ACA1880[BYTE1(v24)] ^ dword_14ACA1480[BYTE2(v29)] ^ dword_14ACA1080[HIE52D(v55)];\n  v43 = a1[33] ^ dword_14ACA1C80[(unsigned __int8)v24] ^ dword_14ACA1880[BYTE1(v29)] ^ dword_14ACA1480[BYTE2(v55)] ^ dword_14ACA1080[HIE52D(v50)];\n  v35 = a1[34] ^ dword_14ACA1C80[(unsigned __int8)v29] ^ dword_14ACA1880[BYTE1(v55)] ^ dword_14ACA1480[BYTE2(v50)] ^ dword_14ACA1080[HIE52D(v24)];\n  v9 = a1[35] ^ dword_14ACA1C80[(unsigned __int8)v55] ^ dword_14ACA1880[BYTE1(v50)] ^ dword_14ACA1480[BYTE2(v24)] ^ dword_14ACA1080[HIE52D(v29)];\n  v56 = a1[36] ^ dword_14ACA1C80[(unsigned __int8)v43] ^ dword_14ACA1880[BYTE1(v35)] ^ dword_14ACA1480[BYTE2(v9)] ^ dword_14ACA1080[HIE52D(v17)];\n  v51 = a1[37] ^ dword_14ACA1C80[(unsigned __int8)v35] ^ dword_14ACA1880[BYTE1(v9)] ^ dword_14ACA1480[BYTE2(v17)] ^ dword_14ACA1080[HIE52D(v43)];\n  v25 = a1[38] ^ dword_14ACA1C80[(unsigned __int8)v9] ^ dword_14ACA1880[BYTE1(v17)] ^ dword_14ACA1480[BYTE2(v43)] ^ dword_14ACA1080[HIE52D(v35)];\n  v30 = a1[39] ^ dword_14ACA1C80[(unsigned __int8)v17] ^ dword_14ACA1880[BYTE1(v43)] ^ dword_14ACA1480[BYTE2(v35)] ^ dword_14ACA1080[HIE52D(v9)];\n  if ( a2 > 10 )\n  {\n    v18 = a1[40] ^ dword_14ACA1C80[(unsigned __int8)v51] ^ dword_14ACA1880[BYTE1(v25)] ^ dword_14ACA1480[BYTE2(v30)] ^ dword_14ACA1080[HIE52D(v56)];\n    v44 = a1[41] ^ dword_14ACA1C80[(unsigned __int8)v25] ^ dword_14ACA1880[BYTE1(v30)] ^ dword_14ACA1480[BYTE2(v56)] ^ dword_14ACA1080[HIE52D(v51)];\n    v36 = a1[42] ^ dword_14ACA1C80[(unsigned __int8)v30] ^ dword_14ACA1880[BYTE1(v56)] ^ dword_14ACA1480[BYTE2(v51)] ^ dword_14ACA1080[HIE52D(v25)];\n    v10 = a1[43] ^ dword_14ACA1C80[(unsigned __int8)v56] ^ dword_14ACA1880[BYTE1(v51)] ^ dword_14ACA1480[BYTE2(v25)] ^ dword_14ACA1080[HIE52D(v30)];\n    v56 = a1[44] ^ dword_14ACA1C80[(unsigned __int8)v44] ^ dword_14ACA1880[BYTE1(v36)] ^ dword_14ACA1480[BYTE2(v10)] ^ dword_14ACA1080[HIE52D(v18)];\n    v51 = a1[45] ^ dword_14ACA1C80[(unsigned __int8)v36] ^ dword_14ACA1880[BYTE1(v10)] ^ dword_14ACA1480[BYTE2(v18)] ^ dword_14ACA1080[HIE52D(v44)];\n    v25 = a1[46] ^ dword_14ACA1C80[(unsigned __int8)v10] ^ dword_14ACA1880[BYTE1(v18)] ^ dword_14ACA1480[BYTE2(v44)] ^ dword_14ACA1080[HIE52D(v36)];\n    v30 = a1[47] ^ dword_14ACA1C80[(unsigned __int8)v18] ^ dword_14ACA1880[BYTE1(v44)] ^ dword_14ACA1480[BYTE2(v36)] ^ dword_14ACA1080[HIE52D(v10)];\n    if ( a2 > 12 )\n    {\n      v19 = a1[48] ^ dword_14ACA1C80[(unsigned __int8)v51] ^ dword_14ACA1880[BYTE1(v25)] ^ dword_14ACA1480[BYTE2(v30)] ^ dword_14ACA1080[HIE52D(v56)];\n      v45 = a1[49] ^ dword_14ACA1C80[(unsigned __int8)v25] ^ dword_14ACA1880[BYTE1(v30)] ^ dword_14ACA1480[BYTE2(v56)] ^ dword_14ACA1080[HIE52D(v51)];\n      v37 = a1[50] ^ dword_14ACA1C80[(unsigned __int8)v30] ^ dword_14ACA1880[BYTE1(v56)] ^ dword_14ACA1480[BYTE2(v51)] ^ dword_14ACA1080[HIE52D(v25)];\n      v11 = a1[51] ^ dword_14ACA1C80[(unsigned __int8)v56] ^ dword_14ACA1880[BYTE1(v51)] ^ dword_14ACA1480[BYTE2(v25)] ^ dword_14ACA1080[HIE52D(v30)];\n      v56 = a1[52] ^ dword_14ACA1C80[(unsigned __int8)v45] ^ dword_14ACA1880[BYTE1(v37)] ^ dword_14ACA1480[BYTE2(v11)] ^ dword_14ACA1080[HIE52D(v19)];\n      v51 = a1[53] ^ dword_14ACA1C80[(unsigned __int8)v37] ^ dword_14ACA1880[BYTE1(v11)] ^ dword_14ACA1480[BYTE2(v19)] ^ dword_14ACA1080[HIE52D(v45)];\n      v25 = a1[54] ^ dword_14ACA1C80[(unsigned __int8)v11] ^ dword_14ACA1880[BYTE1(v19)] ^ dword_14ACA1480[BYTE2(v45)] ^ dword_14ACA1080[HIE52D(v37)];\n      v30 = a1[55] ^ dword_14ACA1C80[(unsigned __int8)v19] ^ dword_14ACA1880[BYTE1(v45)] ^ dword_14ACA1480[BYTE2(v37)] ^ dword_14ACA1080[HIE52D(v11)];\n    }\n  }\n  v57 = &a1[4 * a2];\n  v20 = *v57 ^ (unsigned __int8)dword_148DC5080[(unsigned __int8)v51] ^ dword_148DC5080[BYTE1(v25)] & 0xFF00 ^ dword_148DC5080[BYTE2(v30)] & 0xFF0CC9 ^ dword_148DC5080[HIE52D(v56)] & 0xFF0CC900;\n  *a4 = HIE52D(v20);\n  a4[1] = BYTE2(v20);\n  a4[2] = BYTE1(v20);\n  a4[3] = v20;\n  v46 = v57[1] ^ (unsigned __int8)dword_148DC5080[(unsigned __int8)v25] ^ dword_148DC5080[BYTE1(v30)] & 0xFF00 ^ dword_148DC5080[BYTE2(v56)] & 0xFF0CC9 ^ dword_148DC5080[HIE52D(v51)] & 0xFF0CC900;\n  a4[4] = HIE52D(v46);\n  a4[5] = BYTE2(v46);\n  a4[6] = BYTE1(v46);\n  a4[7] = v46;\n  v38 = v57[2] ^ (unsigned __int8)dword_148DC5080[(unsigned __int8)v30] ^ dword_148DC5080[BYTE1(v56)] & 0xFF00 ^ dword_148DC5080[BYTE2(v51)] & 0xFF0CC9 ^ dword_148DC5080[HIE52D(v25)] & 0xFF0CC900;\n  a4[8] = HIE52D(v38);\n  a4[9] = BYTE2(v38);\n  a4[10] = BYTE1(v38);\n  a4[11] = v38;\n  v12 = v57[3] ^ (unsigned __int8)dword_148DC5080[(unsigned __int8)v56] ^ dword_148DC5080[BYTE1(v51)] & 0xFF00 ^ dword_148DC5080[BYTE2(v25)] & 0xFF0CC9 ^ dword_148DC5080[HIE52D(v30)] & 0xFF0CC900;\n  a4[12] = HIE52D(v12);\n  a4[13] = BYTE2(v12);\n  a4[14] = BYTE1(v12);\n  result = (unsigned __int8)v12;\n  a4[15] = v12;\n  return result;\n}\n// 14ACA1080: using guessed type _DWORD dword_14ACA1080[256];\n// 14ACA1480: using guessed type _DWORD dword_14ACA1480[256];\n// 14ACA1880: using guessed type _DWORD dword_14ACA1880[256];\n// 14ACA1C80: using guessed type _DWORD dword_14ACA1C80[256];\n// 148DC5080: using guessed type _DWORD dword_148DC5080[256];\n\n"
    },
    {
        "Function": "sub_14A50D9B0",
        "Total XOR and shift operations": 81,
        "XOR operations": 57,
        "Shift operations": 24,
        "Operation percentage": "93.10%",
        "Function Body": "\n__int64 __fastcall sub_14A50D9B0(int *a1, unsigned __int8 *a2, int a3)\n{\n  int v4; // [rsp+0h] [rbp-18h]\n  unsigned int v5; // [rsp+4h] [rbp-14h]\n  unsigned int v6; // [rsp+4h] [rbp-14h]\n  unsigned int v7; // [rsp+4h] [rbp-14h]\n  unsigned int v8; // [rsp+4h] [rbp-14h]\n  int *v9; // [rsp+20h] [rbp+8h]\n\n  v9 = a1;\n  v4 = 0;\n  *a1 = a2[3] ^ (a2[2] << 8) ^ (a2[1] << 16) ^ (*a2 << 24);\n  a1[1] = a2[7] ^ (a2[6] << 8) ^ (a2[5] << 16) ^ (a2[4] << 24);\n  a1[2] = a2[11] ^ (a2[10] << 8) ^ (a2[9] << 16) ^ (a2[8] << 24);\n  a1[3] = a2[15] ^ (a2[14] << 8) ^ (a2[13] << 16) ^ (a2[12] << 24);\n  if ( a3 == 128 )\n  {\n    while ( 1 )\n    {\n      v5 = v9[3];\n      v9[4] = dword_148DC5480[v4] ^ (unsigned __int8)dword_1437F1C80[HIE52D(v5)] ^ dword_1437F1C80[(unsigned __int8)v5] & 0xFF00 ^ dword_1437F1C80[BYTE1(v5)] & 0xFF0CC9 ^ dword_1437F1C80[BYTE2(v5)] & 0xFF0CC900 ^ *v9;\n      v9[5] = v9[4] ^ v9[1];\n      v9[6] = v9[5] ^ v9[2];\n      v9[7] = v9[6] ^ v9[3];\n      if ( ++v4 == 10 )\n        break;\n      v9 += 4;\n    }\n    return 10i64;\n  }\n  else\n  {\n    a1[4] = a2[19] ^ (a2[18] << 8) ^ (a2[17] << 16) ^ (a2[16] << 24);\n    a1[5] = a2[23] ^ (a2[22] << 8) ^ (a2[21] << 16) ^ (a2[20] << 24);\n    if ( a3 == 192 )\n    {\n      while ( 1 )\n      {\n        v6 = v9[5];\n        v9[6] = dword_148DC5480[v4] ^ (unsigned __int8)dword_1437F1C80[HIE52D(v6)] ^ dword_1437F1C80[(unsigned __int8)v6] & 0xFF00 ^ dword_1437F1C80[BYTE1(v6)] & 0xFF0CC9 ^ dword_1437F1C80[BYTE2(v6)] & 0xFF0CC900 ^ *v9;\n        v9[7] = v9[6] ^ v9[1];\n        v9[8] = v9[7] ^ v9[2];\n        v9[9] = v9[8] ^ v9[3];\n        if ( ++v4 == 8 )\n          break;\n        v9[10] = v9[9] ^ v9[4];\n        v9[11] = v9[10] ^ v9[5];\n        v9 += 6;\n      }\n      return 12i64;\n    }\n    else\n    {\n      a1[6] = a2[27] ^ (a2[26] << 8) ^ (a2[25] << 16) ^ (a2[24] << 24);\n      a1[7] = a2[31] ^ (a2[30] << 8) ^ (a2[29] << 16) ^ (a2[28] << 24);\n      if ( a3 == 256 )\n      {\n        while ( 1 )\n        {\n          v7 = v9[7];\n          v9[8] = dword_148DC5480[v4] ^ (unsigned __int8)dword_1437F1C80[HIE52D(v7)] ^ dword_1437F1C80[(unsigned __int8)v7] & 0xFF00 ^ dword_1437F1C80[BYTE1(v7)] & 0xFF0CC9 ^ dword_1437F1C80[BYTE2(v7)] & 0xFF0CC900 ^ *v9;\n          v9[9] = v9[8] ^ v9[1];\n          v9[10] = v9[9] ^ v9[2];\n          v9[11] = v9[10] ^ v9[3];\n          if ( ++v4 == 7 )\n            break;\n          v8 = v9[11];\n          v9[12] = (unsigned __int8)dword_1437F1C80[(unsigned __int8)v8] ^ dword_1437F1C80[BYTE1(v8)] & 0xFF00 ^ dword_1437F1C80[BYTE2(v8)] & 0xFF0CC9 ^ dword_1437F1C80[HIE52D(v8)] & 0xFF0CC900 ^ v9[4];\n          v9[13] = v9[12] ^ v9[5];\n          v9[14] = v9[13] ^ v9[6];\n          v9[15] = v9[14] ^ v9[7];\n          v9 += 8;\n        }\n        return 14i64;\n      }\n      else\n      {\n        return 0i64;\n      }\n    }\n  }\n}\n// 1437F1C80: using guessed type _DWORD dword_1437F1C80[256];\n// 148DC5480: using guessed type _DWORD dword_148DC5480[12];\n\n"
    },
    {
        "Function": "sub_1474901B0",
        "Total XOR and shift operations": 49,
        "XOR operations": 40,
        "Shift operations": 9,
        "Operation percentage": "84.48%",
        "Function Body": "\n__int64 __fastcall sub_1474901B0(unsigned int a1, unsigned __int8 *a2, unsigned int a3)\n{\n  unsigned __int8 *v4; // [rsp+0h] [rbp-18h]\n  _DWORD *v5; // [rsp+0h] [rbp-18h]\n  unsigned int v6; // [rsp+8h] [rbp-10h]\n  unsigned int v7; // [rsp+8h] [rbp-10h]\n  unsigned int v8; // [rsp+8h] [rbp-10h]\n  unsigned int v9; // [rsp+8h] [rbp-10h]\n  unsigned int v10; // [rsp+8h] [rbp-10h]\n  unsigned int v11; // [rsp+8h] [rbp-10h]\n  unsigned int v12; // [rsp+8h] [rbp-10h]\n  unsigned int v13; // [rsp+8h] [rbp-10h]\n  unsigned int v14; // [rsp+8h] [rbp-10h]\n  unsigned int v15; // [rsp+8h] [rbp-10h]\n  unsigned __int8 *i; // [rsp+28h] [rbp+10h]\n\n  v6 = ~(((unsigned __int8)a1 << 24) + ((a1 & 0xFF00) << 8) + ((a1 >> 8) & 0xFF00) + HIE52D(a1));\n  while ( a3 && ((unsigned __int8)a2 & 3) != 0 )\n  {\n    v6 = (v6 << 8) ^ *((_DWORD *)&unk_148DC54B0 + (*a2++ ^ HIE52D(v6)) + 1024);\n    --a3;\n  }\n  v4 = a2 - 4;\n  while ( a3 >= 0x20 )\n  {\n    v5 = v4 + 4;\n    v7 = *v5++ ^ v6;\n    v8 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v7) + 1792) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v7) + 1536) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v7) + 1280) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v7 + 1024);\n    v9 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v8) + 1792) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v8) + 1536) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v8) + 1280) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v8 + 1024);\n    v10 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v9) + 1792) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v9) + 1536) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v9) + 1280) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v9 + 1024);\n    v11 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v10) + 1792) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v10) + 1536) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v10) + 1280) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v10 + 1024);\n    v12 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v11) + 1792) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v11) + 1536) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v11) + 1280) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v11 + 1024);\n    v13 = *v5 ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v12) + 1792) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v12) + 1536) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v12) + 1280) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v12 + 1024);\n    v4 = (unsigned __int8 *)(v5 + 1);\n    v14 = *(_DWORD *)v4 ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v13) + 1792) ^ *((_DWORD *)&unk_148DC54B0\n                                                                             + BYTE2(v13)\n                                                                             + 1536) ^ *((_DWORD *)&unk_148DC54B0\n                                                                                       + BYTE1(v13)\n                                                                                       + 1280) ^ *((_DWORD *)&unk_148DC54B0\n                                                                                                 + (unsigned __int8)v13\n                                                                                                 + 1024);\n    v6 = *((_DWORD *)&unk_148DC54B0 + HIE52D(v14) + 1792) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v14) + 1536) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v14) + 1280) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v14 + 1024);\n    a3 -= 32;\n  }\n  while ( a3 >= 4 )\n  {\n    v4 += 4;\n    v15 = *(_DWORD *)v4 ^ v6;\n    v6 = *((_DWORD *)&unk_148DC54B0 + HIE52D(v15) + 1792) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v15) + 1536) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v15) + 1280) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v15 + 1024);\n    a3 -= 4;\n  }\n  for ( i = v4 + 4; a3; --a3 )\n    v6 = (v6 << 8) ^ *((_DWORD *)&unk_148DC54B0 + (*i++ ^ HIE52D(v6)) + 1024);\n  return ((unsigned __int8)~(_BYTE)v6 << 24) + ((~(_WORD)v6 & 0xFF00) << 8) + ((~v6 >> 8) & 0xFF00) + (~v6 >> 24);\n}\n\n"
    },
    {
        "Function": "sub_14D01EB90",
        "Total XOR and shift operations": 42,
        "XOR operations": 40,
        "Shift operations": 2,
        "Operation percentage": "82.35%",
        "Function Body": "\n__int64 __fastcall sub_14D01EB90(int a1, _BYTE *a2, unsigned int a3)\n{\n  _DWORD *v4; // [rsp+0h] [rbp-18h]\n  _DWORD *v5; // [rsp+0h] [rbp-18h]\n  unsigned int v6; // [rsp+8h] [rbp-10h]\n  unsigned int v7; // [rsp+8h] [rbp-10h]\n  unsigned int v8; // [rsp+8h] [rbp-10h]\n  unsigned int v9; // [rsp+8h] [rbp-10h]\n  unsigned int v10; // [rsp+8h] [rbp-10h]\n  unsigned int v11; // [rsp+8h] [rbp-10h]\n  unsigned int v12; // [rsp+8h] [rbp-10h]\n  unsigned int v13; // [rsp+8h] [rbp-10h]\n  unsigned int v14; // [rsp+8h] [rbp-10h]\n  unsigned int v15; // [rsp+8h] [rbp-10h]\n  _BYTE *i; // [rsp+28h] [rbp+10h]\n\n  v6 = ~a1;\n  while ( a3 && ((unsigned __int8)a2 & 3) != 0 )\n  {\n    v6 = (v6 >> 8) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)(*a2++ ^ v6));\n    --a3;\n  }\n  v4 = a2;\n  while ( a3 >= 0x20 )\n  {\n    v7 = *v4 ^ v6;\n    v5 = v4 + 1;\n    v8 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v7)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v7) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v7) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v7 + 768);\n    v9 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v8)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v8) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v8) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v8 + 768);\n    v10 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v9)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v9) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v9) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v9 + 768);\n    v11 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v10)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v10) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v10) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v10 + 768);\n    v12 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v11)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v11) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v11) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v11 + 768);\n    v13 = *v5++ ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v12)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v12) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v12) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v12 + 768);\n    v14 = *v5 ^ *((_DWORD *)&unk_148DC54B0 + HIE52D(v13)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v13) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v13) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v13 + 768);\n    v4 = v5 + 1;\n    v6 = *((_DWORD *)&unk_148DC54B0 + HIE52D(v14)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v14) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v14) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v14 + 768);\n    a3 -= 32;\n  }\n  while ( a3 >= 4 )\n  {\n    v15 = *v4++ ^ v6;\n    v6 = *((_DWORD *)&unk_148DC54B0 + HIE52D(v15)) ^ *((_DWORD *)&unk_148DC54B0 + BYTE2(v15) + 256) ^ *((_DWORD *)&unk_148DC54B0 + BYTE1(v15) + 512) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)v15 + 768);\n    a3 -= 4;\n  }\n  for ( i = v4; a3; --a3 )\n    v6 = (v6 >> 8) ^ *((_DWORD *)&unk_148DC54B0 + (unsigned __int8)(*i++ ^ v6));\n  return ~v6;\n}\n\n"
    },
    {
        "Function": "sub_14CBBE6A0",
        "Total XOR and shift operations": 6,
        "XOR operations": 4,
        "Shift operations": 2,
        "Operation percentage": "54.55%",
        "Function Body": "\n__int64 __fastcall sub_14CBBE6A0(int *a1, __int64 a2, unsigned int a3)\n{\n  *a1 = ((unsigned int)*a1 >> 8) ^ *(_DWORD *)(a2 + 4i64 * (unsigned __int8)(a3 ^ *a1));\n  a1[1] += (unsigned __int8)*a1;\n  a1[1] = 13500D813 * a1[1] + 1;\n  a1[2] = ((unsigned int)a1[2] >> 8) ^ *(_DWORD *)(a2 + 4i64 * (HIE52D(a1[1]) ^ (unsigned __int8)a1[2]));\n  return a3;\n}\n\n"
    },
    {
        "Function": "sub_1434C4280",
        "Total XOR and shift operations": 6,
        "XOR operations": 4,
        "Shift operations": 2,
        "Operation percentage": "54.55%",
        "Function Body": "\n__int64 __fastcall sub_1434C4280(int *a1, __int64 a2, unsigned int a3)\n{\n  *a1 = ((unsigned int)*a1 >> 8) ^ *(_DWORD *)(a2 + 4i64 * (unsigned __int8)(a3 ^ *a1));\n  a1[1] += (unsigned __int8)*a1;\n  a1[1] = 13500D813 * a1[1] + 1;\n  a1[2] = ((unsigned int)a1[2] >> 8) ^ *(_DWORD *)(a2 + 4i64 * (HIE52D(a1[1]) ^ (unsigned __int8)a1[2]));\n  return a3;\n}\n\n"
    },
    {
        "Function": "sub_14D01E890",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "28.57%",
        "Function Body": "\n__int64 __fastcall sub_14D01E890(unsigned int a1)\n{\n  return (a1 >> 12) + a1 + (a1 >> 14) + 11;\n}\n\n"
    },
    {
        "Function": "sub_14CBBE660",
        "Total XOR and shift operations": 2,
        "XOR operations": 1,
        "Shift operations": 1,
        "Operation percentage": "28.57%",
        "Function Body": "\n__int64 __fastcall sub_14CBBE660(__int64 a1)\n{\n  return (unsigned __int8)((unsigned __int16)(((*(_DWORD *)(a1 + 8) | 2) ^ 1) * (*(_DWORD *)(a1 + 8) | 2)) >> 8);\n}\n\n"
    },
    {
        "Function": "sub_1434C4240",
        "Total XOR and shift operations": 2,
        "XOR operations": 1,
        "Shift operations": 1,
        "Operation percentage": "28.57%",
        "Function Body": "\n__int64 __fastcall sub_1434C4240(__int64 a1)\n{\n  return (unsigned __int8)((unsigned __int16)(((*(_DWORD *)(a1 + 8) | 2) ^ 1) * (*(_DWORD *)(a1 + 8) | 2)) >> 8);\n}\n\n"
    },
    {
        "Function": "sub_14DB0B630",
        "Total XOR and shift operations": 20,
        "XOR operations": 0,
        "Shift operations": 20,
        "Operation percentage": "6.51%",
        "Function Body": "\n__int64 __fastcall sub_14DB0B630(__int64 a1, int a2)\n{\n  __int64 result; // rax\n  int v3; // [rsp+20h] [rbp-B8h]\n  __int64 v4; // [rsp+28h] [rbp-B0h]\n  unsigned __int8 *v5; // [rsp+30h] [rbp-A8h]\n  __int64 v6; // [rsp+38h] [rbp-A0h]\n  unsigned int v7; // [rsp+40h] [rbp-98h]\n  unsigned __int8 *v8; // [rsp+48h] [rbp-90h]\n  unsigned __int8 *v9; // [rsp+48h] [rbp-90h]\n  unsigned __int8 *v10; // [rsp+48h] [rbp-90h]\n  unsigned __int8 *v11; // [rsp+48h] [rbp-90h]\n  unsigned int v12; // [rsp+50h] [rbp-88h]\n  unsigned int v13; // [rsp+54h] [rbp-84h]\n  unsigned int v14; // [rsp+54h] [rbp-84h]\n  unsigned int v15; // [rsp+54h] [rbp-84h]\n  unsigned int v16; // [rsp+54h] [rbp-84h]\n  int v17; // [rsp+58h] [rbp-80h]\n  _BYTE *v18; // [rsp+60h] [rbp-78h]\n  __int64 v19; // [rsp+68h] [rbp-70h]\n  unsigned int v20; // [rsp+70h] [rbp-68h]\n  unsigned int v21; // [rsp+74h] [rbp-64h]\n  unsigned int v22; // [rsp+74h] [rbp-64h]\n  unsigned int v23; // [rsp+74h] [rbp-64h]\n  int v24; // [rsp+74h] [rbp-64h]\n  int v25; // [rsp+78h] [rbp-60h]\n  int i; // [rsp+7Ch] [rbp-5Ch]\n  int j; // [rsp+7Ch] [rbp-5Ch]\n  int v28; // [rsp+80h] [rbp-58h]\n  __int64 v29; // [rsp+88h] [rbp-50h]\n  _BYTE *v30; // [rsp+88h] [rbp-50h]\n  _BYTE *v31; // [rsp+88h] [rbp-50h]\n  _BYTE *v32; // [rsp+88h] [rbp-50h]\n  _BYTE *v33; // [rsp+88h] [rbp-50h]\n  _BYTE *v34; // [rsp+88h] [rbp-50h]\n  _BYTE *v35; // [rsp+88h] [rbp-50h]\n  unsigned int v36; // [rsp+90h] [rbp-48h]\n  unsigned int v37; // [rsp+90h] [rbp-48h]\n  unsigned int v38; // [rsp+90h] [rbp-48h]\n  unsigned int v39; // [rsp+90h] [rbp-48h]\n  unsigned int v40; // [rsp+90h] [rbp-48h]\n  _BYTE *v41; // [rsp+98h] [rbp-40h]\n  _BYTE *v42; // [rsp+98h] [rbp-40h]\n  _BYTE *v43; // [rsp+98h] [rbp-40h]\n  unsigned int v44; // [rsp+A0h] [rbp-38h]\n  __int64 v45; // [rsp+A8h] [rbp-30h]\n  int v46; // [rsp+B8h] [rbp-20h]\n  int v47; // [rsp+C0h] [rbp-18h]\n\n  v45 = *(_QWORD *)(a1 + 40);\n  v8 = (unsigned __int8 *)(*(_QWORD *)a1 - 1i64);\n  v5 = &v8[*(_DWORD *)(a1 + 8) - 5];\n  v41 = (_BYTE *)(*(_QWORD *)(a1 + 16) - 1i64);\n  v3 = (_DWORD)v41 - (a2 - *(_DWORD *)(a1 + 24));\n  v18 = &v41[*(_DWORD *)(a1 + 24) - 257];\n  v25 = *(_DWORD *)(v45 + 44);\n  v7 = *(_DWORD *)(v45 + 48);\n  v44 = *(_DWORD *)(v45 + 52);\n  v4 = *(_QWORD *)(v45 + 56);\n  v21 = *(_DWORD *)(v45 + 64);\n  v13 = *(_DWORD *)(v45 + 68);\n  v19 = *(_QWORD *)(v45 + 88);\n  v6 = *(_QWORD *)(v45 + 96);\n  v17 = (1 << *(_DWORD *)(v45 + 104)) - 1;\n  v28 = (1 << *(_DWORD *)(v45 + 108)) - 1;\n  while ( 2 )\n  {\n    if ( v13 < 0xF )\n    {\n      v9 = v8 + 1;\n      v22 = (*v9 << v13) + v21;\n      v14 = v13 + 8;\n      v8 = v9 + 1;\n      v21 = (*v8 << v14) + v22;\n      v13 = v14 + 8;\n    }\n    for ( i = *(_DWORD *)(v19 + 4i64 * (v17 & v21)); ; i = *(_DWORD *)(v19 + 4i64 * ((((1 << i) - 1) & v21) + HI015A(i))) )\n    {\n      v21 >>= SBCE47(i);\n      v13 -= BYTE1(i);\n      if ( !(_BYTE)i )\n      {\n        if ( dword_14F208624 > 1 )\n        {\n          if ( HI015A(i) < 0x20u || HI015A(i) >= 0x7Fu )\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         literal 0x%02x\\n\", HI015A(i));\n          else\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         literal '%c'\\n\", HI015A(i));\n        }\n        *++v41 = BYTE2(i);\n        goto LABEL_72;\n      }\n      if ( (i & 0x10) != 0 )\n        break;\n      if ( (i & 0x40) != 0 )\n      {\n        if ( (i & 0x20) != 0 )\n        {\n          if ( dword_14F208624 > 1 )\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         end of block\\n\");\n          *(_DWORD *)v45 = 11;\n        }\n        else\n        {\n          *(_QWORD *)(a1 + 32) = aInvalidLiteral_1;\n          *(_DWORD *)v45 = 27;\n        }\n        goto LABEL_74;\n      }\n    }\n    v12 = HI015A(i);\n    v36 = i & 0xF;\n    if ( (i & 0xF) != 0 )\n    {\n      if ( v13 < v36 )\n      {\n        v21 += *++v8 << v13;\n        v13 += 8;\n      }\n      v12 = (((1 << v36) - 1) & v21) + HI015A(i);\n      v21 >>= v36;\n      v13 -= v36;\n    }\n    if ( dword_14F208624 > 1 )\n      fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         length %u\\n\", v12);\n    if ( v13 < 0xF )\n    {\n      v10 = v8 + 1;\n      v23 = (*v10 << v13) + v21;\n      v15 = v13 + 8;\n      v8 = v10 + 1;\n      v21 = (*v8 << v15) + v23;\n      v13 = v15 + 8;\n    }\n    for ( j = *(_DWORD *)(v6 + 4i64 * (v28 & v21)); ; j = *(_DWORD *)(v6 + 4i64 * ((((1 << j) - 1) & v21) + HI015A(j))) )\n    {\n      v21 >>= SBCE47(j);\n      v13 -= BYTE1(j);\n      if ( (j & 0x10) != 0 )\n        break;\n      if ( (j & 0x40) != 0 )\n      {\n        *(_QWORD *)(a1 + 32) = aInvalidDistanc_3;\n        *(_DWORD *)v45 = 27;\n        goto LABEL_74;\n      }\n    }\n    v37 = j & 0xF;\n    if ( v13 < v37 )\n    {\n      v21 += *++v8 << v13;\n      v13 += 8;\n      if ( v13 < v37 )\n      {\n        v21 += *++v8 << v13;\n        v13 += 8;\n      }\n    }\n    v20 = (((1 << v37) - 1) & v21) + HI015A(j);\n    v21 >>= v37;\n    v13 -= v37;\n    if ( dword_14F208624 > 1 )\n      fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         distance %u\\n\", v20);\n    if ( v20 <= (int)v41 - v3 )\n    {\n      v33 = &v41[-v20];\n      do\n      {\n        v34 = v33 + 1;\n        v43 = v41 + 1;\n        *v43 = *v34++;\n        *++v43 = *v34;\n        v33 = v34 + 1;\n        v41 = v43 + 1;\n        *v41 = *v33;\n        v12 -= 3;\n      }\n      while ( v12 > 2 );\n      if ( v12 )\n      {\n        v35 = v33 + 1;\n        *++v41 = *v35;\n        if ( v12 > 1 )\n          *++v41 = v35[1];\n      }\n    }\n    else\n    {\n      v38 = v20 - ((_DWORD)v41 - v3);\n      if ( v38 > v7 )\n      {\n        *(_QWORD *)(a1 + 32) = aInvalidDistanc_2;\n        *(_DWORD *)v45 = 27;\n        break;\n      }\n      v29 = v4 - 1;\n      if ( v44 )\n      {\n        if ( v44 >= v38 )\n        {\n          v30 = (_BYTE *)(v44 - v38 + v29);\n          if ( v38 < v12 )\n          {\n            v12 -= v38;\n            do\n            {\n              *++v41 = *++v30;\n              --v38;\n            }\n            while ( v38 );\n            v30 = &v41[-v20];\n          }\n        }\n        else\n        {\n          v30 = (_BYTE *)(v44 + v25 - v38 + v29);\n          v39 = v38 - v44;\n          if ( v39 < v12 )\n          {\n            v12 -= v39;\n            do\n            {\n              *++v41 = *++v30;\n              --v39;\n            }\n            while ( v39 );\n            v30 = (_BYTE *)(v4 - 1);\n            if ( v44 < v12 )\n            {\n              v40 = v44;\n              v12 -= v44;\n              do\n              {\n                *++v41 = *++v30;\n                --v40;\n              }\n              while ( v40 );\n              v30 = &v41[-v20];\n            }\n          }\n        }\n      }\n      else\n      {\n        v30 = (_BYTE *)(v25 - v38 + v29);\n        if ( v38 < v12 )\n        {\n          v12 -= v38;\n          do\n          {\n            *++v41 = *++v30;\n            --v38;\n          }\n          while ( v38 );\n          v30 = &v41[-v20];\n        }\n      }\n      while ( v12 > 2 )\n      {\n        v31 = v30 + 1;\n        v42 = v41 + 1;\n        *v42 = *v31++;\n        *++v42 = *v31;\n        v30 = v31 + 1;\n        v41 = v42 + 1;\n        *v41 = *v30;\n        v12 -= 3;\n      }\n      if ( v12 )\n      {\n        v32 = v30 + 1;\n        *++v41 = *v32;\n        if ( v12 > 1 )\n          *++v41 = v32[1];\n      }\n    }\nLABEL_72:\n    if ( v8 < v5 && v41 < v18 )\n      continue;\n    break;\n  }\nLABEL_74:\n  v11 = &v8[-(v13 >> 3)];\n  v16 = v13 - 8 * (v13 >> 3);\n  v24 = ((1 << v16) - 1) & v21;\n  *(_QWORD *)a1 = v11 + 1;\n  *(_QWORD *)(a1 + 16) = v41 + 1;\n  if ( v11 >= v5 )\n    v46 = 5 - ((_DWORD)v11 - (_DWORD)v5);\n  else\n    v46 = (_DWORD)v5 - (_DWORD)v11 + 5;\n  *(_DWORD *)(a1 + 8) = v46;\n  if ( v41 >= v18 )\n    v47 = 257 - ((_DWORD)v41 - (_DWORD)v18);\n  else\n    v47 = (_DWORD)v18 - (_DWORD)v41 + 257;\n  *(_DWORD *)(a1 + 24) = v47;\n  *(_DWORD *)(v45 + 64) = v24;\n  result = v16;\n  *(_DWORD *)(v45 + 68) = v16;\n  return result;\n}\n// 14F208624: using guessed type int dword_14F208624;\n// 14F208690: using guessed type void *off_14F208690;\n\n"
    },
    {
        "Function": "sub_149289DA0",
        "Total XOR and shift operations": 21,
        "XOR operations": 0,
        "Shift operations": 21,
        "Operation percentage": "6.31%",
        "Function Body": "\n__int64 __fastcall sub_149289DA0(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned int v2; // ebx\n  unsigned __int16 v3; // di\n  int v4; // edi\n  int v5; // r8d\n  __int64 v6; // rax\n  int v7; // r12d\n  int v8; // r10d\n  unsigned int v9; // r11d\n  int v10; // ecx\n  __int64 j; // rax\n  int v12; // r8d\n  unsigned int v13; // eax\n  unsigned int v14; // edx\n  unsigned int v15; // ecx\n  __int64 i; // rdx\n  unsigned int v17; // eax\n  int v18; // r9d\n  __int64 v19; // r8\n  int v20; // eax\n  int v21; // r10d\n  char v22; // di\n  char v23; // r12\n  int v24; // r11d\n  unsigned int v25; // eax\n  __int64 v26; // rcx\n  int *v27; // rdx\n  int v28; // r11d\n  unsigned int v29; // r12d\n  int v30; // ecx\n  __int64 ii; // rax\n  int v32; // r8d\n  unsigned int v33; // eax\n  unsigned int v34; // r9d\n  int v35; // ecx\n  unsigned int v36; // edx\n  __int64 n; // rdx\n  unsigned int v38; // eax\n  int v39; // r9d\n  __int64 v40; // r8\n  int v41; // eax\n  int v42; // r10d\n  char v43; // r11\n  char v44; // r12\n  int v45; // r13d\n  unsigned int v46; // eax\n  __int64 v47; // rcx\n  int *v48; // rdx\n  int v49; // edx\n  char v50; // al\n  char v51; // al\n  int v52; // r10d\n  int v53; // r9d\n  __int64 m; // r8\n  unsigned int v55; // edx\n  __int64 v56; // rdi\n  int *v57; // rcx\n  char v58; // al\n  int v59; // r11d\n  int v60; // r10d\n  __int64 k; // r9\n  unsigned int v62; // edx\n  __int64 v63; // rdi\n  int *v64; // rcx\n  int v65; // r8d\n  int v66; // eax\n  __int64 v68; // [rsp+20h] [rbp-58h] BYREF\n  int v69[2]; // [rsp+28h] [rbp-50h] BYREF\n  __int64 v70; // [rsp+30h] [rbp-48h]\n  int v71; // [rsp+38h] [rbp-40h]\n  int v72; // [rsp+80h] [rbp+8h]\n  _DWORD *v73; // [rsp+88h] [rbp+10h]\n  int v74; // [rsp+90h] [rbp+18h]\n\n  v73 = a2;\n  v2 = 0;\n  v3 = a1[5];\n  v72 = v3 & 0x8000;\n  LOFA4CD(v68) = *(_DWORD *)(a1 + 3);\n  v4 = (v3 & 0x7FFF) - 0x3FFF;\n  HIEBE3D(v68) = *(_DWORD *)(a1 + 1);\n  v69[0] = *a1 << 16;\n  if ( v4 == -16383 )\n  {\n    v5 = 0;\n    v6 = 0i64;\n    while ( !v69[v6 - 2] )\n    {\n      if ( ++v6 >= 3 )\n        goto LABEL_80;\n    }\n    v68 = 0i64;\n    v69[0] = 0;\n    v2 = 2;\n  }\n  else\n  {\n    v74 = v4;\n    v70 = v68;\n    v7 = 0;\n    v71 = v69[0];\n    v8 = dword_143507C88 / 32;\n    v9 = 31 - dword_143507C88 % 32;\n    v10 = v69[dword_143507C88 / 32 - 2];\n    if ( _bittest(&v10, v9) )\n    {\n      if ( (~(-1 << v9) & v69[v8 - 2]) != 0 )\n      {\nLABEL_14:\n        v12 = (dword_143507C88 - 1) / 32;\n        v13 = v69[v12 - 2];\n        v14 = 1 << (31 - (dword_143507C88 - 1) % 32);\n        v15 = v13 + v14;\n        if ( v13 + v14 < v13 || v15 < v14 )\n          v7 = 1;\n        v69[v12 - 2] = v15;\n        for ( i = v12 - 1; i >= 0; v69[i-- - 2] = v17 + 1 )\n        {\n          if ( !v7 )\n            break;\n          v17 = v69[i - 2];\n          v7 = 0;\n          if ( v17 + 1 < v17 || v17 == -1 )\n            v7 = 1;\n        }\n      }\n      else\n      {\n        for ( j = v8 + 1; j < 3; ++j )\n        {\n          if ( v69[j - 2] )\n            goto LABEL_14;\n        }\n      }\n    }\n    v69[v8 - 2] &= -1 << v9;\n    if ( v8 + 1 < 3i64 )\n      memset(&v69[v8 - 1], 0, 4 * (3i64 - (v8 + 1)));\n    if ( v7 )\n      ++v4;\n    if ( v4 >= dword_143507C84 - dword_143507C88 )\n    {\n      if ( v4 > dword_143507C84 )\n      {\n        v49 = (dword_143507C8C >> 31) & 0x1F;\n        v50 = v49 + dword_143507C8C;\n        if ( v4 < dword_143507C80 )\n        {\n          LOFA4CD(v68) = v68 & 0x7F3E44FF;\n          v5 = v4 + dword_143507C94;\n          v58 = (v50 & 0x1F) - v49;\n          v59 = dword_143507C8C / 32;\n          v60 = 0;\n          for ( k = 0i64; k < 3; ++k )\n          {\n            v62 = v69[k - 2];\n            v69[k - 2] = v60 | (v62 >> v58);\n            v60 = (v62 & ~(-1 << v58)) << (32 - v58);\n          }\n          v63 = 2i64;\n          v64 = &v69[-v59];\n          do\n          {\n            if ( v63 < v59 )\n              v69[v63 - 2] = 0;\n            else\n              v69[v63 - 2] = *v64;\n            --v63;\n            --v64;\n          }\n          while ( v63 >= 0 );\n        }\n        else\n        {\n          v51 = (v50 & 0x1F) - v49;\n          v68 = 0x80169E00i64;\n          v52 = dword_143507C8C / 32;\n          v69[0] = 0;\n          v53 = 0;\n          for ( m = 0i64; m < 3; ++m )\n          {\n            v55 = v69[m - 2];\n            v69[m - 2] = v53 | (v55 >> v51);\n            v53 = (v55 & ~(-1 << v51)) << (32 - v51);\n          }\n          v56 = 2i64;\n          v57 = &v69[-v52];\n          do\n          {\n            if ( v56 < v52 )\n              v69[v56 - 2] = 0;\n            else\n              v69[v56 - 2] = *v57;\n            --v56;\n            --v57;\n          }\n          while ( v56 >= 0 );\n          v2 = 1;\n          v5 = dword_143507C80 + dword_143507C94;\n        }\n      }\n      else\n      {\n        v18 = 0;\n        v68 = v70;\n        v69[0] = v71;\n        v19 = 0i64;\n        v20 = (dword_143507C84 - v74) % 32;\n        v21 = (dword_143507C84 - v74) / 32;\n        v22 = v20;\n        v23 = 32 - v20;\n        v24 = ~(-1 << v20);\n        do\n        {\n          v25 = v69[v19 - 2];\n          v69[v19++ - 2] = v18 | (v25 >> v22);\n          v18 = (v24 & v25) << v23;\n        }\n        while ( v19 < 3 );\n        v26 = 2i64;\n        v27 = &v69[-v21];\n        do\n        {\n          if ( v26 < v21 )\n            v69[v26 - 2] = 0;\n          else\n            v69[v26 - 2] = *v27;\n          --v26;\n          --v27;\n        }\n        while ( v26 >= 0 );\n        v28 = dword_143507C88 / 32;\n        v29 = 31 - dword_143507C88 % 32;\n        v30 = v69[dword_143507C88 / 32 - 2];\n        if ( _bittest(&v30, v29) )\n        {\n          if ( (~(-1 << v29) & v69[v28 - 2]) != 0 )\n          {\nLABEL_44:\n            v32 = (dword_143507C88 - 1) / 32;\n            v33 = v69[v32 - 2];\n            v34 = 1 << (31 - (dword_143507C88 - 1) % 32);\n            v35 = 0;\n            v36 = v33 + v34;\n            if ( v33 + v34 < v33 || v36 < v34 )\n              v35 = 1;\n            v69[v32 - 2] = v36;\n            for ( n = v32 - 1; n >= 0; v69[n-- - 2] = v38 + 1 )\n            {\n              if ( !v35 )\n                break;\n              v38 = v69[n - 2];\n              v35 = 0;\n              if ( v38 + 1 < v38 || v38 == -1 )\n                v35 = 1;\n            }\n          }\n          else\n          {\n            for ( ii = v28 + 1; ii < 3; ++ii )\n            {\n              if ( v69[ii - 2] )\n                goto LABEL_44;\n            }\n          }\n        }\n        v69[v28 - 2] &= -1 << v29;\n        if ( v28 + 1 < 3i64 )\n          memset(&v69[v28 - 1], 0, 4 * (3i64 - (v28 + 1)));\n        v39 = 0;\n        v40 = 0i64;\n        v41 = (dword_143507C8C + 1) % 32;\n        v42 = (dword_143507C8C + 1) / 32;\n        v43 = v41;\n        v44 = 32 - v41;\n        v45 = ~(-1 << v41);\n        do\n        {\n          v46 = v69[v40 - 2];\n          v69[v40++ - 2] = v39 | (v46 >> v43);\n          v39 = (v45 & v46) << v44;\n        }\n        while ( v40 < 3 );\n        v47 = 2i64;\n        v48 = &v69[-v42];\n        do\n        {\n          if ( v47 < v42 )\n            v69[v47 - 2] = 0;\n          else\n            v69[v47 - 2] = *v48;\n          --v47;\n          --v48;\n        }\n        while ( v47 >= 0 );\n        v5 = 0;\n        v2 = 2;\n      }\n    }\n    else\n    {\n      v68 = 0i64;\n      v69[0] = 0;\n      v5 = 0;\n      v2 = 2;\n    }\n    a2 = v73;\n  }\nLABEL_80:\n  v65 = v68 | (v72 != 0 ? 0x80169E00 : 0) | (v5 << (31 - dword_143507C8C));\n  if ( dword_143507C90 == 64 )\n  {\n    v66 = HIEBE3D(v68);\n    a2[1] = v65;\n    *a2 = v66;\n  }\n  else if ( dword_143507C90 == 32 )\n  {\n    *a2 = v65;\n  }\n  return v2;\n}\n// 143507C80: using guessed type int dword_143507C80;\n// 143507C84: using guessed type int dword_143507C84;\n// 143507C88: using guessed type int dword_143507C88;\n// 143507C8C: using guessed type int dword_143507C8C;\n// 143507C90: using guessed type int dword_143507C90;\n// 143507C94: using guessed type int dword_143507C94;\n// 149289DA0: using guessed type int var_50[2];\n\n"
    },
    {
        "Function": "sub_1459893A4",
        "Total XOR and shift operations": 21,
        "XOR operations": 0,
        "Shift operations": 21,
        "Operation percentage": "6.31%",
        "Function Body": "\n__int64 __fastcall sub_1459893A4(unsigned __int16 *a1, _DWORD *a2)\n{\n  unsigned int v2; // ebx\n  unsigned __int16 v3; // di\n  int v4; // edi\n  int v5; // r8d\n  __int64 v6; // rax\n  int v7; // r12d\n  int v8; // r10d\n  unsigned int v9; // r11d\n  int v10; // ecx\n  __int64 j; // rax\n  int v12; // r8d\n  unsigned int v13; // eax\n  unsigned int v14; // edx\n  unsigned int v15; // ecx\n  __int64 i; // rdx\n  unsigned int v17; // eax\n  int v18; // r9d\n  __int64 v19; // r8\n  int v20; // eax\n  int v21; // r10d\n  char v22; // di\n  char v23; // r12\n  int v24; // r11d\n  unsigned int v25; // eax\n  __int64 v26; // rcx\n  int *v27; // rdx\n  int v28; // r11d\n  unsigned int v29; // r12d\n  int v30; // ecx\n  __int64 ii; // rax\n  int v32; // r8d\n  unsigned int v33; // eax\n  unsigned int v34; // r9d\n  int v35; // ecx\n  unsigned int v36; // edx\n  __int64 n; // rdx\n  unsigned int v38; // eax\n  int v39; // r9d\n  __int64 v40; // r8\n  int v41; // eax\n  int v42; // r10d\n  char v43; // r11\n  char v44; // r12\n  int v45; // r13d\n  unsigned int v46; // eax\n  __int64 v47; // rcx\n  int *v48; // rdx\n  int v49; // edx\n  char v50; // al\n  char v51; // al\n  int v52; // r10d\n  int v53; // r9d\n  __int64 m; // r8\n  unsigned int v55; // edx\n  __int64 v56; // rdi\n  int *v57; // rcx\n  char v58; // al\n  int v59; // r11d\n  int v60; // r10d\n  __int64 k; // r9\n  unsigned int v62; // edx\n  __int64 v63; // rdi\n  int *v64; // rcx\n  int v65; // r8d\n  int v66; // eax\n  __int64 v68; // [rsp+20h] [rbp-58h] BYREF\n  int v69[2]; // [rsp+28h] [rbp-50h] BYREF\n  __int64 v70; // [rsp+30h] [rbp-48h]\n  int v71; // [rsp+38h] [rbp-40h]\n  int v72; // [rsp+80h] [rbp+8h]\n  _DWORD *v73; // [rsp+88h] [rbp+10h]\n  int v74; // [rsp+90h] [rbp+18h]\n\n  v73 = a2;\n  v2 = 0;\n  v3 = a1[5];\n  v72 = v3 & 0x8000;\n  LOFA4CD(v68) = *(_DWORD *)(a1 + 3);\n  v4 = (v3 & 0x7FFF) - 0x3FFF;\n  HIEBE3D(v68) = *(_DWORD *)(a1 + 1);\n  v69[0] = *a1 << 16;\n  if ( v4 == -16383 )\n  {\n    v5 = 0;\n    v6 = 0i64;\n    while ( !v69[v6 - 2] )\n    {\n      if ( ++v6 >= 3 )\n        goto LABEL_80;\n    }\n    v68 = 0i64;\n    v69[0] = 0;\n    v2 = 2;\n  }\n  else\n  {\n    v74 = v4;\n    v70 = v68;\n    v7 = 0;\n    v71 = v69[0];\n    v8 = dword_143507CA0 / 32;\n    v9 = 31 - dword_143507CA0 % 32;\n    v10 = v69[dword_143507CA0 / 32 - 2];\n    if ( _bittest(&v10, v9) )\n    {\n      if ( (~(-1 << v9) & v69[v8 - 2]) != 0 )\n      {\nLABEL_14:\n        v12 = (dword_143507CA0 - 1) / 32;\n        v13 = v69[v12 - 2];\n        v14 = 1 << (31 - (dword_143507CA0 - 1) % 32);\n        v15 = v13 + v14;\n        if ( v13 + v14 < v13 || v15 < v14 )\n          v7 = 1;\n        v69[v12 - 2] = v15;\n        for ( i = v12 - 1; i >= 0; v69[i-- - 2] = v17 + 1 )\n        {\n          if ( !v7 )\n            break;\n          v17 = v69[i - 2];\n          v7 = 0;\n          if ( v17 + 1 < v17 || v17 == -1 )\n            v7 = 1;\n        }\n      }\n      else\n      {\n        for ( j = v8 + 1; j < 3; ++j )\n        {\n          if ( v69[j - 2] )\n            goto LABEL_14;\n        }\n      }\n    }\n    v69[v8 - 2] &= -1 << v9;\n    if ( v8 + 1 < 3i64 )\n      memset(&v69[v8 - 1], 0, 4 * (3i64 - (v8 + 1)));\n    if ( v7 )\n      ++v4;\n    if ( v4 >= dword_143507C9C - dword_143507CA0 )\n    {\n      if ( v4 > dword_143507C9C )\n      {\n        v49 = (dword_143507CA4 >> 31) & 0x1F;\n        v50 = v49 + dword_143507CA4;\n        if ( v4 < dword_143507C98 )\n        {\n          LOFA4CD(v68) = v68 & 0x7F3E44FF;\n          v5 = v4 + dword_143507CAC;\n          v58 = (v50 & 0x1F) - v49;\n          v59 = dword_143507CA4 / 32;\n          v60 = 0;\n          for ( k = 0i64; k < 3; ++k )\n          {\n            v62 = v69[k - 2];\n            v69[k - 2] = v60 | (v62 >> v58);\n            v60 = (v62 & ~(-1 << v58)) << (32 - v58);\n          }\n          v63 = 2i64;\n          v64 = &v69[-v59];\n          do\n          {\n            if ( v63 < v59 )\n              v69[v63 - 2] = 0;\n            else\n              v69[v63 - 2] = *v64;\n            --v63;\n            --v64;\n          }\n          while ( v63 >= 0 );\n        }\n        else\n        {\n          v51 = (v50 & 0x1F) - v49;\n          v68 = 0x80169E00i64;\n          v52 = dword_143507CA4 / 32;\n          v69[0] = 0;\n          v53 = 0;\n          for ( m = 0i64; m < 3; ++m )\n          {\n            v55 = v69[m - 2];\n            v69[m - 2] = v53 | (v55 >> v51);\n            v53 = (v55 & ~(-1 << v51)) << (32 - v51);\n          }\n          v56 = 2i64;\n          v57 = &v69[-v52];\n          do\n          {\n            if ( v56 < v52 )\n              v69[v56 - 2] = 0;\n            else\n              v69[v56 - 2] = *v57;\n            --v56;\n            --v57;\n          }\n          while ( v56 >= 0 );\n          v2 = 1;\n          v5 = dword_143507C98 + dword_143507CAC;\n        }\n      }\n      else\n      {\n        v18 = 0;\n        v68 = v70;\n        v69[0] = v71;\n        v19 = 0i64;\n        v20 = (dword_143507C9C - v74) % 32;\n        v21 = (dword_143507C9C - v74) / 32;\n        v22 = v20;\n        v23 = 32 - v20;\n        v24 = ~(-1 << v20);\n        do\n        {\n          v25 = v69[v19 - 2];\n          v69[v19++ - 2] = v18 | (v25 >> v22);\n          v18 = (v24 & v25) << v23;\n        }\n        while ( v19 < 3 );\n        v26 = 2i64;\n        v27 = &v69[-v21];\n        do\n        {\n          if ( v26 < v21 )\n            v69[v26 - 2] = 0;\n          else\n            v69[v26 - 2] = *v27;\n          --v26;\n          --v27;\n        }\n        while ( v26 >= 0 );\n        v28 = dword_143507CA0 / 32;\n        v29 = 31 - dword_143507CA0 % 32;\n        v30 = v69[dword_143507CA0 / 32 - 2];\n        if ( _bittest(&v30, v29) )\n        {\n          if ( (~(-1 << v29) & v69[v28 - 2]) != 0 )\n          {\nLABEL_44:\n            v32 = (dword_143507CA0 - 1) / 32;\n            v33 = v69[v32 - 2];\n            v34 = 1 << (31 - (dword_143507CA0 - 1) % 32);\n            v35 = 0;\n            v36 = v33 + v34;\n            if ( v33 + v34 < v33 || v36 < v34 )\n              v35 = 1;\n            v69[v32 - 2] = v36;\n            for ( n = v32 - 1; n >= 0; v69[n-- - 2] = v38 + 1 )\n            {\n              if ( !v35 )\n                break;\n              v38 = v69[n - 2];\n              v35 = 0;\n              if ( v38 + 1 < v38 || v38 == -1 )\n                v35 = 1;\n            }\n          }\n          else\n          {\n            for ( ii = v28 + 1; ii < 3; ++ii )\n            {\n              if ( v69[ii - 2] )\n                goto LABEL_44;\n            }\n          }\n        }\n        v69[v28 - 2] &= -1 << v29;\n        if ( v28 + 1 < 3i64 )\n          memset(&v69[v28 - 1], 0, 4 * (3i64 - (v28 + 1)));\n        v39 = 0;\n        v40 = 0i64;\n        v41 = (dword_143507CA4 + 1) % 32;\n        v42 = (dword_143507CA4 + 1) / 32;\n        v43 = v41;\n        v44 = 32 - v41;\n        v45 = ~(-1 << v41);\n        do\n        {\n          v46 = v69[v40 - 2];\n          v69[v40++ - 2] = v39 | (v46 >> v43);\n          v39 = (v45 & v46) << v44;\n        }\n        while ( v40 < 3 );\n        v47 = 2i64;\n        v48 = &v69[-v42];\n        do\n        {\n          if ( v47 < v42 )\n            v69[v47 - 2] = 0;\n          else\n            v69[v47 - 2] = *v48;\n          --v47;\n          --v48;\n        }\n        while ( v47 >= 0 );\n        v5 = 0;\n        v2 = 2;\n      }\n    }\n    else\n    {\n      v68 = 0i64;\n      v69[0] = 0;\n      v5 = 0;\n      v2 = 2;\n    }\n    a2 = v73;\n  }\nLABEL_80:\n  v65 = v68 | (v72 != 0 ? 0x80169E00 : 0) | (v5 << (31 - dword_143507CA4));\n  if ( dword_143507CA8 == 64 )\n  {\n    v66 = HIEBE3D(v68);\n    a2[1] = v65;\n    *a2 = v66;\n  }\n  else if ( dword_143507CA8 == 32 )\n  {\n    *a2 = v65;\n  }\n  return v2;\n}\n// 143507C98: using guessed type int dword_143507C98;\n// 143507C9C: using guessed type int dword_143507C9C;\n// 143507CA0: using guessed type int dword_143507CA0;\n// 143507CA4: using guessed type int dword_143507CA4;\n// 143507CA8: using guessed type int dword_143507CA8;\n// 143507CAC: using guessed type int dword_143507CAC;\n// 1459893A4: using guessed type int var_50[2];\n\n"
    },
    {
        "Function": "sub_1481D56F0",
        "Total XOR and shift operations": 46,
        "XOR operations": 1,
        "Shift operations": 45,
        "Operation percentage": "6.30%",
        "Function Body": "\n__int64 __fastcall sub_1481D56F0(\n        __int64 a1,\n        __int64 (__fastcall *a2)(__int64, unsigned __int8 **),\n        __int64 a3,\n        unsigned int (__fastcall *a4)(__int64, _BYTE *, _QWORD),\n        __int64 a5)\n{\n  _BYTE *v7; // [rsp+30h] [rbp-98h]\n  int v8; // [rsp+38h] [rbp-90h]\n  int v9; // [rsp+38h] [rbp-90h]\n  unsigned int v10; // [rsp+3Ch] [rbp-8Ch]\n  __int16 v11; // [rsp+40h] [rbp-88h]\n  unsigned int v12; // [rsp+44h] [rbp-84h]\n  unsigned int v13; // [rsp+44h] [rbp-84h]\n  unsigned int v14; // [rsp+48h] [rbp-80h]\n  unsigned __int8 *v15; // [rsp+50h] [rbp-78h] BYREF\n  unsigned int v16; // [rsp+58h] [rbp-70h]\n  unsigned int v17; // [rsp+5Ch] [rbp-6Ch]\n  int v18; // [rsp+60h] [rbp-68h]\n  unsigned int v19; // [rsp+64h] [rbp-64h]\n  _BYTE *v20; // [rsp+68h] [rbp-60h]\n  __int64 v21; // [rsp+70h] [rbp-58h]\n  unsigned int v22; // [rsp+78h] [rbp-50h]\n  int v23; // [rsp+7Ch] [rbp-4Ch]\n  unsigned int v24; // [rsp+80h] [rbp-48h]\n  char *v25; // [rsp+88h] [rbp-40h]\n  char *v26; // [rsp+90h] [rbp-38h]\n  char *v27; // [rsp+98h] [rbp-30h]\n  char *Format; // [rsp+A0h] [rbp-28h]\n  unsigned int v29; // [rsp+A8h] [rbp-20h]\n\n  if ( !a1 || !*(_QWORD *)(a1 + 40) )\n    return 4205B07294i64;\n  v21 = *(_QWORD *)(a1 + 40);\n  *(_QWORD *)(a1 + 32) = 0i64;\n  *(_DWORD *)v21 = 11;\n  *(_DWORD *)(v21 + 4) = 0;\n  *(_DWORD *)(v21 + 48) = 0;\n  v15 = *(unsigned __int8 **)a1;\n  if ( v15 )\n    v22 = *(_DWORD *)(a1 + 8);\n  else\n    v22 = 0;\n  v10 = v22;\n  v17 = 0;\n  v12 = 0;\n  v7 = *(_BYTE **)(v21 + 56);\n  v14 = *(_DWORD *)(v21 + 44);\nLABEL_8:\n  while ( 2 )\n  {\n    v23 = *(_DWORD *)v21;\n    v23 -= 11;\n    switch ( v23 )\n    {\n      case 0:\n        if ( *(_DWORD *)(v21 + 4) )\n        {\n          v17 >>= v12 & 7;\n          v12 -= v12 & 7;\n          *(_DWORD *)v21 = 26;\n          continue;\n        }\n        while ( 1 )\n        {\n          if ( v12 >= 3 )\n          {\n            *(_DWORD *)(v21 + 4) = v17 & 1;\n            v17 >>= 1;\n            v13 = v12 - 1;\n            v24 = v17 & 3;\n            if ( (v17 & 3) != 0 )\n            {\n              switch ( v24 )\n              {\n                case 1u:\n                  sub_14DB0B570(v21);\n                  if ( dword_14F208624 > 0 )\n                  {\n                    if ( *(_DWORD *)(v21 + 4) )\n                      v26 = aLast_0;\n                    else\n                      v26 = (char *)&unk_14DFF904A;\n                    fprintf((FILE *const)&off_14F208690 + 2, \"inflate:     fixed codes block%s\\n\", v26);\n                  }\n                  *(_DWORD *)v21 = 18;\n                  break;\n                case 2u:\n                  if ( dword_14F208624 > 0 )\n                  {\n                    if ( *(_DWORD *)(v21 + 4) )\n                      v27 = aLast_1;\n                    else\n                      v27 = (char *)&unk_14DFF904B;\n                    fprintf((FILE *const)&off_14F208690 + 2, \"inflate:     dynamic codes block%s\\n\", v27);\n                  }\n                  *(_DWORD *)v21 = 15;\n                  break;\n                case 3u:\n                  *(_QWORD *)(a1 + 32) = aInvalidBlockTy;\n                  *(_DWORD *)v21 = 27;\n                  break;\n              }\n            }\n            else\n            {\n              if ( dword_14F208624 > 0 )\n              {\n                if ( *(_DWORD *)(v21 + 4) )\n                  v25 = aLast;\n                else\n                  v25 = (char *)&unk_14DFF9049;\n                fprintf((FILE *const)&off_14F208690 + 2, \"inflate:     stored block%s\\n\", v25);\n              }\n              *(_DWORD *)v21 = 13;\n            }\n            v17 >>= 2;\n            v12 = v13 - 2;\n            goto LABEL_8;\n          }\n          if ( !v10 )\n          {\n            v10 = a2(a3, &v15);\n            if ( !v10 )\n              break;\n          }\n          --v10;\n          v17 += *v15++ << v12;\n          v12 += 8;\n        }\n        v15 = 0i64;\n        v16 = -5;\n        goto LABEL_232;\n      case 2:\n        v17 >>= v12 & 7;\n        v12 -= v12 & 7;\nLABEL_42:\n        if ( v12 >= 0x20 )\n        {\n          if ( (unsigned __int16)v17 != (HI015A(v17) ^ 0xFFFF) )\n          {\n            *(_QWORD *)(a1 + 32) = aInvalidStoredB;\n            *(_DWORD *)v21 = 27;\n            continue;\n          }\n          *(_DWORD *)(v21 + 72) = (unsigned __int16)v17;\n          if ( dword_14F208624 > 0 )\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       stored length %u\\n\", *(unsigned int *)(v21 + 72));\n          v17 = 0;\n          v12 = 0;\n          while ( 1 )\n          {\n            if ( !*(_DWORD *)(v21 + 72) )\n            {\n              if ( dword_14F208624 > 0 )\n                fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       stored end\\n\");\n              *(_DWORD *)v21 = 11;\n              goto LABEL_8;\n            }\n            v19 = *(_DWORD *)(v21 + 72);\n            if ( !v10 )\n            {\n              v10 = a2(a3, &v15);\n              if ( !v10 )\n              {\n                v15 = 0i64;\n                v16 = -5;\n                goto LABEL_232;\n              }\n            }\n            if ( !v14 )\n            {\n              v7 = *(_BYTE **)(v21 + 56);\n              v14 = *(_DWORD *)(v21 + 44);\n              *(_DWORD *)(v21 + 48) = v14;\n              if ( a4(a5, v7, v14) )\n                break;\n            }\n            if ( v19 > v10 )\n              v19 = v10;\n            if ( v19 > v14 )\n              v19 = v14;\n            qmemcpy(v7, v15, v19);\n            v10 -= v19;\n            v15 += v19;\n            v14 -= v19;\n            v7 += v19;\n            *(_DWORD *)(v21 + 72) -= v19;\n          }\n          v16 = -5;\n        }\n        else\n        {\n          if ( v10 || (v10 = a2(a3, &v15)) != 0 )\n          {\n            --v10;\n            v17 += *v15++ << v12;\n            v12 += 8;\n            goto LABEL_42;\n          }\n          v15 = 0i64;\n          v16 = -5;\n        }\n        goto LABEL_232;\n      case 4:\nLABEL_67:\n        if ( v12 >= 0xE )\n        {\n          *(_DWORD *)(v21 + 116) = (v17 & 0x1F) + 257;\n          v17 >>= 5;\n          *(_DWORD *)(v21 + 120) = (v17 & 0x1F) + 1;\n          v17 >>= 5;\n          *(_DWORD *)(v21 + 112) = (v17 & 0xF) + 4;\n          v17 >>= 4;\n          v12 -= 14;\n          if ( *(_DWORD *)(v21 + 116) > 0x11Eu || *(_DWORD *)(v21 + 120) > 0x1Eu )\n          {\n            *(_QWORD *)(a1 + 32) = aTooManyLengthO;\n            *(_DWORD *)v21 = 27;\n            continue;\n          }\n          if ( dword_14F208624 > 0 )\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       table sizes ok\\n\");\n          *(_DWORD *)(v21 + 124) = 0;\n          while ( *(_DWORD *)(v21 + 124) < *(_DWORD *)(v21 + 112) )\n          {\n            while ( v12 < 3 )\n            {\n              if ( !v10 )\n              {\n                v10 = a2(a3, &v15);\n                if ( !v10 )\n                {\n                  v15 = 0i64;\n                  v16 = -5;\n                  goto LABEL_232;\n                }\n              }\n              --v10;\n              v17 += *v15++ << v12;\n              v12 += 8;\n            }\n            *(_WORD *)(v21 + 2i64 * word_1450B8E20[(*(_DWORD *)(v21 + 124))++] + 136) = v17 & 7;\n            v17 >>= 3;\n            v12 -= 3;\n          }\n          while ( *(_DWORD *)(v21 + 124) < 0x13u )\n            *(_WORD *)(v21 + 2i64 * word_1450B8E20[(*(_DWORD *)(v21 + 124))++] + 136) = 0;\n          *(_QWORD *)(v21 + 128) = v21 + 1352;\n          *(_QWORD *)(v21 + 88) = *(_QWORD *)(v21 + 128);\n          *(_DWORD *)(v21 + 104) = 7;\n          v16 = sub_1448463E0(0, v21 + 136, 0x13u, (_DWORD **)(v21 + 128), (int *)(v21 + 104), (_WORD *)(v21 + 776));\n          if ( v16 )\n          {\n            *(_QWORD *)(a1 + 32) = aInvalidCodeLen;\n            *(_DWORD *)v21 = 27;\n            continue;\n          }\n          if ( dword_14F208624 > 0 )\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       code lengths ok\\n\");\n          *(_DWORD *)(v21 + 124) = 0;\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              if ( *(_DWORD *)(v21 + 124) >= (unsigned int)(*(_DWORD *)(v21 + 120) + *(_DWORD *)(v21 + 116)) )\n                goto LABEL_132;\n              while ( 1 )\n              {\n                v18 = *(_DWORD *)(*(_QWORD *)(v21 + 88) + 4i64 * (((1 << *(_DWORD *)(v21 + 104)) - 1) & v17));\n                if ( BYTE1(v18) <= v12 )\n                  break;\n                if ( !v10 )\n                {\n                  v10 = a2(a3, &v15);\n                  if ( !v10 )\n                  {\n                    v15 = 0i64;\n                    v16 = -5;\n                    goto LABEL_232;\n                  }\n                }\n                --v10;\n                v17 += *v15++ << v12;\n                v12 += 8;\n              }\n              if ( HI015A(v18) >= 0x10u )\n                break;\n              while ( v12 < BYTE1(v18) )\n              {\n                if ( !v10 )\n                {\n                  v10 = a2(a3, &v15);\n                  if ( !v10 )\n                  {\n                    v15 = 0i64;\n                    v16 = -5;\n                    goto LABEL_232;\n                  }\n                }\n                --v10;\n                v17 += *v15++ << v12;\n                v12 += 8;\n              }\n              v17 >>= SBCE47(v18);\n              v12 -= BYTE1(v18);\n              *(_WORD *)(v21 + 2i64 * (unsigned int)(*(_DWORD *)(v21 + 124))++ + 136) = HI015A(v18);\n            }\n            if ( HI015A(v18) == 16 )\n            {\n              while ( v12 < (unsigned int)BYTE1(v18) + 2 )\n              {\n                if ( !v10 )\n                {\n                  v10 = a2(a3, &v15);\n                  if ( !v10 )\n                  {\n                    v15 = 0i64;\n                    v16 = -5;\n                    goto LABEL_232;\n                  }\n                }\n                --v10;\n                v17 += *v15++ << v12;\n                v12 += 8;\n              }\n              v17 >>= SBCE47(v18);\n              v12 -= BYTE1(v18);\n              if ( !*(_DWORD *)(v21 + 124) )\n              {\n                *(_QWORD *)(a1 + 32) = aInvalidBitLeng;\n                *(_DWORD *)v21 = 27;\nLABEL_132:\n                if ( *(_DWORD *)v21 == 27 )\n                  goto LABEL_8;\n                *(_QWORD *)(v21 + 128) = v21 + 1352;\n                *(_QWORD *)(v21 + 88) = *(_QWORD *)(v21 + 128);\n                *(_DWORD *)(v21 + 104) = 9;\n                v16 = sub_1448463E0(\n                        1,\n                        v21 + 136,\n                        *(_DWORD *)(v21 + 116),\n                        (_DWORD **)(v21 + 128),\n                        (int *)(v21 + 104),\n                        (_WORD *)(v21 + 776));\n                if ( v16 )\n                {\n                  *(_QWORD *)(a1 + 32) = aInvalidLiteral;\n                  *(_DWORD *)v21 = 27;\n                  goto LABEL_8;\n                }\n                *(_QWORD *)(v21 + 96) = *(_QWORD *)(v21 + 128);\n                *(_DWORD *)(v21 + 108) = 6;\n                v16 = sub_1448463E0(\n                        2,\n                        v21 + 2i64 * *(unsigned int *)(v21 + 116) + 136,\n                        *(_DWORD *)(v21 + 120),\n                        (_DWORD **)(v21 + 128),\n                        (int *)(v21 + 108),\n                        (_WORD *)(v21 + 776));\n                if ( v16 )\n                {\n                  *(_QWORD *)(a1 + 32) = aInvalidDistanc;\n                  *(_DWORD *)v21 = 27;\n                  goto LABEL_8;\n                }\n                if ( dword_14F208624 > 0 )\n                  fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       codes ok\\n\");\n                *(_DWORD *)v21 = 18;\n                goto LABEL_140;\n              }\n              v11 = *(_WORD *)(v21 + 2i64 * (unsigned int)(*(_DWORD *)(v21 + 124) - 1) + 136);\n              v19 = (v17 & 3) + 3;\n              v17 >>= 2;\n              v12 -= 2;\n            }\n            else if ( HI015A(v18) == 17 )\n            {\n              while ( v12 < (unsigned int)BYTE1(v18) + 3 )\n              {\n                if ( !v10 )\n                {\n                  v10 = a2(a3, &v15);\n                  if ( !v10 )\n                  {\n                    v15 = 0i64;\n                    v16 = -5;\n                    goto LABEL_232;\n                  }\n                }\n                --v10;\n                v17 += *v15++ << v12;\n                v12 += 8;\n              }\n              v17 >>= SBCE47(v18);\n              v11 = 0;\n              v19 = (v17 & 7) + 3;\n              v17 >>= 3;\n              v12 = v12 - BYTE1(v18) - 3;\n            }\n            else\n            {\n              while ( v12 < (unsigned int)BYTE1(v18) + 7 )\n              {\n                if ( !v10 )\n                {\n                  v10 = a2(a3, &v15);\n                  if ( !v10 )\n                  {\n                    v15 = 0i64;\n                    v16 = -5;\n                    goto LABEL_232;\n                  }\n                }\n                --v10;\n                v17 += *v15++ << v12;\n                v12 += 8;\n              }\n              v17 >>= SBCE47(v18);\n              v11 = 0;\n              v19 = (v17 & 0x7F) + 11;\n              v17 >>= 7;\n              v12 = v12 - BYTE1(v18) - 7;\n            }\n            if ( v19 + *(_DWORD *)(v21 + 124) > *(_DWORD *)(v21 + 120) + *(_DWORD *)(v21 + 116) )\n            {\n              *(_QWORD *)(a1 + 32) = aInvalidBitLeng_0;\n              *(_DWORD *)v21 = 27;\n              goto LABEL_132;\n            }\n            while ( v19-- )\n              *(_WORD *)(v21 + 2i64 * (unsigned int)(*(_DWORD *)(v21 + 124))++ + 136) = v11;\n          }\n        }\n        if ( v10 || (v10 = a2(a3, &v15)) != 0 )\n        {\n          --v10;\n          v17 += *v15++ << v12;\n          v12 += 8;\n          goto LABEL_67;\n        }\n        v15 = 0i64;\n        v16 = -5;\n        goto LABEL_232;\n      case 7:\nLABEL_140:\n        if ( v10 >= 6 && v14 >= 0x102 )\n        {\n          *(_QWORD *)(a1 + 16) = v7;\n          *(_DWORD *)(a1 + 24) = v14;\n          *(_QWORD *)a1 = v15;\n          *(_DWORD *)(a1 + 8) = v10;\n          *(_DWORD *)(v21 + 64) = v17;\n          *(_DWORD *)(v21 + 68) = v12;\n          if ( *(_DWORD *)(v21 + 48) < *(_DWORD *)(v21 + 44) )\n            *(_DWORD *)(v21 + 48) = *(_DWORD *)(v21 + 44) - v14;\n          sub_14DB0B630(a1, *(_DWORD *)(v21 + 44));\n          v7 = *(_BYTE **)(a1 + 16);\n          v14 = *(_DWORD *)(a1 + 24);\n          v15 = *(unsigned __int8 **)a1;\n          v10 = *(_DWORD *)(a1 + 8);\n          v17 = *(_DWORD *)(v21 + 64);\n          v12 = *(_DWORD *)(v21 + 68);\n          continue;\n        }\n        while ( 1 )\n        {\n          v18 = *(_DWORD *)(*(_QWORD *)(v21 + 88) + 4i64 * (((1 << *(_DWORD *)(v21 + 104)) - 1) & v17));\n          if ( BYTE1(v18) <= v12 )\n            break;\n          if ( !v10 )\n          {\n            v10 = a2(a3, &v15);\n            if ( !v10 )\n            {\n              v15 = 0i64;\n              v16 = -5;\n              goto LABEL_232;\n            }\n          }\n          --v10;\n          v17 += *v15++ << v12;\n          v12 += 8;\n        }\n        if ( (_BYTE)v18 && (v18 & 0xF0) == 0 )\n        {\n          v8 = v18;\n          while ( 1 )\n          {\n            v18 = *(_DWORD *)(*(_QWORD *)(v21 + 88)\n                            + 4i64 * (((((1 << (v8 + BYTE1(v8))) - 1) & v17) >> SBCE47(v8)) + HI015A(v8)));\n            if ( BYTE1(v18) + (unsigned int)BYTE1(v8) <= v12 )\n              break;\n            if ( !v10 )\n            {\n              v10 = a2(a3, &v15);\n              if ( !v10 )\n              {\n                v15 = 0i64;\n                v16 = -5;\n                goto LABEL_232;\n              }\n            }\n            --v10;\n            v17 += *v15++ << v12;\n            v12 += 8;\n          }\n          v17 >>= SBCE47(v8);\n          v12 -= BYTE1(v8);\n        }\n        v17 >>= SBCE47(v18);\n        v12 -= BYTE1(v18);\n        *(_DWORD *)(v21 + 72) = HI015A(v18);\n        if ( !(_BYTE)v18 )\n        {\n          if ( dword_14F208624 > 1 )\n          {\n            if ( HI015A(v18) < 0x20u || HI015A(v18) >= 0x7Fu )\n            {\n              Format = aInflateLiteral_0;\n              fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         literal 0x%02x\\n\", HI015A(v18));\n            }\n            else\n            {\n              Format = aInflateLiteral;\n              fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         literal '%c'\\n\", HI015A(v18));\n            }\n          }\n          if ( !v14 )\n          {\n            v7 = *(_BYTE **)(v21 + 56);\n            v14 = *(_DWORD *)(v21 + 44);\n            *(_DWORD *)(v21 + 48) = v14;\n            if ( a4(a5, v7, v14) )\n            {\n              v16 = -5;\n              goto LABEL_232;\n            }\n          }\n          *v7++ = *(_BYTE *)(v21 + 72);\n          --v14;\n          *(_DWORD *)v21 = 18;\n          continue;\n        }\n        if ( (v18 & 0x20) != 0 )\n        {\n          if ( dword_14F208624 > 1 )\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         end of block\\n\");\n          *(_DWORD *)v21 = 11;\n          continue;\n        }\n        if ( (v18 & 0x40) != 0 )\n        {\n          *(_QWORD *)(a1 + 32) = aInvalidLiteral_0;\n          *(_DWORD *)v21 = 27;\n          continue;\n        }\n        *(_DWORD *)(v21 + 80) = v18 & 0xF;\n        if ( *(_DWORD *)(v21 + 80) )\n        {\n          while ( v12 < *(_DWORD *)(v21 + 80) )\n          {\n            if ( !v10 )\n            {\n              v10 = a2(a3, &v15);\n              if ( !v10 )\n              {\n                v15 = 0i64;\n                v16 = -5;\n                goto LABEL_232;\n              }\n            }\n            --v10;\n            v17 += *v15++ << v12;\n            v12 += 8;\n          }\n          *(_DWORD *)(v21 + 72) += ((1 << *(_DWORD *)(v21 + 80)) - 1) & v17;\n          v17 >>= *(_DWORD *)(v21 + 80);\n          v12 -= *(_DWORD *)(v21 + 80);\n        }\n        if ( dword_14F208624 > 1 )\n          fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         length %u\\n\", *(unsigned int *)(v21 + 72));\n        while ( 1 )\n        {\n          v18 = *(_DWORD *)(*(_QWORD *)(v21 + 96) + 4i64 * (((1 << *(_DWORD *)(v21 + 108)) - 1) & v17));\n          if ( BYTE1(v18) <= v12 )\n            break;\n          if ( !v10 )\n          {\n            v10 = a2(a3, &v15);\n            if ( !v10 )\n            {\n              v15 = 0i64;\n              v16 = -5;\n              goto LABEL_232;\n            }\n          }\n          --v10;\n          v17 += *v15++ << v12;\n          v12 += 8;\n        }\n        if ( (v18 & 0xF0) == 0 )\n        {\n          v9 = v18;\n          while ( 1 )\n          {\n            v18 = *(_DWORD *)(*(_QWORD *)(v21 + 96)\n                            + 4i64 * (((((1 << (v9 + BYTE1(v9))) - 1) & v17) >> SBCE47(v9)) + HI015A(v9)));\n            if ( BYTE1(v18) + (unsigned int)BYTE1(v9) <= v12 )\n              break;\n            if ( !v10 )\n            {\n              v10 = a2(a3, &v15);\n              if ( !v10 )\n              {\n                v15 = 0i64;\n                v16 = -5;\n                goto LABEL_232;\n              }\n            }\n            --v10;\n            v17 += *v15++ << v12;\n            v12 += 8;\n          }\n          v17 >>= SBCE47(v9);\n          v12 -= BYTE1(v9);\n        }\n        v17 >>= SBCE47(v18);\n        v12 -= BYTE1(v18);\n        if ( (v18 & 0x40) != 0 )\n        {\n          *(_QWORD *)(a1 + 32) = aInvalidDistanc_0;\n          *(_DWORD *)v21 = 27;\n          continue;\n        }\n        *(_DWORD *)(v21 + 76) = HI015A(v18);\n        *(_DWORD *)(v21 + 80) = v18 & 0xF;\n        if ( *(_DWORD *)(v21 + 80) )\n        {\n          while ( v12 < *(_DWORD *)(v21 + 80) )\n          {\n            if ( !v10 )\n            {\n              v10 = a2(a3, &v15);\n              if ( !v10 )\n              {\n                v15 = 0i64;\n                v16 = -5;\n                goto LABEL_232;\n              }\n            }\n            --v10;\n            v17 += *v15++ << v12;\n            v12 += 8;\n          }\n          *(_DWORD *)(v21 + 76) += ((1 << *(_DWORD *)(v21 + 80)) - 1) & v17;\n          v17 >>= *(_DWORD *)(v21 + 80);\n          v12 -= *(_DWORD *)(v21 + 80);\n        }\n        if ( *(_DWORD *)(v21 + 48) >= *(_DWORD *)(v21 + 44) )\n          v29 = 0;\n        else\n          v29 = v14;\n        if ( *(_DWORD *)(v21 + 76) > *(_DWORD *)(v21 + 44) - v29 )\n        {\n          *(_QWORD *)(a1 + 32) = aInvalidDistanc_1;\n          *(_DWORD *)v21 = 27;\n          continue;\n        }\n        if ( dword_14F208624 > 1 )\n          fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         distance %u\\n\", *(unsigned int *)(v21 + 76));\n        while ( 1 )\n        {\n          if ( !v14 )\n          {\n            v7 = *(_BYTE **)(v21 + 56);\n            v14 = *(_DWORD *)(v21 + 44);\n            *(_DWORD *)(v21 + 48) = v14;\n            if ( a4(a5, v7, v14) )\n              break;\n          }\n          v19 = *(_DWORD *)(v21 + 44) - *(_DWORD *)(v21 + 76);\n          if ( v19 >= v14 )\n          {\n            v20 = &v7[-*(unsigned int *)(v21 + 76)];\n            v19 = v14;\n          }\n          else\n          {\n            v20 = &v7[v19];\n            v19 = v14 - v19;\n          }\n          if ( v19 > *(_DWORD *)(v21 + 72) )\n            v19 = *(_DWORD *)(v21 + 72);\n          *(_DWORD *)(v21 + 72) -= v19;\n          v14 -= v19;\n          do\n          {\n            *v7++ = *v20++;\n            --v19;\n          }\n          while ( v19 );\n          if ( !*(_DWORD *)(v21 + 72) )\n            goto LABEL_8;\n        }\n        v16 = -5;\nLABEL_232:\n        *(_QWORD *)a1 = v15;\n        *(_DWORD *)(a1 + 8) = v10;\n        return v16;\n      case 15:\n        v16 = 1;\n        if ( v14 < *(_DWORD *)(v21 + 44) && a4(a5, *(_BYTE **)(v21 + 56), *(_DWORD *)(v21 + 44) - v14) )\n          v16 = -5;\n        goto LABEL_232;\n      case 16:\n        v16 = -3;\n        goto LABEL_232;\n      default:\n        v16 = -2;\n        goto LABEL_232;\n    }\n  }\n}\n// 1450B8E20: using guessed type unsigned __int16 word_1450B8E20[24];\n// 14F208624: using guessed type int dword_14F208624;\n// 14F208690: using guessed type void *off_14F208690;\n\n"
    },
    {
        "Function": "sub_14F4CC8A0",
        "Total XOR and shift operations": 68,
        "XOR operations": 1,
        "Shift operations": 67,
        "Operation percentage": "5.93%",
        "Function Body": "\n__int64 __fastcall sub_14F4CC8A0(__int64 a1, int a2)\n{\n  int v3; // eax\n  int v4; // eax\n  int v5; // eax\n  int v6; // eax\n  int v7; // eax\n  int v8; // eax\n  int v9; // eax\n  int v10; // eax\n  __int64 v12; // rax\n  _BYTE *v13; // [rsp+30h] [rbp-B8h]\n  int v14; // [rsp+38h] [rbp-B0h]\n  int v15; // [rsp+38h] [rbp-B0h]\n  unsigned int v16; // [rsp+3Ch] [rbp-ACh]\n  unsigned int v17; // [rsp+40h] [rbp-A8h]\n  unsigned int v18; // [rsp+40h] [rbp-A8h]\n  unsigned int v19; // [rsp+44h] [rbp-A4h]\n  unsigned int v20; // [rsp+44h] [rbp-A4h]\n  int v21; // [rsp+44h] [rbp-A4h]\n  int v22; // [rsp+44h] [rbp-A4h]\n  __int16 v23; // [rsp+44h] [rbp-A4h]\n  unsigned int v24; // [rsp+48h] [rbp-A0h]\n  unsigned int v25; // [rsp+48h] [rbp-A0h]\n  unsigned int v26; // [rsp+4Ch] [rbp-9Ch]\n  unsigned __int8 *v27; // [rsp+50h] [rbp-98h]\n  unsigned int v28; // [rsp+58h] [rbp-90h]\n  unsigned int v29; // [rsp+5Ch] [rbp-8Ch]\n  unsigned int v30; // [rsp+5Ch] [rbp-8Ch]\n  unsigned int v31; // [rsp+5Ch] [rbp-8Ch]\n  unsigned int v32; // [rsp+5Ch] [rbp-8Ch]\n  unsigned int v33; // [rsp+5Ch] [rbp-8Ch]\n  unsigned int v34; // [rsp+60h] [rbp-88h] BYREF\n  int v35; // [rsp+64h] [rbp-84h]\n  unsigned int v36; // [rsp+68h] [rbp-80h]\n  _BYTE *v37; // [rsp+70h] [rbp-78h]\n  unsigned int v38; // [rsp+78h] [rbp-70h]\n  __int64 v39; // [rsp+80h] [rbp-68h]\n  int v40; // [rsp+88h] [rbp-60h]\n  int v41; // [rsp+8Ch] [rbp-5Ch]\n  unsigned int v42; // [rsp+90h] [rbp-58h]\n  unsigned int v43; // [rsp+94h] [rbp-54h]\n  char *v44; // [rsp+98h] [rbp-50h]\n  char *v45; // [rsp+A0h] [rbp-48h]\n  char *v46; // [rsp+A8h] [rbp-40h]\n  char *Format; // [rsp+B0h] [rbp-38h]\n  int v48; // [rsp+B8h] [rbp-30h]\n  unsigned int v49; // [rsp+BCh] [rbp-2Ch]\n  int v50; // [rsp+C0h] [rbp-28h]\n  int v51; // [rsp+C4h] [rbp-24h]\n  int v52; // [rsp+C8h] [rbp-20h]\n\n  if ( !a1 || !*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 16) || !*(_QWORD *)a1 && *(_DWORD *)(a1 + 8) )\n    return 4205B07294i64;\n  v39 = *(_QWORD *)(a1 + 40);\n  if ( *(_DWORD *)v39 == 11 )\n    *(_DWORD *)v39 = 12;\n  v13 = *(_BYTE **)(a1 + 16);\n  v26 = *(_DWORD *)(a1 + 24);\n  v27 = *(unsigned __int8 **)a1;\n  v16 = *(_DWORD *)(a1 + 8);\n  v29 = *(_DWORD *)(v39 + 64);\n  v24 = *(_DWORD *)(v39 + 68);\n  v17 = v16;\n  v38 = v26;\n  v28 = 0;\n  while ( 2 )\n  {\n    v40 = *(_DWORD *)v39;\n    switch ( v40 )\n    {\n      case 0:\n        if ( !*(_DWORD *)(v39 + 8) )\n        {\n          *(_DWORD *)v39 = 12;\n          continue;\n        }\n        while ( v24 < 0x10 )\n        {\n          if ( !v16 )\n            goto LABEL_354;\n          --v16;\n          v29 += *v27++ << v24;\n          v24 += 8;\n        }\n        if ( (*(_DWORD *)(v39 + 8) & 2) != 0 && v29 == 35615 )\n        {\n          *(_DWORD *)(v39 + 24) = sub_14D01E8C0(0, 0i64, 0);\n          LO02E1(v34) = -29921;\n          v3 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), &v34, 2u);\n          *(_DWORD *)(v39 + 24) = v3;\n          v29 = 0;\n          v24 = 0;\n          *(_DWORD *)v39 = 1;\n        }\n        else\n        {\n          *(_DWORD *)(v39 + 16) = 0;\n          if ( *(_QWORD *)(v39 + 32) )\n            *(_DWORD *)(*(_QWORD *)(v39 + 32) + 64i64) = -1;\n          if ( (*(_DWORD *)(v39 + 8) & 1) != 0 && !(((v29 >> 8) + ((unsigned __int8)v29 << 8)) % 0x1F) )\n          {\n            if ( (v29 & 0xF) == 8 )\n            {\n              v29 >>= 4;\n              v24 -= 4;\n              v19 = (v29 & 0xF) + 8;\n              if ( v19 <= *(_DWORD *)(v39 + 40) )\n              {\n                *(_DWORD *)(v39 + 20) = 1 << v19;\n                if ( dword_14F208624 > 0 )\n                  fprintf((FILE *const)&off_14F208690 + 2, \"inflate:   zlib header ok\\n\");\n                *(_DWORD *)(v39 + 24) = sub_14152CFA0(0, 0i64, 0);\n                *(_DWORD *)(a1 + 76) = *(_DWORD *)(v39 + 24);\n                if ( (v29 & 0x200) != 0 )\n                  v41 = 9;\n                else\n                  v41 = 11;\n                *(_DWORD *)v39 = v41;\n                v29 = 0;\n                v24 = 0;\n              }\n              else\n              {\n                *(_QWORD *)(a1 + 32) = aInvalidWindowS;\n                *(_DWORD *)v39 = 27;\n              }\n            }\n            else\n            {\n              *(_QWORD *)(a1 + 32) = aUnknownCompres;\n              *(_DWORD *)v39 = 27;\n            }\n          }\n          else\n          {\n            *(_QWORD *)(a1 + 32) = aIncorrectHeade;\n            *(_DWORD *)v39 = 27;\n          }\n        }\n        continue;\n      case 1:\n        while ( 2 )\n        {\n          if ( v24 < 0x10 )\n          {\n            if ( v16 )\n            {\n              --v16;\n              v29 += *v27++ << v24;\n              v24 += 8;\n              continue;\n            }\n            goto LABEL_354;\n          }\n          break;\n        }\n        *(_DWORD *)(v39 + 16) = v29;\n        if ( (unsigned __int8)*(_DWORD *)(v39 + 16) != 8 )\n        {\n          *(_QWORD *)(a1 + 32) = aUnknownCompres_0;\n          *(_DWORD *)v39 = 27;\n          continue;\n        }\n        if ( (*(_DWORD *)(v39 + 16) & 0xE000) != 0 )\n        {\n          *(_QWORD *)(a1 + 32) = aUnknownHeaderF;\n          *(_DWORD *)v39 = 27;\n          continue;\n        }\n        if ( *(_QWORD *)(v39 + 32) )\n          **(_DWORD **)(v39 + 32) = (v29 >> 8) & 1;\n        if ( (*(_DWORD *)(v39 + 16) & 0x200) != 0 )\n        {\n          LO02E1(v34) = v29;\n          v4 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), &v34, 2u);\n          *(_DWORD *)(v39 + 24) = v4;\n        }\n        v29 = 0;\n        v24 = 0;\n        *(_DWORD *)v39 = 2;\nLABEL_46:\n        while ( v24 < 0x20 )\n        {\n          if ( !v16 )\n            goto LABEL_354;\n          --v16;\n          v29 += *v27++ << v24;\n          v24 += 8;\n        }\n        if ( *(_QWORD *)(v39 + 32) )\n          *(_DWORD *)(*(_QWORD *)(v39 + 32) + 4i64) = v29;\n        if ( (*(_DWORD *)(v39 + 16) & 0x200) != 0 )\n        {\n          v34 = v29;\n          v5 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), &v34, 4u);\n          *(_DWORD *)(v39 + 24) = v5;\n        }\n        v29 = 0;\n        v24 = 0;\n        *(_DWORD *)v39 = 3;\nLABEL_54:\n        while ( v24 < 0x10 )\n        {\n          if ( !v16 )\n            goto LABEL_354;\n          --v16;\n          v29 += *v27++ << v24;\n          v24 += 8;\n        }\n        if ( *(_QWORD *)(v39 + 32) )\n        {\n          *(_DWORD *)(*(_QWORD *)(v39 + 32) + 8i64) = (unsigned __int8)v29;\n          *(_DWORD *)(*(_QWORD *)(v39 + 32) + 12i64) = v29 >> 8;\n        }\n        if ( (*(_DWORD *)(v39 + 16) & 0x200) != 0 )\n        {\n          LO02E1(v34) = v29;\n          v6 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), &v34, 2u);\n          *(_DWORD *)(v39 + 24) = v6;\n        }\n        v29 = 0;\n        v24 = 0;\n        *(_DWORD *)v39 = 4;\nLABEL_62:\n        if ( (*(_DWORD *)(v39 + 16) & 0x400) != 0 )\n        {\n          while ( v24 < 0x10 )\n          {\n            if ( !v16 )\n              goto LABEL_354;\n            --v16;\n            v29 += *v27++ << v24;\n            v24 += 8;\n          }\n          *(_DWORD *)(v39 + 72) = v29;\n          if ( *(_QWORD *)(v39 + 32) )\n            *(_DWORD *)(*(_QWORD *)(v39 + 32) + 24i64) = v29;\n          if ( (*(_DWORD *)(v39 + 16) & 0x200) != 0 )\n          {\n            LO02E1(v34) = v29;\n            v7 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), &v34, 2u);\n            *(_DWORD *)(v39 + 24) = v7;\n          }\n          v29 = 0;\n          v24 = 0;\n        }\n        else if ( *(_QWORD *)(v39 + 32) )\n        {\n          *(_QWORD *)(*(_QWORD *)(v39 + 32) + 16i64) = 0i64;\n        }\n        *(_DWORD *)v39 = 5;\nLABEL_74:\n        if ( (*(_DWORD *)(v39 + 16) & 0x400) != 0 )\n        {\n          v36 = *(_DWORD *)(v39 + 72);\n          if ( v36 > v16 )\n            v36 = v16;\n          if ( v36 )\n          {\n            if ( *(_QWORD *)(v39 + 32) && *(_QWORD *)(*(_QWORD *)(v39 + 32) + 16i64) )\n            {\n              v20 = *(_DWORD *)(*(_QWORD *)(v39 + 32) + 24i64) - *(_DWORD *)(v39 + 72);\n              if ( v36 + v20 <= *(_DWORD *)(*(_QWORD *)(v39 + 32) + 28i64) )\n                v42 = v36;\n              else\n                v42 = *(_DWORD *)(*(_QWORD *)(v39 + 32) + 28i64) - v20;\n              qmemcpy((void *)(*(_QWORD *)(*(_QWORD *)(v39 + 32) + 16i64) + v20), v27, v42);\n            }\n            if ( (*(_DWORD *)(v39 + 16) & 0x200) != 0 )\n            {\n              v8 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), v27, v36);\n              *(_DWORD *)(v39 + 24) = v8;\n            }\n            v16 -= v36;\n            v27 += v36;\n            *(_DWORD *)(v39 + 72) -= v36;\n          }\n          if ( *(_DWORD *)(v39 + 72) )\n            goto LABEL_354;\n        }\n        *(_DWORD *)(v39 + 72) = 0;\n        *(_DWORD *)v39 = 6;\nLABEL_89:\n        if ( (*(_DWORD *)(v39 + 16) & 0x800) != 0 )\n        {\n          if ( !v16 )\n            goto LABEL_354;\n          v36 = 0;\n          do\n          {\n            v21 = v27[v36++];\n            if ( *(_QWORD *)(v39 + 32)\n              && *(_QWORD *)(*(_QWORD *)(v39 + 32) + 32i64)\n              && *(_DWORD *)(v39 + 72) < *(_DWORD *)(*(_QWORD *)(v39 + 32) + 40i64) )\n            {\n              *(_BYTE *)((unsigned int)(*(_DWORD *)(v39 + 72))++ + *(_QWORD *)(*(_QWORD *)(v39 + 32) + 32i64)) = v21;\n            }\n          }\n          while ( v21 && v36 < v16 );\n          if ( (*(_DWORD *)(v39 + 16) & 0x200) != 0 )\n          {\n            v9 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), v27, v36);\n            *(_DWORD *)(v39 + 24) = v9;\n          }\n          v16 -= v36;\n          v27 += v36;\n          if ( v21 )\n            goto LABEL_354;\n        }\n        else if ( *(_QWORD *)(v39 + 32) )\n        {\n          *(_QWORD *)(*(_QWORD *)(v39 + 32) + 32i64) = 0i64;\n        }\n        *(_DWORD *)(v39 + 72) = 0;\n        *(_DWORD *)v39 = 7;\nLABEL_105:\n        if ( (*(_DWORD *)(v39 + 16) & 0x1000) != 0 )\n        {\n          if ( !v16 )\n            goto LABEL_354;\n          v36 = 0;\n          do\n          {\n            v22 = v27[v36++];\n            if ( *(_QWORD *)(v39 + 32)\n              && *(_QWORD *)(*(_QWORD *)(v39 + 32) + 48i64)\n              && *(_DWORD *)(v39 + 72) < *(_DWORD *)(*(_QWORD *)(v39 + 32) + 56i64) )\n            {\n              *(_BYTE *)((unsigned int)(*(_DWORD *)(v39 + 72))++ + *(_QWORD *)(*(_QWORD *)(v39 + 32) + 48i64)) = v22;\n            }\n          }\n          while ( v22 && v36 < v16 );\n          if ( (*(_DWORD *)(v39 + 16) & 0x200) != 0 )\n          {\n            v10 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), v27, v36);\n            *(_DWORD *)(v39 + 24) = v10;\n          }\n          v16 -= v36;\n          v27 += v36;\n          if ( v22 )\n            goto LABEL_354;\n        }\n        else if ( *(_QWORD *)(v39 + 32) )\n        {\n          *(_QWORD *)(*(_QWORD *)(v39 + 32) + 48i64) = 0i64;\n        }\n        *(_DWORD *)v39 = 8;\nLABEL_121:\n        if ( (*(_DWORD *)(v39 + 16) & 0x200) == 0 )\n          goto LABEL_128;\n        while ( v24 < 0x10 )\n        {\n          if ( !v16 )\n            goto LABEL_354;\n          --v16;\n          v29 += *v27++ << v24;\n          v24 += 8;\n        }\n        if ( v29 == (unsigned __int16)*(_DWORD *)(v39 + 24) )\n        {\n          v29 = 0;\n          v24 = 0;\nLABEL_128:\n          if ( *(_QWORD *)(v39 + 32) )\n          {\n            *(_DWORD *)(*(_QWORD *)(v39 + 32) + 60i64) = (*(int *)(v39 + 16) >> 9) & 1;\n            *(_DWORD *)(*(_QWORD *)(v39 + 32) + 64i64) = 1;\n          }\n          *(_DWORD *)(v39 + 24) = sub_14D01E8C0(0, 0i64, 0);\n          *(_DWORD *)(a1 + 76) = *(_DWORD *)(v39 + 24);\n          *(_DWORD *)v39 = 11;\n        }\n        else\n        {\n          *(_QWORD *)(a1 + 32) = aHeaderCrcMisma;\n          *(_DWORD *)v39 = 27;\n        }\n        continue;\n      case 2:\n        goto LABEL_46;\n      case 3:\n        goto LABEL_54;\n      case 4:\n        goto LABEL_62;\n      case 5:\n        goto LABEL_74;\n      case 6:\n        goto LABEL_89;\n      case 7:\n        goto LABEL_105;\n      case 8:\n        goto LABEL_121;\n      case 9:\n        while ( 2 )\n        {\n          if ( v24 < 0x20 )\n          {\n            if ( v16 )\n            {\n              --v16;\n              v29 += *v27++ << v24;\n              v24 += 8;\n              continue;\n            }\n            goto LABEL_354;\n          }\n          break;\n        }\n        *(_DWORD *)(v39 + 24) = ((unsigned __int8)v29 << 24)\n                              + ((v29 & 0xFF00) << 8)\n                              + ((v29 >> 8) & 0xFF00)\n                              + HIE52D(v29);\n        *(_DWORD *)(a1 + 76) = *(_DWORD *)(v39 + 24);\n        v29 = 0;\n        v24 = 0;\n        *(_DWORD *)v39 = 10;\nLABEL_135:\n        if ( !*(_DWORD *)(v39 + 12) )\n        {\n          *(_QWORD *)(a1 + 16) = v13;\n          *(_DWORD *)(a1 + 24) = v26;\n          *(_QWORD *)a1 = v27;\n          *(_DWORD *)(a1 + 8) = v16;\n          *(_DWORD *)(v39 + 64) = v29;\n          *(_DWORD *)(v39 + 68) = v24;\n          return 2i64;\n        }\n        *(_DWORD *)(v39 + 24) = sub_14152CFA0(0, 0i64, 0);\n        *(_DWORD *)(a1 + 76) = *(_DWORD *)(v39 + 24);\n        *(_DWORD *)v39 = 11;\nLABEL_138:\n        if ( a2 == 5 )\n          goto LABEL_354;\nLABEL_139:\n        if ( *(_DWORD *)(v39 + 4) )\n        {\n          v29 >>= v24 & 7;\n          v24 -= v24 & 7;\n          *(_DWORD *)v39 = 24;\n        }\n        else\n        {\n          while ( v24 < 3 )\n          {\n            if ( !v16 )\n              goto LABEL_354;\n            --v16;\n            v29 += *v27++ << v24;\n            v24 += 8;\n          }\n          *(_DWORD *)(v39 + 4) = v29 & 1;\n          v30 = v29 >> 1;\n          v25 = v24 - 1;\n          v43 = v30 & 3;\n          if ( (v30 & 3) != 0 )\n          {\n            switch ( v43 )\n            {\n              case 1u:\n                sub_14025C970(v39);\n                if ( dword_14F208624 > 0 )\n                {\n                  if ( *(_DWORD *)(v39 + 4) )\n                    v45 = aLast_3;\n                  else\n                    v45 = (char *)&unk_14DFF904D;\n                  fprintf((FILE *const)&off_14F208690 + 2, \"inflate:     fixed codes block%s\\n\", v45);\n                }\n                *(_DWORD *)v39 = 18;\n                break;\n              case 2u:\n                if ( dword_14F208624 > 0 )\n                {\n                  if ( *(_DWORD *)(v39 + 4) )\n                    v46 = aLast_4;\n                  else\n                    v46 = (char *)&unk_14DFF904E;\n                  fprintf((FILE *const)&off_14F208690 + 2, \"inflate:     dynamic codes block%s\\n\", v46);\n                }\n                *(_DWORD *)v39 = 15;\n                break;\n              case 3u:\n                *(_QWORD *)(a1 + 32) = aInvalidBlockTy_0;\n                *(_DWORD *)v39 = 27;\n                break;\n            }\n          }\n          else\n          {\n            if ( dword_14F208624 > 0 )\n            {\n              if ( *(_DWORD *)(v39 + 4) )\n                v44 = aLast_2;\n              else\n                v44 = (char *)&unk_14DFF904C;\n              fprintf((FILE *const)&off_14F208690 + 2, \"inflate:     stored block%s\\n\", v44);\n            }\n            *(_DWORD *)v39 = 13;\n          }\n          v29 = v30 >> 2;\n          v24 = v25 - 2;\n        }\n        continue;\n      case 10:\n        goto LABEL_135;\n      case 11:\n        goto LABEL_138;\n      case 12:\n        goto LABEL_139;\n      case 13:\n        v29 >>= v24 & 7;\n        v24 -= v24 & 7;\nLABEL_170:\n        if ( v24 >= 0x20 )\n        {\n          if ( (unsigned __int16)v29 == (HI015A(v29) ^ 0xFFFF) )\n          {\n            *(_DWORD *)(v39 + 72) = (unsigned __int16)v29;\n            if ( dword_14F208624 > 0 )\n              fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       stored length %u\\n\", *(unsigned int *)(v39 + 72));\n            v29 = 0;\n            v24 = 0;\n            *(_DWORD *)v39 = 14;\nLABEL_178:\n            v36 = *(_DWORD *)(v39 + 72);\n            if ( v36 )\n            {\n              if ( v36 > v16 )\n                v36 = v16;\n              if ( v36 > v26 )\n                v36 = v26;\n              if ( !v36 )\n                goto LABEL_354;\n              qmemcpy(v13, v27, v36);\n              v16 -= v36;\n              v27 += v36;\n              v26 -= v36;\n              v13 += v36;\n              *(_DWORD *)(v39 + 72) -= v36;\n            }\n            else\n            {\n              if ( dword_14F208624 > 0 )\n                fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       stored end\\n\");\n              *(_DWORD *)v39 = 11;\n            }\n          }\n          else\n          {\n            *(_QWORD *)(a1 + 32) = aInvalidStoredB_0;\n            *(_DWORD *)v39 = 27;\n          }\n          continue;\n        }\n        if ( v16 )\n        {\n          --v16;\n          v29 += *v27++ << v24;\n          v24 += 8;\n          goto LABEL_170;\n        }\nLABEL_354:\n        *(_QWORD *)(a1 + 16) = v13;\n        *(_DWORD *)(a1 + 24) = v26;\n        *(_QWORD *)a1 = v27;\n        *(_DWORD *)(a1 + 8) = v16;\n        *(_DWORD *)(v39 + 64) = v29;\n        *(_DWORD *)(v39 + 68) = v24;\n        if ( (*(_DWORD *)(v39 + 44) || *(int *)v39 < 24 && v38 != *(_DWORD *)(a1 + 24))\n          && (unsigned int)sub_14025C9B0(a1, v38) )\n        {\n          *(_DWORD *)v39 = 28;\n          return 4205B07292i64;\n        }\n        else\n        {\n          v18 = v17 - *(_DWORD *)(a1 + 8);\n          v38 -= *(_DWORD *)(a1 + 24);\n          *(_DWORD *)(a1 + 12) += v18;\n          *(_DWORD *)(a1 + 28) += v38;\n          *(_DWORD *)(v39 + 28) += v38;\n          if ( *(_DWORD *)(v39 + 8) && v38 )\n          {\n            if ( *(_DWORD *)(v39 + 16) )\n              v50 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), (_BYTE *)(*(_QWORD *)(a1 + 16) - v38), v38);\n            else\n              v50 = sub_14152CFA0(*(_DWORD *)(v39 + 24), (unsigned __int8 *)(*(_QWORD *)(a1 + 16) - v38), v38);\n            *(_DWORD *)(v39 + 24) = v50;\n            *(_DWORD *)(a1 + 76) = v50;\n          }\n          if ( *(_DWORD *)(v39 + 4) )\n            v51 = 64;\n          else\n            v51 = 0;\n          if ( *(_DWORD *)v39 == 11 )\n            v52 = 128;\n          else\n            v52 = 0;\n          *(_DWORD *)(a1 + 72) = v52 + v51 + *(_DWORD *)(v39 + 68);\n          if ( (!v18 && !v38 || a2 == 4) && !v28 )\n            return (unsigned int)-5;\n          return v28;\n        }\n      case 14:\n        goto LABEL_178;\n      case 15:\n        while ( 2 )\n        {\n          if ( v24 < 0xE )\n          {\n            if ( v16 )\n            {\n              --v16;\n              v29 += *v27++ << v24;\n              v24 += 8;\n              continue;\n            }\n            goto LABEL_354;\n          }\n          break;\n        }\n        *(_DWORD *)(v39 + 116) = (v29 & 0x1F) + 257;\n        v31 = v29 >> 5;\n        *(_DWORD *)(v39 + 120) = (v31 & 0x1F) + 1;\n        v31 >>= 5;\n        *(_DWORD *)(v39 + 112) = (v31 & 0xF) + 4;\n        v29 = v31 >> 4;\n        v24 -= 14;\n        if ( *(_DWORD *)(v39 + 116) <= 0x11Eu && *(_DWORD *)(v39 + 120) <= 0x1Eu )\n        {\n          if ( dword_14F208624 > 0 )\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       table sizes ok\\n\");\n          *(_DWORD *)(v39 + 124) = 0;\n          *(_DWORD *)v39 = 16;\nLABEL_197:\n          while ( *(_DWORD *)(v39 + 124) < *(_DWORD *)(v39 + 112) )\n          {\n            while ( v24 < 3 )\n            {\n              if ( !v16 )\n                goto LABEL_354;\n              --v16;\n              v29 += *v27++ << v24;\n              v24 += 8;\n            }\n            *(_WORD *)(v39 + 2i64 * word_1469D66D0[(*(_DWORD *)(v39 + 124))++] + 136) = v29 & 7;\n            v29 >>= 3;\n            v24 -= 3;\n          }\n          while ( *(_DWORD *)(v39 + 124) < 0x13u )\n            *(_WORD *)(v39 + 2i64 * word_1469D66D0[(*(_DWORD *)(v39 + 124))++] + 136) = 0;\n          *(_QWORD *)(v39 + 128) = v39 + 1352;\n          *(_QWORD *)(v39 + 88) = *(_QWORD *)(v39 + 128);\n          *(_DWORD *)(v39 + 104) = 7;\n          v28 = sub_1448463E0(0, v39 + 136, 0x13u, (_DWORD **)(v39 + 128), (int *)(v39 + 104), (_WORD *)(v39 + 776));\n          if ( v28 )\n          {\n            *(_QWORD *)(a1 + 32) = aInvalidCodeLen_0;\n            *(_DWORD *)v39 = 27;\n          }\n          else\n          {\n            if ( dword_14F208624 > 0 )\n              fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       code lengths ok\\n\");\n            *(_DWORD *)(v39 + 124) = 0;\n            *(_DWORD *)v39 = 17;\nLABEL_209:\n            while ( *(_DWORD *)(v39 + 124) < (unsigned int)(*(_DWORD *)(v39 + 120) + *(_DWORD *)(v39 + 116)) )\n            {\n              while ( 1 )\n              {\n                v35 = *(_DWORD *)(*(_QWORD *)(v39 + 88) + 4i64 * (((1 << *(_DWORD *)(v39 + 104)) - 1) & v29));\n                if ( BYTE1(v35) <= v24 )\n                  break;\n                if ( !v16 )\n                  goto LABEL_354;\n                --v16;\n                v29 += *v27++ << v24;\n                v24 += 8;\n              }\n              if ( HI015A(v35) >= 0x10u )\n              {\n                if ( HI015A(v35) == 16 )\n                {\n                  while ( v24 < (unsigned int)BYTE1(v35) + 2 )\n                  {\n                    if ( !v16 )\n                      goto LABEL_354;\n                    --v16;\n                    v29 += *v27++ << v24;\n                    v24 += 8;\n                  }\n                  v29 >>= SBCE47(v35);\n                  v24 -= BYTE1(v35);\n                  if ( !*(_DWORD *)(v39 + 124) )\n                  {\n                    *(_QWORD *)(a1 + 32) = aInvalidBitLeng_1;\n                    *(_DWORD *)v39 = 27;\n                    break;\n                  }\n                  v23 = *(_WORD *)(v39 + 2i64 * (unsigned int)(*(_DWORD *)(v39 + 124) - 1) + 136);\n                  v36 = (v29 & 3) + 3;\n                  v29 >>= 2;\n                  v24 -= 2;\n                }\n                else if ( HI015A(v35) == 17 )\n                {\n                  while ( v24 < (unsigned int)BYTE1(v35) + 3 )\n                  {\n                    if ( !v16 )\n                      goto LABEL_354;\n                    --v16;\n                    v29 += *v27++ << v24;\n                    v24 += 8;\n                  }\n                  v32 = v29 >> SBCE47(v35);\n                  v23 = 0;\n                  v36 = (v32 & 7) + 3;\n                  v29 = v32 >> 3;\n                  v24 = v24 - BYTE1(v35) - 3;\n                }\n                else\n                {\n                  while ( v24 < (unsigned int)BYTE1(v35) + 7 )\n                  {\n                    if ( !v16 )\n                      goto LABEL_354;\n                    --v16;\n                    v29 += *v27++ << v24;\n                    v24 += 8;\n                  }\n                  v33 = v29 >> SBCE47(v35);\n                  v23 = 0;\n                  v36 = (v33 & 0x7F) + 11;\n                  v29 = v33 >> 7;\n                  v24 = v24 - BYTE1(v35) - 7;\n                }\n                if ( v36 + *(_DWORD *)(v39 + 124) > *(_DWORD *)(v39 + 120) + *(_DWORD *)(v39 + 116) )\n                {\n                  *(_QWORD *)(a1 + 32) = aInvalidBitLeng_2;\n                  *(_DWORD *)v39 = 27;\n                  break;\n                }\n                while ( v36-- )\n                  *(_WORD *)(v39 + 2i64 * (unsigned int)(*(_DWORD *)(v39 + 124))++ + 136) = v23;\n              }\n              else\n              {\n                while ( v24 < BYTE1(v35) )\n                {\n                  if ( !v16 )\n                    goto LABEL_354;\n                  --v16;\n                  v29 += *v27++ << v24;\n                  v24 += 8;\n                }\n                v29 >>= SBCE47(v35);\n                v24 -= BYTE1(v35);\n                *(_WORD *)(v39 + 2i64 * (unsigned int)(*(_DWORD *)(v39 + 124))++ + 136) = HI015A(v35);\n              }\n            }\n            if ( *(_DWORD *)v39 != 27 )\n            {\n              *(_QWORD *)(v39 + 128) = v39 + 1352;\n              *(_QWORD *)(v39 + 88) = *(_QWORD *)(v39 + 128);\n              *(_DWORD *)(v39 + 104) = 9;\n              v28 = sub_1448463E0(\n                      1,\n                      v39 + 136,\n                      *(_DWORD *)(v39 + 116),\n                      (_DWORD **)(v39 + 128),\n                      (int *)(v39 + 104),\n                      (_WORD *)(v39 + 776));\n              if ( v28 )\n              {\n                *(_QWORD *)(a1 + 32) = aInvalidLiteral_2;\n                *(_DWORD *)v39 = 27;\n              }\n              else\n              {\n                *(_QWORD *)(v39 + 96) = *(_QWORD *)(v39 + 128);\n                *(_DWORD *)(v39 + 108) = 6;\n                v28 = sub_1448463E0(\n                        2,\n                        v39 + 2i64 * *(unsigned int *)(v39 + 116) + 136,\n                        *(_DWORD *)(v39 + 120),\n                        (_DWORD **)(v39 + 128),\n                        (int *)(v39 + 108),\n                        (_WORD *)(v39 + 776));\n                if ( v28 )\n                {\n                  *(_QWORD *)(a1 + 32) = aInvalidDistanc_4;\n                  *(_DWORD *)v39 = 27;\n                }\n                else\n                {\n                  if ( dword_14F208624 > 0 )\n                    fprintf((FILE *const)&off_14F208690 + 2, \"inflate:       codes ok\\n\");\n                  *(_DWORD *)v39 = 18;\nLABEL_247:\n                  if ( v16 < 6 || v26 < 0x102 )\n                  {\n                    while ( 1 )\n                    {\n                      v35 = *(_DWORD *)(*(_QWORD *)(v39 + 88) + 4i64 * (((1 << *(_DWORD *)(v39 + 104)) - 1) & v29));\n                      if ( BYTE1(v35) <= v24 )\n                        break;\n                      if ( !v16 )\n                        goto LABEL_354;\n                      --v16;\n                      v29 += *v27++ << v24;\n                      v24 += 8;\n                    }\n                    if ( (_BYTE)v35 && (v35 & 0xF0) == 0 )\n                    {\n                      v14 = v35;\n                      while ( 1 )\n                      {\n                        v35 = *(_DWORD *)(*(_QWORD *)(v39 + 88)\n                                        + 4i64\n                                        * (((((1 << (v14 + BYTE1(v14))) - 1) & v29) >> SBCE47(v14)) + HI015A(v14)));\n                        if ( BYTE1(v35) + (unsigned int)BYTE1(v14) <= v24 )\n                          break;\n                        if ( !v16 )\n                          goto LABEL_354;\n                        --v16;\n                        v29 += *v27++ << v24;\n                        v24 += 8;\n                      }\n                      v29 >>= SBCE47(v14);\n                      v24 -= BYTE1(v14);\n                    }\n                    v29 >>= SBCE47(v35);\n                    v24 -= BYTE1(v35);\n                    *(_DWORD *)(v39 + 72) = HI015A(v35);\n                    if ( (_BYTE)v35 )\n                    {\n                      if ( (v35 & 0x20) != 0 )\n                      {\n                        if ( dword_14F208624 > 1 )\n                          fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         end of block\\n\");\n                        *(_DWORD *)v39 = 11;\n                      }\n                      else if ( (v35 & 0x40) != 0 )\n                      {\n                        *(_QWORD *)(a1 + 32) = aInvalidLiteral_3;\n                        *(_DWORD *)v39 = 27;\n                      }\n                      else\n                      {\n                        *(_DWORD *)(v39 + 80) = v35 & 0xF;\n                        *(_DWORD *)v39 = 19;\nLABEL_274:\n                        if ( *(_DWORD *)(v39 + 80) )\n                        {\n                          while ( v24 < *(_DWORD *)(v39 + 80) )\n                          {\n                            if ( !v16 )\n                              goto LABEL_354;\n                            --v16;\n                            v29 += *v27++ << v24;\n                            v24 += 8;\n                          }\n                          *(_DWORD *)(v39 + 72) += ((1 << *(_DWORD *)(v39 + 80)) - 1) & v29;\n                          v29 >>= *(_DWORD *)(v39 + 80);\n                          v24 -= *(_DWORD *)(v39 + 80);\n                        }\n                        if ( dword_14F208624 > 1 )\n                          fprintf(\n                            (FILE *const)&off_14F208690 + 2,\n                            \"inflate:         length %u\\n\",\n                            *(unsigned int *)(v39 + 72));\n                        *(_DWORD *)v39 = 20;\nLABEL_282:\n                        while ( 1 )\n                        {\n                          v35 = *(_DWORD *)(*(_QWORD *)(v39 + 96) + 4i64 * (((1 << *(_DWORD *)(v39 + 108)) - 1) & v29));\n                          if ( BYTE1(v35) <= v24 )\n                            break;\n                          if ( !v16 )\n                            goto LABEL_354;\n                          --v16;\n                          v29 += *v27++ << v24;\n                          v24 += 8;\n                        }\n                        if ( (v35 & 0xF0) == 0 )\n                        {\n                          v15 = v35;\n                          while ( 1 )\n                          {\n                            v35 = *(_DWORD *)(*(_QWORD *)(v39 + 96)\n                                            + 4i64\n                                            * (((((1 << (v15 + BYTE1(v15))) - 1) & v29) >> SBCE47(v15)) + HI015A(v15)));\n                            if ( BYTE1(v35) + (unsigned int)BYTE1(v15) <= v24 )\n                              break;\n                            if ( !v16 )\n                              goto LABEL_354;\n                            --v16;\n                            v29 += *v27++ << v24;\n                            v24 += 8;\n                          }\n                          v29 >>= SBCE47(v15);\n                          v24 -= BYTE1(v15);\n                        }\n                        v29 >>= SBCE47(v35);\n                        v24 -= BYTE1(v35);\n                        if ( (v35 & 0x40) != 0 )\n                        {\n                          *(_QWORD *)(a1 + 32) = aInvalidDistanc_5;\n                          *(_DWORD *)v39 = 27;\n                        }\n                        else\n                        {\n                          *(_DWORD *)(v39 + 76) = HI015A(v35);\n                          *(_DWORD *)(v39 + 80) = v35 & 0xF;\n                          *(_DWORD *)v39 = 21;\nLABEL_294:\n                          if ( *(_DWORD *)(v39 + 80) )\n                          {\n                            while ( v24 < *(_DWORD *)(v39 + 80) )\n                            {\n                              if ( !v16 )\n                                goto LABEL_354;\n                              --v16;\n                              v29 += *v27++ << v24;\n                              v24 += 8;\n                            }\n                            *(_DWORD *)(v39 + 76) += ((1 << *(_DWORD *)(v39 + 80)) - 1) & v29;\n                            v29 >>= *(_DWORD *)(v39 + 80);\n                            v24 -= *(_DWORD *)(v39 + 80);\n                          }\n                          if ( *(_DWORD *)(v39 + 76) <= v38 + *(_DWORD *)(v39 + 48) - v26 )\n                          {\n                            if ( dword_14F208624 > 1 )\n                              fprintf(\n                                (FILE *const)&off_14F208690 + 2,\n                                \"inflate:         distance %u\\n\",\n                                *(unsigned int *)(v39 + 76));\n                            *(_DWORD *)v39 = 22;\nLABEL_304:\n                            if ( !v26 )\n                              goto LABEL_354;\n                            v36 = v38 - v26;\n                            if ( *(_DWORD *)(v39 + 76) <= v38 - v26 )\n                            {\n                              v37 = &v13[-*(unsigned int *)(v39 + 76)];\n                              v36 = *(_DWORD *)(v39 + 72);\n                            }\n                            else\n                            {\n                              v36 = *(_DWORD *)(v39 + 76) - v36;\n                              if ( v36 <= *(_DWORD *)(v39 + 52) )\n                              {\n                                v12 = *(_DWORD *)(v39 + 52) - v36;\n                              }\n                              else\n                              {\n                                v36 -= *(_DWORD *)(v39 + 52);\n                                v12 = *(_DWORD *)(v39 + 44) - v36;\n                              }\n                              v37 = (_BYTE *)(*(_QWORD *)(v39 + 56) + v12);\n                              if ( v36 > *(_DWORD *)(v39 + 72) )\n                                v36 = *(_DWORD *)(v39 + 72);\n                            }\n                            if ( v36 > v26 )\n                              v36 = v26;\n                            v26 -= v36;\n                            *(_DWORD *)(v39 + 72) -= v36;\n                            do\n                            {\n                              *v13++ = *v37++;\n                              --v36;\n                            }\n                            while ( v36 );\n                            if ( !*(_DWORD *)(v39 + 72) )\n                              *(_DWORD *)v39 = 18;\n                          }\n                          else\n                          {\n                            *(_QWORD *)(a1 + 32) = aInvalidDistanc_6;\n                            *(_DWORD *)v39 = 27;\n                          }\n                        }\n                      }\n                    }\n                    else\n                    {\n                      if ( dword_14F208624 > 1 )\n                      {\n                        if ( HI015A(v35) < 0x20u || HI015A(v35) >= 0x7Fu )\n                        {\n                          Format = aInflateLiteral_4;\n                          fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         literal 0x%02x\\n\", HI015A(v35));\n                        }\n                        else\n                        {\n                          Format = aInflateLiteral_3;\n                          fprintf((FILE *const)&off_14F208690 + 2, \"inflate:         literal '%c'\\n\", HI015A(v35));\n                        }\n                      }\n                      *(_DWORD *)v39 = 23;\n                    }\n                  }\n                  else\n                  {\n                    *(_QWORD *)(a1 + 16) = v13;\n                    *(_DWORD *)(a1 + 24) = v26;\n                    *(_QWORD *)a1 = v27;\n                    *(_DWORD *)(a1 + 8) = v16;\n                    *(_DWORD *)(v39 + 64) = v29;\n                    *(_DWORD *)(v39 + 68) = v24;\n                    sub_14DB0B630(a1, v38);\n                    v13 = *(_BYTE **)(a1 + 16);\n                    v26 = *(_DWORD *)(a1 + 24);\n                    v27 = *(unsigned __int8 **)a1;\n                    v16 = *(_DWORD *)(a1 + 8);\n                    v29 = *(_DWORD *)(v39 + 64);\n                    v24 = *(_DWORD *)(v39 + 68);\n                  }\n                }\n              }\n            }\n          }\n        }\n        else\n        {\n          *(_QWORD *)(a1 + 32) = aTooManyLengthO_0;\n          *(_DWORD *)v39 = 27;\n        }\n        continue;\n      case 16:\n        goto LABEL_197;\n      case 17:\n        goto LABEL_209;\n      case 18:\n        goto LABEL_247;\n      case 19:\n        goto LABEL_274;\n      case 20:\n        goto LABEL_282;\n      case 21:\n        goto LABEL_294;\n      case 22:\n        goto LABEL_304;\n      case 23:\n        if ( !v26 )\n          goto LABEL_354;\n        *v13++ = *(_BYTE *)(v39 + 72);\n        --v26;\n        *(_DWORD *)v39 = 18;\n        continue;\n      case 24:\n        if ( !*(_DWORD *)(v39 + 8) )\n          goto LABEL_338;\n        while ( 2 )\n        {\n          if ( v24 < 0x20 )\n          {\n            if ( v16 )\n            {\n              --v16;\n              v29 += *v27++ << v24;\n              v24 += 8;\n              continue;\n            }\n            goto LABEL_354;\n          }\n          break;\n        }\n        v38 -= v26;\n        *(_DWORD *)(a1 + 28) += v38;\n        *(_DWORD *)(v39 + 28) += v38;\n        if ( v38 )\n        {\n          if ( *(_DWORD *)(v39 + 16) )\n            v48 = sub_14D01E8C0(*(_DWORD *)(v39 + 24), &v13[-v38], v38);\n          else\n            v48 = sub_14152CFA0(*(_DWORD *)(v39 + 24), &v13[-v38], v38);\n          *(_DWORD *)(v39 + 24) = v48;\n          *(_DWORD *)(a1 + 76) = v48;\n        }\n        v38 = v26;\n        if ( *(_DWORD *)(v39 + 16) )\n          v49 = v29;\n        else\n          v49 = ((unsigned __int8)v29 << 24) + ((v29 & 0xFF00) << 8) + ((v29 >> 8) & 0xFF00) + HIE52D(v29);\n        if ( v49 == *(_DWORD *)(v39 + 24) )\n        {\n          v29 = 0;\n          v24 = 0;\n          if ( dword_14F208624 > 0 )\n            fprintf((FILE *const)&off_14F208690 + 2, \"inflate:   check matches trailer\\n\");\nLABEL_338:\n          *(_DWORD *)v39 = 25;\nLABEL_339:\n          if ( !*(_DWORD *)(v39 + 8) || !*(_DWORD *)(v39 + 16) )\n            goto LABEL_348;\n          while ( v24 < 0x20 )\n          {\n            if ( !v16 )\n              goto LABEL_354;\n            --v16;\n            v29 += *v27++ << v24;\n            v24 += 8;\n          }\n          if ( v29 == *(_DWORD *)(v39 + 28) )\n          {\n            v29 = 0;\n            v24 = 0;\n            if ( dword_14F208624 > 0 )\n              fprintf((FILE *const)&off_14F208690 + 2, \"inflate:   length matches trailer\\n\");\nLABEL_348:\n            *(_DWORD *)v39 = 26;\nLABEL_349:\n            v28 = 1;\n            goto LABEL_354;\n          }\n          *(_QWORD *)(a1 + 32) = aIncorrectLengt;\n          *(_DWORD *)v39 = 27;\n        }\n        else\n        {\n          *(_QWORD *)(a1 + 32) = aIncorrectDataC;\n          *(_DWORD *)v39 = 27;\n        }\n        continue;\n      case 25:\n        goto LABEL_339;\n      case 26:\n        goto LABEL_349;\n      case 27:\n        v28 = -3;\n        goto LABEL_354;\n      case 28:\n        return 4205B07292i64;\n      default:\n        return 4205B07294i64;\n    }\n  }\n}\n// 1469D66D0: using guessed type unsigned __int16 word_1469D66D0[48];\n// 14F208624: using guessed type int dword_14F208624;\n// 14F208690: using guessed type void *off_14F208690;\n\n"
    }
]