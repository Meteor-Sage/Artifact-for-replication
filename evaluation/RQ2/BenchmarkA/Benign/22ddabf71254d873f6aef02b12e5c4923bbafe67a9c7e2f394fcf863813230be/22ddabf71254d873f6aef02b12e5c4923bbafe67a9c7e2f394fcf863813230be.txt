[
    {
        "Function": "sub_14BCB7814",
        "Total XOR and shift operations": 9,
        "XOR operations": 7,
        "Shift operations": 2,
        "Operation percentage": "27.27%",
        "Function Body": "\n__int64 sub_14BCB7814()\n{\n  uintptr_t v0; // rax\n  __int64 result; // rax\n  unsigned __int64 v2; // [rsp+30h] [rbp+10h] BYREF\n  struct _FIE416ME SystemTimeAsFileTime; // [rsp+38h] [rbp+18h] BYREF\n  LARGE_IN123ER PerformanceCount; // [rsp+40h] [rbp+20h] BYREF\n\n  SystemTimeAsFileTime = 0i64;\n  v0 = _security_cookie;\n  if ( _security_cookie == 0x2B7842DF68A7i64 )\n  {\n    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);\n    v2 = (unsigned __int64)SystemTimeAsFileTime;\n    v2 ^= GetCurrentProcessId();\n    v2 ^= GetCurrentThreadId();\n    v2 ^= (unsigned __int64)GetTickCount() << 24;\n    v2 ^= (unsigned __int64)&v2 ^ GetTickCount();\n    QueryPerformanceCounter(&PerformanceCount);\n    v0 = (v2 ^ PerformanceCount.QuadPart ^ ((unsigned __int64)PerformanceCount.LowPart << 32)) & 0xFF9F59FF9F59i64;\n    if ( v0 == 0x2B7842DF68A7i64 )\n      v0 = 0x2B7842DF6563i64;\n    _security_cookie = v0;\n  }\n  result = ~v0;\n  qword_147160018 = result;\n  return result;\n}\n// 14BCB7814: using guessed type __int64 sub_14BCB7814();\n// 147160018: using guessed type __int64 qword_147160018;\n\n"
    },
    {
        "Function": "sub_14E610950",
        "Total XOR and shift operations": 18,
        "XOR operations": 0,
        "Shift operations": 18,
        "Operation percentage": "11.76%",
        "Function Body": "\nunsigned __int64 __fastcall sub_14E610950(__int64 a1, unsigned __int64 *a2, __int64 a3, unsigned __int64 *a4)\n{\n  unsigned __int64 *v4; // rdi\n  unsigned __int64 v6; // r12\n  __int64 v7; // rcx\n  __int64 v8; // rbx\n  unsigned __int64 v9; // rsi\n  __int64 v10; // rdx\n  __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  __int64 v13; // rax\n  __int64 v14; // rsi\n  unsigned __int64 v15; // rcx\n  char *v16; // rax\n  char *v17; // r15\n  _BYTE *v18; // r8\n  __int64 v19; // rdi\n  __int64 v20; // rdx\n  void *v21; // rcx\n  __int64 v22; // rdi\n  unsigned __int64 result; // rax\n  __int64 v24; // rsi\n  __int64 v25; // rsi\n  __int64 v26; // rax\n  unsigned __int64 v27; // rcx\n  unsigned __int64 *v28; // rdi\n  __int64 v29; // r15\n  char pExceptionObject[24]; // [rsp+28h] [rbp-40h] BYREF\n\n  v4 = a2;\n  v6 = *a4;\n  v7 = *(_QWORD *)(a1 + 8);\n  v8 = 0i64;\n  if ( v7 )\n    v9 = (*(_QWORD *)(a1 + 24) - v7) >> 3;\n  else\n    v9 = 0i64;\n  if ( v7 )\n    v10 = (*(_QWORD *)(a1 + 16) - v7) >> 3;\n  else\n    v10 = 0i64;\n  if ( v10 == 0x1FF9F59FF9F59FFFi64 )\n    sub_14152CFFC(v7);\n  if ( v7 )\n    v11 = (*(_QWORD *)(a1 + 16) - v7) >> 3;\n  else\n    v11 = 0i64;\n  if ( v9 >= v11 + 1 )\n  {\n    v24 = *(_QWORD *)(a1 + 16);\n    if ( (v24 - (__int64)v4) >> 3 )\n    {\n      memmove_s(*(void *const *)(a1 + 16), 8ui64, (const void *const)(v24 - 8), 8ui64);\n      v28 = a2;\n      *(_QWORD *)(a1 + 16) = v24 + 8;\n      v29 = (v24 - 8 - (__int64)a2) >> 3;\n      if ( v29 > 0 )\n      {\n        memmove_s((void *const)(v24 - 8 * v29), 8 * v29, a2, 8 * v29);\n        v28 = a2;\n      }\n      for ( result = (unsigned __int64)(v28 + 1); v28 != (unsigned __int64 *)result; result = (unsigned __int64)(a2 + 1) )\n        *v28++ = v6;\n    }\n    else\n    {\n      v25 = (v24 - (__int64)v4) >> 3;\n      if ( v25 )\n      {\n        memmove_s(v4 + 1, 8 * v25, v4, 8 * v25);\n        v4 = a2;\n      }\n      v26 = (__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)v4) >> 3;\n      if ( v26 != 1 )\n      {\n        memset64(*(void **)(a1 + 16), v6, 1 - v26);\n        v4 = a2;\n      }\n      *(_QWORD *)(a1 + 16) += 8i64;\n      result = *(_QWORD *)(a1 + 16) - 8i64;\n      v27 = (result - (unsigned __int64)v4 + 7) >> 3;\n      if ( (unsigned __int64)v4 > result )\n        v27 = 0i64;\n      if ( v27 )\n      {\n        do\n        {\n          *v4++ = v6;\n          ++v8;\n        }\n        while ( v8 != v27 );\n      }\n    }\n  }\n  else\n  {\n    if ( 0x1FF9F59FF9F59FFFi64 - (v9 >> 1) >= v9 )\n      v12 = (v9 >> 1) + v9;\n    else\n      v12 = 0i64;\n    if ( v7 )\n      v13 = (*(_QWORD *)(a1 + 16) - v7) >> 3;\n    else\n      v13 = 0i64;\n    if ( v12 < v13 + 1 )\n    {\n      if ( v7 )\n        v14 = (*(_QWORD *)(a1 + 16) - v7) >> 3;\n      else\n        v14 = 0i64;\n      v12 = v14 + 1;\n    }\n    v15 = v12;\n    if ( v12 )\n    {\n      if ( 0xFF9F59FF9F59FFFFui64 / v12 < 8 )\n      {\n        sub_148B1C064((exception *)pExceptionObject, 0i64);\n        CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVbad_alloc_std__);\n      }\n    }\n    else\n    {\n      v15 = 0i64;\n    }\n    v16 = (char *)sub_149E0AE5C(8 * v15);\n    v17 = v16;\n    v18 = *(_BYTE **)(a1 + 8);\n    v19 = 8 * (((char *)a2 - v18) >> 3);\n    if ( ((char *)a2 - v18) >> 3 )\n      memmove_s(v16, 8 * (((char *)a2 - v18) >> 3), v18, 8 * (((char *)a2 - v18) >> 3));\n    *(_QWORD *)&v17[v19] = v6;\n    v20 = (__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)a2) >> 3;\n    if ( v20 )\n      memmove_s(&v17[v19 + 8], 8 * v20, a2, 8 * v20);\n    v21 = *(void **)(a1 + 8);\n    if ( v21 )\n      v22 = (__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)v21) >> 3;\n    else\n      v22 = 0i64;\n    if ( v21 )\n      free(v21);\n    *(_QWORD *)(a1 + 24) = &v17[8 * v12];\n    result = (unsigned __int64)&v17[8 * v22 + 8];\n    *(_QWORD *)(a1 + 16) = result;\n    *(_QWORD *)(a1 + 8) = v17;\n  }\n  return result;\n}\n// 14152CFFC: using guessed type void __fastcall __noreturn sub_14152CFFC(_QWORD);\n\n"
    },
    {
        "Function": "sub_1465A5C64",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "11.11%",
        "Function Body": "\n__int64 __fastcall sub_1465A5C64(__int64 a1, __int64 a2, __int64 a3, _DWORD *a4)\n{\n  _crtGetStringTypeW(0i64, 1i64, a1, (a2 - a1) >> 1, a3, a4[1], *a4);\n  return a2;\n}\n// 1476ADBBE: using guessed type __int64 __fastcall _crtGetStringTypeW(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD);\n\n"
    },
    {
        "Function": "sub_14DF7A608",
        "Total XOR and shift operations": 10,
        "XOR operations": 0,
        "Shift operations": 10,
        "Operation percentage": "10.64%",
        "Function Body": "\n__int64 __fastcall sub_14DF7A608(unsigned __int16 a1)\n{\n  int v1; // r8d\n  int v3; // edx\n  unsigned int v4; // edx\n  unsigned int v5; // edx\n  unsigned int v6; // edx\n  unsigned int v7; // edx\n  unsigned int v8; // edx\n\n  v1 = a1 & 0x3FF;\n  if ( v1 == 4 )\n  {\n    if ( a1 >> 10 == 1 || a1 >> 10 == 3 || a1 >> 10 == 5 )\n      return 1028i64;\n    return a1 & 0x3FF;\n  }\n  if ( v1 != 9 )\n  {\n    switch ( v1 )\n    {\n      case 10:\n        if ( (a1 & 0xFC00) != 2048 )\n          return a1 & 0x3FF;\n        return 2058i64;\n      case 7:\n        v3 = a1 >> 10;\n        if ( v3 != 2 && v3 != 5 )\n          return a1 & 0x3FF;\n        return 2055i64;\n      case 22:\n        if ( (a1 & 0xFC00) != 2048 )\n          return a1 & 0x3FF;\n        return 2070i64;\n      case 20:\n        if ( (a1 & 0xFC00) != 2048 )\n          return a1 & 0x3FF;\n        return 2068i64;\n    }\n    if ( v1 != 26 )\n      return a1 & 0x3FF;\n    v4 = a1 >> 10;\n    if ( v4 > 7 )\n    {\n      v5 = v4 - 8;\n      if ( !v5 )\n        return 8218i64;\n      v6 = v5 - 1;\n      if ( !v6 )\n        return 2074i64;\n      v7 = v6 - 1;\n      if ( v7 )\n      {\n        v8 = v7 - 1;\n        if ( !v8 )\n          return 2074i64;\n        if ( v8 != 1 )\n          return a1 & 0x3FF;\n      }\n    }\n    else if ( v4 != 7 )\n    {\n      if ( a1 >> 10 <= 1u )\n        return 1050i64;\n      if ( v4 == 2 )\n        return 2074i64;\n      if ( v4 != 3 )\n      {\n        if ( v4 != 4 )\n        {\n          if ( v4 == 5 )\n            return 5146i64;\n          return 2074i64;\n        }\n        return 1050i64;\n      }\n    }\n    return 3098i64;\n  }\n  if ( a1 >> 10 != 2 )\n  {\n    if ( a1 >> 10 == 3 )\n      return 3081i64;\n    if ( a1 >> 10 == 4 )\n      return 4105i64;\n    if ( a1 >> 10 != 6 )\n      return a1 & 0x3FF;\n  }\n  return 2057i64;\n}\n// 14DF7A715: conditional instruction was optimized away because edx.4==6\n\n"
    },
    {
        "Function": "sub_14A539724",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "10.00%",
        "Function Body": "\n__int64 __fastcall sub_14A539724(unsigned __int64 a1, unsigned int a2)\n{\n  __int64 v2; // r8\n  unsigned __int64 v3; // rax\n\n  v2 = *(_QWORD *)(a1 + 696);\n  if ( v2 )\n    v3 = (*(_QWORD *)(a1 + 704) - v2) >> 1;\n  else\n    v3 = 0i64;\n  if ( a2 >= v3 )\n    return 0i64;\n  if ( !v2 || (a1 = (*(_QWORD *)(a1 + 704) - v2) >> 1, a1 <= a2) )\n    sub_14152C940(a1, a2, v2, 0i64);\n  return *(unsigned __int16 *)(v2 + 2i64 * a2);\n}\n// 14152C940: using guessed type void __fastcall __noreturn sub_14152C940(_QWORD, _QWORD, _QWORD, _QWORD);\n\n"
    },
    {
        "Function": "sub_14152CD18",
        "Total XOR and shift operations": 15,
        "XOR operations": 0,
        "Shift operations": 15,
        "Operation percentage": "9.20%",
        "Function Body": "\nunsigned __int64 __fastcall sub_14152CD18(__int64 a1, _WORD *a2, __int64 a3, __int16 *a4)\n{\n  _WORD *v4; // rdi\n  __int16 v6; // r12\n  __int64 v7; // rcx\n  __int64 v8; // rbx\n  unsigned __int64 v9; // rsi\n  __int64 v10; // rdx\n  __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  __int64 v13; // rax\n  __int64 v14; // rsi\n  unsigned __int64 v15; // rcx\n  char *v16; // rax\n  char *v17; // r15\n  _BYTE *v18; // r8\n  __int64 v19; // rcx\n  __int64 v20; // rdi\n  __int64 v21; // rdx\n  void *v22; // rcx\n  __int64 v23; // rdi\n  unsigned __int64 result; // rax\n  __int64 v25; // rsi\n  __int64 v26; // rsi\n  __int64 v27; // rax\n  __int64 v28; // rcx\n  _WORD *v29; // rdi\n  unsigned __int64 v30; // rcx\n  _WORD *v31; // rdi\n  __int64 v32; // r15\n  char pExceptionObject[24]; // [rsp+28h] [rbp-40h] BYREF\n\n  v4 = a2;\n  v6 = *a4;\n  v7 = *(_QWORD *)(a1 + 8);\n  v8 = 0i64;\n  if ( v7 )\n    v9 = (*(_QWORD *)(a1 + 24) - v7) >> 1;\n  else\n    v9 = 0i64;\n  if ( v7 )\n    v10 = (*(_QWORD *)(a1 + 16) - v7) >> 1;\n  else\n    v10 = 0i64;\n  if ( v10 == 0x7FF9F59FF9F59FFFi64 )\n    sub_14152CFFC(v7);\n  if ( v7 )\n    v11 = (*(_QWORD *)(a1 + 16) - v7) >> 1;\n  else\n    v11 = 0i64;\n  if ( v9 >= v11 + 1 )\n  {\n    v25 = *(_QWORD *)(a1 + 16);\n    if ( (v25 - (__int64)v4) >> 1 )\n    {\n      memmove_s(*(void *const *)(a1 + 16), 2ui64, (const void *const)(v25 - 2), 2ui64);\n      v31 = a2;\n      *(_QWORD *)(a1 + 16) = v25 + 2;\n      v32 = (v25 - 2 - (__int64)a2) >> 1;\n      if ( v32 > 0 )\n      {\n        memmove_s((void *const)(v25 - 2 * v32), 2 * v32, a2, 2 * v32);\n        v31 = a2;\n      }\n      for ( result = (unsigned __int64)(v31 + 1); v31 != (_WORD *)result; result = (unsigned __int64)(a2 + 1) )\n        *v31++ = v6;\n    }\n    else\n    {\n      v26 = (v25 - (__int64)v4) >> 1;\n      if ( v26 )\n      {\n        memmove_s(v4 + 1, 2 * v26, v4, 2 * v26);\n        v4 = a2;\n      }\n      v27 = (__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)v4) >> 1;\n      v28 = 1 - v27;\n      if ( v27 != 1 )\n      {\n        v29 = *(_WORD **)(a1 + 16);\n        while ( v28 )\n        {\n          *v29++ = v6;\n          --v28;\n        }\n        v4 = a2;\n      }\n      *(_QWORD *)(a1 + 16) += 2i64;\n      result = *(_QWORD *)(a1 + 16) - 2i64;\n      v30 = (result - (unsigned __int64)v4 + 1) >> 1;\n      if ( (unsigned __int64)v4 > result )\n        v30 = 0i64;\n      if ( v30 )\n      {\n        do\n        {\n          *v4++ = v6;\n          ++v8;\n        }\n        while ( v8 != v30 );\n      }\n    }\n  }\n  else\n  {\n    if ( 0x7FF9F59FF9F59FFFi64 - (v9 >> 1) >= v9 )\n      v12 = (v9 >> 1) + v9;\n    else\n      v12 = 0i64;\n    if ( v7 )\n      v13 = (*(_QWORD *)(a1 + 16) - v7) >> 1;\n    else\n      v13 = 0i64;\n    if ( v12 < v13 + 1 )\n    {\n      if ( v7 )\n        v14 = (*(_QWORD *)(a1 + 16) - v7) >> 1;\n      else\n        v14 = 0i64;\n      v12 = v14 + 1;\n    }\n    v15 = v12;\n    if ( v12 )\n    {\n      if ( 0xFF9F59FF9F59FFFFui64 / v12 < 2 )\n      {\n        sub_148B1C064((exception *)pExceptionObject, 0i64);\n        CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVbad_alloc_std__);\n      }\n    }\n    else\n    {\n      v15 = 0i64;\n    }\n    v16 = (char *)sub_149E0AE5C(2 * v15);\n    v17 = v16;\n    v18 = *(_BYTE **)(a1 + 8);\n    v19 = ((char *)a2 - v18) >> 1;\n    v20 = 2 * v19;\n    if ( v19 )\n      memmove_s(v16, 2 * v19, v18, 2 * v19);\n    *(_WORD *)&v17[v20] = v6;\n    v21 = (__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)a2) >> 1;\n    if ( v21 )\n      memmove_s(&v17[v20 + 2], 2 * v21, a2, 2 * v21);\n    v22 = *(void **)(a1 + 8);\n    if ( v22 )\n      v23 = (__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)v22) >> 1;\n    else\n      v23 = 0i64;\n    if ( v22 )\n      free(v22);\n    *(_QWORD *)(a1 + 24) = &v17[2 * v12];\n    result = (unsigned __int64)&v17[2 * v23 + 2];\n    *(_QWORD *)(a1 + 16) = result;\n    *(_QWORD *)(a1 + 8) = v17;\n  }\n  return result;\n}\n// 14152CFFC: using guessed type void __fastcall __noreturn sub_14152CFFC(_QWORD);\n\n"
    },
    {
        "Function": "sub_1476AD848",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "9.00%",
        "Function Body": "\n__int64 __fastcall sub_1476AD848(unsigned __int16 *a1)\n{\n  __int16 v2; // di\n  unsigned __int16 v3; // r9\n  unsigned __int16 v4; // ax\n  unsigned __int16 v5; // ax\n  unsigned __int16 v6; // cx\n  unsigned __int16 v7; // r10\n  unsigned __int16 v8; // r8\n  unsigned __int16 v9; // r11\n  unsigned __int16 v10; // cx\n  unsigned __int16 v11; // r8\n  unsigned __int16 v12; // bx\n  unsigned __int16 v13; // r10\n  __int16 v14; // ax\n  unsigned int v15; // kr00_4\n  unsigned __int16 v16; // r8\n  unsigned __int16 v17; // r11\n  unsigned __int16 v18; // r10\n  unsigned __int16 v19; // bx\n  __int16 v20; // cx\n\n  v2 = a1[3] & 0x8000;\n  v3 = 1;\n  v4 = a1[3] & 0xF;\n  a1[3] = v4;\n  if ( !v4 )\n  {\n    if ( !a1[2] && !a1[1] && !*a1 )\n      goto LABEL_17;\n    v5 = a1[2];\n    v6 = a1[1];\n    v7 = *a1;\n    do\n    {\n      v8 = v5;\n      v3 -= 16;\n      v5 = v6;\n      v6 = v7;\n      v7 = 0;\n    }\n    while ( !v8 );\n    a1[3] = v8;\n    a1[2] = v5;\n    a1[1] = v6;\n    *a1 = 0;\n  }\n  v9 = a1[3];\n  if ( v9 < 0x10u )\n  {\n    v10 = a1[2];\n    v11 = a1[1];\n    v12 = *a1;\n    do\n    {\n      v13 = (v10 >> 15) | (2 * v9);\n      --v3;\n      v10 = (v11 >> 15) | (2 * v10);\n      v9 = v13;\n      v15 = 2 * v12;\n      v14 = HI015A(v15);\n      v12 = v15;\n      v11 = v14 | (2 * v11);\n    }\n    while ( v13 < 0x10u );\n    a1[3] = v13;\n    a1[2] = v10;\n    a1[1] = v11;\n    *a1 = v12;\n  }\n  v16 = a1[3];\n  if ( v16 >= 0x20u )\n  {\n    v17 = a1[2];\n    v18 = a1[1];\n    v19 = *a1;\n    do\n    {\n      ++v3;\n      v19 = (v19 >> 1) | (v18 << 15);\n      v20 = v16 << 15;\n      v18 = (v17 << 15) | (v18 >> 1);\n      v16 >>= 1;\n      v17 = (v17 >> 1) | v20;\n    }\n    while ( v16 >= 0x20u );\n    a1[3] = v16;\n    a1[2] = v17;\n    a1[1] = v18;\n    *a1 = v19;\n  }\n  a1[3] &= 0xFu;\nLABEL_17:\n  a1[3] |= v2;\n  return v3;\n}\n// 1476AD8A6: conditional instruction was optimized away because ax.2==0\n\n"
    },
    {
        "Function": "sub_14EEF1680",
        "Total XOR and shift operations": 13,
        "XOR operations": 0,
        "Shift operations": 13,
        "Operation percentage": "8.90%",
        "Function Body": "\n__int64 __fastcall sub_14EEF1680(__int64 a1, unsigned __int16 a2)\n{\n  unsigned __int64 *v4; // r9\n  unsigned __int64 v5; // rdx\n  unsigned __int64 v6; // r8\n  __int64 v7; // rcx\n  __int64 result; // rax\n  unsigned __int64 v9; // rdx\n  int *v10; // r8\n  __int64 v11; // r9\n  unsigned __int64 v12; // rsi\n  unsigned __int64 v13; // rcx\n  unsigned __int64 v14; // r14\n  __int64 v15; // rdi\n  unsigned __int64 v16; // rcx\n  __int64 *v17; // rax\n  bool v18; // zf\n  __int64 *v19; // rax\n  _QWORD *v20; // rcx\n  __int64 v21; // r8\n  __int64 *v22; // r8\n  __int64 v23; // r9\n  __int64 v24; // rcx\n  __int64 v25; // rdx\n  _WORD **v26; // rcx\n  unsigned __int16 *v27; // rdx\n  char pExceptionObject[56]; // [rsp+20h] [rbp-38h] BYREF\n\n  if ( (*(_BYTE *)(a1 + 120) & 8) != 0 )\n  {\n    v4 = *(unsigned __int64 **)(a1 + 72);\n    v5 = *v4;\n    if ( *v4 )\n    {\n      v6 = *(_QWORD *)(a1 + 112);\n      if ( v5 < v6 )\n      {\n        v7 = **(int **)(a1 + 96);\n        *v4 = v6;\n        **(_DWORD **)(a1 + 96) = (__int64)(v5 + 2 * v7 - v6) >> 1;\n      }\n    }\n  }\n  if ( a2 == 0xFFFF )\n    return 0i64;\n  v9 = **(_QWORD **)(a1 + 72);\n  if ( !v9 || (v10 = *(int **)(a1 + 96), v11 = *v10, v9 >= v9 + 2 * v11) )\n  {\n    if ( (*(_BYTE *)(a1 + 120) & 2) != 0 )\n      return 0xFFFFi64;\n    if ( v9 )\n      v12 = (__int64)(v9 + 2i64 * **(int **)(a1 + 96) - **(_QWORD **)(a1 + 32)) >> 1;\n    else\n      v12 = 0i64;\n    v13 = 32i64;\n    v14 = v12;\n    v15 = 0i64;\n    if ( v12 >> 1 < 0x20 || (v13 = v12 >> 1) != 0 )\n    {\n      do\n      {\n        if ( 0x7FF9F59F - v13 >= v12 )\n          break;\n        v13 >>= 1;\n      }\n      while ( v13 );\n      if ( v13 )\n      {\n        v14 = v13 + v12;\n        v16 = v14;\n        if ( v14 )\n        {\n          if ( 0xFF9F59FF9F59FFFFui64 / v14 < 2 )\n          {\n            sub_148B1C064((exception *)pExceptionObject, 0i64);\n            CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVbad_alloc_std__);\n          }\n        }\n        else\n        {\n          v16 = 0i64;\n        }\n        v15 = (__int64)sub_149E0AE5C(2 * v16);\n      }\n    }\n    if ( v12 )\n      memcpy_s((void *const)v15, 2 * v14, **(const void *const **)(a1 + 32), 2 * v12);\n    if ( (*(_BYTE *)(a1 + 120) & 1) != 0 )\n      free(**(void ***)(a1 + 32));\n    *(_DWORD *)(a1 + 120) |= 1u;\n    if ( v12 )\n    {\n      v20 = *(_QWORD **)(a1 + 32);\n      *(_QWORD *)(a1 + 112) = v15 + 2 * ((__int64)(*(_QWORD *)(a1 + 112) - *v20) >> 1);\n      v21 = v15 + 2 * ((__int64)(**(_QWORD **)(a1 + 72) - *v20) >> 1);\n      **(_QWORD **)(a1 + 40) = v15 + 2 * ((__int64)(**(_QWORD **)(a1 + 40) - *v20) >> 1);\n      **(_QWORD **)(a1 + 72) = v21;\n      **(_DWORD **)(a1 + 96) = (__int64)(v15 + 2 * v14 - v21) >> 1;\n      if ( (*(_BYTE *)(a1 + 120) & 4) == 0 )\n      {\n        v22 = *(__int64 **)(a1 + 32);\n        v23 = **(_QWORD **)(a1 + 72);\n        v24 = **(_QWORD **)(a1 + 64) - *v22;\n        *v22 = v15;\n        v25 = v15 + 2 * (v24 >> 1);\n        **(_QWORD **)(a1 + 64) = v25;\n        **(_DWORD **)(a1 + 88) = (v23 - v25 + 2) >> 1;\n        goto LABEL_36;\n      }\n      **(_QWORD **)(a1 + 32) = v15;\n      v19 = *(__int64 **)(a1 + 64);\n    }\n    else\n    {\n      v17 = *(__int64 **)(a1 + 40);\n      *(_QWORD *)(a1 + 112) = v15;\n      *v17 = v15;\n      **(_QWORD **)(a1 + 72) = v15;\n      **(_DWORD **)(a1 + 96) = (__int64)(2 * v14) >> 1;\n      v18 = (*(_BYTE *)(a1 + 120) & 4) == 0;\n      **(_QWORD **)(a1 + 32) = v15;\n      v19 = *(__int64 **)(a1 + 64);\n      if ( v18 )\n      {\n        *v19 = v15;\n        **(_DWORD **)(a1 + 88) = 1;\nLABEL_36:\n        --**(_DWORD **)(a1 + 96);\n        goto LABEL_37;\n      }\n    }\n    *v19 = 0i64;\n    **(_DWORD **)(a1 + 88) = v15 >> 1;\n    goto LABEL_36;\n  }\n  *v10 = v11 - 1;\nLABEL_37:\n  v26 = *(_WORD ***)(a1 + 72);\n  v27 = (*v26)++;\n  result = a2;\n  *v27 = a2;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_14A50D6E0",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "8.70%",
        "Function Body": "\n__int64 __fastcall sub_14A50D6E0(__int64 a1)\n{\n  __int64 v1; // r8\n  __int64 v2; // rdx\n  __int64 v3; // rcx\n\n  v1 = *(_QWORD *)(a1 + 312);\n  LOFA4CD(v2) = 0;\n  if ( v1 )\n  {\n    if ( (int)((*(_QWORD *)(a1 + 320) - v1) >> 5) > 0 )\n    {\n      v3 = *(_QWORD *)(v1 + 8);\n      if ( v3 )\n        return (unsigned int)((*(_QWORD *)(v1 + 16) - v3) >> 3);\n    }\n  }\n  return (unsigned int)v2;\n}\n// 14A50D703: conditional instruction was optimized away because r8.8!=0\n\n"
    },
    {
        "Function": "sub_1476AD144",
        "Total XOR and shift operations": 10,
        "XOR operations": 0,
        "Shift operations": 10,
        "Operation percentage": "8.26%",
        "Function Body": "\n__int64 __fastcall sub_1476AD144(unsigned __int16 *a1, int a2)\n{\n  __int16 v4; // cx\n  double v7; // xmm0_8\n  int v8; // r11d\n  unsigned __int16 v9; // r14\n  unsigned __int16 v10; // cx\n  unsigned __int16 v11; // si\n  unsigned __int16 v12; // dx\n  unsigned __int16 v13; // r9\n  unsigned __int16 v14; // cx\n  __int64 v15; // r8\n  __int16 v16; // r11\n  __int16 v17; // dx\n  unsigned __int16 v18; // r8\n  unsigned __int16 v19; // dx\n  unsigned __int16 v20; // ax\n  bool v21; // zf\n\n  v4 = (a1[3] >> 4) & 0x7FF;\n  if ( v4 == 2047 )\n  {\n    if ( (a1[3] & 0xF) != 0 || a1[2] || a1[1] || *a1 )\n      return 2;\n    else\n      return 1;\n  }\n  if ( !v4 )\n  {\n    v4 = sub_1476AD848(a1);\n    if ( v4 > 0 )\n      return 0i64;\n  }\n  if ( a2 <= 0 || 2047 - v4 > a2 )\n  {\n    if ( -v4 < a2 )\n    {\n      a1[3] &= 0x800Fu;\n      a1[3] |= 16 * (v4 + a2);\n      return 0xFF9F59FFi64;\n    }\n    v8 = v4 + a2 - 1;\n    v9 = a1[3] & 0x8000;\n    v10 = a1[3] & 0xF | 0x10;\n    a1[3] = v10;\n    if ( (unsigned int)(v8 + 53) > 0x34 )\n    {\n      a1[3] = v9;\n      *(_DWORD *)(a1 + 1) = 0;\n      *a1 = 0;\n    }\n    else\n    {\n      v11 = 0;\n      if ( (__int16)v8 <= -16 )\n      {\n        v12 = a1[1];\n        v13 = v10;\n        v14 = a1[2];\n        v15 = (unsigned __int16)(((unsigned __int16)(-16 - v8) >> 4) + 1);\n        LO02E1(v8) = 16 * v15 + v8;\n        do\n        {\n          v11 = *a1 | (v11 != 0);\n          *a1 = v12;\n          v12 = v14;\n          v14 = v13;\n          v13 = 0;\n          --v15;\n        }\n        while ( v15 );\n        a1[3] = 0;\n        a1[2] = v14;\n        a1[1] = v12;\n      }\n      v16 = -(__int16)v8;\n      if ( v16 )\n      {\n        v11 = (v11 != 0) | (unsigned __int16)(*a1 << (16 - v16));\n        v17 = a1[1] >> v16;\n        *a1 = (a1[1] << (16 - v16)) | (*a1 >> v16);\n        v18 = a1[2];\n        a1[1] = (v18 << (16 - v16)) | v17;\n        v19 = a1[3];\n        a1[3] = v19 >> v16;\n        a1[2] = (v19 << (16 - v16)) | (v18 >> v16);\n      }\n      a1[3] |= v9;\n      v20 = a1[3];\n      if ( v11 > 0x8000u || v11 == 0x8000 && (*(_BYTE *)a1 & 1) != 0 )\n      {\n        v21 = (*a1)++ == 0xFFFF;\n        if ( v21 )\n        {\n          v21 = a1[1]++ == 0xFFFF;\n          if ( v21 )\n          {\n            v21 = a1[2]++ == 0xFFFF;\n            if ( v21 )\n            {\n              a1[3] = v20 + 1;\n              return 0xFF9F59FFi64;\n            }\n          }\n        }\n      }\n      if ( v20 != v9 || a1[2] || a1[1] || *a1 )\n        return 0xFF9F59FFi64;\n    }\n    return 0i64;\n  }\n  v7 = *(double *)&qword_147160048;\n  if ( (a1[3] & 0x8000u) != 0 )\n    v7 = -*(double *)&qword_147160048;\n  *(double *)a1 = v7;\n  return 1i64;\n}\n// 147160048: using guessed type __int64 qword_147160048;\n\n"
    },
    {
        "Function": "sub_147D4C1C0",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "6.62%",
        "Function Body": "\n__int64 __fastcall sub_147D4C1C0(__int64 a1, int **a2, volatile signed __int32 *a3, _QWORD *a4)\n{\n  volatile signed __int32 *v5; // rbx\n  __int64 v6; // rcx\n  unsigned __int64 v7; // rdi\n  __int64 v8; // rdx\n  __int64 v9; // rax\n  unsigned __int64 v10; // rdi\n  __int64 v11; // rax\n  __int64 v12; // rdi\n  _QWORD *v13; // r15\n  _QWORD *v14; // rax\n  _QWORD *v15; // r12\n  __int64 v16; // rcx\n  __int64 *v17; // rdx\n  __int64 v18; // r14\n  _QWORD *v19; // r15\n  __int64 v20; // rsi\n  int **j; // rdi\n  int **v22; // r14\n  int **v23; // rdi\n  int **i; // rax\n  signed __int32 v25; // eax\n  bool v26; // cc\n  __int64 result; // rax\n  char pExceptionObject[80]; // [rsp+38h] [rbp-50h] BYREF\n  volatile signed __int32 *v30; // [rsp+A0h] [rbp+18h] BYREF\n  _QWORD *v31; // [rsp+A8h] [rbp+20h]\n\n  v30 = a3;\n  v5 = sub_147C81CEC((volatile signed __int32 *)(*a4 - 24i64)) + 6;\n  v30 = v5;\n  v6 = *(_QWORD *)(a1 + 8);\n  if ( v6 )\n    v7 = (*(_QWORD *)(a1 + 24) - v6) >> 3;\n  else\n    v7 = 0i64;\n  if ( v6 )\n    v8 = (*(_QWORD *)(a1 + 16) - v6) >> 3;\n  else\n    v8 = 0i64;\n  if ( v8 == 0x1FF9F59FF9F59FFFi64 )\n    sub_14152CFFC(v6);\n  if ( v6 )\n    v9 = (*(_QWORD *)(a1 + 16) - v6) >> 3;\n  else\n    v9 = 0i64;\n  if ( v7 >= v9 + 1 )\n  {\n    v19 = *(_QWORD **)(a1 + 16);\n    if ( (int **)v19 - a2 )\n    {\n      v22 = (int **)(v19 - 1);\n      *(_QWORD *)(a1 + 16) = sub_147D4C8F8(v19 - 1, v19, *(_QWORD **)(a1 + 16));\n      v23 = a2;\n      if ( a2 != v19 - 1 )\n      {\n        do\n        {\n          --v22;\n          sub_14152C454(v22 + 1, (_BYTE **)v22);\n        }\n        while ( v22 != a2 );\n        v23 = a2;\n      }\n      for ( i = v23 + 1; v23 != i; i = a2 + 1 )\n        sub_14152C454(v23++, (_BYTE **)&v30);\n    }\n    else\n    {\n      sub_147D4C8F8(a2, v19, a2 + 1);\n      sub_147D4C824(*(_QWORD **)(a1 + 16), 1 - ((__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)a2) >> 3), &v30);\n      *(_QWORD *)(a1 + 16) += 8i64;\n      v20 = *(_QWORD *)(a1 + 16) - 8i64;\n      for ( j = a2; j != (int **)v20; ++j )\n        sub_14152C454(j, (_BYTE **)&v30);\n    }\n  }\n  else\n  {\n    if ( 0x1FF9F59FF9F59FFFi64 - (v7 >> 1) >= v7 )\n      v10 = (v7 >> 1) + v7;\n    else\n      v10 = 0i64;\n    if ( v6 )\n      v11 = (*(_QWORD *)(a1 + 16) - v6) >> 3;\n    else\n      v11 = 0i64;\n    if ( v10 < v11 + 1 )\n    {\n      if ( v6 )\n        v12 = (*(_QWORD *)(a1 + 16) - v6) >> 3;\n      else\n        v12 = 0i64;\n      v10 = v12 + 1;\n    }\n    if ( v10 && 0xFF9F59FF9F59FFFFui64 / v10 < 8 )\n    {\n      sub_148B1C064((exception *)pExceptionObject, 0i64);\n      CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVbad_alloc_std__);\n    }\n    v13 = sub_149E0AE5C(8 * v10);\n    v31 = v13;\n    v14 = sub_147D4C8F8(*(_QWORD **)(a1 + 8), a2, v13);\n    v15 = v14 + 1;\n    sub_147D4C824(v14, 1i64, &v30);\n    sub_147D4C8F8(a2, *(_QWORD **)(a1 + 16), v15);\n    v17 = *(__int64 **)(a1 + 8);\n    if ( v17 )\n      v18 = (__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)v17) >> 3;\n    else\n      v18 = 0i64;\n    if ( v17 )\n    {\n      sub_14152C9A0(v16, v17, *(__int64 **)(a1 + 16));\n      free(*(void **)(a1 + 8));\n    }\n    *(_QWORD *)(a1 + 24) = &v13[v10];\n    *(_QWORD *)(a1 + 16) = &v13[v18 + 1];\n    *(_QWORD *)(a1 + 8) = v13;\n  }\n  v25 = _InterlockedExchangeAdd(v5 - 2, 0xFF9F59FF);\n  v26 = v25 <= 1;\n  result = (unsigned int)(v25 - 1);\n  if ( v26 )\n    return (*(__int64 (__fastcall **)(_QWORD, volatile signed __int32 *))(**((_QWORD **)v5 - 3) + 8i64))(\n             *((_QWORD *)v5 - 3),\n             v5 - 6);\n  return result;\n}\n// 147D4C377: variable 'v16' is possibly undefined\n// 14152CFFC: using guessed type void __fastcall __noreturn sub_14152CFFC(_QWORD);\n// 14779AD70: using guessed type __int64 (__fastcall *_guard_check_icall_fptr)(_QWORD);\n\n"
    },
    {
        "Function": "sub_14DF7AE90",
        "Total XOR and shift operations": 10,
        "XOR operations": 0,
        "Shift operations": 10,
        "Operation percentage": "6.58%",
        "Function Body": "\nvoid __fastcall sub_14DF7AE90(__int64 *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v5; // rcx\n  unsigned __int64 v6; // rbx\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  unsigned __int64 v9; // rbx\n  __int64 v10; // rax\n  __int64 v11; // rbx\n  _QWORD *v12; // r15\n  _QWORD *v13; // rax\n  _QWORD *v14; // r14\n  __int64 v15; // rcx\n  __int64 v16; // rsi\n  __int64 v17; // rax\n  __int64 v18; // r14\n  __int64 v19; // r12\n  __int64 v20; // rsi\n  __int64 v21; // r14\n  __int64 v22; // rdi\n  unsigned __int64 j; // rbx\n  __int64 v24; // rsi\n  unsigned __int64 v25; // rbx\n  __int64 i; // rax\n  void *v27; // rbx\n  char pExceptionObject[24]; // [rsp+38h] [rbp-60h] BYREF\n  __int64 v29; // [rsp+50h] [rbp-48h] BYREF\n  void *Block; // [rsp+58h] [rbp-40h]\n  __int64 *v31; // [rsp+60h] [rbp-38h]\n\n  sub_147D4C578(&v29, a4);\n  v5 = a1[1];\n  if ( v5 )\n    v6 = (a1[3] - v5) >> 5;\n  else\n    v6 = 0i64;\n  if ( v5 )\n    v7 = (a1[2] - v5) >> 5;\n  else\n    v7 = 0i64;\n  if ( v7 == 0x7FF9F59FF9F59FFi64 )\n    sub_14152CFFC(v5);\n  if ( v5 )\n    v8 = (a1[2] - v5) >> 5;\n  else\n    v8 = 0i64;\n  if ( v6 >= v8 + 1 )\n  {\n    v21 = a1[2];\n    if ( (v21 - a2) >> 5 )\n    {\n      v24 = v21 - 32;\n      a1[2] = (__int64)sub_147D4C890(v21 - 32, v21, (_QWORD *)a1[2]);\n      v25 = a2;\n      if ( a2 != v21 - 32 )\n      {\n        do\n        {\n          v24 -= 32i64;\n          sub_147D4C5F4(v24 + 32, v24);\n        }\n        while ( v24 != a2 );\n        v25 = a2;\n      }\n      for ( i = v25 + 32; v25 != i; i = a2 + 32 )\n      {\n        sub_147D4C5F4(v25, (__int64)&v29);\n        v25 += 32i64;\n      }\n    }\n    else\n    {\n      sub_147D4C890(a2, v21, (_QWORD *)(a2 + 32));\n      sub_147D4C7C0((_QWORD *)a1[2], 1 - ((a1[2] - a2) >> 5), (__int64)&v29);\n      a1[2] += 32i64;\n      v22 = a1[2] - 32;\n      for ( j = a2; j != v22; j += 32i64 )\n        sub_147D4C5F4(j, (__int64)&v29);\n    }\n  }\n  else\n  {\n    if ( 0x7FF9F59FF9F59FFi64 - (v6 >> 1) >= v6 )\n      v9 = (v6 >> 1) + v6;\n    else\n      v9 = 0i64;\n    if ( v5 )\n      v10 = (a1[2] - v5) >> 5;\n    else\n      v10 = 0i64;\n    if ( v9 < v10 + 1 )\n    {\n      if ( v5 )\n        v11 = (a1[2] - v5) >> 5;\n      else\n        v11 = 0i64;\n      v9 = v11 + 1;\n    }\n    if ( v9 && 0xFF9F59FF9F59FFFFui64 / v9 < 0x20 )\n    {\n      sub_148B1C064((exception *)pExceptionObject, 0i64);\n      CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVbad_alloc_std__);\n    }\n    v12 = sub_149E0AE5C(32 * v9);\n    v13 = sub_147D4C890(a1[1], a2, v12);\n    v14 = v13 + 4;\n    sub_147D4C7C0(v13, 1i64, (__int64)&v29);\n    sub_147D4C890(a2, a1[2], v14);\n    v16 = a1[1];\n    if ( v16 )\n      v17 = (a1[2] - v16) >> 5;\n    else\n      v17 = 0i64;\n    v18 = v17 + 1;\n    if ( v16 )\n    {\n      v19 = a1[2];\n      if ( v16 != v19 )\n      {\n        v20 = v16 + 8;\n        do\n        {\n          if ( *(_QWORD *)v20 )\n          {\n            sub_14152C9A0(v15, *(__int64 **)v20, *(__int64 **)(v20 + 8));\n            free(*(void **)v20);\n          }\n          *(_QWORD *)v20 = 0i64;\n          *(_QWORD *)(v20 + 8) = 0i64;\n          *(_QWORD *)(v20 + 16) = 0i64;\n          v20 += 32i64;\n        }\n        while ( v20 - 8 != v19 );\n      }\n      free((void *)a1[1]);\n    }\n    a1[3] = (__int64)&v12[4 * v9];\n    a1[2] = (__int64)&v12[4 * v18];\n    a1[1] = (__int64)v12;\n  }\n  v27 = Block;\n  if ( Block )\n  {\n    sub_14152C9A0(v15, (__int64 *)Block, v31);\n    free(v27);\n  }\n}\n// 147D4C053: variable 'v15' is possibly undefined\n// 14152CFFC: using guessed type void __fastcall __noreturn sub_14152CFFC(_QWORD);\n\n"
    },
    {
        "Function": "sub_1466345DC",
        "Total XOR and shift operations": 9,
        "XOR operations": 0,
        "Shift operations": 9,
        "Operation percentage": "6.04%",
        "Function Body": "\n__int64 __fastcall sub_1466345DC(__int64 a1, __int64 *a2, __int64 a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  __int64 v6; // rsi\n  __int64 v7; // rdx\n  unsigned __int64 v8; // rbx\n  __int64 v9; // r8\n  __int64 v10; // rcx\n  unsigned __int64 v11; // rbx\n  __int64 v12; // rax\n  __int64 v13; // rbx\n  __int64 *v14; // r15\n  __int64 *v15; // rax\n  __int64 *v16; // r12\n  __int64 v17; // rcx\n  _QWORD *v18; // rdx\n  __int64 v19; // r14\n  __int64 result; // rax\n  __int64 *v21; // r15\n  __int64 v22; // rdi\n  __int64 *i; // rbx\n  __int64 *v24; // r14\n  __int64 *v25; // rbx\n  __int64 *v26; // rdi\n  char pExceptionObject[80]; // [rsp+38h] [rbp-50h] BYREF\n  __int64 v29; // [rsp+A8h] [rbp+20h] BYREF\n\n  v4 = a2;\n  v29 = *a4;\n  v6 = v29;\n  if ( v29 )\n  {\n    (*(void (__fastcall **)(__int64))(*(_QWORD *)v29 + 8i64))(v29);\n    v4 = a2;\n  }\n  v7 = *(_QWORD *)(a1 + 8);\n  if ( v7 )\n    v8 = (*(_QWORD *)(a1 + 24) - v7) >> 3;\n  else\n    v8 = 0i64;\n  if ( v7 )\n    v9 = (*(_QWORD *)(a1 + 16) - v7) >> 3;\n  else\n    v9 = 0i64;\n  if ( v9 == 0x1FF9F59FF9F59FFFi64 )\n    sub_14152CFFC(0i64);\n  if ( v7 )\n    v10 = (*(_QWORD *)(a1 + 16) - v7) >> 3;\n  else\n    v10 = 0i64;\n  if ( v8 >= v10 + 1 )\n  {\n    v21 = *(__int64 **)(a1 + 16);\n    if ( v21 - v4 )\n    {\n      v24 = v21 - 1;\n      *(_QWORD *)(a1 + 16) = sub_146634AB0(v21 - 1, v21, *(__int64 **)(a1 + 16));\n      v25 = a2;\n      if ( a2 != v21 - 1 )\n      {\n        do\n        {\n          --v24;\n          if ( v24[1] != *v24 )\n            sub_142FC3868(v24 + 1, *v24);\n        }\n        while ( v24 != a2 );\n        v25 = a2;\n      }\n      v26 = v25;\n      for ( result = (__int64)(v25 + 1); v26 != v25 + 1; result = (__int64)(v25 + 1) )\n      {\n        if ( *v26 != v6 )\n        {\n          sub_142FC3868(v26, v6);\n          v25 = a2;\n        }\n        ++v26;\n      }\n    }\n    else\n    {\n      sub_146634AB0(v4, v21, v4 + 1);\n      result = (__int64)sub_146634A28(\n                          *(__int64 **)(a1 + 16),\n                          1 - ((__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)a2) >> 3),\n                          &v29);\n      *(_QWORD *)(a1 + 16) += 8i64;\n      v22 = *(_QWORD *)(a1 + 16) - 8i64;\n      for ( i = a2; i != (__int64 *)v22; ++i )\n      {\n        if ( *i != v6 )\n          result = sub_142FC3868(i, v6);\n      }\n    }\n  }\n  else\n  {\n    if ( 0x1FF9F59FF9F59FFFi64 - (v8 >> 1) >= v8 )\n      v11 = (v8 >> 1) + v8;\n    else\n      v11 = 0i64;\n    if ( v7 )\n      v12 = (*(_QWORD *)(a1 + 16) - v7) >> 3;\n    else\n      v12 = 0i64;\n    if ( v11 < v12 + 1 )\n    {\n      if ( v7 )\n        v13 = (*(_QWORD *)(a1 + 16) - v7) >> 3;\n      else\n        v13 = 0i64;\n      v11 = v13 + 1;\n    }\n    if ( v11 && 0xFF9F59FF9F59FFFFui64 / v11 < 8 )\n    {\n      sub_148B1C064((exception *)pExceptionObject, 0i64);\n      CxxThrowException(pExceptionObject, (_ThrowInfo *)&_TI2_AVbad_alloc_std__);\n    }\n    v14 = (__int64 *)sub_149E0AE5C(8 * v11);\n    v15 = sub_146634AB0(*(__int64 **)(a1 + 8), a2, v14);\n    v16 = v15 + 1;\n    sub_146634A28(v15, 1i64, &v29);\n    sub_146634AB0(a2, *(__int64 **)(a1 + 16), v16);\n    v18 = *(_QWORD **)(a1 + 8);\n    if ( v18 )\n      v19 = (__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)v18) >> 3;\n    else\n      v19 = 0i64;\n    if ( v18 )\n    {\n      sub_14BD57454(v17, v18, *(_QWORD **)(a1 + 16));\n      free(*(void **)(a1 + 8));\n    }\n    *(_QWORD *)(a1 + 24) = &v14[v11];\n    result = (__int64)&v14[v19 + 1];\n    *(_QWORD *)(a1 + 16) = result;\n    *(_QWORD *)(a1 + 8) = v14;\n  }\n  if ( v6 )\n    return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v6 + 16i64))(v6);\n  return result;\n}\n// 1466347A9: variable 'v17' is possibly undefined\n// 14152CFFC: using guessed type void __fastcall __noreturn sub_14152CFFC(_QWORD);\n// 14779AD70: using guessed type __int64 (__fastcall *_guard_check_icall_fptr)(_QWORD);\n\n"
    }
]