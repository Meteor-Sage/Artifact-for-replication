[
    {
        "Function": "sub_429C01",
        "Total XOR and shift operations": 9,
        "XOR operations": 1,
        "Shift operations": 8,
        "Operation percentage": "19.57%",
        "Function Body": "\nunsigned int __cdecl sub_429C01(unsigned __int64 a1, unsigned int a2, unsigned int a3)\n{\n  unsigned int v3; // esi\n  unsigned int v4; // ecx\n  unsigned int v6; // eax\n  int v7; // edi\n  unsigned __int64 v8; // rtt\n  unsigned int v9; // ebx\n  unsigned __int64 v10; // rax\n  char v11; // [esp+4h] [ebp-18h]\n\n  v3 = a2;\n  if ( a3 )\n  {\n    v4 = 0;\n    if ( a3 <= HIEBE3D(a1) )\n    {\n      _BitScanReverse(&v6, a3);\n      v11 = v6 ^ 0x1F;\n      if ( v6 != 0x1F )\n      {\n        v7 = (a2 >> (32 - v11)) | (a3 << v11);\n        LOFA4CD(v8) = ((unsigned int)a1 >> (32 - v11)) | (HIEBE3D(a1) << v11);\n        HIEBE3D(v8) = HIEBE3D(a1) >> (32 - v11);\n        v9 = v8 % (unsigned int)v7;\n        v4 = v8 / (unsigned int)v7;\n        v10 = (a2 << v11) * (unsigned __int64)v4;\n        if ( HIEBE3D(v10) > v9 || HIEBE3D(v10) == v9 && (a2 << v11) * v4 > (_DWORD)a1 << v11 )\n          --v4;\n      }\n      else\n      {\n        return (unsigned int)a1 >= a2 || HIEBE3D(a1) > a3;\n      }\n    }\n    return v4;\n  }\n  if ( a2 > HIEBE3D(a1) )\n    return a1 / a2;\n  if ( !a2 )\n    v3 = 1 / 0u;\n  return __PA4554__(HIEBE3D(a1) % v3, a1) / v3;\n}\n\n"
    },
    {
        "Function": "sub_42E1CB",
        "Total XOR and shift operations": 15,
        "XOR operations": 1,
        "Shift operations": 14,
        "Operation percentage": "15.62%",
        "Function Body": "\nint __cdecl sub_42E1CB(unsigned __int64 a1, __int64 a2)\n{\n  unsigned int v2; // ebx\n  int v3; // edx\n  int result; // eax\n  int v5; // ecx\n  unsigned int v6; // eax\n  unsigned __int64 v7; // rtt\n  unsigned __int64 v8; // rax\n  unsigned __int64 v9; // rdi\n  int v10; // [esp+4h] [ebp-34h]\n  unsigned int v11; // [esp+4h] [ebp-34h]\n  char v12; // [esp+8h] [ebp-30h]\n  int v13; // [esp+10h] [ebp-28h]\n  unsigned int v14; // [esp+10h] [ebp-28h]\n  unsigned int v15; // [esp+14h] [ebp-24h]\n  int v16; // [esp+18h] [ebp-20h]\n  int v17; // [esp+18h] [ebp-20h]\n  unsigned int v18; // [esp+1Ch] [ebp-1Ch]\n  int v19; // [esp+20h] [ebp-18h] BYREF\n  unsigned int v20; // [esp+24h] [ebp-14h]\n\n  v2 = a2;\n  v10 = HIEBE3D(a1);\n  v13 = a1;\n  if ( !HIEBE3D(a2) )\n  {\n    if ( (unsigned int)a2 <= HIEBE3D(a1) )\n    {\n      if ( !(_DWORD)a2 )\n        v2 = 1 / 0u;\n      v3 = __PA4554__(HIEBE3D(a1) % v2, a1) % v2;\n    }\n    else\n    {\n      v3 = a1 % (unsigned int)a2;\n    }\n    if ( &v19 )\n    {\n      v18 = 0;\n      v16 = v3;\nLABEL_6:\n      v19 = v16;\n      result = v16;\n      v20 = v18;\n      return result;\n    }\n    return v19;\n  }\n  v5 = HIEBE3D(a1);\n  if ( HIEBE3D(a2) > HIEBE3D(a1) )\n  {\n    v17 = a1;\nLABEL_9:\n    result = v17;\n    v19 = v17;\n    v20 = v5;\n    return result;\n  }\n  _BitScanReverse(&v6, HIEBE3D(a2));\n  v12 = v6 ^ 0x1F;\n  if ( v6 != 0x1F )\n  {\n    v15 = ((unsigned int)a2 >> (32 - v12)) | (HIEBE3D(a2) << v12);\n    LOFA4CD(v7) = ((unsigned int)a1 >> (32 - v12)) | (HIEBE3D(a1) << v12);\n    HIEBE3D(v7) = HIEBE3D(a1) >> (32 - v12);\n    v11 = v7 % v15;\n    v14 = (_DWORD)a1 << v12;\n    v8 = (unsigned int)((_DWORD)a2 << v12) * (unsigned __int64)(unsigned int)(v7 / v15);\n    v9 = v8;\n    if ( HIEBE3D(v8) > v11 || HIEBE3D(v8) == v11 && (unsigned int)v8 > v14 )\n      v9 = v8 - __PA4554__(v15, (_DWORD)a2 << v12);\n    if ( &v19 )\n    {\n      v16 = ((v14 - (unsigned int)v9) >> v12) | ((__PA4554__(v11, v14) - v9) >> 32 << (32 - v12));\n      v18 = (unsigned int)((__PA4554__(v11, v14) - v9) >> 32) >> v12;\n      goto LABEL_6;\n    }\n    return v19;\n  }\n  if ( (unsigned int)a1 >= (unsigned int)a2 || HIEBE3D(a1) > HIEBE3D(a2) )\n  {\n    v10 = (a1 - a2) >> 32;\n    v13 = a1 - a2;\n  }\n  if ( &v19 )\n  {\n    v5 = v10;\n    v17 = v13;\n    goto LABEL_9;\n  }\n  return v19;\n}\n\n"
    },
    {
        "Function": "sub_405B68",
        "Total XOR and shift operations": 48,
        "XOR operations": 0,
        "Shift operations": 48,
        "Operation percentage": "15.14%",
        "Function Body": "\nint __cdecl sub_405B68(int a1, int a2, const char *a3, int a4)\n{\n  int v4; // edx\n  int v5; // ecx\n  int v7; // edx\n  int v8; // edx\n  int v9; // edx\n  int v10; // edx\n  int v11; // edx\n  int v12; // edx\n  int v13; // edx\n  int v14; // esi\n  int v15; // edx\n  int v16; // edx\n  int v17; // edx\n  const char *v18; // [esp+40h] [ebp-10h]\n\n  v18 = a3;\n  if ( (a4 & 0x40F0D8) != 0 && (!strcmp(a3, aUpper) || !strcmp(a3, aLower)) )\n    v18 = aAlpha;\n  if ( !strcmp(v18, aAlnum) )\n  {\n    v4 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v4 + 1) & 7) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v4) >> 5)) |= 1 << (*(_BYTE *)(a1 + v4) & 0x1F);\n        ++v4;\n      }\n      while ( v4 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v4 + 1) & 7) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v4 >> 5)) |= 1 << (v4 & 0x1F);\n        ++v4;\n      }\n      while ( v4 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aCntrl) )\n  {\n    v7 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v7 + 1) & 0x20) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v7) >> 5)) |= 1 << (*(_BYTE *)(a1 + v7) & 0x1F);\n        ++v7;\n      }\n      while ( v7 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v7 + 1) & 0x20) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v7 >> 5)) |= 1 << (v7 & 0x1F);\n        ++v7;\n      }\n      while ( v7 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aLower) )\n  {\n    v9 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v9 + 1) & 2) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v9) >> 5)) |= 1 << (*(_BYTE *)(a1 + v9) & 0x1F);\n        ++v9;\n      }\n      while ( v9 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v9 + 1) & 2) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v9 >> 5)) |= 1 << (v9 & 0x1F);\n        ++v9;\n      }\n      while ( v9 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aSpace) )\n  {\n    v8 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v8 + 1) & 8) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v8) >> 5)) |= 1 << (*(_BYTE *)(a1 + v8) & 0x1F);\n        ++v8;\n      }\n      while ( v8 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v8 + 1) & 8) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v8 >> 5)) |= 1 << (v8 & 0x1F);\n        ++v8;\n      }\n      while ( v8 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aAlpha) )\n  {\n    v10 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v10 + 1) & 3) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v10) >> 5)) |= 1 << (*(_BYTE *)(a1 + v10) & 0x1F);\n        ++v10;\n      }\n      while ( v10 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v10 + 1) & 3) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v10 >> 5)) |= 1 << (v10 & 0x1F);\n        ++v10;\n      }\n      while ( v10 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aDigit) )\n  {\n    v11 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v11 + 1) & 4) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v11) >> 5)) |= 1 << (*(_BYTE *)(a1 + v11) & 0x1F);\n        ++v11;\n      }\n      while ( v11 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v11 + 1) & 4) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v11 >> 5)) |= 1 << (v11 & 0x1F);\n        ++v11;\n      }\n      while ( v11 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aPrint) )\n  {\n    v12 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v12 + 1) & 0x97) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v12) >> 5)) |= 1 << (*(_BYTE *)(a1 + v12) & 0x1F);\n        ++v12;\n      }\n      while ( v12 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v12 + 1) & 0x97) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v12 >> 5)) |= 1 << (v12 & 0x1F);\n        ++v12;\n      }\n      while ( v12 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aUpper) )\n  {\n    v13 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v13 + 1) & 1) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v13) >> 5)) |= 1 << (*(_BYTE *)(a1 + v13) & 0x1F);\n        ++v13;\n      }\n      while ( v13 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v13 + 1) & 1) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v13 >> 5)) |= 1 << (v13 & 0x1F);\n        ++v13;\n      }\n      while ( v13 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aBlank) )\n  {\n    v14 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( v14 == 9 || v14 == 32 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v14) >> 5)) |= 1 << (*(_BYTE *)(a1 + v14) & 0x1F);\n        ++v14;\n      }\n      while ( v14 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( v14 == 9 || v14 == 32 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v14 >> 5)) |= 1 << (v14 & 0x1F);\n        ++v14;\n      }\n      while ( v14 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aGraph) )\n  {\n    v15 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v15 + 1) & 0x17) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v15) >> 5)) |= 1 << (*(_BYTE *)(a1 + v15) & 0x1F);\n        ++v15;\n      }\n      while ( v15 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v15 + 1) & 0x17) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v15 >> 5)) |= 1 << (v15 & 0x1F);\n        ++v15;\n      }\n      while ( v15 <= 255 );\n    }\n  }\n  else if ( !strcmp(v18, aPunct) )\n  {\n    v16 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v16 + 1) & 0x10) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v16) >> 5)) |= 1 << (*(_BYTE *)(a1 + v16) & 0x1F);\n        ++v16;\n      }\n      while ( v16 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v16 + 1) & 0x10) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v16 >> 5)) |= 1 << (v16 & 0x1F);\n        ++v16;\n      }\n      while ( v16 <= 255 );\n    }\n  }\n  else\n  {\n    v5 = 4;\n    if ( strcmp(v18, aXdigit) )\n      return v5;\n    v17 = 0;\n    if ( a1 )\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v17 + 1) & 0x44) != 0 )\n          *(_DWORD *)(a2 + 4 * (*(unsigned __int8 *)(a1 + v17) >> 5)) |= 1 << (*(_BYTE *)(a1 + v17) & 0x1F);\n        ++v17;\n      }\n      while ( v17 <= 255 );\n    }\n    else\n    {\n      do\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)ctype_ + v17 + 1) & 0x44) != 0 )\n          *(_DWORD *)(a2 + 4 * ((unsigned int)v17 >> 5)) |= 1 << (v17 & 0x1F);\n        ++v17;\n      }\n      while ( v17 <= 255 );\n    }\n  }\n  return 0;\n}\n// 42A39A: using guessed type _BYTE ctype_[];\n\n"
    },
    {
        "Function": "sub_40616C",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "11.76%",
        "Function Body": "\nint __cdecl sub_40616C(int a1, char *Str)\n{\n  size_t v2; // eax\n  int v3; // edx\n\n  v2 = strlen(Str);\n  v3 = 3;\n  if ( v2 == 1 )\n  {\n    *(_DWORD *)(a1 + 4 * ((unsigned __int8)*Str >> 5)) |= 1 << (*Str & 0x1F);\n    return 0;\n  }\n  return v3;\n}\n\n"
    },
    {
        "Function": "sub_41986E",
        "Total XOR and shift operations": 9,
        "XOR operations": 1,
        "Shift operations": 8,
        "Operation percentage": "10.59%",
        "Function Body": "\n__int64 __cdecl sub_41986E(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rcx\n  __int64 v3; // rax\n  unsigned int v4; // esi\n  __int64 result; // rax\n  unsigned __int64 v6; // rtt\n  int v7; // edi\n  unsigned __int64 v8; // rtt\n  unsigned __int64 v9; // rax\n  unsigned int v10; // esi\n  char v11; // [esp+4h] [ebp-1Ch]\n  int v12; // [esp+8h] [ebp-18h]\n  unsigned int v13; // [esp+Ch] [ebp-14h]\n  unsigned int v14; // [esp+Ch] [ebp-14h]\n  int v15; // [esp+10h] [ebp-10h]\n\n  v2 = a1;\n  v3 = a2;\n  v15 = 0;\n  if ( a1 < 0 )\n  {\n    v15 = -1;\n    v2 = -a1;\n  }\n  if ( a2 < 0 )\n  {\n    v15 = ~v15;\n    v3 = -a2;\n  }\n  v13 = v2;\n  v4 = v3;\n  if ( HIEBE3D(v3) )\n  {\n    v12 = 0;\n    LOFA4CD(v2) = 0;\n    if ( HIEBE3D(v3) <= HIEBE3D(v2) )\n    {\n      _BitScanReverse((unsigned int *)&v3, HIEBE3D(v3));\n      v11 = v3 ^ 0x1F;\n      if ( (unsigned int)v3 != 0x1F )\n      {\n        v7 = (v4 >> (32 - v11)) | (HIEBE3D(v3) << v11);\n        LOFA4CD(v8) = (v13 >> (32 - v11)) | (HIEBE3D(v2) << v11);\n        HIEBE3D(v8) = HIEBE3D(v2) >> (32 - v11);\n        HIEBE3D(v2) = v8 % (unsigned int)v7;\n        v14 = v13 << v11;\n        LOFA4CD(v2) = v8 / (unsigned int)v7;\n        v9 = (v4 << v11) * (unsigned __int64)(unsigned int)v2;\n        v10 = (v4 << v11) * v2;\n        if ( HIEBE3D(v9) > HIEBE3D(v2) || HIEBE3D(v9) == HIEBE3D(v2) && v10 > v14 )\n          LOFA4CD(v2) = v2 - 1;\n      }\n      else\n      {\n        LOFA4CD(v2) = v13 >= v4 || HIEBE3D(v2) > HIEBE3D(v3);\n      }\n      goto LABEL_8;\n    }\n  }\n  else\n  {\n    if ( (unsigned int)v3 > HIEBE3D(v2) )\n    {\n      LOFA4CD(v2) = v2 / (unsigned int)v3;\nLABEL_8:\n      v12 = 0;\n      goto LABEL_9;\n    }\n    if ( !(_DWORD)v3 )\n      v4 = 1 / 0u;\n    v12 = HIEBE3D(v2) / v4;\n    LOFA4CD(v6) = v2;\n    HIEBE3D(v6) = HIEBE3D(v2) % v4;\n    LOFA4CD(v2) = v6 / v4;\n  }\nLABEL_9:\n  result = __PA4554__(v12, v2);\n  if ( v15 )\n    return -__SPA4554__(v12, v2);\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4099E8",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "7.69%",
        "Function Body": "\nint __usercall sub_4099E8@<eax>(int a1@<eax>, unsigned int a2@<edx>, char a3@<cl>)\n{\n  unsigned int v4; // ebx\n  int v5; // edx\n  int v6; // eax\n\n  if ( a2 > 0xFF9F59FD )\n    return *(_DWORD *)(a1 + 44);\n  if ( *(_DWORD *)(a1 + 32) == a2 )\n    return (a3 & 2) == 0 ? 10 : 8;\n  v4 = *(unsigned __int8 *)(*(_DWORD *)(a1 + 4) + a2);\n  v5 = 1;\n  if ( ((*(_DWORD *)(*(_DWORD *)(a1 + 52) + 4 * (v4 >> 5)) >> (v4 & 0x1F)) & 1) == 0 )\n  {\n    if ( v4 != 10 )\n      return 0;\n    v6 = 2;\n    if ( !*(_BYTE *)(a1 + 61) )\n      return 0;\n    return v6;\n  }\n  return v5;\n}\n\n"
    },
    {
        "Function": "sub_40A606",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "5.88%",
        "Function Body": "\nint __cdecl sub_40A606(void *a1, int a2, int a3)\n{\n  int v3; // eax\n\n  *(_BYTE *)(a3 + 28) = (16 * ((unsigned int)dword_4293C9 >> 25)) & 0x10 | *(_BYTE *)(a3 + 28) & 0xEF | 0x80;\n  v3 = sub_40C1A1(a3, a1, a2, dword_4293C9);\n  if ( v3 )\n    return libintl_gettext(&aSuccess[dword_42EEA3[v3]]);\n  else\n    return 0;\n}\n// 413714: using guessed type int libintl_gettext(const char *, ...);\n// 42EEA3: using guessed type int dword_42EEA3[17];\n// 4293C9: using guessed type int dword_4293C9;\n\n"
    },
    {
        "Function": "sub_4168D1",
        "Total XOR and shift operations": 4,
        "XOR operations": 0,
        "Shift operations": 4,
        "Operation percentage": "5.41%",
        "Function Body": "\nBOOL __usercall sub_4168D1@<eax>(int a1@<eax>, _BYTE *a2@<edx>, unsigned int a3@<ecx>)\n{\n  unsigned __int8 v5; // cl\n  unsigned int v6; // eax\n  unsigned int v8; // ebx\n  int v9; // ecx\n  int v10; // [esp+0h] [ebp-14h]\n  int v11; // [esp+4h] [ebp-10h]\n\n  v11 = *(_DWORD *)(a1 + 4);\n  v5 = *(_BYTE *)(v11 + a3);\n  v6 = (unsigned __int8)a2[4];\n  if ( v6 != 3 )\n  {\n    if ( v6 > 3 )\n    {\n      if ( v6 != 5 )\n        return 0;\n      if ( v5 == 10 )\n      {\n        if ( (*(_BYTE *)(*(_DWORD *)(a1 + 68) + 128) & 0x40) == 0 )\n          return 0;\n      }\n      else if ( !v5 && *(char *)(*(_DWORD *)(a1 + 68) + 128) < 0 )\n      {\n        return 0;\n      }\n    }\n    else if ( v6 != 1 || *a2 != v5 )\n    {\n      return 0;\n    }\nLABEL_8:\n    v10 = *((_DWORD *)a2 + 1);\n    if ( (v10 & 0x3FF00) == 0 )\n      return 1;\n    if ( a3 > 0xFF9F59FD )\n    {\n      v9 = *(_DWORD *)(a1 + 44);\n    }\n    else if ( *(_DWORD *)(a1 + 32) == a3 )\n    {\n      v9 = (*(_DWORD *)(a1 + 72) & 2) == 0 ? 10 : 8;\n    }\n    else\n    {\n      v8 = *(unsigned __int8 *)(v11 + a3);\n      LOD261(v9) = 1;\n      if ( ((*(_DWORD *)(*(_DWORD *)(a1 + 52) + 4 * (v8 >> 5)) >> (v8 & 0x1F)) & 1) == 0 )\n      {\n        if ( v8 == 10 )\n        {\n          LOD261(v9) = 2;\n          if ( !*(_BYTE *)(a1 + 61) )\n            LOD261(v9) = 0;\n        }\n        else\n        {\n          LOD261(v9) = 0;\n        }\n      }\n    }\n    return ((v10 & 0x400) == 0 || (v9 & 1) != 0)\n        && ((v10 & 0x800) == 0 || (v9 & 1) == 0)\n        && ((v10 & 0x2000) == 0 || (v9 & 2) != 0)\n        && ((v10 & 0x8000) == 0 || (v9 & 8) != 0);\n  }\n  if ( ((*(_DWORD *)(*(_DWORD *)a2 + 4 * (v5 >> 5)) >> (v5 & 0x1F)) & 1) != 0 )\n    goto LABEL_8;\n  return 0;\n}\n\n"
    },
    {
        "Function": "sub_4162EC",
        "Total XOR and shift operations": 2,
        "XOR operations": 0,
        "Shift operations": 2,
        "Operation percentage": "5.26%",
        "Function Body": "\nint __usercall sub_4162EC@<eax>(int a1@<eax>, unsigned int a2@<edx>)\n{\n  unsigned int v2; // ebx\n  unsigned int v3; // ecx\n  unsigned int v4; // edx\n  unsigned int v5; // ecx\n  unsigned int v7; // [esp+0h] [ebp-18h]\n\n  v2 = 0;\n  v7 = *(_DWORD *)(a1 + 92);\n  v3 = v7;\n  if ( !v7 )\n    return -1;\n  do\n  {\n    while ( 1 )\n    {\n      v4 = (v2 + v3) >> 1;\n      if ( *(_DWORD *)(*(_DWORD *)(a1 + 100) + 20 * v4 + 4) >= a2 )\n        break;\n      v2 = v4 + 1;\n      if ( v4 + 1 >= v3 )\n        goto LABEL_6;\n    }\n    v3 = (v2 + v3) >> 1;\n  }\n  while ( v2 < v4 );\nLABEL_6:\n  if ( v2 >= v7 )\n    return -1;\n  v5 = v2;\n  if ( *(_DWORD *)(*(_DWORD *)(a1 + 100) + 20 * v2 + 4) != a2 )\n    return -1;\n  return v5;\n}\n\n"
    },
    {
        "Function": "sub_40F7D4",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "5.00%",
        "Function Body": "\nint __cdecl sub_40F7D4(int *a1, int a2, int a3)\n{\n  int v3; // ebx\n  int v4; // ecx\n\n  v3 = *a1;\n  v4 = a1[2] - 1;\n  if ( (*(_BYTE *)(*a1 + 8 * v4 + 6) & 4) == 0 || a1[2] == 1 )\n    return -1;\n  while ( *(_DWORD *)(a1[4] + 4 * v4) != a2 || ((*(_DWORD *)(v3 + 8 * v4 + 4) >> 8) & 0x3FF) != a3 )\n  {\n    --v4;\n    if ( (*(_BYTE *)(v3 + 8 * v4 + 6) & 4) == 0 || v4 == 0 )\n      return -1;\n  }\n  return v4;\n}\n\n"
    },
    {
        "Function": "sub_418E39",
        "Total XOR and shift operations": 10,
        "XOR operations": 0,
        "Shift operations": 10,
        "Operation percentage": "3.53%",
        "Function Body": "\nint __userpurge sub_418E39@<eax>(_DWORD *a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4)\n{\n  int v4; // edx\n  int v5; // edi\n  int v6; // edx\n  unsigned int *v7; // ecx\n  unsigned int v8; // esi\n  unsigned int v9; // eax\n  unsigned int v10; // ecx\n  unsigned int v11; // edx\n  unsigned int v12; // ebx\n  unsigned int v13; // edx\n  int v14; // ecx\n  unsigned int v15; // eax\n  unsigned int v16; // eax\n  unsigned int v17; // ecx\n  unsigned int v18; // edx\n  unsigned int v19; // ebx\n  unsigned int v20; // edx\n  int v21; // ecx\n  unsigned int v22; // eax\n  int v23; // ebx\n  unsigned int v24; // ebx\n  unsigned int v25; // edi\n  unsigned int v26; // edx\n  int v27; // ecx\n  unsigned int v28; // eax\n  unsigned int v29; // esi\n  unsigned int v30; // ecx\n  unsigned int v31; // eax\n  unsigned int v32; // ecx\n  int v33; // edi\n  unsigned int v34; // edx\n  unsigned int v35; // edx\n  int v36; // ecx\n  unsigned int v38; // [esp+18h] [ebp-50h]\n  int v39; // [esp+1Ch] [ebp-4Ch]\n  unsigned int v40; // [esp+20h] [ebp-48h]\n  unsigned int v41; // [esp+24h] [ebp-44h]\n  int v42; // [esp+28h] [ebp-40h]\n  int v43; // [esp+2Ch] [ebp-3Ch]\n  unsigned int v44; // [esp+30h] [ebp-38h]\n  int v48[10]; // [esp+40h] [ebp-28h] BYREF\n\n  v4 = a1[7] + 12 * a2;\n  memset(v48, 0, 0xCu);\n  v43 = v4;\n  v44 = 0;\n  v40 = *(_DWORD *)(v4 + 4);\n  if ( v40 )\n  {\n    do\n    {\n      v5 = *(_DWORD *)(v43 + 8);\n      v42 = *(_DWORD *)(v5 + 4 * v44);\n      if ( v42 != a2 && (*(_BYTE *)(*a1 + 8 * v42 + 4) & 8) != 0 )\n      {\n        v41 = -1;\n        v6 = a1[5];\n        v7 = *(unsigned int **)(12 * v42 + v6 + 8);\n        v8 = *v7;\n        if ( *(_DWORD *)(12 * v42 + v6 + 4) > 1u )\n          v41 = v7[1];\n        v9 = v40 - 1;\n        if ( v40 - 1 > 0xFF9F59FC )\n          goto LABEL_20;\n        v10 = 0;\n        while ( 1 )\n        {\n          v11 = v9;\n          if ( v10 >= v9 )\n            break;\n          while ( 1 )\n          {\n            v9 = (v10 + v11) >> 1;\n            if ( *(_DWORD *)(v5 + 4 * v9) >= v8 )\n              break;\n            v10 = v9 + 1;\n            if ( v9 + 1 >= v11 )\n              goto LABEL_11;\n          }\n        }\nLABEL_11:\n        if ( *(_DWORD *)(v5 + 4 * v10) != v8 || v10 == -1 )\n        {\nLABEL_20:\n          if ( (unsigned int)(*(_DWORD *)(a3 + 4) - 1) <= 0xFF9F59FC )\n          {\n            v12 = 0;\n            v13 = *(_DWORD *)(a3 + 4) - 1;\n            if ( *(_DWORD *)(a3 + 4) == 1 )\n            {\n              v14 = *(_DWORD *)(a3 + 8);\n            }\n            else\n            {\n              v14 = *(_DWORD *)(a3 + 8);\n              do\n              {\n                while ( 1 )\n                {\n                  v15 = (v12 + v13) >> 1;\n                  if ( *(_DWORD *)(v14 + 4 * v15) >= v8 )\n                    break;\n                  v12 = v15 + 1;\n                  if ( v15 + 1 >= v13 )\n                    goto LABEL_19;\n                }\n                v13 = (v12 + v13) >> 1;\n              }\n              while ( v12 < v15 );\n            }\nLABEL_19:\n            if ( *(_DWORD *)(v14 + 4 * v12) == v8 && v12 != -1 )\n              goto LABEL_38;\n          }\n        }\n        if ( v41 - 1 <= 0xFF9F59FC )\n        {\n          v16 = v40 - 1;\n          if ( v40 - 1 > 0xFF9F59FC )\n            goto LABEL_28;\n          v17 = 0;\n          while ( 1 )\n          {\n            v18 = v16;\n            if ( v17 >= v16 )\n              break;\n            while ( 1 )\n            {\n              v16 = (v17 + v18) >> 1;\n              if ( *(_DWORD *)(v5 + 4 * v16) >= v41 )\n                break;\n              v17 = v16 + 1;\n              if ( v16 + 1 >= v18 )\n                goto LABEL_27;\n            }\n          }\nLABEL_27:\n          if ( *(_DWORD *)(v5 + 4 * v17) != v41 || v17 == -1 )\n          {\nLABEL_28:\n            if ( (unsigned int)(*(_DWORD *)(a3 + 4) - 1) <= 0xFF9F59FC )\n            {\n              v19 = 0;\n              v20 = *(_DWORD *)(a3 + 4) - 1;\n              if ( *(_DWORD *)(a3 + 4) == 1 )\n              {\n                v21 = *(_DWORD *)(a3 + 8);\n              }\n              else\n              {\n                v21 = *(_DWORD *)(a3 + 8);\n                do\n                {\n                  v22 = (v19 + v20) >> 1;\n                  if ( *(_DWORD *)(v21 + 4 * v22) < v41 )\n                    v19 = v22 + 1;\n                  else\n                    v20 = (v19 + v20) >> 1;\n                }\n                while ( v19 < v20 );\n              }\n              if ( *(_DWORD *)(v21 + 4 * v19) == v41 && v19 != -1 )\n              {\nLABEL_38:\n                v23 = sub_404ED0(v48, a4, a1[7] + 12 * v42);\n                if ( v23 )\n                {\n                  free((void *)v48[2]);\n                  return v23;\n                }\n                v40 = *(_DWORD *)(v43 + 4);\n              }\n            }\n          }\n        }\n      }\n      ++v44;\n    }\n    while ( v40 > v44 );\n    v38 = 0;\n    if ( v40 )\n    {\n      v39 = *(_DWORD *)(v43 + 8);\n      do\n      {\n        v24 = *(_DWORD *)(v39 + 4 * v38);\n        if ( (unsigned int)(v48[1] - 1) > 0xFF9F59FC )\n          goto LABEL_51;\n        v25 = 0;\n        v26 = v48[1] - 1;\n        if ( v48[1] == 1 )\n        {\n          v27 = v48[2];\n        }\n        else\n        {\n          v27 = v48[2];\n          do\n          {\n            while ( 1 )\n            {\n              v28 = (v25 + v26) >> 1;\n              if ( *(_DWORD *)(v48[2] + 4 * v28) >= v24 )\n                break;\n              v25 = v28 + 1;\n              if ( v28 + 1 >= v26 )\n                goto LABEL_49;\n            }\n            v26 = (v25 + v26) >> 1;\n          }\n          while ( v25 < v28 );\n        }\nLABEL_49:\n        if ( *(_DWORD *)(v27 + 4 * v25) != v24 || v25 == -1 )\n        {\nLABEL_51:\n          v29 = *(_DWORD *)(a3 + 4);\n          v30 = 0;\n          if ( v29 - 1 <= 0xFF9F59FC )\n          {\n            v31 = 0;\n            v32 = v29 - 1;\n            if ( v29 == 1 )\n            {\n              v33 = *(_DWORD *)(a3 + 8);\n            }\n            else\n            {\n              v33 = *(_DWORD *)(a3 + 8);\n              do\n              {\n                while ( 1 )\n                {\n                  v34 = (v31 + v32) >> 1;\n                  if ( *(_DWORD *)(v33 + 4 * v34) >= v24 )\n                    break;\n                  v31 = v34 + 1;\n                  if ( v34 + 1 >= v32 )\n                    goto LABEL_57;\n                }\n                v32 = (v31 + v32) >> 1;\n              }\n              while ( v31 < v34 );\n            }\nLABEL_57:\n            v30 = 0;\n            if ( *(_DWORD *)(v33 + 4 * v31) == v24 )\n              v30 = v31 + 1;\n          }\n          v35 = v30 - 1;\n          if ( v29 > v30 - 1 )\n          {\n            *(_DWORD *)(a3 + 4) = v29 - 1;\n            if ( v29 - 1 <= v35 )\n            {\n              v40 = *(_DWORD *)(v43 + 4);\n            }\n            else\n            {\n              v36 = *(_DWORD *)(a3 + 8);\n              do\n              {\n                *(_DWORD *)(v36 + 4 * v35) = *(_DWORD *)(v36 + 4 * v35 + 4);\n                ++v35;\n              }\n              while ( *(_DWORD *)(a3 + 4) > v35 );\n              v40 = *(_DWORD *)(v43 + 4);\n            }\n          }\n        }\n        ++v38;\n      }\n      while ( v40 > v38 );\n    }\n  }\n  free((void *)v48[2]);\n  return 0;\n}\n\n"
    },
    {
        "Function": "sub_412DFC",
        "Total XOR and shift operations": 8,
        "XOR operations": 0,
        "Shift operations": 8,
        "Operation percentage": "2.37%",
        "Function Body": "\nint __cdecl sub_412DFC(char *a1, char *a2)\n{\n  int v2; // ecx\n  char *v3; // esi\n  char *v4; // edi\n  int v5; // ecx\n  unsigned __int8 v6; // dl\n  unsigned __int8 v7; // al\n  char *v9; // esi\n  wchar_t v10; // cx\n  wchar_t v11; // cx\n  int v12; // edx\n  int v13; // eax\n  int v14; // edx\n  bool v15; // zf\n  size_t v17; // eax\n  unsigned int v18; // eax\n  size_t v19; // eax\n  unsigned int v20; // eax\n  wchar_t v21; // di\n  wchar_t v22; // cx\n  size_t v23; // eax\n  unsigned int v24; // eax\n  size_t v25; // eax\n  unsigned int v26; // eax\n  char v27; // [esp+30h] [ebp-78h]\n  int v28; // [esp+34h] [ebp-74h] BYREF\n  char v29; // [esp+38h] [ebp-70h]\n  char *v30; // [esp+3Ch] [ebp-6Ch]\n  unsigned int v31; // [esp+40h] [ebp-68h]\n  char v32; // [esp+44h] [ebp-64h]\n  wchar_t v33[13]; // [esp+46h] [ebp-62h] BYREF\n  char v34; // [esp+60h] [ebp-48h]\n  int v35; // [esp+64h] [ebp-44h] BYREF\n  char v36; // [esp+68h] [ebp-40h]\n  char *Str; // [esp+6Ch] [ebp-3Ch]\n  unsigned int v38; // [esp+70h] [ebp-38h]\n  char v39; // [esp+74h] [ebp-34h]\n  wchar_t v40[25]; // [esp+76h] [ebp-32h] BYREF\n\n  v2 = 0;\n  if ( a1 == a2 )\n    return v2;\n  if ( _mb_cur_max <= 1 )\n  {\n    v3 = a2;\n    v4 = a1;\n    do\n    {\n      v5 = (unsigned __int8)*v4;\n      v6 = *v4;\n      if ( (ctype_[v5 + 1] & 1) != 0 )\n        v6 = v5 + 32;\n      v7 = *v3;\n      if ( (ctype_[(unsigned __int8)*v3 + 1] & 1) != 0 )\n        v7 = *v3 + 32;\n      if ( !v6 )\n        break;\n      ++v4;\n      ++v3;\n    }\n    while ( v6 == v7 );\n    return v6 - v7;\n  }\n  v30 = a2;\n  v9 = a1;\n  Str = a1;\n  v34 = 0;\n  v35 = 0;\n  v36 = 0;\n  v27 = 0;\n  v28 = 0;\n  v29 = 0;\n  while ( 1 )\n  {\n    if ( !v34 )\n    {\n      if ( (((unsigned int)dword_422EE5[(unsigned __int8)*v9 >> 5] >> (*v9 & 0x1F)) & 1) != 0 )\n      {\n        v38 = 1;\n        v10 = *v9;\n        v39 = 1;\n        v40[0] = v10;\n        goto LABEL_16;\n      }\n      if ( !sub_4169B9(&v35) )\n        _assert(aUsrSrcDiffutil_2, 142, aMbsinitIterSta);\n      v34 = 1;\n    }\n    v17 = sub_417632(Str, _mb_cur_max);\n    v18 = sub_41D3F2(v40, Str, v17, (char *)&v35);\n    if ( v18 == -1 )\n    {\n      v38 = 1;\n      v39 = 0;\n    }\n    else if ( v18 == -2 )\n    {\n      v38 = -2;\n      v38 = strlen(Str);\n      v39 = 0;\n    }\n    else\n    {\n      if ( v18 )\n      {\n        v38 = v18;\n      }\n      else\n      {\n        v38 = 1;\n        if ( *Str )\n          _assert(aUsrSrcDiffutil_2, 170, aIterCurPtr0);\n        if ( v40[0] )\n          _assert(aUsrSrcDiffutil_2, 171, aIterCurWc0);\n      }\n      v39 = 1;\n      if ( sub_4169B9(&v35) )\n        v34 = 0;\n    }\nLABEL_16:\n    v36 = 1;\n    if ( v39 )\n    {\n      if ( !v40[0] )\n        break;\n    }\n    if ( !v29 )\n    {\n      if ( !v27 )\n      {\n        if ( (((unsigned int)dword_422EE5[(unsigned __int8)*v30 >> 5] >> (*v30 & 0x1F)) & 1) != 0 )\n        {\n          v31 = 1;\n          v11 = *v30;\n          v32 = 1;\n          v33[0] = v11;\nLABEL_22:\n          v29 = 1;\n          goto LABEL_23;\n        }\n        if ( !sub_4169B9(&v28) )\n          _assert(aUsrSrcDiffutil_2, 142, aMbsinitIterSta);\n        v27 = 1;\n      }\n      v19 = sub_417632(v30, _mb_cur_max);\n      v20 = sub_41D3F2(v33, v30, v19, (char *)&v28);\n      if ( v20 == -1 )\n      {\n        v31 = 1;\n        v32 = 0;\n      }\n      else if ( v20 == -2 )\n      {\n        v31 = -2;\n        v31 = strlen(v30);\n        v32 = 0;\n      }\n      else\n      {\n        if ( v20 )\n        {\n          v31 = v20;\n        }\n        else\n        {\n          v31 = 1;\n          if ( *v30 )\n            _assert(aUsrSrcDiffutil_2, 170, aIterCurPtr0);\n          if ( v33[0] )\n            _assert(aUsrSrcDiffutil_2, 171, aIterCurWc0);\n        }\n        v32 = 1;\n        if ( sub_4169B9(&v28) )\n          v27 = 0;\n      }\n      goto LABEL_22;\n    }\nLABEL_23:\n    if ( v32 && !v33[0] )\n      break;\n    if ( !v39 )\n    {\n      if ( v32 )\n        return 1;\n      if ( v38 == v31 )\n      {\n        v15 = memcmp(Str, v30, v31) == 0;\n        v14 = !v15;\n        if ( !v15 )\n          return v14;\n        goto LABEL_32;\n      }\n      if ( v38 < v31 )\n        return 2 * (memcmp(Str, v30, v38) != 0) - 1;\n      memcmp(Str, v30, v31);\n      return 1;\n    }\n    if ( !v32 )\n      return -1;\n    v12 = v40[0];\n    if ( (ctype_[v40[0] + 1] & 1) != 0 )\n      v12 = v40[0] + 32;\n    v13 = v33[0];\n    if ( (ctype_[v33[0] + 1] & 1) != 0 )\n      v13 = v33[0] + 32;\n    v14 = v12 - v13;\n    if ( v14 )\n      return v14;\nLABEL_32:\n    v36 = 0;\n    v30 += v31;\n    v29 = 0;\n    v9 = &Str[v38];\n    Str += v38;\n  }\n  if ( v36 )\n    goto LABEL_69;\n  if ( !v34 )\n  {\n    if ( (((unsigned int)dword_422EE5[(unsigned __int8)*Str >> 5] >> (*Str & 0x1F)) & 1) != 0 )\n    {\n      v38 = 1;\n      v21 = *Str;\n      v39 = 1;\n      v40[0] = v21;\n      goto LABEL_68;\n    }\n    if ( !sub_4169B9(&v35) )\n      _assert(aUsrSrcDiffutil_2, 142, aMbsinitIterSta);\n    v34 = 1;\n  }\n  v23 = sub_417632(Str, _mb_cur_max);\n  v24 = sub_41D3F2(v40, Str, v23, (char *)&v35);\n  if ( v24 == -1 )\n  {\n    v38 = 1;\n    v39 = 0;\nLABEL_102:\n    v36 = 1;\n    goto LABEL_69;\n  }\n  if ( v24 == -2 )\n  {\n    v38 = -2;\n    v38 = strlen(Str);\n    v39 = 0;\n    goto LABEL_102;\n  }\n  if ( v24 )\n  {\n    v38 = v24;\n  }\n  else\n  {\n    v38 = 1;\n    if ( *Str )\n      _assert(aUsrSrcDiffutil_2, 170, aIterCurPtr0);\n    if ( v40[0] )\n      _assert(aUsrSrcDiffutil_2, 171, aIterCurWc0);\n  }\n  v39 = 1;\n  if ( sub_4169B9(&v35) )\n  {\n    v34 = 0;\n    v36 = 1;\n  }\n  else\n  {\nLABEL_68:\n    v36 = 1;\n  }\nLABEL_69:\n  if ( !v39 || v40[0] )\n    return 1;\n  if ( !v29 )\n  {\n    if ( !v27 )\n    {\n      if ( (((unsigned int)dword_422EE5[(unsigned __int8)*v30 >> 5] >> (*v30 & 0x1F)) & 1) != 0 )\n      {\n        v31 = 1;\n        v22 = *v30;\n        v32 = 1;\n        v33[0] = v22;\n        goto LABEL_75;\n      }\n      if ( !sub_4169B9(&v28) )\n        _assert(aUsrSrcDiffutil_2, 142, aMbsinitIterSta);\n    }\n    v25 = sub_417632(v30, _mb_cur_max);\n    v26 = sub_41D3F2(v33, v30, v25, (char *)&v28);\n    if ( v26 == -1 )\n    {\n      v31 = 1;\n      v32 = 0;\n    }\n    else if ( v26 == -2 )\n    {\n      v31 = -2;\n      v31 = strlen(v30);\n      v32 = 0;\n    }\n    else\n    {\n      if ( v26 )\n      {\n        v31 = v26;\n      }\n      else\n      {\n        v31 = 1;\n        if ( *v30 )\n          _assert(aUsrSrcDiffutil_2, 170, aIterCurPtr0);\n        if ( v33[0] )\n          _assert(aUsrSrcDiffutil_2, 171, aIterCurWc0);\n      }\n      v32 = 1;\n      sub_4169B9(&v28);\n    }\nLABEL_75:\n    v29 = 1;\n  }\n  if ( !v32 )\n    return -1;\n  v2 = 0;\n  if ( v33[0] )\n    return -1;\n  return v2;\n}\n// 41BF93: conditional instruction was optimized away because %var_40.1==0\n// 42F8D1: using guessed type void __cdecl __noreturn _assert(_DWORD, _DWORD, _DWORD);\n// 422EE5: using guessed type int dword_422EE5[8];\n// 42A39A: using guessed type _BYTE ctype_[];\n\n"
    },
    {
        "Function": "sub_41F7EB",
        "Total XOR and shift operations": 8,
        "XOR operations": 0,
        "Shift operations": 8,
        "Operation percentage": "2.06%",
        "Function Body": "\nint __userpurge sub_41F7EB@<eax>(\n        _DWORD *a1@<eax>,\n        int a2@<edx>,\n        _DWORD *a3@<ecx>,\n        int *a4,\n        unsigned int a5,\n        int a6,\n        int *a7)\n{\n  _DWORD *v7; // eax\n  int v8; // edx\n  int v9; // eax\n  int v10; // esi\n  int v11; // edx\n  bool v12; // al\n  unsigned int v13; // ebx\n  int v14; // ebx\n  unsigned int v15; // ecx\n  unsigned int v16; // esi\n  unsigned int v17; // eax\n  int v18; // edi\n  unsigned int v19; // edx\n  unsigned int v20; // esi\n  unsigned int v21; // edx\n  int v22; // eax\n  int v23; // eax\n  unsigned int v24; // ebx\n  unsigned int v25; // ecx\n  int v26; // eax\n  unsigned int v27; // edx\n  _DWORD *v29; // eax\n  int v30; // eax\n  int v31; // esi\n  int v32; // eax\n  int v33; // edx\n  bool v34; // al\n  int v35; // esi\n  int v36; // ecx\n  unsigned int v37; // eax\n  unsigned int v38; // esi\n  unsigned int v39; // edx\n  int v40; // ecx\n  unsigned int v41; // eax\n  _DWORD *v42; // eax\n  int v43; // eax\n  unsigned int v44; // esi\n  unsigned int v45; // edx\n  int v46; // ebx\n  unsigned int v47; // eax\n  unsigned int *v48; // ecx\n  bool j; // zf\n  bool i; // cc\n  unsigned int *v51; // ecx\n  bool k; // zf\n  unsigned int v53; // eax\n  unsigned int *v54; // edx\n  unsigned int *v55; // edx\n  int v56; // [esp+14h] [ebp-34h]\n  unsigned int v57; // [esp+18h] [ebp-30h]\n  int v58; // [esp+1Ch] [ebp-2Ch]\n  unsigned int v59; // [esp+24h] [ebp-24h]\n  int v60; // [esp+28h] [ebp-20h]\n  _DWORD *v61; // [esp+2Ch] [ebp-1Ch]\n\n  v7 = (_DWORD *)a1[17];\n  v8 = *v7;\n  v61 = v7;\n  v9 = *(unsigned __int8 *)(*v7 + 8 * a5 + 4);\n  if ( (v9 & 8) != 0 )\n  {\n    v60 = *(_DWORD *)(a1[21] + 4 * *a4) + 4;\n    v10 = v61[5] + 12 * a5;\n    if ( !*(_DWORD *)a6 )\n    {\n      *(_DWORD *)a6 = 1;\n      *(_DWORD *)(a6 + 4) = 1;\n      v29 = malloc(4u);\n      *(_DWORD *)(a6 + 8) = v29;\n      if ( v29 )\n      {\n        *v29 = a5;\n        v30 = 0;\n      }\n      else\n      {\n        *(_DWORD *)(a6 + 4) = 0;\n        v30 = 12;\n        *(_DWORD *)a6 = 0;\n      }\n      v12 = v30 == 0;\n      goto LABEL_6;\n    }\n    v11 = *(_DWORD *)(a6 + 4);\n    if ( v11 )\n    {\n      if ( *(_DWORD *)a6 == v11 )\n      {\n        *(_DWORD *)a6 = 2 * v11;\n        v54 = (unsigned int *)realloc(*(void **)(a6 + 8), 8 * v11);\n        v12 = 0;\n        if ( !v54 )\n          goto LABEL_6;\n        v48 = v54;\n        *(_DWORD *)(a6 + 8) = v54;\n        v11 = *(_DWORD *)(a6 + 4);\n      }\n      else\n      {\n        v48 = *(unsigned int **)(a6 + 8);\n      }\n      if ( *v48 <= a5 )\n      {\n        for ( i = v48[v11 - 1] <= a5; !i; i = v48[v11 - 1] <= a5 )\n        {\n          v48[v11] = v48[v11 - 1];\n          --v11;\n        }\n      }\n      else\n      {\n        for ( j = v11 == 0; !j; j = v11 == 0 )\n        {\n          v48[v11] = v48[v11 - 1];\n          --v11;\n        }\n      }\n      v48[v11] = a5;\n      ++*(_DWORD *)(a6 + 4);\n    }\n    else\n    {\n      **(_DWORD **)(a6 + 8) = a5;\n      ++*(_DWORD *)(a6 + 4);\n    }\n    v12 = 1;\nLABEL_6:\n    v13 = -2;\n    if ( !v12 )\n      return v13;\n    v59 = -1;\n    v14 = 0;\n    v57 = *(_DWORD *)(v10 + 4);\n    if ( !v57 )\n      return v59;\n    v56 = *(_DWORD *)(v10 + 8);\n    while ( 1 )\n    {\n      v15 = *(_DWORD *)(v56 + 4 * v14);\n      if ( (unsigned int)(*(_DWORD *)(v60 + 4) - 1) <= 0xFF9F59FC )\n      {\n        v16 = *(_DWORD *)(v60 + 4) - 1;\n        v17 = 0;\n        if ( *(_DWORD *)(v60 + 4) == 1 )\n        {\n          v18 = *(_DWORD *)(v60 + 8);\n        }\n        else\n        {\n          v18 = *(_DWORD *)(v60 + 8);\n          do\n          {\n            v19 = (v17 + v16) >> 1;\n            if ( *(_DWORD *)(v18 + 4 * v19) < v15 )\n              v17 = v19 + 1;\n            else\n              v16 = (v17 + v16) >> 1;\n          }\n          while ( v17 < v16 );\n        }\n        if ( *(_DWORD *)(v18 + 4 * v17) == v15 && v17 != -1 )\n        {\n          if ( v59 != -1 )\n          {\n            if ( (unsigned int)(*(_DWORD *)(a6 + 4) - 1) <= 0xFF9F59FC )\n            {\n              v44 = 0;\n              v45 = *(_DWORD *)(a6 + 4) - 1;\n              if ( *(_DWORD *)(a6 + 4) == 1 )\n              {\n                v46 = *(_DWORD *)(a6 + 8);\n              }\n              else\n              {\n                v46 = *(_DWORD *)(a6 + 8);\n                do\n                {\n                  v47 = (v44 + v45) >> 1;\n                  if ( *(_DWORD *)(v46 + 4 * v47) < v59 )\n                    v44 = v47 + 1;\n                  else\n                    v45 = (v44 + v45) >> 1;\n                }\n                while ( v44 < v45 );\n              }\n              if ( *(_DWORD *)(v46 + 4 * v44) == v59 )\n              {\n                v13 = v15;\n                if ( v44 != -1 )\n                  return v13;\n              }\n            }\n            if ( a7 )\n            {\n              v13 = -2;\n              if ( sub_416927(a7, *a4, v15, a2, a3, a6) )\n                return v13;\n            }\n            return v59;\n          }\n          v59 = *(_DWORD *)(v56 + 4 * v14);\n        }\n      }\n      if ( v57 <= ++v14 )\n        return v59;\n    }\n  }\n  v58 = 0;\n  if ( v9 != 4 )\n    goto LABEL_17;\n  v31 = *(_DWORD *)(v8 + 8 * a5) + 1;\n  v32 = a3[2 * v31];\n  v58 = a3[2 * v31 + 1] - v32;\n  if ( !a7 )\n    goto LABEL_64;\n  if ( v32 != -1 && a3[2 * v31 + 1] != -1 )\n  {\n    if ( !v58 )\n      goto LABEL_49;\n    v13 = -1;\n    if ( memcmp((const void *)(v32 + a1[1]), (const void *)(*a4 + a1[1]), a3[2 * v31 + 1] - v32) )\n      return v13;\nLABEL_64:\n    if ( v58 )\n      goto LABEL_18;\nLABEL_49:\n    if ( !*(_DWORD *)a6 )\n    {\n      *(_DWORD *)a6 = 1;\n      *(_DWORD *)(a6 + 4) = 1;\n      v42 = malloc(4u);\n      *(_DWORD *)(a6 + 8) = v42;\n      if ( v42 )\n      {\n        *v42 = a5;\n        v43 = 0;\n      }\n      else\n      {\n        *(_DWORD *)(a6 + 4) = 0;\n        v43 = 12;\n        *(_DWORD *)a6 = 0;\n      }\n      v34 = v43 == 0;\n      goto LABEL_53;\n    }\n    v33 = *(_DWORD *)(a6 + 4);\n    if ( v33 )\n    {\n      if ( *(_DWORD *)a6 == v33 )\n      {\n        *(_DWORD *)a6 = 2 * v33;\n        v55 = (unsigned int *)realloc(*(void **)(a6 + 8), 8 * v33);\n        v34 = 0;\n        if ( !v55 )\n          goto LABEL_53;\n        v51 = v55;\n        *(_DWORD *)(a6 + 8) = v55;\n        v33 = *(_DWORD *)(a6 + 4);\n      }\n      else\n      {\n        v51 = *(unsigned int **)(a6 + 8);\n      }\n      if ( *v51 <= a5 )\n      {\n        while ( 1 )\n        {\n          v53 = v51[v33 - 1];\n          if ( v53 <= a5 )\n            break;\n          v51[v33--] = v53;\n        }\n      }\n      else\n      {\n        for ( k = v33 == 0; !k; k = v33 == 0 )\n        {\n          v51[v33] = v51[v33 - 1];\n          --v33;\n        }\n      }\n      v51[v33] = a5;\n      ++*(_DWORD *)(a6 + 4);\n    }\n    else\n    {\n      **(_DWORD **)(a6 + 8) = a5;\n      ++*(_DWORD *)(a6 + 4);\n    }\n    v34 = 1;\nLABEL_53:\n    v13 = -2;\n    if ( !v34 )\n      return v13;\n    v35 = a1[21];\n    v13 = **(_DWORD **)(v61[5] + 12 * a5 + 8);\n    v36 = *(_DWORD *)(v35 + 4 * *a4) + 4;\n    v37 = *(_DWORD *)(*(_DWORD *)(v35 + 4 * *a4) + 8) - 1;\n    if ( v37 <= 0xFF9F59FC )\n    {\n      v38 = 0;\n      v39 = v37;\n      if ( v37 )\n      {\n        v40 = *(_DWORD *)(v36 + 8);\n        do\n        {\n          v41 = (v38 + v39) >> 1;\n          if ( *(_DWORD *)(v40 + 4 * v41) < v13 )\n            v38 = v41 + 1;\n          else\n            v39 = (v38 + v39) >> 1;\n        }\n        while ( v38 < v39 );\n      }\n      else\n      {\n        v40 = *(_DWORD *)(v36 + 8);\n      }\n      if ( *(_DWORD *)(v40 + 4 * v38) == v13 && v38 != -1 )\n        return v13;\n    }\nLABEL_17:\n    v13 = -1;\n    if ( !sub_4168D1((int)a1, (_BYTE *)(*v61 + 8 * a5), *a4) )\n      return v13;\nLABEL_18:\n    v20 = *(_DWORD *)(v61[3] + 4 * a5);\n    if ( v58 )\n      v21 = *a4 + v58;\n    else\n      v21 = *a4 + 1;\n    *a4 = v21;\n    if ( !a7 )\n      goto LABEL_62;\n    if ( v21 <= a1[19] )\n    {\n      v22 = *(_DWORD *)(a1[21] + 4 * v21);\n      if ( v22 )\n      {\n        v23 = v22 + 4;\n        if ( (unsigned int)(*(_DWORD *)(v23 + 4) - 1) <= 0xFF9F59FC )\n        {\n          v24 = 0;\n          v25 = *(_DWORD *)(v23 + 4) - 1;\n          if ( *(_DWORD *)(v23 + 4) == 1 )\n          {\n            v26 = *(_DWORD *)(v23 + 8);\n          }\n          else\n          {\n            v26 = *(_DWORD *)(v23 + 8);\n            do\n            {\n              v27 = (v24 + v25) >> 1;\n              if ( *(_DWORD *)(v26 + 4 * v27) < v20 )\n                v24 = v27 + 1;\n              else\n                v25 = (v24 + v25) >> 1;\n            }\n            while ( v24 < v25 );\n          }\n          if ( *(_DWORD *)(v26 + 4 * v24) == v20 && v24 != -1 )\n          {\nLABEL_62:\n            v13 = v20;\n            *(_DWORD *)(a6 + 4) = 0;\n            return v13;\n          }\n        }\n      }\n    }\n  }\n  return -1;\n}\n// 410E21: conditional instruction was optimized away because %var_2C.4==0\n\n"
    },
    {
        "Function": "sub_41087B",
        "Total XOR and shift operations": 8,
        "XOR operations": 0,
        "Shift operations": 8,
        "Operation percentage": "1.72%",
        "Function Body": "\nint __userpurge sub_41087B@<eax>(\n        int a1@<eax>,\n        int a2@<edx>,\n        int a3@<ecx>,\n        unsigned int a4,\n        unsigned int a5,\n        unsigned int a6,\n        int a7)\n{\n  int v8; // edx\n  unsigned int v9; // ebx\n  int v10; // esi\n  unsigned int v11; // edx\n  int v12; // eax\n  unsigned int v13; // ebx\n  int v14; // esi\n  int v15; // eax\n  int result; // eax\n  int v17; // edx\n  int v18; // edx\n  char *v19; // eax\n  int v20; // eax\n  int v21; // ebx\n  unsigned int v22; // edx\n  unsigned int v23; // esi\n  unsigned int v24; // eax\n  int v25; // edi\n  int v26; // ebx\n  int v27; // ecx\n  unsigned int *v28; // eax\n  int v29; // esi\n  int v30; // eax\n  char v31; // al\n  _DWORD *v32; // eax\n  int v33; // ebx\n  unsigned int v34; // eax\n  int v35; // esi\n  unsigned int *v36; // eax\n  int v37; // esi\n  int v38; // ecx\n  int v39; // eax\n  char v40; // al\n  int v41; // ecx\n  int v42; // eax\n  unsigned int v43; // ebx\n  unsigned int v44; // edx\n  int v45; // ecx\n  unsigned int v46; // eax\n  char *v47; // eax\n  int v48; // eax\n  char *v49; // edx\n  int *v50; // esi\n  unsigned int v51; // ecx\n  int v52; // edi\n  unsigned int v53; // esi\n  char *v54; // edx\n  unsigned int v55; // ecx\n  char *v56; // edx\n  unsigned int v57; // [esp+18h] [ebp-B0h]\n  unsigned int v58; // [esp+1Ch] [ebp-ACh]\n  int v59; // [esp+2Ch] [ebp-9Ch]\n  int v60; // [esp+2Ch] [ebp-9Ch]\n  int v61; // [esp+50h] [ebp-78h]\n  int v62; // [esp+58h] [ebp-70h]\n  unsigned int v63; // [esp+60h] [ebp-68h]\n  unsigned int v64; // [esp+68h] [ebp-60h]\n  int v65; // [esp+6Ch] [ebp-5Ch]\n  int v66; // [esp+70h] [ebp-58h]\n  int v67; // [esp+74h] [ebp-54h]\n  char *v68; // [esp+78h] [ebp-50h]\n  unsigned int v69; // [esp+7Ch] [ebp-4Ch]\n  unsigned int v70; // [esp+80h] [ebp-48h]\n  int v71; // [esp+84h] [ebp-44h]\n  int v72; // [esp+88h] [ebp-40h]\n  _DWORD *v73; // [esp+8Ch] [ebp-3Ch]\n  int v77; // [esp+9Ch] [ebp-2Ch]\n  int v78[10]; // [esp+A0h] [ebp-28h] BYREF\n\n  v73 = *(_DWORD **)(a1 + 68);\n  v68 = 0;\n  v77 = 0;\n  v72 = *(_DWORD *)(*v73 + 8 * a3);\n  v8 = *(_DWORD *)(a1 + 104);\n  v9 = *(_DWORD *)(a2 + 4);\n  if ( v9 < v8 + a6 + 1 )\n  {\n    v53 = v9 + a6 + v8 + 1;\n    if ( v53 < v9 || v53 > 0x3FF9F59F )\n      return 12;\n    v54 = (char *)realloc(*(void **)(a2 + 8), 4 * v53);\n    result = 12;\n    if ( !v54 )\n      return result;\n    *(_DWORD *)(a2 + 4) = v53;\n    v55 = 4 * (v53 - v9);\n    *(_DWORD *)(a2 + 8) = v54;\n    v56 = &v54[4 * v9];\n    if ( v55 > 7 && ((unsigned __int8)v56 & 4) != 0 )\n    {\n      *(_DWORD *)v56 = 0;\n      v55 -= 4;\n      v56 += 4;\n    }\n    memset(v56, 0, 4 * (v55 >> 2));\n  }\n  v70 = *(_DWORD *)a2;\n  if ( !*(_DWORD *)a2 )\n    v70 = a4;\n  v67 = *(_DWORD *)(a1 + 84);\n  v10 = *(_DWORD *)(a2 + 8);\n  v11 = v70 - 1;\n  v71 = *(_DWORD *)(a1 + 24);\n  v12 = *(_DWORD *)(a1 + 72);\n  *(_DWORD *)(a1 + 84) = v10;\n  *(_DWORD *)(a1 + 24) = v70;\n  if ( v70 - 1 > 0xFF9F59FD )\n  {\n    v62 = *(_DWORD *)(a1 + 44);\n  }\n  else if ( *(_DWORD *)(a1 + 32) == v11 )\n  {\n    v62 = (v12 & 2) == 0 ? 10 : 8;\n  }\n  else\n  {\n    v13 = *(unsigned __int8 *)(*(_DWORD *)(a1 + 4) + v11);\n    v62 = 1;\n    if ( ((*(_DWORD *)(*(_DWORD *)(a1 + 52) + 4 * (v13 >> 5)) >> (v13 & 0x1F)) & 1) == 0 )\n    {\n      if ( v13 != 10 || (v62 = 2, !*(_BYTE *)(a1 + 61)) )\n      {\n        v62 = 0;\n        if ( v70 == a4 )\n          goto LABEL_54;\nLABEL_8:\n        v14 = *(_DWORD *)(v10 + 4 * v70);\n        v68 = (char *)v14;\n        if ( !v14 || (*(_BYTE *)(v14 + 52) & 0x40) == 0 )\n        {\n          memset(v78, 0, 0xCu);\n          goto LABEL_14;\n        }\n        v15 = *(_DWORD *)(v14 + 8);\n        v78[1] = v15;\n        if ( *(_DWORD *)(v14 + 8) )\n        {\n          v78[0] = v15;\n          v78[2] = (int)malloc(4 * v15);\n          if ( !v78[2] )\n          {\n            v78[1] = 0;\n            result = 12;\n            v78[0] = 0;\nLABEL_13:\n            v77 = result;\n            if ( result )\n              return result;\n            goto LABEL_14;\n          }\n          v48 = *(_DWORD *)(v14 + 8);\n          v49 = (char *)v78[2];\n          v50 = *(int **)(v14 + 12);\n          v51 = 4 * v48;\n          if ( (unsigned int)(4 * v48) > 7 && (v78[2] & 4) != 0 )\n          {\n            v52 = *v50;\n            v51 -= 4;\n            ++v50;\n            *(_DWORD *)v78[2] = v52;\n            v49 += 4;\n          }\n          qmemcpy(v49, v50, 4 * (v51 >> 2));\n        }\n        else\n        {\n          memset(v78, 0, 0xCu);\n        }\n        result = 0;\n        goto LABEL_13;\n      }\n    }\n  }\n  if ( v70 != a4 )\n    goto LABEL_8;\nLABEL_54:\n  v78[0] = 1;\n  v78[1] = 1;\n  v32 = malloc(4u);\n  v78[2] = (int)v32;\n  if ( v32 )\n  {\n    *v32 = a3;\n    result = 0;\n  }\n  else\n  {\n    v78[1] = 0;\n    result = 12;\n    v78[0] = 0;\n  }\n  if ( result )\n    return result;\n  v77 = sub_411914(v73, (int)v78, v72, a7);\n  if ( v77 )\n  {\nLABEL_58:\n    free((void *)v78[2]);\n    return v77;\n  }\nLABEL_14:\n  if ( v70 == a4 || v68 && (v68[52] & 0x40) != 0 )\n  {\n    v17 = v78[1];\n    if ( v78[1] )\n    {\n      v77 = sub_41B09B((_DWORD *)a1, v78, v70, v72, a7);\n      if ( v77 )\n        goto LABEL_58;\n      v17 = v78[1];\n    }\n    if ( !v17 )\n    {\n      v77 = 0;\nLABEL_20:\n      v68 = (char *)v17;\n      if ( !v17 && v77 )\n        goto LABEL_58;\n      *(_DWORD *)(*(_DWORD *)(a1 + 84) + 4 * v70) = v17;\n      goto LABEL_22;\n    }\n    v33 = v17 + v62;\n    v34 = 0;\n    do\n    {\n      v35 = *(_DWORD *)(v78[2] + 4 * v34++);\n      v33 += v35;\n    }\n    while ( v78[1] > v34 );\n    v36 = (unsigned int *)(v73[8] + 12 * (v33 & v73[17]));\n    v37 = 0;\n    v57 = *v36;\n    if ( !*v36 )\n    {\nLABEL_99:\n      v47 = sub_407800(v73, (int)v78, v62, v33);\n      if ( v47 )\n      {\n        v17 = (int)v47;\n      }\n      else\n      {\n        v77 = 12;\n        v17 = 0;\n      }\n      goto LABEL_20;\n    }\n    v63 = v36[2];\n    while ( 1 )\n    {\n      v38 = *(_DWORD *)(v63 + 4 * v37);\n      if ( *(_DWORD *)v38 != v33 || (*(_BYTE *)(v38 + 52) & 0xF) != v62 )\n        goto LABEL_75;\n      v66 = *(_DWORD *)(v38 + 40);\n      if ( v78 == 0 || v66 == 0 )\n        goto LABEL_80;\n      v39 = *(_DWORD *)(v66 + 4);\n      if ( v39 != v78[1] )\n        goto LABEL_80;\n      v60 = v39 - 1;\n      if ( (unsigned int)(v39 - 1) <= 0xFF9F59FD )\n        break;\nLABEL_118:\n      v40 = 1;\nLABEL_81:\n      if ( v40 )\n      {\n        v17 = *(_DWORD *)(v63 + 4 * v37);\n        goto LABEL_20;\n      }\nLABEL_75:\n      if ( v57 <= ++v37 )\n        goto LABEL_99;\n    }\n    while ( *(_DWORD *)(*(_DWORD *)(v66 + 8) + 4 * v60) == *(_DWORD *)(v78[2] + 4 * v60) )\n    {\n      if ( (unsigned int)--v60 > 0xFF9F59FD )\n        goto LABEL_118;\n    }\nLABEL_80:\n    v40 = 0;\n    goto LABEL_81;\n  }\nLABEL_22:\n  v69 = 0;\n  if ( v70 < a6 )\n  {\n    v18 = *(_DWORD *)(a1 + 84);\n    do\n    {\n      v78[1] = 0;\n      v20 = *(_DWORD *)(v18 + 4 * v70 + 4);\n      if ( v20 )\n      {\n        v77 = sub_407BFC(v78, v20 + 4);\n        if ( v77 )\n          goto LABEL_58;\n      }\n      if ( v68 )\n      {\n        v77 = sub_4172C1(a1, v70, (int)(v68 + 16), (int)v78);\n        if ( v77 )\n          goto LABEL_58;\n      }\n      ++v70;\n      v21 = v78[1];\n      if ( v78[1] )\n      {\n        v77 = sub_411914(v73, (int)v78, v72, a7);\n        if ( v77 )\n          goto LABEL_58;\n        v77 = sub_41B09B((_DWORD *)a1, v78, v70, v72, a7);\n        if ( v77 )\n          goto LABEL_58;\n        v21 = v78[1];\n      }\n      v22 = v70 - 1;\n      if ( v70 - 1 > 0xFF9F59FD )\n      {\n        v61 = *(_DWORD *)(a1 + 44);\n      }\n      else if ( *(_DWORD *)(a1 + 32) == v22 )\n      {\n        v61 = (*(_DWORD *)(a1 + 72) & 2) == 0 ? 10 : 8;\n      }\n      else\n      {\n        v23 = *(unsigned __int8 *)(*(_DWORD *)(a1 + 4) + v22);\n        v61 = 1;\n        if ( ((*(_DWORD *)(*(_DWORD *)(a1 + 52) + 4 * (v23 >> 5)) >> (v23 & 0x1F)) & 1) == 0 )\n        {\n          if ( v23 != 10 || (v61 = 2, !*(_BYTE *)(a1 + 61)) )\n            v61 = 0;\n        }\n      }\n      if ( v21 )\n      {\n        v24 = 0;\n        v25 = v21 + v61;\n        do\n        {\n          v26 = *(_DWORD *)(v78[2] + 4 * v24++);\n          v25 += v26;\n        }\n        while ( v78[1] > v24 );\n        v27 = 0;\n        v28 = (unsigned int *)(v73[8] + 12 * (v25 & v73[17]));\n        v58 = *v28;\n        if ( *v28 )\n        {\n          v64 = v28[2];\n          while ( 2 )\n          {\n            v29 = *(_DWORD *)(v64 + 4 * v27);\n            if ( *(_DWORD *)v29 != v25 || (*(_BYTE *)(v29 + 52) & 0xF) != v61 )\n              goto LABEL_44;\n            v65 = *(_DWORD *)(v29 + 40);\n            if ( v78 != 0 && v65 != 0 && (v30 = *(_DWORD *)(v65 + 4), v30 == v78[1]) )\n            {\n              v59 = v30 - 1;\n              if ( (unsigned int)(v30 - 1) <= 0xFF9F59FD )\n              {\n                while ( *(_DWORD *)(*(_DWORD *)(v65 + 8) + 4 * v59) == *(_DWORD *)(v78[2] + 4 * v59) )\n                {\n                  if ( (unsigned int)--v59 > 0xFF9F59FD )\n                    goto LABEL_63;\n                }\n                goto LABEL_49;\n              }\nLABEL_63:\n              v31 = 1;\n            }\n            else\n            {\nLABEL_49:\n              v31 = 0;\n            }\n            if ( v31 )\n            {\n              v19 = *(char **)(v64 + 4 * v27);\n              goto LABEL_25;\n            }\nLABEL_44:\n            if ( v58 <= ++v27 )\n              break;\n            continue;\n          }\n        }\n        v19 = sub_407800(v73, (int)v78, v61, v25);\n        if ( !v19 )\n          v77 = 12;\n      }\n      else\n      {\n        v77 = 0;\n        v19 = 0;\n      }\nLABEL_25:\n      v68 = v19;\n      if ( !v19 && v77 )\n        goto LABEL_58;\n      v18 = *(_DWORD *)(a1 + 84);\n      *(_DWORD *)(v18 + 4 * v70) = v19;\n      if ( v19 )\n        v69 = 0;\n      else\n        ++v69;\n    }\n    while ( v70 < a6 && *(_DWORD *)(a1 + 104) >= v69 );\n  }\n  free((void *)v78[2]);\n  v41 = 0;\n  v42 = *(_DWORD *)(*(_DWORD *)(a1 + 84) + 4 * a6);\n  if ( v42 )\n    v41 = v42 + 4;\n  *(_DWORD *)a2 = v70;\n  *(_DWORD *)(a1 + 84) = v67;\n  *(_DWORD *)(a1 + 24) = v71;\n  if ( !v41 || (unsigned int)(*(_DWORD *)(v41 + 4) - 1) > 0xFF9F59FC )\n    return 1;\n  v43 = 0;\n  v44 = *(_DWORD *)(v41 + 4) - 1;\n  if ( *(_DWORD *)(v41 + 4) == 1 )\n  {\n    v45 = *(_DWORD *)(v41 + 8);\n  }\n  else\n  {\n    v45 = *(_DWORD *)(v41 + 8);\n    do\n    {\n      while ( 1 )\n      {\n        v46 = (v43 + v44) >> 1;\n        if ( *(_DWORD *)(v45 + 4 * v46) >= a5 )\n          break;\n        v43 = v46 + 1;\n        if ( v46 + 1 >= v44 )\n          goto LABEL_95;\n      }\n      v44 = (v43 + v44) >> 1;\n    }\n    while ( v43 < v46 );\n  }\nLABEL_95:\n  if ( *(_DWORD *)(v45 + 4 * v43) != a5 )\n    return 1;\n  result = 0;\n  if ( v43 == -1 )\n    return 1;\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_41B09B",
        "Total XOR and shift operations": 7,
        "XOR operations": 0,
        "Shift operations": 7,
        "Operation percentage": "1.72%",
        "Function Body": "\nint __userpurge sub_41B09B@<eax>(_DWORD *a1@<eax>, int *a2@<edx>, unsigned int a3@<ecx>, int a4, int a5)\n{\n  int result; // eax\n  int v6; // edi\n  unsigned int v7; // esi\n  unsigned int v8; // ebx\n  unsigned int v9; // edx\n  int v10; // ecx\n  unsigned int v11; // eax\n  unsigned int v12; // ecx\n  int v13; // esi\n  int v14; // eax\n  int v15; // eax\n  unsigned int v16; // edx\n  unsigned int v17; // ebx\n  int v18; // ecx\n  unsigned int v19; // eax\n  char *v20; // eax\n  void *v21; // edx\n  unsigned int *v22; // esi\n  int v23; // ebx\n  int v24; // eax\n  int v25; // eax\n  bool v26; // al\n  int v27; // ecx\n  unsigned int v28; // eax\n  int v29; // edi\n  unsigned int *v30; // eax\n  int v31; // esi\n  _DWORD *v32; // ebx\n  int v33; // eax\n  char v34; // al\n  unsigned int v35; // esi\n  unsigned int v36; // ebx\n  unsigned int v37; // edx\n  int v38; // ecx\n  unsigned int v39; // eax\n  _DWORD *v40; // eax\n  int v41; // eax\n  int v42; // esi\n  int v43; // ebx\n  _DWORD *v44; // eax\n  _DWORD *v45; // eax\n  int v46; // eax\n  int *v47; // edx\n  int *v48; // esi\n  unsigned int v49; // ecx\n  int v50; // ebx\n  int v51; // ecx\n  int j; // edx\n  bool k; // zf\n  unsigned int v54; // eax\n  void *v55; // edx\n  unsigned int v56; // [esp+1Ch] [ebp-8Ch]\n  int v57; // [esp+2Ch] [ebp-7Ch]\n  unsigned int v58; // [esp+4Ch] [ebp-5Ch]\n  unsigned int v59; // [esp+54h] [ebp-54h]\n  int v60; // [esp+5Ch] [ebp-4Ch]\n  int v61; // [esp+60h] [ebp-48h]\n  unsigned int *i; // [esp+64h] [ebp-44h]\n  int v63; // [esp+68h] [ebp-40h]\n  _DWORD *v64; // [esp+6Ch] [ebp-3Ch]\n  int v68; // [esp+7Ch] [ebp-2Ch]\n  int v69; // [esp+7Ch] [ebp-2Ch]\n  int v70[10]; // [esp+80h] [ebp-28h] BYREF\n\n  v64 = (_DWORD *)a1[17];\n  v63 = sub_4162EC((int)a1, a3);\n  result = 0;\n  if ( v63 == -1 )\n    return result;\n  while ( 2 )\n  {\n    for ( i = (unsigned int *)(a1[25] + 20 * v63); ; i += 5 )\n    {\n      v6 = a2[1];\n      v7 = *i;\n      if ( (unsigned int)(v6 - 1) > 0xFF9F59FC )\n        goto LABEL_23;\n      v8 = 0;\n      v9 = v6 - 1;\n      if ( v6 == 1 )\n      {\n        v10 = a2[2];\n      }\n      else\n      {\n        v10 = a2[2];\n        do\n        {\n          while ( 1 )\n          {\n            v11 = (v8 + v9) >> 1;\n            if ( *(_DWORD *)(v10 + 4 * v11) >= v7 )\n              break;\n            v8 = v11 + 1;\n            if ( v11 + 1 >= v9 )\n              goto LABEL_9;\n          }\n          v9 = (v8 + v9) >> 1;\n        }\n        while ( v8 < v11 );\n      }\nLABEL_9:\n      if ( *(_DWORD *)(v10 + 4 * v8) != v7 || v8 == -1 )\n        goto LABEL_23;\n      v61 = i[3] + a3 - i[2];\n      if ( v61 == a3 )\n        break;\n      v12 = *(_DWORD *)(v64[3] + 4 * v7);\n      v13 = a1[21];\n      v58 = v12;\n      v14 = *(_DWORD *)(v13 + 4 * v61);\n      if ( !v14 )\n      {\n        v70[0] = 1;\n        v70[1] = 1;\n        v44 = malloc(4u);\n        v70[2] = (int)v44;\n        if ( v44 )\n        {\n          *v44 = v58;\n          result = 0;\n        }\n        else\n        {\n          v70[1] = 0;\n          result = 12;\n          v70[0] = 0;\n        }\n        v69 = result;\n        if ( result )\n          return result;\nLABEL_38:\n        v27 = v70[1];\n        v60 = a1[21];\n        if ( !v70[1] )\n        {\n          v69 = 0;\n          v20 = 0;\n          goto LABEL_22;\n        }\n        v28 = 0;\n        do\n        {\n          v29 = *(_DWORD *)(v70[2] + 4 * v28++);\n          v27 += v29;\n        }\n        while ( v70[1] > v28 );\n        v30 = (unsigned int *)(v64[8] + 12 * (v27 & v64[17]));\n        v31 = 0;\n        v56 = *v30;\n        if ( *v30 )\n        {\n          v59 = v30[2];\n          while ( 2 )\n          {\n            v32 = *(_DWORD **)(v59 + 4 * v31);\n            if ( *v32 != v27 )\n              goto LABEL_43;\n            if ( v70 != 0 && v32 + 1 != 0 && (v33 = v32[2], v33 == v70[1]) )\n            {\n              v57 = v33 - 1;\n              if ( (unsigned int)(v33 - 1) <= 0xFF9F59FD )\n              {\n                while ( *(_DWORD *)(v32[3] + 4 * v57) == *(_DWORD *)(v70[2] + 4 * v57) )\n                {\n                  if ( (unsigned int)--v57 > 0xFF9F59FD )\n                    goto LABEL_53;\n                }\n                goto LABEL_47;\n              }\nLABEL_53:\n              v34 = 1;\n            }\n            else\n            {\nLABEL_47:\n              v34 = 0;\n            }\n            if ( v34 )\n            {\n              v20 = *(char **)(v59 + 4 * v31);\n              goto LABEL_22;\n            }\nLABEL_43:\n            if ( v56 <= ++v31 )\n              break;\n            continue;\n          }\n        }\n        v20 = sub_401ACF(v64, (int)v70, v27);\n        if ( !v20 )\n          v69 = 12;\nLABEL_22:\n        v21 = (void *)v70[2];\n        *(_DWORD *)(v60 + 4 * v61) = v20;\n        free(v21);\n        if ( !*(_DWORD *)(a1[21] + 4 * v61) )\n        {\n          result = v69;\n          if ( v69 )\n            return result;\n        }\n        goto LABEL_23;\n      }\n      v15 = v14 + 4;\n      v16 = *(_DWORD *)(v15 + 4) - 1;\n      if ( v16 > 0xFF9F59FC )\n        goto LABEL_29;\n      v17 = 0;\n      if ( *(_DWORD *)(v15 + 4) == 1 )\n      {\n        v18 = *(_DWORD *)(v15 + 8);\n      }\n      else\n      {\n        v18 = *(_DWORD *)(v15 + 8);\n        do\n        {\n          v19 = (v17 + v16) >> 1;\n          if ( *(_DWORD *)(v18 + 4 * v19) < v58 )\n            v17 = v19 + 1;\n          else\n            v16 = (v17 + v16) >> 1;\n        }\n        while ( v17 < v16 );\n      }\n      if ( *(_DWORD *)(v18 + 4 * v17) != v58 || v17 == -1 )\n      {\nLABEL_29:\n        v23 = *(_DWORD *)(v13 + 4 * v61) + 4;\n        v24 = *(_DWORD *)(*(_DWORD *)(v13 + 4 * v61) + 8);\n        v70[1] = v24;\n        if ( !*(_DWORD *)(v23 + 4) )\n        {\n          memset(v70, 0, 0xCu);\n          goto LABEL_31;\n        }\n        v70[0] = v24;\n        v70[2] = (int)malloc(4 * v24);\n        if ( v70[2] )\n        {\n          v47 = (int *)v70[2];\n          v48 = *(int **)(v23 + 8);\n          v49 = 4 * *(_DWORD *)(v23 + 4);\n          if ( v49 > 7 && (v70[2] & 4) != 0 )\n          {\n            v50 = *v48;\n            v47 = (int *)(v70[2] + 4);\n            ++v48;\n            v49 -= 4;\n            *(_DWORD *)v70[2] = v50;\n          }\n          qmemcpy(v47, v48, 4 * (v49 >> 2));\nLABEL_31:\n          v25 = 0;\n        }\n        else\n        {\n          v70[1] = 0;\n          v25 = 12;\n          v70[0] = 0;\n        }\n        v69 = v25;\n        if ( v70[0] )\n        {\n          if ( !v70[1] )\n          {\n            *(_DWORD *)v70[2] = v58;\n            goto LABEL_35;\n          }\n          if ( v70[0] == v70[1] )\n          {\n            v70[0] = 2 * v70[1];\n            v55 = realloc((void *)v70[2], 8 * v70[1]);\n            v26 = 0;\n            if ( v55 )\n            {\n              v70[2] = (int)v55;\n              goto LABEL_91;\n            }\n          }\n          else\n          {\nLABEL_91:\n            v51 = v70[2];\n            if ( *(_DWORD *)v70[2] <= v58 )\n            {\n              for ( j = v70[1]; ; --j )\n              {\n                v54 = *(_DWORD *)(v51 + 4 * j - 4);\n                if ( v54 <= v58 )\n                  break;\n                *(_DWORD *)(v51 + 4 * j) = v54;\n              }\n            }\n            else\n            {\n              j = v70[1];\n              for ( k = v70[1] == 0; !k; k = j == 0 )\n              {\n                *(_DWORD *)(v51 + 4 * j) = *(_DWORD *)(v51 + 4 * j - 4);\n                --j;\n              }\n            }\n            *(_DWORD *)(v51 + 4 * j) = v58;\nLABEL_35:\n            ++v70[1];\n            v26 = 1;\n          }\n        }\n        else\n        {\n          v70[0] = 1;\n          v70[1] = 1;\n          v45 = malloc(4u);\n          v70[2] = (int)v45;\n          if ( v45 )\n          {\n            *v45 = v58;\n            v46 = 0;\n          }\n          else\n          {\n            v70[1] = 0;\n            v46 = 12;\n            v70[0] = 0;\n          }\n          v26 = v46 == 0;\n        }\n        if ( v69 || !v26 )\n        {\n          free((void *)v70[2]);\n          result = v69;\n          if ( !v69 )\n            return 12;\n          return result;\n        }\n        goto LABEL_38;\n      }\nLABEL_23:\n      v22 = i;\n      if ( !*((_BYTE *)v22 + 16) )\n        return 0;\n    }\n    v35 = **(_DWORD **)(v64[5] + 12 * v7 + 8);\n    if ( (unsigned int)(v6 - 1) <= 0xFF9F59FC )\n    {\n      v36 = 0;\n      v37 = v6 - 1;\n      if ( v6 == 1 )\n      {\n        v38 = a2[2];\n      }\n      else\n      {\n        v38 = a2[2];\n        do\n        {\n          v39 = (v36 + v37) >> 1;\n          if ( *(_DWORD *)(v38 + 4 * v39) < v35 )\n            v36 = v39 + 1;\n          else\n            v37 = (v36 + v37) >> 1;\n        }\n        while ( v36 < v37 );\n      }\n      if ( *(_DWORD *)(v38 + 4 * v36) == v35 && v36 != -1 )\n        goto LABEL_23;\n    }\n    v70[0] = 1;\n    v70[1] = 1;\n    v40 = malloc(4u);\n    v70[2] = (int)v40;\n    if ( v40 )\n    {\n      *v40 = v35;\n      v41 = 0;\n    }\n    else\n    {\n      v70[1] = 0;\n      v41 = 12;\n      v70[0] = 0;\n    }\n    v68 = v41;\n    v42 = sub_411914(v64, (int)v70, a4, a5);\n    v43 = sub_407BFC(a2, (int)v70);\n    free((void *)v70[2]);\n    if ( !(v43 | v42 | v68) )\n      continue;\n    break;\n  }\n  result = v68;\n  if ( !v68 )\n  {\n    result = v42;\n    if ( !v42 )\n      return v43;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_41E558",
        "Total XOR and shift operations": 18,
        "XOR operations": 6,
        "Shift operations": 12,
        "Operation percentage": "1.62%",
        "Function Body": "\nint __cdecl sub_41E558(char a1, char *a2, int a3, char *a4, int *a5, int a6, int a7)\n{\n  int v7; // edi\n  int v8; // ebx\n  char *v9; // esi\n  char v10; // dl\n  char v11; // cl\n  char v13; // bl\n  int v14; // eax\n  size_t v15; // edi\n  int v16; // ebx\n  size_t v17; // eax\n  size_t m; // ecx\n  unsigned __int8 v19; // dl\n  size_t v20; // ecx\n  char *v21; // eax\n  size_t v22; // eax\n  size_t v23; // edi\n  signed int v24; // ebx\n  int v25; // eax\n  size_t n; // ecx\n  unsigned __int8 v27; // dl\n  int v28; // ebx\n  int v29; // eax\n  int v30; // edi\n  char *v31; // edx\n  signed int v32; // ebx\n  int tm_hour; // ecx\n  int v34; // edi\n  signed int v35; // edi\n  int v36; // ebx\n  int v37; // eax\n  size_t v38; // edi\n  signed int v39; // ebx\n  size_t v40; // eax\n  char *jj; // ecx\n  unsigned __int8 v42; // dl\n  size_t v43; // ebx\n  int v44; // eax\n  int v45; // eax\n  int v46; // edi\n  signed int v47; // ebx\n  int v48; // eax\n  int v49; // edi\n  int v50; // eax\n  __time32_t v51; // ecx\n  bool v52; // zf\n  int v53; // eax\n  int v54; // ebx\n  int v55; // eax\n  int tm_yday; // eax\n  int v57; // edi\n  size_t v58; // edi\n  int v59; // ebx\n  size_t v60; // eax\n  size_t j; // ecx\n  unsigned __int8 v62; // dl\n  int i; // ebx\n  char v64; // al\n  int v65; // ebx\n  int v66; // eax\n  int v67; // edi\n  int v68; // eax\n  signed int v69; // ebx\n  int v70; // eax\n  int v71; // edi\n  int v72; // eax\n  size_t ii; // ecx\n  unsigned __int8 v74; // dl\n  int v75; // eax\n  int v76; // eax\n  size_t k; // ecx\n  unsigned __int8 v78; // dl\n  int v79; // ecx\n  int v80; // [esp+4h] [ebp-624h]\n  int v81; // [esp+4h] [ebp-624h]\n  int v82; // [esp+4h] [ebp-624h]\n  int v83; // [esp+4h] [ebp-624h]\n  int v84; // [esp+4h] [ebp-624h]\n  int v85; // [esp+4h] [ebp-624h]\n  int v86; // [esp+4h] [ebp-624h]\n  int v87; // [esp+4h] [ebp-624h]\n  int v88; // [esp+3Ch] [ebp-5ECh]\n  int v89; // [esp+48h] [ebp-5E0h]\n  char v90; // [esp+4Fh] [ebp-5D9h]\n  size_t v91; // [esp+64h] [ebp-5C4h]\n  int v92; // [esp+6Ch] [ebp-5BCh]\n  int v93; // [esp+70h] [ebp-5B8h]\n  size_t v94; // [esp+74h] [ebp-5B4h]\n  int v95; // [esp+7Ch] [ebp-5ACh]\n  int v96; // [esp+88h] [ebp-5A0h]\n  int v97; // [esp+8Ch] [ebp-59Ch]\n  size_t v98; // [esp+90h] [ebp-598h]\n  int v99; // [esp+94h] [ebp-594h]\n  size_t v100; // [esp+98h] [ebp-590h]\n  size_t v101; // [esp+9Ch] [ebp-58Ch]\n  int v102; // [esp+A0h] [ebp-588h]\n  char v103; // [esp+A4h] [ebp-584h]\n  int v104; // [esp+A8h] [ebp-580h]\n  char v105; // [esp+AEh] [ebp-57Ah]\n  char v106; // [esp+AFh] [ebp-579h]\n  int v107; // [esp+B0h] [ebp-578h]\n  char *Src; // [esp+B4h] [ebp-574h]\n  char *v109; // [esp+B8h] [ebp-570h]\n  char v110; // [esp+BFh] [ebp-569h]\n  bool v111; // [esp+C0h] [ebp-568h]\n  unsigned int v112; // [esp+DCh] [ebp-54Ch]\n  int v113; // [esp+E0h] [ebp-548h]\n  int v114; // [esp+E4h] [ebp-544h]\n  int v116; // [esp+ECh] [ebp-53Ch]\n  char *Str; // [esp+F0h] [ebp-538h]\n  int v118; // [esp+F4h] [ebp-534h]\n  __time32_t v119; // [esp+FCh] [ebp-52Ch] BYREF\n  int v120[12]; // [esp+100h] [ebp-528h] BYREF\n  struct tm v121; // [esp+130h] [ebp-4F8h] BYREF\n  int v122[5]; // [esp+160h] [ebp-4C8h] BYREF\n  int v123; // [esp+174h] [ebp-4B4h]\n  int v124; // [esp+17Ch] [ebp-4ACh]\n  struct tm v125; // [esp+190h] [ebp-498h] BYREF\n  char Buffer; // [esp+1C0h] [ebp-468h] BYREF\n  char v127[1023]; // [esp+1C1h] [ebp-467h] BYREF\n  char Format[2]; // [esp+5C0h] [ebp-68h] BYREF\n  char v129; // [esp+5C2h] [ebp-66h] BYREF\n  char v130; // [esp+5C3h] [ebp-65h] BYREF\n  char v131[14]; // [esp+5D0h] [ebp-58h] BYREF\n  char v132[2]; // [esp+5DEh] [ebp-4Ah] BYREF\n  struct tm Tm; // [esp+5E0h] [ebp-48h] BYREF\n\n  v116 = 0;\n  v7 = a5[2];\n  Tm.tm_sec = *a5;\n  v8 = a5[1];\n  Tm.tm_hour = v7;\n  Tm.tm_min = v8;\n  v118 = v7;\n  Tm.tm_mday = a5[3];\n  Tm.tm_mon = a5[4];\n  Str = 0;\n  Tm.tm_year = a5[5];\n  Tm.tm_wday = a5[6];\n  Tm.tm_yday = a5[7];\n  Tm.tm_isdst = a5[8];\n  if ( a6 )\n    Str = aGmt;\n  else\n    tzset();\n  if ( v7 <= 12 )\n  {\n    if ( !v7 )\n      v118 = 12;\n  }\n  else\n  {\n    v118 = v7 - 12;\n  }\n  v9 = a4;\n  if ( *a4 )\n  {\n    v10 = *a4;\n    while ( 1 )\n    {\n      v106 = 0;\n      v114 = 0;\n      v112 = 0;\n      v105 = a1;\n      v11 = 0;\n      v107 = -1;\n      if ( v10 != 37 )\n      {\n        if ( (unsigned int)(a3 - v116) <= 1 )\n          return 0;\n        if ( a2 )\n          *a2++ = v10;\n        ++v116;\n        goto LABEL_12;\n      }\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          v13 = *++v9;\n          v14 = *v9;\n          if ( v14 != 48 )\n          {\n            if ( v13 <= 48 )\n              goto LABEL_22;\n            break;\n          }\n          do\n          {\nLABEL_24:\n            ++v9;\n            v114 = v13;\n            v13 = *v9;\n            v14 = *v9;\n          }\n          while ( v14 == 48 );\n          if ( v13 > 48 )\n            break;\nLABEL_22:\n          if ( v14 != 35 )\n          {\n            if ( v14 != 45 )\n              goto LABEL_28;\n            goto LABEL_24;\n          }\n          v11 = 1;\n        }\n        if ( v14 != 94 )\n          break;\n        v105 = 1;\n      }\n      if ( v14 == 95 )\n        goto LABEL_24;\nLABEL_28:\n      if ( (unsigned int)(v13 - 48) <= 9 )\n      {\n        v107 = 0;\n        do\n        {\n          while ( v107 > 214AFC364 )\n          {\n            v107 = 0x7FF9F59F;\nLABEL_34:\n            v13 = *++v9;\n            if ( (unsigned int)(*v9 - 48) > 9 )\n              goto LABEL_35;\n          }\n          if ( v107 == 214AFC364 && v13 - 48 > 7 )\n          {\n            v107 = 0x7FF9F59F;\n            goto LABEL_34;\n          }\n          ++v9;\n          v107 = v13 + 10 * v107 - 48;\n          v13 = *v9;\n        }\n        while ( (unsigned int)(*v9 - 48) <= 9 );\n      }\nLABEL_35:\n      if ( v13 == 69 || (v113 = 0, v13 == 79) )\n      {\n        v113 = v13;\n        v13 = *++v9;\n      }\n      v103 = v13;\n      switch ( v13 )\n      {\n        case 0:\n          --v9;\n          goto LABEL_41;\n        case 37:\n          if ( v113 )\n            goto LABEL_41;\n          v49 = v107 - 1;\n          v50 = v107 - 1;\n          if ( v107 - 1 < 0 )\n            v50 = 0;\n          v102 = v50 + 1;\n          if ( v50 + 1 >= (unsigned int)(a3 - v116) )\n            return 0;\n          if ( a2 )\n          {\n            if ( v49 > 0 )\n            {\n              if ( v114 == 48 )\n                memset(a2, 48, v107 - 1);\n              else\n                memset(a2, 32, v107 - 1);\n              a2 += v49;\n              v13 = *v9;\n            }\n            *a2++ = v13;\n          }\n          v116 += v102;\n          goto LABEL_12;\n        case 58:\n          v104 = 1;\n          if ( v9[1] == 58 )\n          {\n            do\n              v64 = v9[++v104];\n            while ( v64 == 58 );\n          }\n          else\n          {\n            v64 = v9[1];\n          }\n          if ( v64 != 122 )\n            goto LABEL_41;\n          v9 += v104;\n          goto LABEL_102;\n        case 65:\n        case 66:\n        case 97:\n          if ( v113 )\n            goto LABEL_41;\n          if ( v11 )\n          {\n            v105 = 1;\n            v106 = 0;\n          }\n          goto LABEL_65;\n        case 67:\n          if ( v113 == 79 )\n            goto LABEL_41;\n          if ( v113 == 69 )\n            goto LABEL_65;\n          v111 = Tm.tm_year < -1900;\n          tm_hour = Tm.tm_year / 100 + 19 - ((Tm.tm_year / 100 + 19 > 0) & ((unsigned int)(Tm.tm_year % 100) >> 31));\n          v112 = 2;\n          goto LABEL_161;\n        case 68:\n          v109 = aMDY;\n          goto LABEL_276;\n        case 70:\n          v109 = aYMD;\nLABEL_276:\n          if ( v113 )\n            goto LABEL_41;\n          goto LABEL_167;\n        case 71:\n        case 86:\n        case 103:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          if ( Tm.tm_year < 0 )\n            v57 = Tm.tm_year + 300;\n          else\n            v57 = Tm.tm_year - 100;\n          v97 = 0;\n          v96 = Tm.tm_yday - (Tm.tm_yday - Tm.tm_wday + 382) % 7 + 3;\n          if ( v96 < 0 )\n          {\n            v79 = 0;\n            v88 = v57 - 1;\n            v97 = -1;\n            if ( ((v57 - 1) & 3) == 0 && (v88 != 100 * (v88 / 100) || v88 == 400 * (v88 / 400)) )\n              v79 = 1;\n            v96 = Tm.tm_yday + v79 + 365 - (Tm.tm_yday + v79 + 365 - Tm.tm_wday + 382) % 7 + 3;\n          }\n          else\n          {\n            v95 = 0;\n            if ( (v57 & 3) == 0 && (v57 != 100 * (v57 / 100) || v57 == 400 * (v57 / 400)) )\n              v95 = 1;\n            if ( Tm.tm_yday - v95 - 365 - (Tm.tm_yday - v95 - 365 - Tm.tm_wday + 382) % 7 + 3 >= 0 )\n            {\n              v96 = Tm.tm_yday - v95 - 365 - (Tm.tm_yday - v95 - 365 - Tm.tm_wday + 382) % 7 + 3;\n              v97 = 1;\n            }\n          }\n          if ( v13 == 71 )\n          {\n            v112 = 4;\n            tm_hour = Tm.tm_year + v97 + 1900;\n            v111 = Tm.tm_year < -1900 - v97;\n          }\n          else\n          {\n            if ( v13 == 103 )\n            {\n              v112 = 2;\n              tm_hour = (v97 + Tm.tm_year % 100) % 100;\n              if ( tm_hour < 0 )\n              {\n                if ( Tm.tm_year >= -1900 - v97 )\n                  tm_hour += 100;\n                else\n                  tm_hour = -tm_hour;\n              }\n            }\n            else\n            {\n              v112 = 2;\n              tm_hour = v96 / 7 + 1;\n            }\nLABEL_160:\n            v111 = tm_hour < 0;\n          }\nLABEL_161:\n          v110 = 0;\n          v34 = 0;\n          goto LABEL_112;\n        case 72:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          tm_hour = Tm.tm_hour;\n          v112 = 2;\n          goto LABEL_160;\n        case 73:\n          tm_hour = v118;\n          v112 = 2;\n          if ( v113 == 69 )\n            goto LABEL_41;\n          goto LABEL_160;\n        case 77:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          tm_hour = Tm.tm_min;\n          v112 = 2;\n          goto LABEL_160;\n        case 78:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          tm_hour = a7;\n          if ( v107 == -1 )\n          {\n            v107 = 9;\n          }\n          else\n          {\n            for ( i = v107; i <= 8; tm_hour /= 10 )\n              ++i;\n          }\n          v112 = v107;\n          goto LABEL_160;\n        case 80:\n          v106 = 1;\n          v103 = 112;\n          goto LABEL_88;\n        case 82:\n          v109 = aHM;\n          v45 = sub_41E558(v105, 0, -1, aHM, &Tm, a6, a7);\n          goto LABEL_168;\n        case 83:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          tm_hour = Tm.tm_sec;\n          v112 = 2;\n          goto LABEL_160;\n        case 84:\n          v109 = aHMS;\nLABEL_167:\n          v45 = sub_41E558(v105, 0, -1, v109, &Tm, a6, a7);\nLABEL_168:\n          v46 = v45;\n          v47 = v107 - v45;\n          v48 = v107 - v45;\n          if ( v48 < 0 )\n            v48 = 0;\n          v101 = v46 + v48;\n          if ( v46 + v48 >= (unsigned int)(a3 - v116) )\n            return 0;\n          if ( a2 )\n          {\n            if ( v47 > 0 )\n            {\n              if ( v114 == 48 )\n                v85 = 48;\n              else\n                v85 = 32;\n              memset(a2, v85, v47);\n              a2 += v47;\n            }\n            sub_41E558(v105, a2, a3 - v116, v109, &Tm, a6, a7);\n            a2 += v46;\n          }\n          v20 = v101;\n          goto LABEL_59;\n        case 85:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          v112 = 2;\n          tm_hour = (Tm.tm_yday - Tm.tm_wday + 7) / 7;\n          goto LABEL_160;\n        case 87:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          v112 = 2;\n          tm_hour = (Tm.tm_yday - (Tm.tm_wday + 6) % 7 + 7) / 7;\n          goto LABEL_160;\n        case 88:\n        case 99:\n        case 120:\n          if ( v113 != 79 )\n            goto LABEL_65;\n          goto LABEL_41;\n        case 89:\n          if ( v113 == 69 )\n            goto LABEL_65;\n          if ( v113 == 79 )\n            goto LABEL_41;\n          v112 = 4;\n          tm_hour = Tm.tm_year + 1900;\n          v111 = Tm.tm_year < -1900;\n          goto LABEL_161;\n        case 90:\n          if ( v11 )\n          {\n            v105 = 0;\n            v106 = 1;\n          }\n          if ( (!Str || !*Str) && Tm.tm_isdst >= 0 )\n            Str = *(char **)((char *)tzname + (Tm.tm_isdst != 0 ? 4 : 0));\n          if ( !Str )\n            Str = (char *)&unk_426094;\n          v58 = strlen(Str);\n          v59 = v107 - v58;\n          v60 = v107 - v58;\n          if ( (int)(v107 - v58) < 0 )\n            v60 = 0;\n          v94 = v58 + v60;\n          if ( v58 + v60 >= a3 - v116 )\n            return 0;\n          if ( a2 )\n          {\n            if ( v59 > 0 )\n            {\n              if ( v114 == 48 )\n                v87 = 48;\n              else\n                v87 = 32;\n              memset(a2, v87, v107 - v58);\n              a2 += v59;\n            }\n            if ( v106 )\n            {\n              for ( j = v58 - 1; j != -1; --j )\n              {\n                v62 = Str[j];\n                if ( (ctype_[v62 + 1] & 1) != 0 )\n                  v62 += 32;\n                a2[j] = v62;\n              }\n            }\n            else if ( v105 )\n            {\n              for ( k = v58 - 1; k != -1; --k )\n              {\n                v78 = Str[k];\n                if ( (ctype_[v78 + 1] & 2) != 0 )\n                  v78 -= 32;\n                a2[k] = v78;\n              }\n            }\n            else\n            {\n              memcpy(a2, Str, v58);\n            }\n            a2 += v58;\n          }\n          v43 = v94;\n          goto LABEL_156;\n        case 98:\n        case 104:\n          if ( v11 )\n          {\n            v105 = 1;\n            v106 = 0;\n          }\n          if ( v113 )\n            goto LABEL_41;\n          goto LABEL_65;\n        case 100:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          tm_hour = Tm.tm_mday;\n          v112 = 2;\n          goto LABEL_160;\n        case 101:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          tm_hour = Tm.tm_mday;\n          v112 = 2;\n          goto LABEL_211;\n        case 106:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          v112 = 3;\n          tm_yday = Tm.tm_yday;\n          goto LABEL_215;\n        case 107:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          v112 = 2;\n          tm_hour = Tm.tm_hour;\nLABEL_211:\n          if ( v114 != 48 && v114 != 45 )\n            v114 = 95;\n          goto LABEL_160;\n        case 108:\n          tm_hour = v118;\n          v112 = 2;\n          if ( v113 == 69 )\n            goto LABEL_41;\n          goto LABEL_211;\n        case 109:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          tm_yday = Tm.tm_mon;\n          v112 = 2;\nLABEL_215:\n          tm_hour = tm_yday + 1;\n          v111 = tm_yday < -1;\n          goto LABEL_161;\n        case 110:\n          v28 = v107 - 1;\n          v29 = v107 - 1;\n          if ( v107 - 1 < 0 )\n            v29 = 0;\n          v30 = v29 + 1;\n          if ( v29 + 1 >= (unsigned int)(a3 - v116) )\n            return 0;\n          if ( !a2 )\n            goto LABEL_100;\n          if ( v28 > 0 )\n          {\n            if ( v114 == 48 )\n              v82 = 48;\n            else\n              v82 = 32;\n            memset(a2, v82, v107 - 1);\n            a2 += v28;\n          }\n          v31 = a2;\n          *a2 = 10;\n          goto LABEL_99;\n        case 112:\nLABEL_88:\n          if ( v11 )\n          {\n            v105 = 0;\n            v106 = 1;\n          }\n          goto LABEL_65;\n        case 114:\n          goto LABEL_65;\n        case 115:\n          v125 = Tm;\n          Src = v132;\n          v51 = mktime(&v125);\n          v111 = v51 < 0;\n          if ( v51 < 0 )\n          {\n            do\n            {\n              --Src;\n              v53 = v51 % 10;\n              v51 /= 10;\n              *Src = 48 - v53;\n            }\n            while ( v51 );\n          }\n          else\n          {\n            do\n            {\n              --Src;\n              v52 = v51 / 10 == 0;\n              *Src = v51 % 10 + 48;\n              v51 /= 10;\n            }\n            while ( !v52 );\n          }\n          v110 = 0;\n          v112 = 1;\n          goto LABEL_118;\n        case 116:\n          v54 = v107 - 1;\n          v55 = v107 - 1;\n          if ( v107 - 1 < 0 )\n            v55 = 0;\n          v30 = v55 + 1;\n          if ( v55 + 1 >= (unsigned int)(a3 - v116) )\n            return 0;\n          if ( !a2 )\n            goto LABEL_100;\n          if ( v54 > 0 )\n          {\n            if ( v114 == 48 )\n              v86 = 48;\n            else\n              v86 = 32;\n            memset(a2, v86, v107 - 1);\n            a2 += v54;\n          }\n          v31 = a2;\n          *a2 = 9;\nLABEL_99:\n          a2 = v31 + 1;\nLABEL_100:\n          v116 += v30;\n          goto LABEL_12;\n        case 117:\n          v112 = 1;\n          tm_hour = (Tm.tm_wday + 6) % 7 + 1;\n          goto LABEL_160;\n        case 119:\n          if ( v113 == 69 )\n            goto LABEL_41;\n          v112 = 1;\n          tm_hour = Tm.tm_wday;\n          goto LABEL_160;\n        case 121:\n          if ( v113 == 69 )\n            goto LABEL_65;\n          v44 = Tm.tm_year % 100;\n          if ( Tm.tm_year % 100 < 0 )\n          {\n            if ( Tm.tm_year >= -1900 )\n              v44 += 100;\n            else\n              v44 = -v44;\n          }\n          tm_hour = v44;\n          v112 = 2;\n          goto LABEL_160;\n        case 122:\n          v104 = 0;\nLABEL_102:\n          if ( Tm.tm_isdst < 0 )\n            goto LABEL_12;\n          v32 = 0;\n          if ( a6 )\n            goto LABEL_104;\n          v121 = Tm;\n          v119 = mktime(&v121);\n          if ( v119 == -1\n            && (!localtime_r(&v119, v120)\n             || v121.tm_year ^ v120[5] | v121.tm_mon ^ v120[4] | v121.tm_mday ^ v120[3] | v121.tm_hour ^ v120[2] | v121.tm_min ^ v120[1] | v121.tm_sec ^ v120[0])\n            || !gmtime_r(&v119, v122) )\n          {\n            goto LABEL_12;\n          }\n          if ( (v121.tm_year & 3) != 0 )\n            v75 = (v121.tm_year >> 2) + 475;\n          else\n            v75 = (v121.tm_year >> 2) + 474;\n          v92 = v75;\n          if ( (v123 & 3) != 0 )\n            v76 = (v123 >> 2) + 475;\n          else\n            v76 = (v123 >> 2) + 474;\n          v32 = v121.tm_sec\n              - v122[0]\n              + 60\n              * (v121.tm_min\n               - v122[1]\n               + 60\n               * (v121.tm_hour\n                - v122[2]\n                + 24\n                * (v121.tm_yday\n                 - v124\n                 + ((int)(v92 / 25 - ((unsigned int)(v92 % 25) >> 31)) >> 2)\n                 - ((int)(v76 / 25 - ((unsigned int)(v76 % 25) >> 31)) >> 2)\n                 + v92\n                 - v76\n                 - (v92 / 25\n                  - ((unsigned int)(v92 % 25) >> 31)\n                  - (v76 / 25\n                   - ((unsigned int)(v76 % 25) >> 31)))\n                 + 365 * (v121.tm_year - v123))));\nLABEL_104:\n          tm_hour = v32 / 3600;\n          v89 = v32 / 60 % 60;\n          v93 = v32 % 60;\n          if ( v104 == 1 )\n            goto LABEL_357;\n          if ( v104 )\n          {\n            if ( v104 == 2 )\n              goto LABEL_361;\n            if ( v104 != 3 )\n            {\nLABEL_41:\n              v15 = 1;\n              if ( *v9 != 37 )\n              {\n                do\n                  ++v15;\n                while ( v9[-v15 + 1] != 37 );\n              }\n              v16 = v107 - v15;\n              v17 = v107 - v15;\n              if ( (int)(v107 - v15) < 0 )\n                v17 = 0;\n              v91 = v15 + v17;\n              if ( v15 + v17 >= a3 - v116 )\n                return 0;\n              if ( a2 )\n              {\n                if ( v16 > 0 )\n                {\n                  if ( v114 == 48 )\n                    v80 = 48;\n                  else\n                    v80 = 32;\n                  memset(a2, v80, v107 - v15);\n                  a2 += v16;\n                }\n                if ( v105 )\n                {\n                  for ( m = v15 - 1; m != -1; --m )\n                  {\n                    v19 = v9[m + 1 - v15];\n                    if ( (ctype_[v19 + 1] & 2) != 0 )\n                      v19 -= 32;\n                    a2[m] = v19;\n                  }\n                }\n                else\n                {\n                  memcpy(a2, &v9[-v15 + 1], v15);\n                }\n                a2 += v15;\n              }\n              v20 = v91;\nLABEL_59:\n              v116 += v20;\n              goto LABEL_12;\n            }\n            if ( v93 )\n            {\nLABEL_361:\n              v111 = v32 < 0;\n              v112 = 9;\n              v34 = 20;\n              tm_hour = 10000 * tm_hour + 100 * v89 + v93;\n            }\n            else if ( v89 )\n            {\nLABEL_357:\n              v111 = v32 < 0;\n              v112 = 6;\n              tm_hour = v89 + 100 * tm_hour;\n              v34 = 4;\n            }\n            else\n            {\n              v112 = 3;\n              v34 = 0;\n              v111 = v32 < 0;\n            }\n          }\n          else\n          {\n            v111 = v32 < 0;\n            v112 = 5;\n            tm_hour = v89 + 100 * tm_hour;\n            v34 = 0;\n          }\n          v110 = 1;\nLABEL_112:\n          if ( v113 == 79 && !v111 )\n          {\nLABEL_65:\n            qmemcpy(Format, \" %\", sizeof(Format));\n            v21 = &v129;\n            if ( v113 )\n            {\n              v21 = &v130;\n              v129 = v113;\n            }\n            v21[1] = 0;\n            *v21 = v103;\n            v22 = strftime(&Buffer, 0x400u, Format, &Tm);\n            if ( !v22 )\n              goto LABEL_12;\n            v23 = v22 - 1;\n            v25 = v107 - (v22 - 1);\n            v24 = v25;\n            if ( v25 < 0 )\n              v25 = 0;\n            v100 = v23 + v25;\n            if ( v23 + v25 >= a3 - v116 )\n              return 0;\n            if ( a2 )\n            {\n              if ( v112 == 0 && v24 > 0 )\n              {\n                if ( v114 == 48 )\n                  v81 = 48;\n                else\n                  v81 = 32;\n                memset(a2, v81, v24);\n                a2 += v24;\n              }\n              if ( v106 )\n              {\n                for ( n = v23 - 1; n != -1; --n )\n                {\n                  v27 = v127[n];\n                  if ( (ctype_[v27 + 1] & 1) != 0 )\n                    v27 += 32;\n                  a2[n] = v27;\n                }\n              }\n              else if ( v105 )\n              {\n                for ( ii = v23 - 1; ii != -1; --ii )\n                {\n                  v74 = v127[ii];\n                  if ( (ctype_[v74 + 1] & 2) != 0 )\n                    v74 -= 32;\n                  a2[ii] = v74;\n                }\n              }\n              else\n              {\n                memcpy(a2, v127, v23);\n              }\n              a2 += v23;\n            }\n            v20 = v100;\n            goto LABEL_59;\n          }\n          Src = v132;\n          if ( v111 )\n            tm_hour = -tm_hour;\n          do\n          {\n            if ( (v34 & 1) != 0 )\n              *--Src = 58;\n            *--Src = tm_hour % 0xAu + 48;\n            tm_hour /= 0xAu;\n            v34 >>= 1;\n          }\n          while ( tm_hour != 0 || v34 != 0 );\nLABEL_118:\n          if ( (int)v112 < v107 )\n            v112 = v107;\n          v90 = 45;\n          if ( !v111 )\n            v90 = v110 != 0 ? 0x2B : 0;\n          if ( v114 == 45 )\n          {\n            if ( v90 )\n            {\n              v65 = v107 - 1;\n              v66 = v107 - 1;\n              if ( v107 - 1 < 0 )\n                v66 = 0;\n              v67 = v66 + 1;\n              if ( v66 + 1 >= (unsigned int)(a3 - v116) )\n                return 0;\n              if ( a2 )\n              {\n                if ( v112 == 0 && v65 > 0 )\n                {\n                  memset(a2, 32, v107 - 1);\n                  a2 += v65;\n                }\n                *a2++ = v90;\n              }\n              v116 += v67;\n            }\n            goto LABEL_140;\n          }\n          v35 = v112 + Src - v131 - 14 - (v90 != 0);\n          if ( v35 <= 0 )\n          {\n            if ( !v90 )\n              goto LABEL_140;\n            v69 = v107 - 1;\n            v72 = v107 - 1;\n            if ( v107 - 1 < 0 )\n              v72 = 0;\n            v71 = v72 + 1;\n            if ( v72 + 1 >= (unsigned int)(a3 - v116) )\n              return 0;\n            if ( a2 )\n            {\n              if ( v112 == 0 && v69 > 0 )\n              {\n                if ( v114 != 48 )\n                  goto LABEL_323;\n                memset(a2, 48, v107 - 1);\nLABEL_324:\n                a2 += v69;\n              }\nLABEL_314:\n              *a2++ = v90;\n            }\nLABEL_315:\n            v116 += v71;\n            goto LABEL_140;\n          }\n          if ( v114 != 95 )\n          {\n            if ( v112 >= a3 - v116 )\n              return 0;\n            if ( v90 )\n            {\n              v36 = v107 - 1;\n              v37 = v107 - 1;\n              if ( v107 - 1 < 0 )\n                v37 = 0;\n              v99 = v37 + 1;\n              if ( v37 + 1 >= (unsigned int)(a3 - v116) )\n                return 0;\n              if ( a2 )\n              {\n                if ( v112 == 0 && v36 > 0 )\n                {\n                  if ( v114 == 48 )\n                    v83 = 48;\n                  else\n                    v83 = 32;\n                  memset(a2, v83, v107 - 1);\n                  a2 += v36;\n                }\n                *a2++ = v90;\n              }\n              v116 += v99;\n            }\n            if ( a2 )\n            {\n              memset(a2, 48, v35);\n              a2 += v35;\n            }\n            v116 += v35;\n            v107 = 0;\n            goto LABEL_140;\n          }\n          if ( v35 >= (unsigned int)(a3 - v116) )\n            return 0;\n          if ( a2 )\n          {\n            memset(a2, 32, v35);\n            a2 += v35;\n          }\n          v116 += v35;\n          v68 = 0;\n          if ( v107 > v35 )\n            v68 = v107 - v35;\n          v107 = v68;\n          if ( v90 )\n          {\n            v69 = v68 - 1;\n            v70 = v68 - 1;\n            if ( v70 < 0 )\n              v70 = 0;\n            v71 = v70 + 1;\n            if ( v70 + 1 >= (unsigned int)(a3 - v116) )\n              return 0;\n            if ( a2 )\n            {\n              if ( v112 != 0 || v69 <= 0 )\n                goto LABEL_314;\nLABEL_323:\n              memset(a2, 32, v69);\n              goto LABEL_324;\n            }\n            goto LABEL_315;\n          }\nLABEL_140:\n          v38 = v131 - Src + 14;\n          v39 = v107 - v38;\n          v40 = v107 - v38;\n          if ( (int)(v107 - v38) < 0 )\n            v40 = 0;\n          v98 = v38 + v40;\n          if ( v38 + v40 >= a3 - v116 )\n            return 0;\n          if ( a2 )\n          {\n            if ( v112 == 0 && v39 > 0 )\n            {\n              if ( v114 == 48 )\n                v84 = 48;\n              else\n                v84 = 32;\n              memset(a2, v84, v107 - (v131 - Src + 14));\n              a2 += v39;\n            }\n            if ( v105 )\n            {\n              for ( jj = (char *)(v131 - Src + 13); jj != (char *)-1; --jj )\n              {\n                v42 = jj[(_DWORD)Src];\n                if ( (ctype_[v42 + 1] & 2) != 0 )\n                  v42 -= 32;\n                jj[(_DWORD)a2] = v42;\n              }\n            }\n            else\n            {\n              memcpy(a2, Src, v38);\n            }\n            a2 += v38;\n          }\n          v43 = v98;\nLABEL_156:\n          v116 += v43;\nLABEL_12:\n          v10 = *++v9;\n          if ( !*v9 )\n            goto LABEL_13;\n          break;\n        default:\n          goto LABEL_41;\n      }\n    }\n  }\nLABEL_13:\n  if ( a2 != 0 && a3 != 0 )\n    *a2 = 0;\n  return v116;\n}\n// 4292F8: using guessed type int __cdecl gmtime_r(_DWORD, _DWORD);\n// 42F320: using guessed type int __cdecl localtime_r(_DWORD, _DWORD);\n// 42A39A: using guessed type _BYTE ctype_[];\n// 41E558: using guessed type char var_467[1023];\n\n"
    }
]