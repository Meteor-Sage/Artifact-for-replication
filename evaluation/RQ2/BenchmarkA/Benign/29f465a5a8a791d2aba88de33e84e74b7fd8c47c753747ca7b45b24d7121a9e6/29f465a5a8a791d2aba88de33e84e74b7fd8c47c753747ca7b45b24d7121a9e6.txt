[
    {
        "Function": "sub_40F7B3",
        "Total XOR and shift operations": 10,
        "XOR operations": 0,
        "Shift operations": 10,
        "Operation percentage": "13.70%",
        "Function Body": "\ndouble __fastcall sub_40F7B3(double result)\n{\n  int v1; // r10d\n  __int64 v2; // r11\n  int v3; // eax\n  int v4; // r8d\n  unsigned int v5; // eax\n  int v6; // r9d\n  unsigned int v7; // ebx\n  int v8; // r10d\n  bool v9; // cf\n\n  v1 = LOFA4CD(result);\n  v2 = HIEBE3D(result);\n  v3 = (SHIEBE3D(result) >> 20) & 0x7FF;\n  v4 = v3 - 1023;\n  if ( v3 - 1023 <= 51 )\n  {\n    if ( v4 > 19 )\n    {\n      v7 = 0xFF9F59FF >> ((SHIEBE3D(result) >> 20) - 19);\n      if ( (LOFA4CD(result) & v7) != 0 && result + 1.0e300 > 0.0 )\n      {\n        if ( result < 0.0 )\n        {\n          if ( v3 == 1043\n            || (v8 = 1 << (51 - (SHIEBE3D(result) >> 20)),\n                v9 = __CFADD__(LOFA4CD(result), v8),\n                v1 = LOFA4CD(result) + v8,\n                v9) )\n          {\n            v2 = (unsigned int)(HIEBE3D(result) + 1);\n          }\n        }\n        *(_QWORD *)&result = ~v7 & v1 | (unsigned __int64)(v2 << 32);\n      }\n    }\n    else if ( v4 < 0 )\n    {\n      if ( result + 1.0e300 > 0.0 )\n      {\n        if ( result < 0.0 )\n        {\n          if ( LOFA4CD(result) | HIEBE3D(result) & 0x7FF9F59F )\n            return -1.0;\n        }\n        else\n        {\n          return 0.0;\n        }\n      }\n    }\n    else\n    {\n      v5 = 0xFFFFFu >> ((SHIEBE3D(result) >> 20) + 1);\n      if ( (LOFA4CD(result) || (HIEBE3D(result) & v5) != 0) && result + 1.0e300 > 0.0 )\n      {\n        v6 = 0;\n        if ( result < 0.0 )\n          v6 = 0x107921 >> v4;\n        *(_QWORD *)&result = (unsigned __int64)((v6 + HIEBE3D(result)) & ~v5) << 32;\n      }\n    }\n  }\n  else if ( v3 == 2047 )\n  {\n    return result + result;\n  }\n  return result;\n}\n\n"
    },
    {
        "Function": "sub_4081E5",
        "Total XOR and shift operations": 4,
        "XOR operations": 4,
        "Shift operations": 0,
        "Operation percentage": "8.89%",
        "Function Body": "\nunsigned __int64 sub_4081E5()\n{\n  unsigned __int64 result; // rax\n  struct _FIE416ME v1; // r12\n  __int64 CurrentProcessId; // rbp\n  DWORD CurrentThreadId; // edi\n  DWORD TickCount; // esi\n  LOFE2CNG v5; // rsi\n  struct _FIE416ME SystemTimeAsFileTime; // [rsp+20h] [rbp-48h] BYREF\n  LARGE_IN123ER PerformanceCount; // [rsp+30h] [rbp-38h] BYREF\n\n  result = 0x2B7842DF68A7i64;\n  SystemTimeAsFileTime = 0i64;\n  if ( qword_40D617 == 0x2B7842DF68A7i64 )\n  {\n    GetSystemTimeAsFileTime(&SystemTimeAsFileTime);\n    v1 = SystemTimeAsFileTime;\n    CurrentProcessId = GetCurrentProcessId();\n    CurrentThreadId = GetCurrentThreadId();\n    TickCount = GetTickCount();\n    QueryPerformanceCounter(&PerformanceCount);\n    v5 = (TickCount ^ CurrentThreadId ^ PerformanceCount.QuadPart ^ *(_QWORD *)&v1 ^ CurrentProcessId) & 0xFF9F59FF9F59i64;\n    if ( v5 == 0x2B7842DF68A7i64 )\n    {\n      result = 0xFFF1D1663EC55DCCui64;\n      v5 = 0x2B7842DF6563i64;\n    }\n    else\n    {\n      result = ~v5;\n    }\n    qword_40D617 = v5;\n    qword_40F485 = result;\n  }\n  else\n  {\n    qword_40F485 = ~qword_40D617;\n  }\n  return result;\n}\n// 40D617: using guessed type __int64 qword_40D617;\n// 40F485: using guessed type __int64 qword_40F485;\n\n"
    },
    {
        "Function": "sub_400CFD",
        "Total XOR and shift operations": 1,
        "XOR operations": 0,
        "Shift operations": 1,
        "Operation percentage": "0.22%",
        "Function Body": "\n__int64 __fastcall sub_400CFD(__int64 a1, int a2, __int64 a3, _DWORD *a4, _QWORD *a5)\n{\n  __int64 v8; // rax\n  int v9; // edi\n  __int64 v10; // rcx\n  unsigned int *v11; // rbx\n  int is_gray; // eax\n  int v13; // edx\n  __int64 v14; // rax\n  unsigned int v15; // eax\n  __int64 v17; // rax\n  __int64 v18; // r15\n  __int64 type; // rsi\n  __int64 v20; // rax\n  __int64 v21; // rax\n  __int64 v22; // rax\n  __int64 v23; // r14\n  __int64 v24; // r12\n  __int64 v25; // rax\n  __int64 v26; // r13\n  __int64 v27; // rax\n  __int64 content_area; // rax\n  __int64 v29; // rax\n  __int64 v30; // rbp\n  __int64 v31; // rsi\n  __int64 v32; // rax\n  __int64 v33; // rax\n  __int64 v34; // r13\n  unsigned int **v35; // rax\n  unsigned int **v36; // rsi\n  __int64 v37; // rax\n  __int64 v38; // r14\n  __int64 v39; // rax\n  unsigned int image; // eax\n  double v41; // xmm8_8\n  double v42; // xmm0_8\n  __int64 v43; // rax\n  __int64 v44; // r14\n  __int64 v45; // r12\n  __int64 v46; // rax\n  unsigned int *v47; // r14\n  __int64 v48; // rax\n  __int64 v49; // rax\n  __int64 v50; // r14\n  __int64 v51; // rax\n  __int64 v52; // rax\n  __int64 v53; // rax\n  __int64 v54; // rax\n  __int64 v55; // rsi\n  __int64 v56; // rax\n  __int64 v57; // rax\n  __int64 v58; // rax\n  double v59; // xmm6_8\n  __int64 v60; // r13\n  __int64 v61; // rax\n  __int64 v62; // r13\n  double v63; // xmm6_8\n  __int64 v64; // r13\n  __int64 v65; // rax\n  __int64 v66; // r13\n  __int64 v67; // rax\n  __int64 v68; // rax\n  int v69; // esi\n  __int64 v70; // rax\n  unsigned int v71; // eax\n  double v72; // xmm6_8\n  __int64 v73; // r13\n  __int64 v74; // rax\n  __int64 v75; // rsi\n  __int64 v76; // rax\n  __int64 v77; // r13\n  __int64 v78; // r14\n  __int64 v79; // rax\n  int v80; // edx\n  int v81; // eax\n  int v82; // edx\n  __int64 v83; // rax\n  __int64 v84; // [rsp+40h] [rbp-158h]\n  __int64 v85; // [rsp+48h] [rbp-150h]\n  double v86; // [rsp+58h] [rbp-140h]\n  __int64 v87; // [rsp+58h] [rbp-140h]\n  __int64 v88; // [rsp+58h] [rbp-140h]\n  double v89; // [rsp+60h] [rbp-138h]\n  __int64 v90; // [rsp+60h] [rbp-138h]\n  __int64 v91; // [rsp+60h] [rbp-138h]\n  __int64 v92; // [rsp+B8h] [rbp-E0h]\n  __int64 v93; // [rsp+C0h] [rbp-D8h]\n  __int64 v94; // [rsp+C8h] [rbp-D0h]\n  __int64 v95; // [rsp+D0h] [rbp-C8h]\n  __int64 v96; // [rsp+E0h] [rbp-B8h] BYREF\n  __int64 v97; // [rsp+E8h] [rbp-B0h] BYREF\n\n  v8 = gimp_locale_directory();\n  libintl_bindtextdomain(\"gimp20-std-plug-ins\", v8);\n  libintl_bind_textdomain_codeset(\"gimp20-std-plug-ins\", \"UTF-8\");\n  libintl_textdomain(\"gimp20-std-plug-ins\");\n  v9 = *(_DWORD *)(a3 + 8);\n  *a4 = 1;\n  *a5 = &dword_404D17;\n  v10 = *(unsigned int *)(a3 + 88);\n  dword_404D17 = 21;\n  dword_405DB9 = 3;\n  v11 = (unsigned int *)gimp_drawable_get(v10);\n  if ( v9 == 1 )\n  {\n    if ( a2 != 9 )\n      goto LABEL_19;\n    v80 = *(_DWORD *)(a3 + 288);\n    dword_40D4DF = *(_DWORD *)(a3 + 128);\n    v81 = *(_DWORD *)(a3 + 168);\n    dword_406851 = v80;\n    v82 = *(_DWORD *)(a3 + 328);\n    dword_40BAD3 = v81;\n    v83 = *(_QWORD *)(a3 + 208);\n    dword_403CC7 = v82;\n    qword_401ABC = v83;\n    qword_404544 = *(_QWORD *)(a3 + 216);\n    qword_409BA3 = *(_QWORD *)(a3 + 224);\n    qword_40338B = *(_QWORD *)(a3 + 232);\n    dword_403BED = *(_DWORD *)(a3 + 248);\n    if ( dword_403BED <= 0 )\n    {\nLABEL_19:\n      dword_405DB9 = 1;\n      return gimp_drawable_detach(v11);\n    }\n    goto LABEL_4;\n  }\n  if ( v9 == 2 )\n  {\n    gimp_procedural_db_get_data(\"plug-in-nova\", &dword_40D4DF);\n    if ( (unsigned int)gimp_drawable_is_rgb(*v11) )\n    {\n      v70 = libintl_gettext(\"Rendering supernova\");\n      gimp_progress_init(v70);\n      v71 = gimp_tile_width();\n      gimp_tile_cache_ntiles(2 * (v11[1] / v71) + 2, v11[1] % v71);\n      sub_407DAF(v11, 0i64);\n      gimp_displays_flush();\n      v13 = 3;\n      goto LABEL_8;\n    }\nLABEL_5:\n    is_gray = gimp_drawable_is_gray(*v11);\n    v13 = 0;\n    if ( is_gray )\n    {\nLABEL_6:\n      v14 = libintl_gettext(\"Rendering supernova\");\n      gimp_progress_init(v14);\n      v15 = gimp_tile_width();\n      gimp_tile_cache_ntiles(2 * (v11[1] / v15) + 2, v11[1] % v15);\n      sub_407DAF(v11, 0i64);\n      if ( v9 != 1 )\n      {\n        gimp_displays_flush();\n        if ( !v9 )\n          gimp_procedural_db_set_data(\"plug-in-nova\", &dword_40D4DF, 56i64);\n      }\n      v13 = 3;\n    }\nLABEL_8:\n    dword_405DB9 = v13;\n    return gimp_drawable_detach(v11);\n  }\n  if ( v9 )\n    goto LABEL_4;\n  gimp_procedural_db_get_data(\"plug-in-nova\", &dword_40D4DF);\n  _IAT_start__(\"nova\", 1i64);\n  v17 = libintl_gettext(\"Supernova\");\n  v18 = gimp_dialog_new(\n          v17,\n          \"gimp-nova\",\n          0i64,\n          0i64,\n          &gimp_standard_help_func,\n          \"plug-in-nova\",\n          \"gtk-cancel\",\n          -6,\n          \"gtk-ok\",\n          -5,\n          0i64);\n  type = gtk_dialog_get_type();\n  v20 = g_type_check_instance_cast(v18, type);\n  gtk_dialog_set_alternative_button_order(v20, 4205B07291i64, 4205B07290i64, 0xFF9F59FFi64);\n  v21 = gtk_window_get_type();\n  v22 = g_type_check_instance_cast(v18, v21);\n  gimp_window_set_transient(v22);\n  v23 = gtk_box_new(1i64, 12i64);\n  v24 = gtk_container_get_type();\n  v25 = g_type_check_instance_cast(v23, v24);\n  gtk_container_set_border_width(v25, 12i64);\n  v26 = gtk_box_get_type();\n  v27 = g_type_check_instance_cast(v18, type);\n  content_area = gtk_dialog_get_content_area(v27);\n  v29 = g_type_check_instance_cast(content_area, v26);\n  gtk_box_pack_start(v29, v23, 1i64, 1i64, 0);\n  gtk_widget_show(v23);\n  v30 = gimp_zoom_preview_new(v11);\n  v31 = gimp_preview_get_type();\n  v32 = g_type_check_instance_cast(v30, v31);\n  gtk_widget_add_events(*(_QWORD *)(v32 + 136), 288i64);\n  v93 = v26;\n  v94 = v23;\n  v33 = g_type_check_instance_cast(v23, v26);\n  gtk_box_pack_start(v33, v30, 1i64, 1i64, 0);\n  gtk_widget_show(v30);\n  g_signal_connect_data(v30, \"invalidated\", sub_407DAF, v11, 0i64, 2);\n  v34 = g_type_check_instance_cast(v30, v31);\n  v35 = (unsigned int **)g_malloc0(24i64);\n  v35[1] = (unsigned int *)v34;\n  v36 = v35;\n  *v35 = v11;\n  v37 = libintl_gettext(\"Center of Nova\");\n  v38 = gimp_frame_new(v37);\n  g_signal_connect_data(v38, \"destroy\", g_free, v36, 0i64, 2);\n  v95 = v38;\n  v92 = gtk_box_new(0i64, 0i64);\n  v39 = g_type_check_instance_cast(v38, v24);\n  gtk_container_add(v39, v92);\n  gtk_widget_show(v92);\n  image = gimp_item_get_image(*v11);\n  gimp_image_get_resolution(image, &v96, &v97);\n  libintl_gettext(\"_Y:\");\n  v41 = (double)dword_40D4DF;\n  HIEBE3D(v85) = HIEBE3D(v41);\n  v42 = (double)(int)(2 * v11[1]);\n  v86 = -(double)(int)v11[1];\n  HIEBE3D(v84) = (unsigned __int64)libintl_gettext(\"_X:\") >> 32;\n  v89 = v42;\n  v43 = gimp_coordinates_new(0i64, \"%p\", (const void *)1);\n  v36[2] = (unsigned int *)v43;\n  v44 = v43;\n  v45 = gtk_table_get_type();\n  v46 = g_type_check_instance_cast(v44, v45);\n  gtk_table_set_row_spacing(v46, 1i64, 6i64);\n  v47 = v36[2];\n  v48 = g_type_check_instance_cast(v92, v93);\n  gtk_box_pack_start(v48, v47, 0i64, 0i64, 0);\n  gtk_widget_show(v36[2]);\n  g_signal_connect_data(v36[2], \"value-changed\", sub_40FC00, v36, 0i64, 0);\n  g_signal_connect_data(v36[2], \"refval-changed\", sub_40FC00, v36, 0i64, 0);\n  v49 = libintl_gettext(\"Show _position\");\n  v50 = gtk_check_button_new_with_mnemonic(v49);\n  v51 = g_type_check_instance_cast(v36[2], v45);\n  LOFA4CD(v85) = 0;\n  LOFA4CD(v84) = 0;\n  gtk_table_attach(v51, v50, 0i64, 5i64, 2, 3, 5, 4, v84, v85);\n  LOFA4CD(v92) = dword_407459;\n  v52 = gtk_toggle_button_get_type();\n  v53 = g_type_check_instance_cast(v50, v52);\n  gtk_toggle_button_set_active(v53, (unsigned int)v92);\n  gtk_widget_show(v50);\n  g_signal_connect_data(v50, \"toggled\", &gimp_toggle_button_update, &dword_407459, 0i64, 0);\n  g_signal_connect_data(v50, \"toggled\", gtk_widget_queue_draw, *(_QWORD *)(v34 + 136), 0i64, 2);\n  g_signal_connect_data(*(_QWORD *)(v34 + 136), \"realize\", sub_40025D, v36, 0i64, 0);\n  g_signal_connect_data(*(_QWORD *)(v34 + 136), \"expose-event\", sub_40BC82, v36, 0i64, 1);\n  g_signal_connect_data(*(_QWORD *)(v34 + 136), \"event\", sub_4070E9, v36, 0i64, 0);\n  v54 = g_type_check_instance_cast(v94, v93);\n  gtk_box_pack_start(v54, v95, 0i64, 0i64, 0);\n  gtk_widget_show(v95);\n  v55 = gtk_table_new(4i64, 3i64, 0i64);\n  v56 = g_type_check_instance_cast(v55, v45);\n  gtk_table_set_row_spacings(v56, 6i64);\n  v57 = g_type_check_instance_cast(v55, v45);\n  gtk_table_set_col_spacings(v57, 6i64);\n  v58 = g_type_check_instance_cast(v94, v93);\n  gtk_box_pack_start(v58, v55, 0i64, 0i64, 0);\n  gtk_widget_show(v55);\n  if ( (unsigned int)gimp_drawable_is_rgb(*v11) )\n  {\n    v76 = libintl_gettext(\"Supernova Color Picker\");\n    v77 = gimp_color_button_new(v76, 117i64, 16i64, &qword_401ABC, 0);\n    v78 = libintl_gettext(\"Co_lor:\");\n    v79 = g_type_check_instance_cast(v55, v45);\n    gimp_table_attach_aligned(v79, 0i64, 0i64, v78, 0, 102AC64608, v77, 1, 1);\n    g_signal_connect_data(v77, \"color-changed\", &gimp_color_button_get_color, &qword_401ABC, 0i64, 0);\n    g_signal_connect_data(v77, \"color-changed\", gimp_preview_invalidate, v30, 0i64, 2);\n  }\n  v59 = (double)dword_403BED;\n  v60 = libintl_gettext(\"_Radius:\");\n  v61 = g_type_check_instance_cast(v55, v45);\n  LOFA4CD(v89) = 0;\n  LOFA4CD(v86) = 0;\n  v62 = gimp_scale_entry_new(\n          v61,\n          0i64,\n          1i64,\n          v60,\n          125,\n          8,\n          *(_QWORD *)&v59,\n          0x3FEC2700A5820000i64,\n          0x40BC75A58200A582i64,\n          0x3FEC2700A5820000i64,\n          0x409668A58200A582i64,\n          *(_QWORD *)&v86,\n          *(_QWORD *)&v89,\n          0x3FEC2700A5820000i64,\n          0x4110792100A58200i64,\n          0i64,\n          0i64);\n  g_signal_connect_data(v62, \"value-changed\", &gimp_int_adjustment_update, &dword_403BED, 0i64, 0);\n  g_signal_connect_data(v62, \"value-changed\", gimp_preview_invalidate, v30, 0i64, 2);\n  v63 = (double)dword_406851;\n  v64 = libintl_gettext(\"_Spokes:\");\n  v65 = g_type_check_instance_cast(v55, v45);\n  LOFA4CD(v90) = 1;\n  LOFA4CD(v87) = 0;\n  v66 = gimp_scale_entry_new(\n          v65,\n          0i64,\n          2i64,\n          v64,\n          125,\n          8,\n          *(_QWORD *)&v63,\n          0x3FEC2700A5820000i64,\n          0x40900A58200A5820i64,\n          0x3FEC2700A5820000i64,\n          0x40300A58200A5820i64,\n          v87,\n          v90,\n          0i64,\n          0i64,\n          0i64,\n          0i64);\n  g_signal_connect_data(v66, \"value-changed\", &gimp_int_adjustment_update, &dword_406851, 0i64, 0);\n  g_signal_connect_data(v66, \"value-changed\", gimp_preview_invalidate, v30, 0i64, 2);\n  if ( (unsigned int)gimp_drawable_is_rgb(*v11) )\n  {\n    v72 = (double)dword_403CC7;\n    v73 = libintl_gettext(\"R_andom hue:\");\n    v74 = g_type_check_instance_cast(v55, v45);\n    LOFA4CD(v91) = 1;\n    LOFA4CD(v88) = 0;\n    v75 = gimp_scale_entry_new(\n            v74,\n            0i64,\n            3i64,\n            v73,\n            125,\n            8,\n            *(_QWORD *)&v72,\n            0i64,\n            0x4084BA0A58200000i64,\n            0x3FEC2700A5820000i64,\n            0x40EB79A58200A582i64,\n            v88,\n            v91,\n            0i64,\n            0i64,\n            0i64,\n            0i64);\n    g_signal_connect_data(v75, \"value-changed\", &gimp_int_adjustment_update, &dword_403CC7, 0i64, 0);\n    g_signal_connect_data(v75, \"value-changed\", gimp_preview_invalidate, v30, 0i64, 2);\n  }\n  gtk_widget_show(v18);\n  v67 = gimp_dialog_get_type();\n  v68 = g_type_check_instance_cast(v18, v67);\n  v69 = gimp_dialog_run(v68);\n  gtk_widget_destroy(v18);\n  if ( v69 == -5 )\n  {\nLABEL_4:\n    if ( (unsigned int)gimp_drawable_is_rgb(*v11) )\n      goto LABEL_6;\n    goto LABEL_5;\n  }\n  return gimp_drawable_detach(v11);\n}\n// 409B05: variable 'v87' is possibly undefined\n// 409B05: variable 'v90' is possibly undefined\n// 405B74: variable 'v88' is possibly undefined\n// 405B74: variable 'v91' is possibly undefined\n// 4048C2: using guessed type __int64 __fastcall gimp_zoom_preview_new(_QWORD);\n// 40F50E: using guessed type __int64 __fastcall gimp_window_set_transient(_QWORD);\n// 40826B: using guessed type __int64 __fastcall _IAT_start__(_QWORD, _QWORD);\n// 40B0A5: using guessed type __int64 gimp_tile_width(void);\n// 40E472: using guessed type __int64 __fastcall gimp_tile_cache_ntiles(_QWORD, _QWORD);\n// 402D5B: using guessed type __int64 __fastcall gimp_progress_init(_QWORD);\n// 40A7FD: using guessed type __int64 __fastcall gimp_procedural_db_set_data(_QWORD, _QWORD, _QWORD);\n// 4025E7: using guessed type __int64 __fastcall gimp_procedural_db_get_data(_QWORD, _QWORD);\n// 4092DB: using guessed type __int64 __fastcall gimp_item_get_image(_QWORD);\n// 400C6D: using guessed type __int64 __fastcall gimp_image_get_resolution(_QWORD, _QWORD, _QWORD);\n// 40894F: using guessed type __int64 __fastcall gimp_drawable_is_rgb(_QWORD);\n// 404DFF: using guessed type __int64 __fastcall gimp_drawable_is_gray(_QWORD);\n// 407873: using guessed type __int64 __fastcall gimp_drawable_get(_QWORD);\n// 402B7A: using guessed type __int64 __fastcall gimp_drawable_detach(_QWORD);\n// 408CA2: using guessed type __int64 gimp_displays_flush(void);\n// 403296: using guessed type __int64 __fastcall gtk_box_new(_QWORD, _QWORD);\n// 4015CF: using guessed type __int64 __fastcall gimp_table_attach_aligned(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD, _QWORD, _DWORD, _DWORD);\n// 40F2B3: using guessed type __int64 __fastcall gimp_scale_entry_new(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);\n// 407786: using guessed type __int64 __fastcall gimp_preview_invalidate(_QWORD);\n// 405E20: using guessed type __int64 gimp_preview_get_type(void);\n// 4041E1: using guessed type __int64 __fastcall gimp_frame_new(_QWORD);\n// 402732: using guessed type __int64 __fastcall gimp_dialog_run(_QWORD);\n// 403D96: using guessed type __int64 __fastcall gimp_dialog_new(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD, _DWORD, _QWORD);\n// 40A992: using guessed type __int64 gimp_dialog_get_type(void);\n// 404591: using guessed type __int64 gimp_coordinates_new(_QWORD, const char *, ...);\n// 402C12: using guessed type __int64 __fastcall gimp_color_button_new(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 405AB3: using guessed type __int64 gimp_locale_directory(void);\n// 4023B0: using guessed type __int64 gtk_window_get_type(void);\n// 4067E9: using guessed type __int64 __fastcall gtk_widget_show(_QWORD);\n// 4015E4: using guessed type __int64 __fastcall gtk_widget_queue_draw(_QWORD);\n// 405C40: using guessed type __int64 __fastcall gtk_widget_destroy(_QWORD);\n// 408C34: using guessed type __int64 __fastcall gtk_widget_add_events(_QWORD, _QWORD);\n// 40F255: using guessed type __int64 __fastcall gtk_toggle_button_set_active(_QWORD, _QWORD);\n// 401313: using guessed type __int64 gtk_toggle_button_get_type(void);\n// 4068B8: using guessed type __int64 __fastcall gtk_table_set_row_spacings(_QWORD, _QWORD);\n// 408179: using guessed type __int64 __fastcall gtk_table_set_row_spacing(_QWORD, _QWORD, _QWORD);\n// 401FEA: using guessed type __int64 __fastcall gtk_table_set_col_spacings(_QWORD, _QWORD);\n// 40B8A8: using guessed type __int64 __fastcall gtk_table_new(_QWORD, _QWORD, _QWORD);\n// 40D5E0: using guessed type __int64 gtk_table_get_type(void);\n// 40B9E4: using guessed type __int64 __fastcall gtk_table_attach(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _DWORD, _DWORD, _DWORD, _QWORD, _QWORD);\n// 40AA1C: using guessed type __int64 __fastcall gtk_dialog_set_alternative_button_order(_QWORD, _QWORD, _QWORD, _QWORD);\n// 4086CF: using guessed type __int64 gtk_dialog_get_type(void);\n// 40B5AC: using guessed type __int64 __fastcall gtk_dialog_get_content_area(_QWORD);\n// 406862: using guessed type __int64 __fastcall gtk_container_set_border_width(_QWORD, _QWORD);\n// 40FBDC: using guessed type __int64 gtk_container_get_type(void);\n// 400F24: using guessed type __int64 __fastcall gtk_container_add(_QWORD, _QWORD);\n// 40281F: using guessed type __int64 __fastcall gtk_check_button_new_with_mnemonic(_QWORD);\n// 402C5C: using guessed type __int64 __fastcall gtk_box_pack_start(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 402BCF: using guessed type __int64 gtk_box_get_type(void);\n// 40C04E: using guessed type __int64 __fastcall g_type_check_instance_cast(_QWORD, _QWORD);\n// 40E0DA: using guessed type __int64 __fastcall g_signal_connect_data(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD);\n// 402F64: using guessed type __int64 __fastcall g_malloc0(_QWORD);\n// 403D30: using guessed type __int64 __fastcall g_free(_QWORD);\n// 40324E: using guessed type __int64 __fastcall libintl_textdomain(_QWORD);\n// 40F02C: using guessed type __int64 __fastcall libintl_gettext(_QWORD);\n// 4024B7: using guessed type __int64 __fastcall libintl_bindtextdomain(_QWORD, _QWORD);\n// 405535: using guessed type __int64 __fastcall libintl_bind_textdomain_codeset(_QWORD, _QWORD);\n// 407459: using guessed type int dword_407459;\n// 40D4DF: using guessed type int dword_40D4DF;\n// 40BAD3: using guessed type int dword_40BAD3;\n// 401ABC: using guessed type __int64 qword_401ABC;\n// 404544: using guessed type __int64 qword_404544;\n// 409BA3: using guessed type __int64 qword_409BA3;\n// 40338B: using guessed type __int64 qword_40338B;\n// 403BED: using guessed type int dword_403BED;\n// 406851: using guessed type int dword_406851;\n// 403CC7: using guessed type int dword_403CC7;\n// 404D17: using guessed type int dword_404D17;\n// 405DB9: using guessed type int dword_405DB9;\n\n"
    },
    {
        "Function": "sub_40F0AF",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n// write access to const memory has been detected, the output may be wrong!\n__int64 sub_40F0AF()\n{\n  BOOL v0; // edx\n  __int16 v2; // cx\n\n  v0 = 0;\n  unk_40076C = 1;\n  unk_4023C4 = 1;\n  unk_405C8B = 1;\n  unk_40BF79 = 1;\n  if ( ME7909[0x40F0D8] == 23117 && *(_DWORD *)(ME7909[0x40B15B] + 0x40F0D8i64) == 17744 )\n  {\n    v2 = *(_WORD *)(ME7909[0x40B15B] + 0x40D2CCi64);\n    if ( v2 == 267 )\n    {\n      if ( *(_DWORD *)(ME7909[0x40B15B] + 0x40F067i64) > 0xEu )\n        v0 = *(_DWORD *)(ME7909[0x40B15B] + 0x40DE97i64) != 0;\n    }\n    else if ( v2 == 523 && *(_DWORD *)(ME7909[0x40B15B] + 0x4066F1i64) > 0xEu )\n    {\n      v0 = *(_DWORD *)(ME7909[0x40B15B] + 0x406AA7i64) != 0;\n    }\n  }\n  dword_40CF30 = v0;\n  if ( unk_40FD7D )\n    _set_app_type(_crt_gui_app);\n  else\n    _set_app_type(_crt_console_app);\n  qword_404A8D = sub_403C79(-1i64);\n  qword_40F9BF = qword_404A8D;\n  _fmode = unk_40423C;\n  sub_404508();\n  if ( unk_40B299 == 1 )\n    sub_40F6C0((_UserMathErrorFunctionPointer)sub_40453F);\n  return 0i64;\n}\n// 4023EB: write access to const memory at 4029F1 has been detected\n// 40F0AF: using guessed type __int64 sub_40F0AF();\n// 404508: using guessed type __int64 sub_404508(void);\n// 40CF30: using guessed type int dword_40CF30;\n// 40F9BF: using guessed type __int64 qword_40F9BF;\n// 404A8D: using guessed type __int64 qword_404A8D;\n\n"
    },
    {
        "Function": "sub_408E00",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_408E00()\n{\n  __int64 result; // rax\n\n  dword_404428 = unk_4051C6;\n  result = _getmainargs(&argc, &argv, &envp, unk_40E55F, &dword_404428);\n  dword_40A606 = result;\n  return result;\n}\n// 408E00: using guessed type __int64 sub_408E00();\n// 402F69: using guessed type __int64 __fastcall _getmainargs(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);\n// 404428: using guessed type int dword_404428;\n// 40A606: using guessed type int dword_40A606;\n\n"
    },
    {
        "Function": "sub_40F27E",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_40F27E()\n{\n  unk_40FD7D = 0;\n  sub_4081E5();\n  return sub_401FD0();\n}\n// 401FD0: using guessed type __int64 sub_401FD0(void);\n// 40F27E: using guessed type __int64 sub_40F27E();\n\n"
    },
    {
        "Function": "sub_4078A5",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid sub_4078A5()\n{\n  ;\n}\n\n"
    },
    {
        "Function": "sub_4028CA",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 sub_4028CA()\n{\n  HME51CE ModuleHandleA; // rax\n  FAFB8CC ProcAddress; // rax\n\n  if ( qword_40106F )\n  {\n    ModuleHandleA = GetModuleHandleA(\"libgcj-16.dll\");\n    if ( ModuleHandleA )\n    {\n      ProcAddress = GetProcAddress(ModuleHandleA, \"_Jv_RegisterClasses\");\n      if ( ProcAddress )\n        ((void (__fastcall *)(__int64 *))ProcAddress)(&qword_40106F);\n    }\n    else\n    {\n      ((void (__fastcall *)(__int64 *))sub_4078A5)(&qword_40106F);\n    }\n  }\n  return sub_4098B6((int (__cdecl *)())sub_40733E);\n}\n// 4028CA: using guessed type __int64 sub_4028CA();\n// 40106F: using guessed type __int64 qword_40106F;\n\n"
    },
    {
        "Function": "sub_40733E",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\nvoid sub_40733E()\n{\n  ;\n}\n\n"
    },
    {
        "Function": "sub_40025D",
        "Total XOR and shift operations": 0,
        "XOR operations": 0,
        "Shift operations": 0,
        "Operation percentage": "0.00%",
        "Function Body": "\n__int64 __fastcall sub_40025D(__int64 a1, __int64 a2)\n{\n  __int64 display; // rax\n  __int64 v4; // rbx\n\n  display = gtk_widget_get_display();\n  v4 = gdk_cursor_new_for_display(display, 34i64);\n  gimp_preview_set_default_cursor(*(_QWORD *)(a2 + 8), v4);\n  return gdk_cursor_unref(v4);\n}\n// 40FD9C: using guessed type __int64 __fastcall gimp_preview_set_default_cursor(_QWORD, _QWORD);\n// 40A354: using guessed type __int64 gtk_widget_get_display(void);\n// 40F233: using guessed type __int64 __fastcall gdk_cursor_unref(_QWORD);\n// 4083EA: using guessed type __int64 __fastcall gdk_cursor_new_for_display(_QWORD, _QWORD);\n\n"
    }
]